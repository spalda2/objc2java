// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2013-12-02 15:30:38

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "StringBody", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'%'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'NO'", "'NS_INLINE'", "'YES'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'false'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'true'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BREAK_STMT=11;
    public static final int CASE_STMT=12;
    public static final int CATCH_STMT=13;
    public static final int CATEGORY=14;
    public static final int CHAR=15;
    public static final int CHAR_LITERAL=16;
    public static final int CLASS_NAME=17;
    public static final int CODE=18;
    public static final int CONTINUE_STMT=19;
    public static final int DEFAULT_STMT=20;
    public static final int DEFINE=21;
    public static final int DEFINE_LITERAL=22;
    public static final int DIGIT=23;
    public static final int DIRECTIVE=24;
    public static final int DO_STMT=25;
    public static final int ELSE_STMT=26;
    public static final int ENUM=27;
    public static final int ENUM_DEC=28;
    public static final int ENUM_FIELD=29;
    public static final int EXPR_COMPLEMENT=30;
    public static final int EXPR_NEGATE=31;
    public static final int EXPR_NOT=32;
    public static final int EXTERN=33;
    public static final int EscapeSequence=34;
    public static final int FIELD=35;
    public static final int FIELDS=36;
    public static final int FIELD_NAME=37;
    public static final int FINALLY_STMT=38;
    public static final int FORWARD_DECLARATION=39;
    public static final int FOR_IN_STMT=40;
    public static final int FOR_STMT=41;
    public static final int FUNC_POINTER=42;
    public static final int GOTO=43;
    public static final int GROUP_MODIFIER=44;
    public static final int HexDigit=45;
    public static final int ID=46;
    public static final int IF0_COMMENT=47;
    public static final int IF_STMT=48;
    public static final int IMPLEMENTATION=49;
    public static final int IMPLEMENTS_INTERFACES=50;
    public static final int IMPLEMENTS_INTERFACE_NAME=51;
    public static final int INTERFACE=52;
    public static final int INTERFACE_NAME=53;
    public static final int LETTER=54;
    public static final int METHOD=55;
    public static final int METHOD_CALL=56;
    public static final int METHOD_IMPL=57;
    public static final int METHOD_MSG=58;
    public static final int METHOD_NAME=59;
    public static final int METHOD_PARAM=60;
    public static final int METHOD_PARAMS=61;
    public static final int MODIFIER=62;
    public static final int MULTI_COMMENT=63;
    public static final int MULTI_COMMENT_LIT=64;
    public static final int NAME=65;
    public static final int NUMBER=66;
    public static final int NUMBER_LITERAL=67;
    public static final int OBJECT_ACCESS=68;
    public static final int OP=69;
    public static final int PARAMS=70;
    public static final int PARAM_NAME=71;
    public static final int PARAM_PREFIX=72;
    public static final int PREFIX=73;
    public static final int PREPROCESSOR_DECLARATION=74;
    public static final int PROPERTY=75;
    public static final int PROTOCOL=76;
    public static final int PROTOCOL_NAME=77;
    public static final int QUESTION_MARK_IF=78;
    public static final int RETURN_STMT=79;
    public static final int SIMPLE_EXPR=80;
    public static final int SINGLE_COMMENT=81;
    public static final int SINGLE_COMMENT_LIT=82;
    public static final int STATIC=83;
    public static final int STATIC_METHOD=84;
    public static final int STATIC_VARIABLE=85;
    public static final int STRING=86;
    public static final int STRING_LITERAL=87;
    public static final int STRING_OBJC=88;
    public static final int STRUCT=89;
    public static final int STRUCT_DEC=90;
    public static final int SUPERCLASS_NAME=91;
    public static final int SWITCH_STMT=92;
    public static final int SYNCHRONIZED=93;
    public static final int SYNTHETIZE=94;
    public static final int StringBody=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==119||LA1_0==135||LA1_0==149||(LA1_0 >= 153 && LA1_0 <= 154)||LA1_0==159||LA1_0==178||(LA1_0 >= 183 && LA1_0 <= 184)||LA1_0==188||(LA1_0 >= 191 && LA1_0 <= 192)||(LA1_0 >= 194 && LA1_0 <= 196)||(LA1_0 >= 199 && LA1_0 <= 202)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code483);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal13=null;
        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper2 =null;

        ObjcParser.implementation_wrapper_return implementation_wrapper3 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration4 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper5 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper6 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper7 =null;

        ObjcParser.define_declaration_return define_declaration8 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper9 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper10 =null;

        ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous11 =null;

        ObjcParser.comments_return comments12 =null;


        Object char_literal13_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:3: ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' )
            int alt2=12;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )=> variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal514);
                    variable_declaration_wrapper2=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal519);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal524);
                    forward_class_declaration4=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal530);
                    protocol_declaration_wrapper5=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal537);
                    interface_declaration_wrapper6=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal544);
                    extern_declaration_wrapper7=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal550);
                    define_declaration8=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal556);
                    typedef_declaration_wrapper9=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal562);
                    static_declaration_wrapper10=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: type_declaration_struct_enum_union_anonymous
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568);
                    type_declaration_struct_enum_union_anonymous11=type_declaration_struct_enum_union_anonymous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_enum_union_anonymous11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal574);
                    comments12=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments12.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal13=(Token)match(input,135,FOLLOW_135_in_code_internal580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = 
                    (Object)adaptor.create(char_literal13)
                    ;
                    adaptor.addChild(root_0, char_literal13_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment14 =null;

        ObjcParser.multi_comment_return multi_comment15 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments592);
                    single_comment14=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment14.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments598);
                    multi_comment15=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment15.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT16=null;

        Object SINGLE_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT16=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT16);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT17=null;

        Object MULTI_COMMENT_LIT17_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT17=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT17);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern18 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper663);
            extern18=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern18.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token set22=null;
        Token char_literal23=null;

        Object string_literal19_tree=null;
        Object string_literal20_tree=null;
        Object char_literal21_tree=null;
        Object set22_tree=null;
        Object char_literal23_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,184,FOLLOW_184_in_extern682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            string_literal20=(Token)match(input,114,FOLLOW_114_in_extern685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = 
            (Object)adaptor.create(string_literal20)
            ;
            adaptor.addChild(root_0, string_literal20_tree);
            }

            char_literal21=(Token)match(input,119,FOLLOW_119_in_extern688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            set22=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 119)||(input.LA(1) >= 121 && input.LA(1) <= 209) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set22)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal23=(Token)match(input,120,FOLLOW_120_in_extern695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation24 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper710);
            implementation24=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation24.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal25=null;
        Token string_literal29=null;
        ObjcParser.name_return name26 =null;

        ObjcParser.category_return category27 =null;

        ObjcParser.implementation_body_return implementation_body28 =null;


        Object string_literal25_tree=null;
        Object string_literal29_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal25=(Token)match(input,153,FOLLOW_153_in_implementation729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal25_tree = 
            (Object)adaptor.create(string_literal25)
            ;
            adaptor.addChild(root_0, string_literal25_tree);
            }

            pushFollow(FOLLOW_name_in_implementation732);
            name26=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name26.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==119) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==120) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation735);
                    category27=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category27.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==119||LA5_0==123||LA5_0==127||LA5_0==135||LA5_0==150||LA5_0==164||LA5_0==178||LA5_0==183||LA5_0==188||(LA5_0 >= 191 && LA5_0 <= 192)||(LA5_0 >= 194 && LA5_0 <= 196)||(LA5_0 >= 199 && LA5_0 <= 202)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation740);
            	    implementation_body28=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body28.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal29=(Token)match(input,151,FOLLOW_151_in_implementation745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal29_tree = 
            (Object)adaptor.create(string_literal29)
            ;
            adaptor.addChild(root_0, string_literal29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal38=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper30 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper31 =null;

        ObjcParser.directives_return directives32 =null;

        ObjcParser.define_declaration_return define_declaration33 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper34 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper35 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper36 =null;

        ObjcParser.comments_return comments37 =null;


        Object char_literal38_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 130 && LA6_1 <= 131)) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==119) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==117||LA6_1==121||LA6_1==171||LA6_1==178) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 123:
            case 127:
                {
                alt6=2;
                }
                break;
            case 150:
            case 164:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 199:
                {
                alt6=5;
                }
                break;
            case 195:
                {
                alt6=6;
                }
                break;
            case 119:
            case 178:
            case 183:
            case 188:
            case 191:
            case 192:
            case 194:
            case 196:
            case 200:
            case 201:
            case 202:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 135:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body764);
                    classical_method_call_wrapper30=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body770);
                    implementation_method_wrapper31=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body776);
                    directives32=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body782);
                    define_declaration33=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body787);
                    typedef_declaration_wrapper34=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper34.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body792);
                    static_declaration_wrapper35=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper35.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body798);
                    variable_declaration_wrapper36=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper36.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body804);
                    comments37=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments37.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal38=(Token)match(input,135,FOLLOW_135_in_implementation_body809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal38_tree = 
                    (Object)adaptor.create(char_literal38)
                    ;
                    adaptor.addChild(root_0, char_literal38_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize39 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives820);
            synthesize39=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize39.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal40=null;
        Token string_literal41=null;
        Token ID42=null;
        Token char_literal43=null;
        Token char_literal45=null;
        ObjcParser.name_return name44 =null;


        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object ID42_tree=null;
        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==164) ) {
                alt7=1;
            }
            else if ( (LA7_0==150) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:5: '@synthesize'
                    {
                    string_literal40=(Token)match(input,164,FOLLOW_164_in_synthesize842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(string_literal40);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:21: '@dynamic'
                    {
                    string_literal41=(Token)match(input,150,FOLLOW_150_in_synthesize846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_150.add(string_literal41);


                    }
                    break;

            }


            ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID42);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==140) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:38: '=' name
                    {
                    char_literal43=(Token)match(input,140,FOLLOW_140_in_synthesize853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal43);


                    pushFollow(FOLLOW_name_in_synthesize855);
                    name44=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name44.getTree());

                    }
                    break;

            }


            char_literal45=(Token)match(input,135,FOLLOW_135_in_synthesize859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal45);


            // AST REWRITE
            // elements: ID, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcParser.field_declaration_return field_declaration47 =null;


        Object string_literal46_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:4: 'static' field_declaration
            {
            string_literal46=(Token)match(input,195,FOLLOW_195_in_static_declaration_wrapper883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal46);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper885);
            field_declaration47=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration47.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 190:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:1: block_call_predicate : ( '^(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal49=null;
        Token char_literal50=null;

        Object string_literal48_tree=null;
        Object char_literal49_tree=null;
        Object char_literal50_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:3: ( '^(' | ( '^' '{' ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==175) ) {
                alt9=1;
            }
            else if ( (LA9_0==174) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal48=(Token)match(input,175,FOLLOW_175_in_block_call_predicate905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = 
                    (Object)adaptor.create(string_literal48)
                    ;
                    adaptor.addChild(root_0, string_literal48_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:6: '^' '{'
                    {
                    char_literal49=(Token)match(input,174,FOLLOW_174_in_block_call_predicate912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    char_literal50=(Token)match(input,204,FOLLOW_204_in_block_call_predicate914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal50_tree = 
                    (Object)adaptor.create(char_literal50)
                    ;
                    adaptor.addChild(root_0, char_literal50_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call51 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:199:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:199:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper930);
            block_call51=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call51.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 199:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:199:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal52=null;
        Token char_literal53=null;
        Token char_literal55=null;
        Token string_literal56=null;
        Token char_literal58=null;
        ObjcParser.block_internal_return block_internal54 =null;

        ObjcParser.block_params_return block_params57 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper59 =null;


        Object char_literal52_tree=null;
        Object char_literal53_tree=null;
        Object char_literal55_tree=null;
        Object string_literal56_tree=null;
        Object char_literal58_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==174) ) {
                alt12=1;
            }
            else if ( (LA12_0==175) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal52=(Token)match(input,174,FOLLOW_174_in_block_call952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(char_literal52);


                    char_literal53=(Token)match(input,204,FOLLOW_204_in_block_call954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_204.add(char_literal53);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:14: ( block_internal )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==ID||LA10_0==MULTI_COMMENT_LIT||LA10_0==SINGLE_COMMENT_LIT||LA10_0==117||LA10_0==119||LA10_0==121||LA10_0==135||LA10_0==163||(LA10_0 >= 165 && LA10_0 <= 166)||LA10_0==171||LA10_0==176||(LA10_0 >= 178 && LA10_0 <= 179)||(LA10_0 >= 181 && LA10_0 <= 183)||(LA10_0 >= 186 && LA10_0 <= 189)||(LA10_0 >= 191 && LA10_0 <= 197)||(LA10_0 >= 200 && LA10_0 <= 204)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call956);
                    	    block_internal54=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal54.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    char_literal55=(Token)match(input,208,FOLLOW_208_in_block_call959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_208.add(char_literal55);


                    }


                    // AST REWRITE
                    // elements: 204, block_internal, 208
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 203:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_204.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_208.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:6: '^(' ( block_params )? ')'
                    {
                    string_literal56=(Token)match(input,175,FOLLOW_175_in_block_call980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal56_tree = 
                    (Object)adaptor.create(string_literal56)
                    ;
                    adaptor.addChild(root_0, string_literal56_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:11: ( block_params )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ID||LA11_0==119||LA11_0==178||LA11_0==183||LA11_0==188||(LA11_0 >= 191 && LA11_0 <= 192)||LA11_0==194||LA11_0==196||(LA11_0 >= 200 && LA11_0 <= 202)) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call982);
                            block_params57=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params57.getTree());

                            }
                            break;

                    }


                    char_literal58=(Token)match(input,120,FOLLOW_120_in_block_call985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal58_tree = 
                    (Object)adaptor.create(char_literal58)
                    ;
                    adaptor.addChild(root_0, char_literal58_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call988);
                    block_multiline_wrapper59=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper59.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:207:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call60 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper1002);
            synchronized_call60=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call60.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:211:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal61=null;
        Token char_literal62=null;
        Token char_literal64=null;
        ObjcParser.element_value_return element_value63 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper65 =null;


        Object string_literal61_tree=null;
        Object char_literal62_tree=null;
        Object char_literal64_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:212:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:212:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal61=(Token)match(input,163,FOLLOW_163_in_synchronized_call1025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal61_tree = 
            (Object)adaptor.create(string_literal61)
            ;
            adaptor.addChild(root_0, string_literal61_tree);
            }

            char_literal62=(Token)match(input,119,FOLLOW_119_in_synchronized_call1027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal62_tree = 
            (Object)adaptor.create(char_literal62)
            ;
            adaptor.addChild(root_0, char_literal62_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1029);
            element_value63=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value63.getTree());

            char_literal64=(Token)match(input,120,FOLLOW_120_in_synchronized_call1031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal64_tree = 
            (Object)adaptor.create(char_literal64)
            ;
            adaptor.addChild(root_0, char_literal64_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1033);
            block_multiline_wrapper65=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper65.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal67=null;
        ObjcParser.classical_param_return classical_param66 =null;

        ObjcParser.classical_param_return classical_param68 =null;


        Object char_literal67_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1049);
            classical_param66=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param66.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:22: ( ',' classical_param )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==126) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:23: ',' classical_param
            	    {
            	    char_literal67=(Token)match(input,126,FOLLOW_126_in_block_params1052); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal67);


            	    pushFollow(FOLLOW_classical_param_in_block_params1054);
            	    classical_param68=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param68.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline69 =null;

        ObjcParser.block_singleline_return block_singleline70 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==204) ) {
                alt14=1;
            }
            else if ( (LA14_0==ID||LA14_0==MULTI_COMMENT_LIT||LA14_0==SINGLE_COMMENT_LIT||LA14_0==117||LA14_0==119||LA14_0==121||LA14_0==135||LA14_0==163||LA14_0==171||LA14_0==176||LA14_0==179||(LA14_0 >= 181 && LA14_0 <= 182)||(LA14_0 >= 186 && LA14_0 <= 187)||LA14_0==189||LA14_0==193||LA14_0==197||LA14_0==203) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1083);
                    block_multiline69=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline69.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1095);
                    block_singleline70=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline70.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 222:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal71=null;
        Token char_literal73=null;
        ObjcParser.block_internal_macro_return block_internal_macro72 =null;


        Object char_literal71_tree=null;
        Object char_literal73_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal71=(Token)match(input,204,FOLLOW_204_in_block_multiline1117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = 
            (Object)adaptor.create(char_literal71)
            ;
            adaptor.addChild(root_0, char_literal71_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:228:4: ( block_internal_macro )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==MULTI_COMMENT_LIT||LA15_0==SINGLE_COMMENT_LIT||LA15_0==117||LA15_0==119||LA15_0==121||LA15_0==135||LA15_0==163||(LA15_0 >= 165 && LA15_0 <= 166)||(LA15_0 >= 171 && LA15_0 <= 172)||LA15_0==176||(LA15_0 >= 178 && LA15_0 <= 179)||(LA15_0 >= 181 && LA15_0 <= 183)||(LA15_0 >= 186 && LA15_0 <= 189)||(LA15_0 >= 191 && LA15_0 <= 197)||(LA15_0 >= 200 && LA15_0 <= 204)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:228:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1122);
            	    block_internal_macro72=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro72.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            char_literal73=(Token)match(input,208,FOLLOW_208_in_block_multiline1129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = 
            (Object)adaptor.create(char_literal73)
            ;
            adaptor.addChild(root_0, char_literal73_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:232:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline74 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:233:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:233:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1141);
            block_multiline74=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline74.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:233:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline75 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:237:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:237:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1162);
            block_singleline75=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline75.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:237:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal85=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper76 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper77 =null;

        ObjcParser.do_stmt_return do_stmt78 =null;

        ObjcParser.if_stmt_return if_stmt79 =null;

        ObjcParser.else_stmt_return else_stmt80 =null;

        ObjcParser.switch_stmt_return switch_stmt81 =null;

        ObjcParser.return_stmt_return return_stmt82 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper83 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper84 =null;

        ObjcParser.break_stmt_return break_stmt86 =null;

        ObjcParser.continue_stmt_return continue_stmt87 =null;

        ObjcParser.goto_stmt_return goto_stmt88 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper89 =null;

        ObjcParser.method_msg_return method_msg90 =null;

        ObjcParser.access_wrapper_return access_wrapper91 =null;

        ObjcParser.name_return name92 =null;

        ObjcParser.op_assign_return op_assign93 =null;

        ObjcParser.element_value_return element_value94 =null;

        ObjcParser.comments_return comments95 =null;


        Object char_literal85_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt18=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA18_1 = input.LA(2);

                if ( ((LA18_1 >= 130 && LA18_1 <= 131)) ) {
                    int LA18_20 = input.LA(3);

                    if ( (LA18_20==ID) ) {
                        int LA18_24 = input.LA(4);

                        if ( (LA18_24==119) && (synpred3_Objc())) {
                            alt18=1;
                        }
                        else if ( ((LA18_24 >= 130 && LA18_24 <= 131)) ) {
                            int LA18_26 = input.LA(5);

                            if ( (synpred3_Objc()) ) {
                                alt18=1;
                            }
                            else if ( (true) ) {
                                alt18=14;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 18, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA18_24==118||LA18_24==122||LA18_24==125||LA18_24==129||LA18_24==133||LA18_24==138||LA18_24==140||LA18_24==145||LA18_24==206) ) {
                            alt18=14;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 18, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 18, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA18_1==119) && (synpred3_Objc())) {
                    alt18=1;
                }
                else if ( (LA18_1==118||LA18_1==122||LA18_1==125||LA18_1==129||LA18_1==133||LA18_1==138||LA18_1==140||LA18_1==145||LA18_1==171||LA18_1==206) ) {
                    alt18=14;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 18, 1, input);

                    throw nvae;

                }
                }
                break;
            case 163:
                {
                alt18=2;
                }
                break;
            case 181:
                {
                alt18=3;
                }
                break;
            case 189:
                {
                alt18=4;
                }
                break;
            case 182:
                {
                alt18=5;
                }
                break;
            case 197:
                {
                alt18=6;
                }
                break;
            case 193:
                {
                alt18=7;
                }
                break;
            case 186:
                {
                alt18=8;
                }
                break;
            case 203:
                {
                alt18=9;
                }
                break;
            case 135:
                {
                alt18=10;
                }
                break;
            case 176:
                {
                alt18=11;
                }
                break;
            case 179:
                {
                alt18=12;
                }
                break;
            case 187:
                {
                alt18=13;
                }
                break;
            case 117:
            case 119:
            case 121:
                {
                alt18=14;
                }
                break;
            case 171:
                {
                alt18=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt18=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }

            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1189);
                    classical_method_call_wrapper76=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper76.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1194);
                    synchronized_call_wrapper77=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper77.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1199);
                    do_stmt78=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt78.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1204);
                    if_stmt79=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt79.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1209);
                    else_stmt80=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt80.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1214);
                    switch_stmt81=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt81.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1219);
                    return_stmt82=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt82.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1224);
                    for_stmt_wrapper83=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper83.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1229);
                    while_stmt_wrapper84=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper84.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal85=(Token)match(input,135,FOLLOW_135_in_block_singleline1234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal85_tree = 
                    (Object)adaptor.create(char_literal85)
                    ;
                    adaptor.addChild(root_0, char_literal85_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1240);
                    break_stmt86=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt86.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1246);
                    continue_stmt87=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt87.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1251);
                    goto_stmt88=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt88.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1257);
                    variable_assignment_wrapper89=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper89.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:4: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1262);
                    method_msg90=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg90.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:15: ( ( access_wrapper name )* op_assign element_value )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==118||LA17_0==122||LA17_0==125||(LA17_0 >= 129 && LA17_0 <= 131)||LA17_0==133||LA17_0==138||LA17_0==140||LA17_0==145||LA17_0==206) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:16: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:16: ( access_wrapper name )*
                            loop16:
                            do {
                                int alt16=2;
                                int LA16_0 = input.LA(1);

                                if ( ((LA16_0 >= 130 && LA16_0 <= 131)) ) {
                                    alt16=1;
                                }


                                switch (alt16) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:17: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_singleline1266);
                            	    access_wrapper91=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper91.getTree());

                            	    pushFollow(FOLLOW_name_in_block_singleline1268);
                            	    name92=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name92.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop16;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_singleline1272);
                            op_assign93=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign93.getTree());

                            pushFollow(FOLLOW_element_value_in_block_singleline1274);
                            element_value94=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value94.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1282);
                    comments95=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments95.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal96=null;
        ObjcParser.block_internal_return block_internal97 =null;


        Object char_literal96_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:3: ( '\\\\' | block_internal )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==172) ) {
                alt19=1;
            }
            else if ( (LA19_0==ID||LA19_0==MULTI_COMMENT_LIT||LA19_0==SINGLE_COMMENT_LIT||LA19_0==117||LA19_0==119||LA19_0==121||LA19_0==135||LA19_0==163||(LA19_0 >= 165 && LA19_0 <= 166)||LA19_0==171||LA19_0==176||(LA19_0 >= 178 && LA19_0 <= 179)||(LA19_0 >= 181 && LA19_0 <= 183)||(LA19_0 >= 186 && LA19_0 <= 189)||(LA19_0 >= 191 && LA19_0 <= 197)||(LA19_0 >= 200 && LA19_0 <= 204)) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal96=(Token)match(input,172,FOLLOW_172_in_block_internal_macro1294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal96_tree = 
                    (Object)adaptor.create(char_literal96)
                    ;
                    adaptor.addChild(root_0, char_literal96_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1300);
                    block_internal97=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal97.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal114=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper98 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper99 =null;

        ObjcParser.increment_decrement_return increment_decrement100 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper101 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper102 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper103 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper104 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper105 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper106 =null;

        ObjcParser.do_stmt_return do_stmt107 =null;

        ObjcParser.if_stmt_return if_stmt108 =null;

        ObjcParser.else_stmt_return else_stmt109 =null;

        ObjcParser.switch_stmt_return switch_stmt110 =null;

        ObjcParser.return_stmt_return return_stmt111 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper112 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper113 =null;

        ObjcParser.break_stmt_return break_stmt115 =null;

        ObjcParser.continue_stmt_return continue_stmt116 =null;

        ObjcParser.goto_stmt_return goto_stmt117 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper118 =null;

        ObjcParser.method_msg_return method_msg119 =null;

        ObjcParser.access_wrapper_return access_wrapper120 =null;

        ObjcParser.name_return name121 =null;

        ObjcParser.op_assign_return op_assign122 =null;

        ObjcParser.element_value_return element_value123 =null;

        ObjcParser.comments_return comments124 =null;


        Object char_literal114_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt22=22;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1320);
                    classical_method_call_wrapper98=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper98.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1333);
                    object_access_simple_wrapper99=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper99.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1335);
                    increment_decrement100=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement100.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1349);
                    variable_assignment_wrapper101=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper101.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1355);
                    variable_declaration_wrapper102=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper102.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1361);
                    synchronized_call_wrapper103=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper103.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1367);
                    try_stmt_wrapper104=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper104.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1372);
                    throw_stmt_wrapper105=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper105.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1377);
                    static_declaration_wrapper106=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper106.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1382);
                    do_stmt107=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt107.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1387);
                    if_stmt108=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt108.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1392);
                    else_stmt109=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt109.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1397);
                    switch_stmt110=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt110.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1402);
                    return_stmt111=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt111.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1407);
                    for_stmt_wrapper112=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper112.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1412);
                    while_stmt_wrapper113=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper113.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal114=(Token)match(input,135,FOLLOW_135_in_block_internal1417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal114_tree = 
                    (Object)adaptor.create(char_literal114)
                    ;
                    adaptor.addChild(root_0, char_literal114_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1422);
                    break_stmt115=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt115.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1427);
                    continue_stmt116=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt116.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1432);
                    goto_stmt117=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt117.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1437);
                    block_multiline_wrapper118=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper118.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1443);
                    method_msg119=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg119.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:16: ( ( access_wrapper name )* op_assign element_value )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==118||LA21_0==122||LA21_0==125||(LA21_0 >= 129 && LA21_0 <= 131)||LA21_0==133||LA21_0==138||LA21_0==140||LA21_0==145||LA21_0==206) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:17: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:17: ( access_wrapper name )*
                            loop20:
                            do {
                                int alt20=2;
                                int LA20_0 = input.LA(1);

                                if ( ((LA20_0 >= 130 && LA20_0 <= 131)) ) {
                                    alt20=1;
                                }


                                switch (alt20) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:18: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_internal1447);
                            	    access_wrapper120=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper120.getTree());

                            	    pushFollow(FOLLOW_name_in_block_internal1449);
                            	    name121=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name121.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop20;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_internal1453);
                            op_assign122=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign122.getTree());

                            pushFollow(FOLLOW_element_value_in_block_internal1455);
                            element_value123=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value123.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1463);
                    comments124=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments124.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal125=null;
        Token char_literal126=null;
        Token ID127=null;
        Token char_literal128=null;

        Object string_literal125_tree=null;
        Object char_literal126_tree=null;
        Object ID127_tree=null;
        Object char_literal128_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:5: 'goto' ':' ID ';'
            {
            string_literal125=(Token)match(input,187,FOLLOW_187_in_goto_stmt1475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal125);


            char_literal126=(Token)match(input,134,FOLLOW_134_in_goto_stmt1477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal126);


            ID127=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID127);


            char_literal128=(Token)match(input,135,FOLLOW_135_in_goto_stmt1481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal128);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt129 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1504);
            while_stmt129=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt129.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal130=null;
        Token char_literal131=null;
        Token char_literal133=null;
        ObjcParser.element_value_return element_value132 =null;

        ObjcParser.block_return block134 =null;


        Object string_literal130_tree=null;
        Object char_literal131_tree=null;
        Object char_literal133_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal130=(Token)match(input,203,FOLLOW_203_in_while_stmt1527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal130_tree = 
            (Object)adaptor.create(string_literal130)
            ;
            adaptor.addChild(root_0, string_literal130_tree);
            }

            char_literal131=(Token)match(input,119,FOLLOW_119_in_while_stmt1529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal131_tree = 
            (Object)adaptor.create(char_literal131)
            ;
            adaptor.addChild(root_0, char_literal131_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1531);
            element_value132=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value132.getTree());

            char_literal133=(Token)match(input,120,FOLLOW_120_in_while_stmt1533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal133_tree = 
            (Object)adaptor.create(char_literal133)
            ;
            adaptor.addChild(root_0, char_literal133_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1535);
            block134=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block134.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal135=null;
        ObjcParser.element_value_return element_value136 =null;


        Object string_literal135_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:5: 'in' element_value
            {
            string_literal135=(Token)match(input,190,FOLLOW_190_in_for_in_stmt1550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal135);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1552);
            element_value136=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value136.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal137=null;
        Token char_literal139=null;
        ObjcParser.element_value_return element_value138 =null;

        ObjcParser.element_value_return element_value140 =null;


        Object char_literal137_tree=null;
        Object char_literal139_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal137=(Token)match(input,135,FOLLOW_135_in_for_classic_stmt1575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal137_tree = 
            (Object)adaptor.create(char_literal137)
            ;
            adaptor.addChild(root_0, char_literal137_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:9: ( element_value )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==CHAR_LITERAL||LA23_0==ID||LA23_0==NUMBER_LITERAL||LA23_0==STRING_LITERAL||LA23_0==112||LA23_0==117||LA23_0==119||LA23_0==121||LA23_0==124||(LA23_0 >= 127 && LA23_0 <= 128)||LA23_0==147||LA23_0==159||LA23_0==162||LA23_0==168||(LA23_0 >= 170 && LA23_0 <= 171)||(LA23_0 >= 174 && LA23_0 <= 175)||LA23_0==185||LA23_0==198||LA23_0==209) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1577);
                    element_value138=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value138.getTree());

                    }
                    break;

            }


            char_literal139=(Token)match(input,135,FOLLOW_135_in_for_classic_stmt1580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal139_tree = 
            (Object)adaptor.create(char_literal139)
            ;
            adaptor.addChild(root_0, char_literal139_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:28: ( element_value )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CHAR_LITERAL||LA24_0==ID||LA24_0==NUMBER_LITERAL||LA24_0==STRING_LITERAL||LA24_0==112||LA24_0==117||LA24_0==119||LA24_0==121||LA24_0==124||(LA24_0 >= 127 && LA24_0 <= 128)||LA24_0==147||LA24_0==159||LA24_0==162||LA24_0==168||(LA24_0 >= 170 && LA24_0 <= 171)||(LA24_0 >= 174 && LA24_0 <= 175)||LA24_0==185||LA24_0==198||LA24_0==209) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1582);
                    element_value140=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value140.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal143=null;
        Token char_literal147=null;
        Token char_literal151=null;
        Token char_literal158=null;
        ObjcParser.name_return name141 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt142 =null;

        ObjcParser.block_return block144 =null;

        ObjcParser.name_return name145 =null;

        ObjcParser.for_in_stmt_return for_in_stmt146 =null;

        ObjcParser.block_return block148 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper149 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt150 =null;

        ObjcParser.block_return block152 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple153 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper154 =null;

        ObjcParser.element_value_return element_value155 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt156 =null;

        ObjcParser.for_in_stmt_return for_in_stmt157 =null;

        ObjcParser.block_return block159 =null;


        Object char_literal143_tree=null;
        Object char_literal147_tree=null;
        Object char_literal151_tree=null;
        Object char_literal158_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt26=4;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1605);
                    name141=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name141.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1607);
                    for_classic_stmt142=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt142.getTree());

                    char_literal143=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal143_tree = 
                    (Object)adaptor.create(char_literal143)
                    ;
                    adaptor.addChild(root_0, char_literal143_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1611);
                    block144=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block144.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1624);
                    name145=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name145.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1626);
                    for_in_stmt146=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt146.getTree());

                    char_literal147=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal147_tree = 
                    (Object)adaptor.create(char_literal147)
                    ;
                    adaptor.addChild(root_0, char_literal147_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1630);
                    block148=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block148.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1644);
                    variable_assignment_wrapper149=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper149.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1646);
                    for_classic_stmt150=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt150.getTree());

                    char_literal151=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal151_tree = 
                    (Object)adaptor.create(char_literal151)
                    ;
                    adaptor.addChild(root_0, char_literal151_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1650);
                    block152=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block152.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1656);
                    field_declaration_simple153=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple153.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==118||LA25_0==122||LA25_0==125||LA25_0==129||LA25_0==133||LA25_0==138||LA25_0==140||LA25_0==145||LA25_0==206) ) {
                        alt25=1;
                    }
                    else if ( (LA25_0==190) ) {
                        alt25=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 25, 0, input);

                        throw nvae;

                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1660);
                            op_assign_wrapper154=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper154.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1662);
                            element_value155=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value155.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1664);
                            for_classic_stmt156=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt156.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1669);
                            for_in_stmt157=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt157.getTree());

                            }
                            break;

                    }


                    char_literal158=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = 
                    (Object)adaptor.create(char_literal158)
                    ;
                    adaptor.addChild(root_0, char_literal158_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1674);
                    block159=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block159.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token char_literal161=null;
        ObjcParser.for_stmt_body_return for_stmt_body162 =null;


        Object string_literal160_tree=null;
        Object char_literal161_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal160=(Token)match(input,186,FOLLOW_186_in_for_stmt1687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal160_tree = 
            (Object)adaptor.create(string_literal160)
            ;
            adaptor.addChild(root_0, string_literal160_tree);
            }

            char_literal161=(Token)match(input,119,FOLLOW_119_in_for_stmt1689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal161_tree = 
            (Object)adaptor.create(char_literal161)
            ;
            adaptor.addChild(root_0, char_literal161_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1691);
            for_stmt_body162=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body162.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt163 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1704);
            for_stmt163=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt163.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal164=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon165 =null;


        Object string_literal164_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:5: 'return' element_value_or_semicolon
            {
            string_literal164=(Token)match(input,193,FOLLOW_193_in_return_stmt1727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal164);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1729);
            element_value_or_semicolon165=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon165.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal166=null;
        Token char_literal167=null;
        Token char_literal169=null;
        Token char_literal170=null;
        Token char_literal172=null;
        ObjcParser.element_value_return element_value168 =null;

        ObjcParser.switch_body_return switch_body171 =null;


        Object string_literal166_tree=null;
        Object char_literal167_tree=null;
        Object char_literal169_tree=null;
        Object char_literal170_tree=null;
        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal166=(Token)match(input,197,FOLLOW_197_in_switch_stmt1752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(string_literal166);


            char_literal167=(Token)match(input,119,FOLLOW_119_in_switch_stmt1754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal167);


            pushFollow(FOLLOW_element_value_in_switch_stmt1756);
            element_value168=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value168.getTree());

            char_literal169=(Token)match(input,120,FOLLOW_120_in_switch_stmt1758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal169);


            char_literal170=(Token)match(input,204,FOLLOW_204_in_switch_stmt1760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_204.add(char_literal170);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:41: ( switch_body )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ID||LA27_0==MULTI_COMMENT_LIT||LA27_0==SINGLE_COMMENT_LIT||LA27_0==117||LA27_0==119||LA27_0==121||LA27_0==135||LA27_0==163||LA27_0==171||(LA27_0 >= 176 && LA27_0 <= 177)||(LA27_0 >= 179 && LA27_0 <= 182)||(LA27_0 >= 186 && LA27_0 <= 187)||LA27_0==189||LA27_0==193||LA27_0==197||(LA27_0 >= 203 && LA27_0 <= 204)) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1763);
            	    switch_body171=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body171.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }


            char_literal172=(Token)match(input,208,FOLLOW_208_in_switch_stmt1767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_208.add(char_literal172);


            // AST REWRITE
            // elements: element_value, switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt173 =null;

        ObjcParser.default_stmt_return default_stmt174 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper175 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper176 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt28=4;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt28=1;
                }
                break;
            case 180:
                {
                alt28=2;
                }
                break;
            case 204:
                {
                alt28=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 117:
            case 119:
            case 121:
            case 135:
            case 163:
            case 171:
            case 176:
            case 179:
            case 181:
            case 182:
            case 186:
            case 187:
            case 189:
            case 193:
            case 197:
            case 203:
                {
                alt28=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }

            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1793);
                    case_stmt173=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt173.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1799);
                    default_stmt174=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt174.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1805);
                    block_multiline_wrapper175=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper175.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1811);
                    block_singleline_wrapper176=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper176.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal177=null;
        Token char_literal179=null;
        ObjcParser.name_number_return name_number178 =null;


        Object string_literal177_tree=null;
        Object char_literal179_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:5: 'case' name_number ':'
            {
            string_literal177=(Token)match(input,177,FOLLOW_177_in_case_stmt1826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal177);


            pushFollow(FOLLOW_name_number_in_case_stmt1828);
            name_number178=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number178.getTree());

            char_literal179=(Token)match(input,134,FOLLOW_134_in_case_stmt1830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal179);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal180=null;
        Token char_literal181=null;

        Object string_literal180_tree=null;
        Object char_literal181_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:5: 'default' ':'
            {
            string_literal180=(Token)match(input,180,FOLLOW_180_in_default_stmt1853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal180);


            char_literal181=(Token)match(input,134,FOLLOW_134_in_default_stmt1855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal181);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal182=null;
        Token string_literal184=null;
        Token char_literal185=null;
        Token char_literal187=null;
        ObjcParser.block_return block183 =null;

        ObjcParser.element_value_return element_value186 =null;


        Object string_literal182_tree=null;
        Object string_literal184_tree=null;
        Object char_literal185_tree=null;
        Object char_literal187_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal182=(Token)match(input,181,FOLLOW_181_in_do_stmt1876); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal182);


            pushFollow(FOLLOW_block_in_do_stmt1878);
            block183=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block183.getTree());

            string_literal184=(Token)match(input,203,FOLLOW_203_in_do_stmt1880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal184);


            char_literal185=(Token)match(input,119,FOLLOW_119_in_do_stmt1882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal185);


            pushFollow(FOLLOW_element_value_in_do_stmt1884);
            element_value186=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value186.getTree());

            char_literal187=(Token)match(input,120,FOLLOW_120_in_do_stmt1886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal187);


            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal188=null;
        Token char_literal189=null;
        Token char_literal191=null;
        ObjcParser.element_value_return element_value190 =null;

        ObjcParser.block_return block192 =null;


        Object string_literal188_tree=null;
        Object char_literal189_tree=null;
        Object char_literal191_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:5: 'if' '(' element_value ')' block
            {
            string_literal188=(Token)match(input,189,FOLLOW_189_in_if_stmt1911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal188);


            char_literal189=(Token)match(input,119,FOLLOW_119_in_if_stmt1913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal189);


            pushFollow(FOLLOW_element_value_in_if_stmt1915);
            element_value190=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value190.getTree());

            char_literal191=(Token)match(input,120,FOLLOW_120_in_if_stmt1917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal191);


            pushFollow(FOLLOW_block_in_if_stmt1919);
            block192=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block192.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal193=null;
        ObjcParser.block_return block194 =null;


        Object string_literal193_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:5: 'else' block
            {
            string_literal193=(Token)match(input,182,FOLLOW_182_in_else_stmt1942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal193);


            pushFollow(FOLLOW_block_in_else_stmt1944);
            block194=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block194.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal195=null;
        ObjcParser.block_return block196 =null;

        ObjcParser.catch_stmt_return catch_stmt197 =null;

        ObjcParser.finally_stmt_return finally_stmt198 =null;


        Object string_literal195_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal195=(Token)match(input,166,FOLLOW_166_in_try_stmt_wrapper1966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal195);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1969);
            block196=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block196.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:19: ( catch_stmt )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==148) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1972);
            	    catch_stmt197=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt197.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:31: ( finally_stmt )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==152) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1975);
                    finally_stmt198=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt198.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: catch_stmt, finally_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal199=null;
        Token char_literal200=null;
        Token char_literal202=null;
        Token char_literal204=null;
        ObjcParser.name_return name201 =null;

        ObjcParser.name_return name203 =null;

        ObjcParser.block_return block205 =null;


        Object string_literal199_tree=null;
        Object char_literal200_tree=null;
        Object char_literal202_tree=null;
        Object char_literal204_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:4: '@catch' '(' name '*' name ')' block
            {
            string_literal199=(Token)match(input,148,FOLLOW_148_in_catch_stmt2001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal199);


            char_literal200=(Token)match(input,119,FOLLOW_119_in_catch_stmt2004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal200);


            pushFollow(FOLLOW_name_in_catch_stmt2007);
            name201=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name201.getTree());

            char_literal202=(Token)match(input,121,FOLLOW_121_in_catch_stmt2010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal202);


            pushFollow(FOLLOW_name_in_catch_stmt2012);
            name203=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name203.getTree());

            char_literal204=(Token)match(input,120,FOLLOW_120_in_catch_stmt2015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal204);


            pushFollow(FOLLOW_block_in_catch_stmt2018);
            block205=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block205.getTree());

            // AST REWRITE
            // elements: block, name, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal206=null;
        ObjcParser.block_return block207 =null;


        Object string_literal206_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:4: '@finally' block
            {
            string_literal206=(Token)match(input,152,FOLLOW_152_in_finally_stmt2042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal206);


            pushFollow(FOLLOW_block_in_finally_stmt2045);
            block207=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block207.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt208 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2064);
            throw_stmt208=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt208.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal209=null;
        Token char_literal211=null;
        ObjcParser.element_value_return element_value210 =null;


        Object string_literal209_tree=null;
        Object char_literal211_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:376:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:376:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal209=(Token)match(input,165,FOLLOW_165_in_throw_stmt2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal209_tree = 
            (Object)adaptor.create(string_literal209)
            ;
            adaptor.addChild(root_0, string_literal209_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2085);
            element_value210=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value210.getTree());

            char_literal211=(Token)match(input,135,FOLLOW_135_in_throw_stmt2087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal211_tree = 
            (Object)adaptor.create(char_literal211)
            ;
            adaptor.addChild(root_0, char_literal211_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID212=null;

        Object ID212_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:380:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:380:4: ID
            {
            ID212=(Token)match(input,ID,FOLLOW_ID_in_name2098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID212);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:380:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID213=null;
        Token char_literal214=null;
        Token NUMBER_LITERAL215=null;

        Object ID213_tree=null;
        Object char_literal214_tree=null;
        Object NUMBER_LITERAL215_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ID) ) {
                alt32=1;
            }
            else if ( (LA32_0==NUMBER_LITERAL||LA32_0==127) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:5: ID
                    {
                    ID213=(Token)match(input,ID,FOLLOW_ID_in_name_number2118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID213);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 384:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:5: ( '-' )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==127) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:5: '-'
                            {
                            char_literal214=(Token)match(input,127,FOLLOW_127_in_name_number2132); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal214);


                            }
                            break;

                    }


                    NUMBER_LITERAL215=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL215);


                    // AST REWRITE
                    // elements: 127, NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 385:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:37: ( '-' )?
                        if ( stream_127.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_127.nextNode()
                            );

                        }
                        stream_127.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:388:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper216 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2161);
            field_declaration_wrapper216=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper216.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment217 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2184);
            variable_assignment217=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment217.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:396:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper218 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper219 =null;

        ObjcParser.element_value_return element_value220 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:397:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:397:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2207);
            object_access_wrapper218=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper218.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2209);
            op_assign_wrapper219=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper219.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2211);
            element_value220=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value220.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper221 =null;

        ObjcParser.increment_decrement_return increment_decrement222 =null;

        ObjcParser.increment_decrement_return increment_decrement223 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper224 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==119) && (synpred10_Objc())) {
                alt33=1;
            }
            else if ( (LA33_0==117) && (synpred10_Objc())) {
                alt33=1;
            }
            else if ( (LA33_0==ID) && (synpred10_Objc())) {
                alt33=1;
            }
            else if ( (LA33_0==121) && (synpred10_Objc())) {
                alt33=1;
            }
            else if ( (LA33_0==124||LA33_0==128) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2232);
                    object_access_wrapper221=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper221.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2234);
                    increment_decrement222=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement222.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2240);
                    increment_decrement223=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement223.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2242);
                    object_access_wrapper224=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper224.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper225 =null;

        ObjcParser.method_implementation_common_return method_implementation_common226 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2257);
            method_modifier_wrapper225=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper225.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2259);
            method_implementation_common226=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common226.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal227=null;
        Token char_literal229=null;
        ObjcParser.type_declaration_return type_declaration228 =null;

        ObjcParser.method_name_return method_name230 =null;

        ObjcParser.method_params_return method_params231 =null;


        Object char_literal227_tree=null;
        Object char_literal229_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:6: '(' type_declaration ')' method_name
            {
            char_literal227=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal227_tree = 
            (Object)adaptor.create(char_literal227)
            ;
            adaptor.addChild(root_0, char_literal227_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2274);
            type_declaration228=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration228.getTree());

            char_literal229=(Token)match(input,120,FOLLOW_120_in_method_implementation_common2276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal229_tree = 
            (Object)adaptor.create(char_literal229)
            ;
            adaptor.addChild(root_0, char_literal229_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2278);
            method_name230=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name230.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:44: ( method_params )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ID||LA34_0==134) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2281);
                    method_params231=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params231.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation232 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper233 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2293);
            method_implementation232=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation232.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2297);
            block_multiline_wrapper233=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper233.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:413:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call234 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2320);
            classical_method_call234=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call234.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal238=null;
        ObjcParser.name_return name235 =null;

        ObjcParser.access_wrapper_return access_wrapper236 =null;

        ObjcParser.name_return name237 =null;


        Object char_literal238_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2341);
            name235=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name235.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:10: ( access_wrapper name )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( ((LA35_0 >= 130 && LA35_0 <= 131)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2344);
            	    access_wrapper236=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper236.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2346);
            	    name237=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name237.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            char_literal238=(Token)match(input,119,FOLLOW_119_in_clasical_method_call_predicate2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal238_tree = 
            (Object)adaptor.create(char_literal238)
            ;
            adaptor.addChild(root_0, char_literal238_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal242=null;
        Token char_literal244=null;
        ObjcParser.name_return name239 =null;

        ObjcParser.access_wrapper_return access_wrapper240 =null;

        ObjcParser.name_return name241 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push243 =null;


        Object char_literal242_tree=null;
        Object char_literal244_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2365);
            name239=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name239.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:10: ( access_wrapper name )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( ((LA36_0 >= 130 && LA36_0 <= 131)) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2368);
            	    access_wrapper240=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper240.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2370);
            	    name241=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name241.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal242=(Token)match(input,119,FOLLOW_119_in_classical_method_call2375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal242_tree = 
            (Object)adaptor.create(char_literal242)
            ;
            adaptor.addChild(root_0, char_literal242_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:38: ( classical_method_params_push )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==CHAR_LITERAL||LA37_0==ID||LA37_0==MULTI_COMMENT_LIT||LA37_0==NUMBER_LITERAL||LA37_0==SINGLE_COMMENT_LIT||LA37_0==STRING_LITERAL||LA37_0==112||LA37_0==117||LA37_0==119||LA37_0==121||LA37_0==124||(LA37_0 >= 127 && LA37_0 <= 128)||LA37_0==147||LA37_0==159||LA37_0==162||LA37_0==168||(LA37_0 >= 170 && LA37_0 <= 171)||(LA37_0 >= 174 && LA37_0 <= 175)||LA37_0==185||LA37_0==198||LA37_0==209) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2377);
                    classical_method_params_push243=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push243.getTree());

                    }
                    break;

            }


            char_literal244=(Token)match(input,120,FOLLOW_120_in_classical_method_call2380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal244_tree = 
            (Object)adaptor.create(char_literal244)
            ;
            adaptor.addChild(root_0, char_literal244_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal246=null;
        ObjcParser.method_param_push_return method_param_push245 =null;

        ObjcParser.method_param_push_return method_param_push247 =null;


        Object char_literal246_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2395);
            method_param_push245=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push245.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:24: ( ',' method_param_push )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==126) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:25: ',' method_param_push
            	    {
            	    char_literal246=(Token)match(input,126,FOLLOW_126_in_classical_method_params_push2398); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal246);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2400);
            	    method_param_push247=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push247.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal250=null;
        Token char_literal251=null;
        ObjcParser.method_param_push_return method_param_push248 =null;

        ObjcParser.prefix_return prefix249 =null;

        ObjcParser.method_param_push_return method_param_push252 =null;


        Object char_literal250_tree=null;
        Object char_literal251_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2424);
            method_param_push248=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push248.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==ID||LA40_0==126) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:23: ( ( prefix ':' ) | ',' )
            	    int alt39=2;
            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0==ID) ) {
            	        alt39=1;
            	    }
            	    else if ( (LA39_0==126) ) {
            	        alt39=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 39, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt39) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2429);
            	            prefix249=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix249.getTree());

            	            char_literal250=(Token)match(input,134,FOLLOW_134_in_method_params_push2431); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_134.add(char_literal250);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:39: ','
            	            {
            	            char_literal251=(Token)match(input,126,FOLLOW_126_in_method_params_push2436); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_126.add(char_literal251);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2439);
            	    method_param_push252=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push252.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments253 =null;

        ObjcParser.element_value_return element_value254 =null;

        ObjcParser.comments_return comments255 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:5: ( comments )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==MULTI_COMMENT_LIT||LA41_0==SINGLE_COMMENT_LIT) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2460);
                    comments253=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments253.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2463);
            element_value254=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value254.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:29: ( comments )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==MULTI_COMMENT_LIT||LA42_0==SINGLE_COMMENT_LIT) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2465);
                    comments255=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments255.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comments, element_value, comments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal256=null;
        Token char_literal259=null;
        Token char_literal261=null;
        ObjcParser.element_value_return element_value257 =null;

        ObjcParser.method_name_return method_name258 =null;

        ObjcParser.method_params_push_return method_params_push260 =null;


        Object char_literal256_tree=null;
        Object char_literal259_tree=null;
        Object char_literal261_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal256=(Token)match(input,171,FOLLOW_171_in_method_msg2494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(char_literal256);


            pushFollow(FOLLOW_element_value_in_method_msg2496);
            element_value257=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value257.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2498);
            method_name258=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name258.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:35: ( ':' method_params_push )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==134) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:36: ':' method_params_push
                    {
                    char_literal259=(Token)match(input,134,FOLLOW_134_in_method_msg2501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal259);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2503);
                    method_params_push260=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push260.getTree());

                    }
                    break;

            }


            char_literal261=(Token)match(input,173,FOLLOW_173_in_method_msg2507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(char_literal261);


            // AST REWRITE
            // elements: element_value, method_params_push, method_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal262=null;
        Token char_literal264=null;
        ObjcParser.element_value_return element_value263 =null;

        ObjcParser.element_value_return element_value265 =null;


        Object char_literal262_tree=null;
        Object char_literal264_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:6: '?' element_value ':' element_value
            {
            char_literal262=(Token)match(input,146,FOLLOW_146_in_questionmark_if_stmt2533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal262);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2535);
            element_value263=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value263.getTree());

            char_literal264=(Token)match(input,134,FOLLOW_134_in_questionmark_if_stmt2537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal264);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2539);
            element_value265=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value265.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression266 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2564);
            simple_expression266=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression266.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal267=null;
        ObjcParser.element_value_return element_value268 =null;


        Object char_literal267_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:5: ( ';' | element_value )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==135) ) {
                alt44=1;
            }
            else if ( (LA44_0==CHAR_LITERAL||LA44_0==ID||LA44_0==NUMBER_LITERAL||LA44_0==STRING_LITERAL||LA44_0==112||LA44_0==117||LA44_0==119||LA44_0==121||LA44_0==124||(LA44_0 >= 127 && LA44_0 <= 128)||LA44_0==147||LA44_0==159||LA44_0==162||LA44_0==168||(LA44_0 >= 170 && LA44_0 <= 171)||(LA44_0 >= 174 && LA44_0 <= 175)||LA44_0==185||LA44_0==198||LA44_0==209) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:6: ';'
                    {
                    char_literal267=(Token)match(input,135,FOLLOW_135_in_element_value_or_semicolon2587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal267_tree = 
                    (Object)adaptor.create(char_literal267)
                    ;
                    adaptor.addChild(root_0, char_literal267_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2591);
                    element_value268=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value268.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:1: array_init : element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal270=null;
        ObjcParser.element_value_or_array_init_return element_value_or_array_init269 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init271 =null;


        Object char_literal270_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:3: ( element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:5: element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2608);
            element_value_or_array_init269=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init269.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:33: ( ',' element_value_or_array_init )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==126) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:34: ',' element_value_or_array_init
            	    {
            	    char_literal270=(Token)match(input,126,FOLLOW_126_in_array_init2611); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal270_tree = 
            	    (Object)adaptor.create(char_literal270)
            	    ;
            	    adaptor.addChild(root_0, char_literal270_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2613);
            	    element_value_or_array_init271=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init271.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:1: element_value_or_array_init : ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( array_init )? ( comments )? ) | ( comments )? element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal272=null;
        Token char_literal274=null;
        ObjcParser.array_init_return array_init273 =null;

        ObjcParser.comments_return comments275 =null;

        ObjcParser.comments_return comments276 =null;

        ObjcParser.element_value_return element_value277 =null;


        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:3: ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( array_init )? ( comments )? ) | ( comments )? element_value )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==204) ) {
                alt49=1;
            }
            else if ( (LA49_0==CHAR_LITERAL||LA49_0==ID||LA49_0==MULTI_COMMENT_LIT||LA49_0==NUMBER_LITERAL||LA49_0==SINGLE_COMMENT_LIT||LA49_0==STRING_LITERAL||LA49_0==112||LA49_0==117||LA49_0==119||LA49_0==121||LA49_0==124||(LA49_0 >= 127 && LA49_0 <= 128)||LA49_0==147||LA49_0==159||LA49_0==162||LA49_0==168||(LA49_0 >= 170 && LA49_0 <= 171)||(LA49_0 >= 174 && LA49_0 <= 175)||LA49_0==185||LA49_0==198||LA49_0==209) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:5: '{' ( array_init )? '}' ( comments )?
                    {
                    char_literal272=(Token)match(input,204,FOLLOW_204_in_element_value_or_array_init2630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_204.add(char_literal272);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:9: ( array_init )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==CHAR_LITERAL||LA46_0==ID||LA46_0==MULTI_COMMENT_LIT||LA46_0==NUMBER_LITERAL||LA46_0==SINGLE_COMMENT_LIT||LA46_0==STRING_LITERAL||LA46_0==112||LA46_0==117||LA46_0==119||LA46_0==121||LA46_0==124||(LA46_0 >= 127 && LA46_0 <= 128)||LA46_0==147||LA46_0==159||LA46_0==162||LA46_0==168||(LA46_0 >= 170 && LA46_0 <= 171)||(LA46_0 >= 174 && LA46_0 <= 175)||LA46_0==185||LA46_0==198||LA46_0==204||LA46_0==209) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2632);
                            array_init273=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init273.getTree());

                            }
                            break;

                    }


                    char_literal274=(Token)match(input,208,FOLLOW_208_in_element_value_or_array_init2635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_208.add(char_literal274);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:25: ( comments )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==MULTI_COMMENT_LIT||LA47_0==SINGLE_COMMENT_LIT) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:25: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2637);
                            comments275=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments275.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: array_init, comments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 461:35: -> ^( ARRAY_INIT ( array_init )? ( comments )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:38: ^( ARRAY_INIT ( array_init )? ( comments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:51: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:63: ( comments )?
                        if ( stream_comments.hasNext() ) {
                            adaptor.addChild(root_1, stream_comments.nextTree());

                        }
                        stream_comments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:5: ( comments )? element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:5: ( comments )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==MULTI_COMMENT_LIT||LA48_0==SINGLE_COMMENT_LIT) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:5: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2656);
                            comments276=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments276.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2659);
                    element_value277=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value277.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:465:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set278=null;

        Object set278_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set278=(Token)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==128 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set278)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1279 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt280 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2694);
            cast_unary_expression1279=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1279.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop50:
            do {
                int alt50=2;
                switch ( input.LA(1) ) {
                case 117:
                    {
                    alt50=1;
                    }
                    break;
                case 121:
                    {
                    alt50=1;
                    }
                    break;
                case 123:
                case 127:
                    {
                    alt50=1;
                    }
                    break;
                case 113:
                case 115:
                case 116:
                case 132:
                case 136:
                case 137:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 174:
                case 205:
                case 207:
                    {
                    alt50=1;
                    }
                    break;
                case 146:
                    {
                    alt50=1;
                    }
                    break;

                }

                switch (alt50) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2696);
            	    op2_unary_expression_or_questionmark_if_stmt280=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt280.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal281=null;
        ObjcParser.cast_expression_return cast_expression282 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression283 =null;


        Object char_literal281_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==127) ) {
                alt51=1;
            }
            else if ( (LA51_0==CHAR_LITERAL||LA51_0==ID||LA51_0==NUMBER_LITERAL||LA51_0==STRING_LITERAL||LA51_0==112||LA51_0==117||LA51_0==119||LA51_0==121||LA51_0==124||LA51_0==128||LA51_0==147||LA51_0==159||LA51_0==162||LA51_0==168||(LA51_0 >= 170 && LA51_0 <= 171)||(LA51_0 >= 174 && LA51_0 <= 175)||LA51_0==185||LA51_0==198||LA51_0==209) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:5: '-' cast_expression
                    {
                    char_literal281=(Token)match(input,127,FOLLOW_127_in_cast_unary_expression12711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal281);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12713);
                    cast_expression282=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression282.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 474:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12727);
                    cast_unary_expression283=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression283.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper284 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1285 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt286 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==113||(LA52_0 >= 115 && LA52_0 <= 117)||LA52_0==121||LA52_0==123||LA52_0==127||LA52_0==132||(LA52_0 >= 136 && LA52_0 <= 137)||(LA52_0 >= 139 && LA52_0 <= 144)||LA52_0==174||LA52_0==205||LA52_0==207) ) {
                alt52=1;
            }
            else if ( (LA52_0==146) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2741);
                    op2_wrapper284=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper284.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2743);
                    cast_unary_expression1285=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1285.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2750);
                    questionmark_if_stmt286=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal289=null;
        Token char_literal291=null;
        ObjcParser.cast_expression_return cast_expression287 =null;

        ObjcParser.increment_decrement_return increment_decrement288 =null;

        ObjcParser.cast_expression_return cast_expression290 =null;

        ObjcParser.cast_expression_return cast_expression292 =null;

        ObjcParser.increment_decrement_return increment_decrement293 =null;

        ObjcParser.cast_expression_return cast_expression294 =null;


        Object char_literal289_tree=null;
        Object char_literal291_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt54=4;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case 117:
            case 119:
            case 121:
            case 147:
            case 159:
            case 162:
            case 168:
            case 170:
            case 171:
            case 174:
            case 175:
            case 185:
            case 198:
                {
                alt54=1;
                }
                break;
            case 112:
                {
                alt54=2;
                }
                break;
            case 209:
                {
                alt54=3;
                }
                break;
            case 124:
            case 128:
                {
                alt54=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2763);
                    cast_expression287=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression287.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:21: ( increment_decrement )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==124||LA53_0==128) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2765);
                            increment_decrement288=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement288.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: '!' cast_expression
                    {
                    char_literal289=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal289);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2774);
                    cast_expression290=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression290.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 485:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:5: '~' cast_expression
                    {
                    char_literal291=(Token)match(input,209,FOLLOW_209_in_cast_unary_expression2788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_209.add(char_literal291);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2790);
                    cast_expression292=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression292.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 486:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2804);
                    increment_decrement293=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement293.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2806);
                    cast_expression294=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression294.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal297=null;
        Token char_literal300=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper295 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access296 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper298 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access299 =null;

        ObjcParser.access_wrapper_return access_wrapper301 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call302 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access303 =null;


        Object char_literal297_tree=null;
        Object char_literal300_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt56=3;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2824);
                    type_cast_wrapper295=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper295.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2826);
                    simple_expression_value_access296=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access296.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal297=(Token)match(input,119,FOLLOW_119_in_cast_expression2845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal297_tree = 
                    (Object)adaptor.create(char_literal297)
                    ;
                    adaptor.addChild(root_0, char_literal297_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2847);
                    type_cast_wrapper298=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper298.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2849);
                    simple_expression_value_access299=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access299.getTree());

                    char_literal300=(Token)match(input,120,FOLLOW_120_in_cast_expression2851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal300_tree = 
                    (Object)adaptor.create(char_literal300)
                    ;
                    adaptor.addChild(root_0, char_literal300_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt55=0;
                    loop55:
                    do {
                        int alt55=2;
                        alt55 = dfa55.predict(input);
                        switch (alt55) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2854);
                    	    access_wrapper301=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper301.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression2856);
                    	    simple_name_or_classical_function_call302=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call302.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt55 >= 1 ) break loop55;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(55, input);
                                throw eee;
                        }
                        cnt55++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2864);
                    simple_expression_value_access303=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access303.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal305=null;
        Token char_literal307=null;
        ObjcParser.name_return name304 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push306 =null;

        ObjcParser.name_return name308 =null;


        Object char_literal305_tree=null;
        Object char_literal307_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2885);
                    name304=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name304.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal305=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call2888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal305_tree = 
                    (Object)adaptor.create(char_literal305)
                    ;
                    adaptor.addChild(root_0, char_literal305_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:29: ( classical_method_params_push )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==CHAR_LITERAL||LA57_0==ID||LA57_0==MULTI_COMMENT_LIT||LA57_0==NUMBER_LITERAL||LA57_0==SINGLE_COMMENT_LIT||LA57_0==STRING_LITERAL||LA57_0==112||LA57_0==117||LA57_0==119||LA57_0==121||LA57_0==124||(LA57_0 >= 127 && LA57_0 <= 128)||LA57_0==147||LA57_0==159||LA57_0==162||LA57_0==168||(LA57_0 >= 170 && LA57_0 <= 171)||(LA57_0 >= 174 && LA57_0 <= 175)||LA57_0==185||LA57_0==198||LA57_0==209) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2890);
                            classical_method_params_push306=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push306.getTree());

                            }
                            break;

                    }


                    char_literal307=(Token)match(input,120,FOLLOW_120_in_simple_name_or_classical_function_call2893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal307_tree = 
                    (Object)adaptor.create(char_literal307)
                    ;
                    adaptor.addChild(root_0, char_literal307_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2900);
                    name308=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name308.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal310=null;
        Token char_literal312=null;
        Token char_literal314=null;
        Token char_literal315=null;
        Token string_literal316=null;
        Token char_literal317=null;
        Token char_literal319=null;
        Token char_literal323=null;
        Token char_literal325=null;
        ObjcParser.selector_wrapper_return selector_wrapper309 =null;

        ObjcParser.name_return name311 =null;

        ObjcParser.name_return name313 =null;

        ObjcParser.name_return name318 =null;

        ObjcParser.simple_expression_value_return simple_expression_value320 =null;

        ObjcParser.access_wrapper_return access_wrapper321 =null;

        ObjcParser.name_return name322 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push324 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2326 =null;

        ObjcParser.access_wrapper_return access_wrapper327 =null;

        ObjcParser.name_return name328 =null;


        Object char_literal310_tree=null;
        Object char_literal312_tree=null;
        Object char_literal314_tree=null;
        Object char_literal315_tree=null;
        Object string_literal316_tree=null;
        Object char_literal317_tree=null;
        Object char_literal319_tree=null;
        Object char_literal323_tree=null;
        Object char_literal325_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:3: ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt64=4;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2915);
                    selector_wrapper309=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper309.getTree());

                    char_literal310=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal310_tree = 
                    (Object)adaptor.create(char_literal310)
                    ;
                    adaptor.addChild(root_0, char_literal310_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2919);
                    name311=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name311.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:31: ( ':' ( name ':' )* )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==134) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:32: ':' ( name ':' )*
                            {
                            char_literal312=(Token)match(input,134,FOLLOW_134_in_simple_expression_value_access2922); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal312_tree = 
                            (Object)adaptor.create(char_literal312)
                            ;
                            adaptor.addChild(root_0, char_literal312_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:36: ( name ':' )*
                            loop59:
                            do {
                                int alt59=2;
                                int LA59_0 = input.LA(1);

                                if ( (LA59_0==ID) ) {
                                    alt59=1;
                                }


                                switch (alt59) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access2925);
                            	    name313=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name313.getTree());

                            	    char_literal314=(Token)match(input,134,FOLLOW_134_in_simple_expression_value_access2927); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal314_tree = 
                            	    (Object)adaptor.create(char_literal314)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal314_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop59;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal315=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access2933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal315_tree = 
                    (Object)adaptor.create(char_literal315)
                    ;
                    adaptor.addChild(root_0, char_literal315_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: '@protocol' '(' name ')'
                    {
                    string_literal316=(Token)match(input,159,FOLLOW_159_in_simple_expression_value_access2939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(string_literal316);


                    char_literal317=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal317);


                    pushFollow(FOLLOW_name_in_simple_expression_value_access2943);
                    name318=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name318.getTree());

                    char_literal319=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access2945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal319);


                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 503:30: -> ^( DIRECTIVE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:34: ^( DIRECTIVE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2974);
                    simple_expression_value320=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value320.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:84: ( access_wrapper name )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( ((LA61_0 >= 130 && LA61_0 <= 131)) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2977);
                    	    access_wrapper321=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper321.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2979);
                    	    name322=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name322.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal323=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal323_tree = 
                    (Object)adaptor.create(char_literal323)
                    ;
                    adaptor.addChild(root_0, char_literal323_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:112: ( classical_method_params_push )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==CHAR_LITERAL||LA62_0==ID||LA62_0==MULTI_COMMENT_LIT||LA62_0==NUMBER_LITERAL||LA62_0==SINGLE_COMMENT_LIT||LA62_0==STRING_LITERAL||LA62_0==112||LA62_0==117||LA62_0==119||LA62_0==121||LA62_0==124||(LA62_0 >= 127 && LA62_0 <= 128)||LA62_0==147||LA62_0==159||LA62_0==162||LA62_0==168||(LA62_0 >= 170 && LA62_0 <= 171)||(LA62_0 >= 174 && LA62_0 <= 175)||LA62_0==185||LA62_0==198||LA62_0==209) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2986);
                            classical_method_params_push324=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push324.getTree());

                            }
                            break;

                    }


                    char_literal325=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access2989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal325_tree = 
                    (Object)adaptor.create(char_literal325)
                    ;
                    adaptor.addChild(root_0, char_literal325_tree);
                    }

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2996);
                    simple_expression_value2326=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2326.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:30: ( access_wrapper name )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2999);
                    	    access_wrapper327=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper327.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access3001);
                    	    name328=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name328.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal329=null;
        Token char_literal331=null;
        Token char_literal333=null;
        Token set334=null;
        Token CHAR_LITERAL338=null;
        Token NUMBER_LITERAL339=null;
        ObjcParser.name_return name330 =null;

        ObjcParser.element_value_return element_value332 =null;

        ObjcParser.name_return name335 =null;

        ObjcParser.string_return string336 =null;

        ObjcParser.string_objc_return string_objc337 =null;

        ObjcParser.bool_return bool340 =null;

        ObjcParser.name_return name341 =null;


        Object char_literal329_tree=null;
        Object char_literal331_tree=null;
        Object char_literal333_tree=null;
        Object set334_tree=null;
        Object CHAR_LITERAL338_tree=null;
        Object NUMBER_LITERAL339_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_bool=new RewriteRuleSubtreeStream(adaptor,"rule bool");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name )
            int alt66=8;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:23: ( '&' )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==117) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:23: '&'
                            {
                            char_literal329=(Token)match(input,117,FOLLOW_117_in_simple_expression_value3028); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal329);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3031);
                    name330=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name330.getTree());

                    char_literal331=(Token)match(input,171,FOLLOW_171_in_simple_expression_value3033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(char_literal331);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value3035);
                    element_value332=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value332.getTree());

                    char_literal333=(Token)match(input,173,FOLLOW_173_in_simple_expression_value3037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(char_literal333);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set334=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==121 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set334)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3071);
                    name335=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name335.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:4: string
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_in_simple_expression_value3076);
                    string336=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string336.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:4: string_objc
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_objc_in_simple_expression_value3081);
                    string_objc337=string_objc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_objc337.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL338=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL338);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 513:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL339=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL339);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 514:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:515:4: bool
                    {
                    pushFollow(FOLLOW_bool_in_simple_expression_value3112);
                    bool340=bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bool.add(bool340.getTree());

                    // AST REWRITE
                    // elements: bool
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 515:9: -> ^( BOOL bool )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:515:12: ^( BOOL bool )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, stream_bool.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3126);
                    name341=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name341.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:1: simple_expression_value2 : ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal345=null;
        Token char_literal347=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper342 =null;

        ObjcParser.simple_expression_value_return simple_expression_value343 =null;

        ObjcParser.method_msg_return method_msg344 =null;

        ObjcParser.element_value_return element_value346 =null;


        Object char_literal345_tree=null;
        Object char_literal347_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:3: ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt67=4;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==174) && (synpred17_Objc())) {
                alt67=1;
            }
            else if ( (LA67_0==175) && (synpred17_Objc())) {
                alt67=1;
            }
            else if ( (LA67_0==CHAR_LITERAL||LA67_0==ID||LA67_0==NUMBER_LITERAL||LA67_0==STRING_LITERAL||LA67_0==117||LA67_0==121||LA67_0==147||LA67_0==168||LA67_0==170||LA67_0==185||LA67_0==198) ) {
                alt67=2;
            }
            else if ( (LA67_0==171) ) {
                alt67=3;
            }
            else if ( (LA67_0==119) ) {
                alt67=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value23144);
                    block_call_wrapper342=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper342.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23150);
                    simple_expression_value343=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value343.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23156);
                    method_msg344=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg344.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal345=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal345_tree = 
                    (Object)adaptor.create(char_literal345)
                    ;
                    adaptor.addChild(root_0, char_literal345_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23164);
                    element_value346=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value346.getTree());

                    char_literal347=(Token)match(input,120,FOLLOW_120_in_simple_expression_value23166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal347_tree = 
                    (Object)adaptor.create(char_literal347)
                    ;
                    adaptor.addChild(root_0, char_literal347_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:526:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2348 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3180);
            op2348=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2348.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set349=null;

        Object set349_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set349=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 117)||input.LA(1)==121||input.LA(1)==123||input.LA(1)==127||input.LA(1)==132||(input.LA(1) >= 136 && input.LA(1) <= 137)||(input.LA(1) >= 139 && input.LA(1) <= 144)||input.LA(1)==174||input.LA(1)==205||input.LA(1)==207 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set349)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:532:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign350 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3285);
            op_assign350=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign350.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set351=null;

        Object set351_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set351=(Token)input.LT(1);

            if ( input.LA(1)==118||input.LA(1)==122||input.LA(1)==125||input.LA(1)==129||input.LA(1)==133||input.LA(1)==138||input.LA(1)==140||input.LA(1)==145||input.LA(1)==206 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set351)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector352 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3353);
            selector352=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector352.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal353=null;

        Object string_literal353_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal353=(Token)match(input,162,FOLLOW_162_in_selector3376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal353_tree = 
            (Object)adaptor.create(string_literal353)
            ;
            adaptor.addChild(root_0, string_literal353_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name354 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3391);
            type_cast_name354=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name354.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal355=null;
        Token char_literal357=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration356 =null;


        Object char_literal355_tree=null;
        Object char_literal357_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal355=(Token)match(input,119,FOLLOW_119_in_type_cast_name3414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal355_tree = 
            (Object)adaptor.create(char_literal355)
            ;
            adaptor.addChild(root_0, char_literal355_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3416);
            type_cast_declaration356=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration356.getTree());

            char_literal357=(Token)match(input,120,FOLLOW_120_in_type_cast_name3418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal357_tree = 
            (Object)adaptor.create(char_literal357)
            ;
            adaptor.addChild(root_0, char_literal357_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol358 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration359 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==188) ) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==136) ) {
                    switch ( input.LA(3) ) {
                    case 191:
                        {
                        int LA68_19 = input.LA(4);

                        if ( (LA68_19==142) ) {
                            int LA68_24 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 188:
                        {
                        int LA68_20 = input.LA(4);

                        if ( (LA68_20==142) ) {
                            int LA68_25 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 192:
                        {
                        switch ( input.LA(4) ) {
                        case 191:
                            {
                            int LA68_26 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 142:
                            {
                            int LA68_27 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 192:
                            {
                            int LA68_28 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 194:
                        {
                        switch ( input.LA(4) ) {
                        case 191:
                            {
                            int LA68_29 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 142:
                            {
                            int LA68_30 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 194:
                            {
                            int LA68_31 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA68_23 = input.LA(4);

                        if ( (LA68_23==142) ) {
                            int LA68_32 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 32, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 23, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA68_1==117||(LA68_1 >= 120 && LA68_1 <= 121)||LA68_1==171||LA68_1==178) ) {
                    alt68=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA68_0==ID||LA68_0==119||LA68_0==178||LA68_0==183||(LA68_0 >= 191 && LA68_0 <= 192)||LA68_0==194||LA68_0==196||(LA68_0 >= 200 && LA68_0 <= 202)) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3436);
                    type_declaration_protocol358=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol358.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3442);
                    classical_type_declaration359=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration359.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set360=null;

        Object set360_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set360=(Token)input.LT(1);

            if ( (input.LA(1) >= 130 && input.LA(1) <= 131) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set360)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access361 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3470);
            access361=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access361.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple362 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3489);
            object_access_simple362=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple362.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name363 =null;

        ObjcParser.access_wrapper_return access_wrapper364 =null;

        ObjcParser.name_return name365 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3510);
            name363=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name363.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:10: ( access_wrapper name )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( ((LA69_0 >= 130 && LA69_0 <= 131)) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3513);
            	    access_wrapper364=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper364.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3515);
            	    name365=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name365.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access366 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3532);
            object_access366=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access366.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue367 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:583:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:583:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3552);
            cast_lvalue367=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue367.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal370=null;
        Token char_literal373=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper368 =null;

        ObjcParser.lvalue_access_return lvalue_access369 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper371 =null;

        ObjcParser.lvalue_access_return lvalue_access372 =null;

        ObjcParser.access_wrapper_return access_wrapper374 =null;

        ObjcParser.name_return name375 =null;

        ObjcParser.lvalue_access_return lvalue_access376 =null;


        Object char_literal370_tree=null;
        Object char_literal373_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt71=3;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3570);
                    type_cast_wrapper368=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper368.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3572);
                    lvalue_access369=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access369.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal370=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal370_tree = 
                    (Object)adaptor.create(char_literal370)
                    ;
                    adaptor.addChild(root_0, char_literal370_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3587);
                    type_cast_wrapper371=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper371.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3589);
                    lvalue_access372=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access372.getTree());

                    char_literal373=(Token)match(input,120,FOLLOW_120_in_cast_lvalue3591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal373_tree = 
                    (Object)adaptor.create(char_literal373)
                    ;
                    adaptor.addChild(root_0, char_literal373_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:71: ( access_wrapper name )+
                    int cnt70=0;
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);

                        if ( ((LA70_0 >= 130 && LA70_0 <= 131)) ) {
                            alt70=1;
                        }


                        switch (alt70) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3594);
                    	    access_wrapper374=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper374.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3596);
                    	    name375=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name375.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt70 >= 1 ) break loop70;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(70, input);
                                throw eee;
                        }
                        cnt70++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:589:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3604);
                    lvalue_access376=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access376.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:592:1: lvalue_access : ( lvalue ( access_wrapper name )* | '(' lvalue ')' ( access_wrapper name )* );
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal380=null;
        Token char_literal382=null;
        ObjcParser.lvalue_return lvalue377 =null;

        ObjcParser.access_wrapper_return access_wrapper378 =null;

        ObjcParser.name_return name379 =null;

        ObjcParser.lvalue_return lvalue381 =null;

        ObjcParser.access_wrapper_return access_wrapper383 =null;

        ObjcParser.name_return name384 =null;


        Object char_literal380_tree=null;
        Object char_literal382_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:3: ( lvalue ( access_wrapper name )* | '(' lvalue ')' ( access_wrapper name )* )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID||LA74_0==117||LA74_0==121) ) {
                alt74=1;
            }
            else if ( (LA74_0==119) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:5: lvalue ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_in_lvalue_access3617);
                    lvalue377=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue377.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:12: ( access_wrapper name )*
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);

                        if ( ((LA72_0 >= 130 && LA72_0 <= 131)) ) {
                            alt72=1;
                        }


                        switch (alt72) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:13: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3620);
                    	    access_wrapper378=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper378.getTree());

                    	    pushFollow(FOLLOW_name_in_lvalue_access3622);
                    	    name379=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name379.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop72;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: '(' lvalue ')' ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal380=(Token)match(input,119,FOLLOW_119_in_lvalue_access3630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal380_tree = 
                    (Object)adaptor.create(char_literal380)
                    ;
                    adaptor.addChild(root_0, char_literal380_tree);
                    }

                    pushFollow(FOLLOW_lvalue_in_lvalue_access3632);
                    lvalue381=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue381.getTree());

                    char_literal382=(Token)match(input,120,FOLLOW_120_in_lvalue_access3634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal382_tree = 
                    (Object)adaptor.create(char_literal382)
                    ;
                    adaptor.addChild(root_0, char_literal382_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:20: ( access_wrapper name )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( ((LA73_0 >= 130 && LA73_0 <= 131)) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:21: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3637);
                    	    access_wrapper383=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper383.getTree());

                    	    pushFollow(FOLLOW_name_in_lvalue_access3639);
                    	    name384=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name384.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:597:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal385=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token set390=null;
        ObjcParser.name_return name386 =null;

        ObjcParser.element_value_return element_value388 =null;

        ObjcParser.name_return name391 =null;

        ObjcParser.name_return name392 =null;


        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object set390_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt76=3;
            switch ( input.LA(1) ) {
            case 117:
                {
                int LA76_1 = input.LA(2);

                if ( (LA76_1==ID) ) {
                    int LA76_4 = input.LA(3);

                    if ( (LA76_4==171) && (synpred21_Objc())) {
                        alt76=1;
                    }
                    else if ( (LA76_4==EOF||LA76_4==118||LA76_4==120||LA76_4==122||(LA76_4 >= 124 && LA76_4 <= 125)||(LA76_4 >= 128 && LA76_4 <= 131)||LA76_4==133||LA76_4==138||LA76_4==140||LA76_4==145||LA76_4==206) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA76_2 = input.LA(2);

                if ( (LA76_2==171) && (synpred21_Objc())) {
                    alt76=1;
                }
                else if ( (LA76_2==EOF||LA76_2==118||LA76_2==120||LA76_2==122||(LA76_2 >= 124 && LA76_2 <= 125)||(LA76_2 >= 128 && LA76_2 <= 131)||LA76_2==133||LA76_2==138||LA76_2==140||LA76_2==145||LA76_2==206) ) {
                    alt76=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 2, input);

                    throw nvae;

                }
                }
                break;
            case 121:
                {
                alt76=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }

            switch (alt76) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:23: ( '&' )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==117) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:23: '&'
                            {
                            char_literal385=(Token)match(input,117,FOLLOW_117_in_lvalue3666); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal385);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3669);
                    name386=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name386.getTree());

                    char_literal387=(Token)match(input,171,FOLLOW_171_in_lvalue3671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(char_literal387);


                    pushFollow(FOLLOW_element_value_in_lvalue3673);
                    element_value388=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value388.getTree());

                    char_literal389=(Token)match(input,173,FOLLOW_173_in_lvalue3675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(char_literal389);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 598:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set390=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==121 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set390)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3697);
                    name391=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name391.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:600:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3703);
                    name392=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name392.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal393=null;

        Object string_literal393_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:5: 'break'
            {
            string_literal393=(Token)match(input,176,FOLLOW_176_in_break_stmt3719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal393);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal394=null;

        Object string_literal394_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:5: 'continue'
            {
            string_literal394=(Token)match(input,179,FOLLOW_179_in_continue_stmt3740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal394);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration395 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3766);
            extern_declaration395=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration395.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal396=null;
        ObjcParser.field_declaration_return field_declaration397 =null;


        Object string_literal396_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal396=(Token)match(input,184,FOLLOW_184_in_extern_declaration3787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal396_tree = 
            (Object)adaptor.create(string_literal396)
            ;
            adaptor.addChild(root_0, string_literal396_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3789);
            field_declaration397=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration397.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:621:1: optional_prefix : ( '@optional' | '@required' );
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set398=null;

        Object set398_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:622:3: ( '@optional' | '@required' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set398=(Token)input.LT(1);

            if ( input.LA(1)==155||input.LA(1)==161 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set398)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix399 =null;

        ObjcParser.method_declaration_return method_declaration400 =null;

        ObjcParser.property_prefix_return property_prefix401 =null;

        ObjcParser.optional_prefix_return optional_prefix402 =null;

        ObjcParser.field_declaration_return field_declaration403 =null;

        ObjcParser.comments_return comments404 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt79=3;
            switch ( input.LA(1) ) {
            case 123:
            case 127:
            case 155:
            case 161:
                {
                alt79=1;
                }
                break;
            case 157:
                {
                alt79=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt79=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: ( optional_prefix )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==155||LA77_0==161) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3815);
                            optional_prefix399=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix399.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3818);
                    method_declaration400=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration400.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 625:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3832);
                    property_prefix401=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix401.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:21: ( optional_prefix )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==155||LA78_0==161) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3834);
                            optional_prefix402=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix402.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3837);
                    field_declaration403=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration403.getTree());

                    // AST REWRITE
                    // elements: property_prefix, field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 626:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3853);
                    comments404=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments404.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration405 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3868);
            field_declaration405=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration405.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal406=null;

        Object string_literal406_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal406=(Token)match(input,169,FOLLOW_169_in_ns_inline3890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = 
            (Object)adaptor.create(string_literal406)
            ;
            adaptor.addChild(root_0, string_literal406_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:636:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal407=null;
        Token char_literal408=null;
        Token char_literal410=null;
        Token char_literal412=null;
        Token char_literal414=null;
        Token char_literal416=null;
        Token char_literal417=null;
        ObjcParser.name_return name409 =null;

        ObjcParser.name_return name411 =null;

        ObjcParser.name_return name413 =null;

        ObjcParser.name_return name415 =null;


        Object string_literal407_tree=null;
        Object char_literal408_tree=null;
        Object char_literal410_tree=null;
        Object char_literal412_tree=null;
        Object char_literal414_tree=null;
        Object char_literal416_tree=null;
        Object char_literal417_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal407=(Token)match(input,157,FOLLOW_157_in_property_prefix3902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal407_tree = 
            (Object)adaptor.create(string_literal407)
            ;
            adaptor.addChild(root_0, string_literal407_tree);
            }

            char_literal408=(Token)match(input,119,FOLLOW_119_in_property_prefix3904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal408_tree = 
            (Object)adaptor.create(char_literal408)
            ;
            adaptor.addChild(root_0, char_literal408_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3906);
            name409=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name409.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:26: ( '=' name )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==140) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:27: '=' name
                    {
                    char_literal410=(Token)match(input,140,FOLLOW_140_in_property_prefix3909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal410_tree = 
                    (Object)adaptor.create(char_literal410)
                    ;
                    adaptor.addChild(root_0, char_literal410_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3911);
                    name411=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name411.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==126) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal412=(Token)match(input,126,FOLLOW_126_in_property_prefix3916); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal412_tree = 
            	    (Object)adaptor.create(char_literal412)
            	    ;
            	    adaptor.addChild(root_0, char_literal412_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3918);
            	    name413=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name413.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:48: ( '=' name ( ':' )? )?
            	    int alt82=2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0==140) ) {
            	        alt82=1;
            	    }
            	    switch (alt82) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:49: '=' name ( ':' )?
            	            {
            	            char_literal414=(Token)match(input,140,FOLLOW_140_in_property_prefix3921); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal414_tree = 
            	            (Object)adaptor.create(char_literal414)
            	            ;
            	            adaptor.addChild(root_0, char_literal414_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3923);
            	            name415=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name415.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:58: ( ':' )?
            	            int alt81=2;
            	            int LA81_0 = input.LA(1);

            	            if ( (LA81_0==134) ) {
            	                alt81=1;
            	            }
            	            switch (alt81) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:58: ':'
            	                    {
            	                    char_literal416=(Token)match(input,134,FOLLOW_134_in_property_prefix3925); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal416_tree = 
            	                    (Object)adaptor.create(char_literal416)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal416_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            char_literal417=(Token)match(input,120,FOLLOW_120_in_property_prefix3932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal417_tree = 
            (Object)adaptor.create(char_literal417)
            ;
            adaptor.addChild(root_0, char_literal417_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration418 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3945);
            interface_declaration418=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration418.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration419 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3965);
            protocol_declaration419=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration419.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal420=null;
        ObjcParser.typedef_declaration_return typedef_declaration421 =null;


        Object string_literal420_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:5: 'typedef' typedef_declaration
            {
            string_literal420=(Token)match(input,199,FOLLOW_199_in_typedef_declaration_wrapper3983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_199.add(string_literal420);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3985);
            typedef_declaration421=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration421.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class type_declaration_struct_enum_union_anonymous_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_enum_union_anonymous"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:1: type_declaration_struct_enum_union_anonymous : ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full );
    public final ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous() throws RecognitionException {
        ObjcParser.type_declaration_struct_enum_union_anonymous_return retval = new ObjcParser.type_declaration_struct_enum_union_anonymous_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full422 =null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full423 =null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full424 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:3: ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full )
            int alt84=3;
            switch ( input.LA(1) ) {
            case 196:
                {
                alt84=1;
                }
                break;
            case 183:
                {
                alt84=2;
                }
                break;
            case 200:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }

            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:5: type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4006);
                    type_declaration_struct_full422=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full422.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:5: type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4012);
                    type_declaration_enum_full423=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full423.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:5: type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4018);
                    type_declaration_union_full424=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_enum_union_anonymous"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal427=null;
        Token char_literal429=null;
        ObjcParser.typedef_internal_return typedef_internal425 =null;

        ObjcParser.typedef_name_return typedef_name426 =null;

        ObjcParser.typedef_name_return typedef_name428 =null;


        Object char_literal427_tree=null;
        Object char_literal429_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration4033);
            typedef_internal425=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal425.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration4035);
            typedef_name426=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name426.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:35: ( ',' typedef_name )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==126) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:36: ',' typedef_name
            	    {
            	    char_literal427=(Token)match(input,126,FOLLOW_126_in_typedef_declaration4038); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal427_tree = 
            	    (Object)adaptor.create(char_literal427)
            	    ;
            	    adaptor.addChild(root_0, char_literal427_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4040);
            	    typedef_name428=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name428.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            char_literal429=(Token)match(input,135,FOLLOW_135_in_typedef_declaration4044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal429_tree = 
            (Object)adaptor.create(char_literal429)
            ;
            adaptor.addChild(root_0, char_literal429_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal430=null;
        Token char_literal431=null;
        Token char_literal433=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane432 =null;


        Object char_literal430_tree=null;
        Object char_literal431_tree=null;
        Object char_literal433_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal430=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate4056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal430_tree = 
            (Object)adaptor.create(char_literal430)
            ;
            adaptor.addChild(root_0, char_literal430_tree);
            }

            char_literal431=(Token)match(input,121,FOLLOW_121_in_func_pointer_predicate4058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal431_tree = 
            (Object)adaptor.create(char_literal431)
            ;
            adaptor.addChild(root_0, char_literal431_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate4060);
            type_declaration_plane432=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane432.getTree());

            char_literal433=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate4062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal433_tree = 
            (Object)adaptor.create(char_literal433)
            ;
            adaptor.addChild(root_0, char_literal433_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal434=null;
        Token char_literal435=null;
        Token char_literal437=null;
        Token char_literal438=null;
        Token char_literal440=null;
        Token char_literal442=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane436 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane439 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane441 =null;


        Object char_literal434_tree=null;
        Object char_literal435_tree=null;
        Object char_literal437_tree=null;
        Object char_literal438_tree=null;
        Object char_literal440_tree=null;
        Object char_literal442_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal434=(Token)match(input,119,FOLLOW_119_in_func_pointer4077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal434);


            char_literal435=(Token)match(input,121,FOLLOW_121_in_func_pointer4079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal435);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4081);
            type_declaration_plane436=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane436.getTree());

            char_literal437=(Token)match(input,120,FOLLOW_120_in_func_pointer4083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal437);


            char_literal438=(Token)match(input,119,FOLLOW_119_in_func_pointer4085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal438);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ID||LA87_0==178||LA87_0==188||(LA87_0 >= 191 && LA87_0 <= 192)||LA87_0==194||(LA87_0 >= 201 && LA87_0 <= 202)) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4088);
                    type_declaration_plane439=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane439.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:68: ( ',' type_declaration_plane )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==126) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:69: ',' type_declaration_plane
                    	    {
                    	    char_literal440=(Token)match(input,126,FOLLOW_126_in_func_pointer4091); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_126.add(char_literal440);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4093);
                    	    type_declaration_plane441=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane441.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal442=(Token)match(input,120,FOLLOW_120_in_func_pointer4099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal442);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer443 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct444 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum445 =null;

        ObjcParser.type_declaration_union_return type_declaration_union446 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane447 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt88=5;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==119) && (synpred22_Objc())) {
                alt88=1;
            }
            else if ( (LA88_0==196) ) {
                alt88=2;
            }
            else if ( (LA88_0==183) ) {
                alt88=3;
            }
            else if ( (LA88_0==200) ) {
                alt88=4;
            }
            else if ( (LA88_0==ID||LA88_0==178||LA88_0==188||(LA88_0 >= 191 && LA88_0 <= 192)||LA88_0==194||(LA88_0 >= 201 && LA88_0 <= 202)) ) {
                alt88=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4128);
                    func_pointer443=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer443.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4134);
                    type_declaration_struct444=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct444.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4140);
                    type_declaration_enum445=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum445.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4146);
                    type_declaration_union446=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union446.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4152);
                    type_declaration_plane447=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane447.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID448=null;

        Object ID448_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:5: ID
            {
            ID448=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID448);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 683:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:685:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal449=null;
        Token char_literal451=null;
        Token string_literal452=null;
        Token char_literal454=null;
        Token char_literal456=null;
        Token char_literal458=null;
        Token char_literal460=null;
        ObjcParser.class_name_return class_name450 =null;

        ObjcParser.protocol_name_return protocol_name453 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple455 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple457 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple459 =null;


        Object string_literal449_tree=null;
        Object char_literal451_tree=null;
        Object string_literal452_tree=null;
        Object char_literal454_tree=null;
        Object char_literal456_tree=null;
        Object char_literal458_tree=null;
        Object char_literal460_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt89=5;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt89=1;
                }
                break;
            case 159:
                {
                alt89=2;
                }
                break;
            case 196:
                {
                alt89=3;
                }
                break;
            case 200:
                {
                alt89=4;
                }
                break;
            case 183:
                {
                alt89=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:5: '@class' class_name ';'
                    {
                    string_literal449=(Token)match(input,149,FOLLOW_149_in_forward_class_declaration4185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_149.add(string_literal449);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4187);
                    class_name450=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name450.getTree());

                    char_literal451=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal451);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 686:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: '@protocol' protocol_name ';'
                    {
                    string_literal452=(Token)match(input,159,FOLLOW_159_in_forward_class_declaration4202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(string_literal452);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4204);
                    protocol_name453=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name453.getTree());

                    char_literal454=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal454);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 687:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4219);
                    type_declaration_struct_simple455=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple455.getTree());

                    char_literal456=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal456);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 688:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4234);
                    type_declaration_union_simple457=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple457.getTree());

                    char_literal458=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal458);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 689:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4249);
                    type_declaration_enum_simple459=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple459.getTree());

                    char_literal460=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal460);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 690:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID461=null;

        Object ID461_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:5: ID
            {
            ID461=(Token)match(input,ID,FOLLOW_ID_in_class_name4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID461);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 694:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal462=null;
        ObjcParser.protocol_name_return protocol_name463 =null;

        ObjcParser.implements_interfaces_return implements_interfaces464 =null;

        ObjcParser.class_protocol_end_return class_protocol_end465 =null;


        Object string_literal462_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal462=(Token)match(input,159,FOLLOW_159_in_protocol_declaration4291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = 
            (Object)adaptor.create(string_literal462)
            ;
            adaptor.addChild(root_0, string_literal462_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4293);
            protocol_name463=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name463.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:31: ( implements_interfaces )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==136) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4295);
                    implements_interfaces464=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces464.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4303);
            class_protocol_end465=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end465.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal467=null;
        ObjcParser.declarations_return declarations466 =null;


        Object string_literal467_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:5: ( declarations )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==MULTI_COMMENT_LIT||LA91_0==SINGLE_COMMENT_LIT||LA91_0==123||LA91_0==127||LA91_0==155||LA91_0==157||LA91_0==161) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4317);
            	    declarations466=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations466.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            string_literal467=(Token)match(input,151,FOLLOW_151_in_class_protocol_end4324); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal468=null;
        Token char_literal470=null;
        ObjcParser.template_internal_return template_internal469 =null;


        Object char_literal468_tree=null;
        Object char_literal470_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal468=(Token)match(input,136,FOLLOW_136_in_template4336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal468_tree = 
            (Object)adaptor.create(char_literal468)
            ;
            adaptor.addChild(root_0, char_literal468_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4338);
            template_internal469=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal469.getTree());

            char_literal470=(Token)match(input,142,FOLLOW_142_in_template4340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal470_tree = 
            (Object)adaptor.create(char_literal470)
            ;
            adaptor.addChild(root_0, char_literal470_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:708:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols471 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4349);
            implements_protocols471=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols471.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal472=null;
        Token char_literal474=null;
        Token char_literal476=null;
        ObjcParser.type_dec_internal_return type_dec_internal473 =null;

        ObjcParser.type_dec_internal_return type_dec_internal475 =null;


        Object char_literal472_tree=null;
        Object char_literal474_tree=null;
        Object char_literal476_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal472=(Token)match(input,136,FOLLOW_136_in_implements_protocols4374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal472);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4376);
            type_dec_internal473=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal473.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:27: ( ',' type_dec_internal )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==126) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:28: ',' type_dec_internal
            	    {
            	    char_literal474=(Token)match(input,126,FOLLOW_126_in_implements_protocols4379); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal474);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4381);
            	    type_dec_internal475=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal475.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            char_literal476=(Token)match(input,142,FOLLOW_142_in_implements_protocols4385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(char_literal476);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 713:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:716:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal478=null;
        ObjcParser.template_type_return template_type477 =null;

        ObjcParser.template_type_return template_type479 =null;


        Object char_literal478_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4407);
            template_type477=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type477.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:19: ( ',' template_type )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==126) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:20: ',' template_type
            	    {
            	    char_literal478=(Token)match(input,126,FOLLOW_126_in_template_internal4410); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal478_tree = 
            	    (Object)adaptor.create(char_literal478)
            	    ;
            	    adaptor.addChild(root_0, char_literal478_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4412);
            	    template_type479=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type479.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal481=null;
        ObjcParser.template_name_return template_name480 =null;

        ObjcParser.template_name_return template_name482 =null;


        Object string_literal481_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:3: ( template_name | 'struct' template_name )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ID) ) {
                alt94=1;
            }
            else if ( (LA94_0==196) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4426);
                    template_name480=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name480.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal481=(Token)match(input,196,FOLLOW_196_in_template_type4432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal481_tree = 
                    (Object)adaptor.create(string_literal481)
                    ;
                    adaptor.addChild(root_0, string_literal481_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4434);
                    template_name482=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name482.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID483=null;

        Object ID483_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: ID
            {
            ID483=(Token)match(input,ID,FOLLOW_ID_in_template_name4449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID483);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 725:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID484=null;

        Object ID484_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: ID
            {
            ID484=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID484);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 729:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal485=null;
        Token string_literal490=null;
        ObjcParser.interface_name_return interface_name486 =null;

        ObjcParser.superclass_name_return superclass_name487 =null;

        ObjcParser.fields_body_return fields_body488 =null;

        ObjcParser.declarations_return declarations489 =null;


        Object string_literal485_tree=null;
        Object string_literal490_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal485=(Token)match(input,154,FOLLOW_154_in_interface_declaration4496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal485_tree = 
            (Object)adaptor.create(string_literal485)
            ;
            adaptor.addChild(root_0, string_literal485_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4498);
            interface_name486=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name486.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4500);
            superclass_name487=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name487.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:3: ( fields_body )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==204) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4504);
                    fields_body488=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body488.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:3: ( declarations )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==MULTI_COMMENT_LIT||LA96_0==SINGLE_COMMENT_LIT||LA96_0==123||LA96_0==127||LA96_0==155||LA96_0==157||LA96_0==161) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4509);
            	    declarations489=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations489.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            string_literal490=(Token)match(input,151,FOLLOW_151_in_interface_declaration4514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = 
            (Object)adaptor.create(string_literal490)
            ;
            adaptor.addChild(root_0, string_literal490_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal491=null;
        Token char_literal493=null;
        ObjcParser.body_item_return body_item492 =null;


        Object char_literal491_tree=null;
        Object char_literal493_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal491=(Token)match(input,204,FOLLOW_204_in_fields_body4531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal491_tree = 
            (Object)adaptor.create(char_literal491)
            ;
            adaptor.addChild(root_0, char_literal491_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: ( body_item )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==ID||LA97_0==MULTI_COMMENT_LIT||LA97_0==SINGLE_COMMENT_LIT||LA97_0==119||LA97_0==156||LA97_0==158||LA97_0==160||LA97_0==167||LA97_0==178||LA97_0==183||LA97_0==188||(LA97_0 >= 191 && LA97_0 <= 192)||LA97_0==194||LA97_0==196||(LA97_0 >= 199 && LA97_0 <= 202)) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4537);
            	    body_item492=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item492.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            char_literal493=(Token)match(input,208,FOLLOW_208_in_fields_body4542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal493_tree = 
            (Object)adaptor.create(char_literal493)
            ;
            adaptor.addChild(root_0, char_literal493_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper494 =null;

        ObjcParser.field_modifiers_return field_modifiers495 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper496 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper497 =null;

        ObjcParser.comments_return comments498 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==ID||LA101_0==119||LA101_0==156||LA101_0==158||LA101_0==160||LA101_0==167||LA101_0==178||LA101_0==183||LA101_0==188||(LA101_0 >= 191 && LA101_0 <= 192)||LA101_0==194||LA101_0==196||(LA101_0 >= 199 && LA101_0 <= 202)) ) {
                alt101=1;
            }
            else if ( (LA101_0==MULTI_COMMENT_LIT||LA101_0==SINGLE_COMMENT_LIT) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:5: ( group_modifier_wrapper )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==156||LA98_0==158||LA98_0==160) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4557);
                            group_modifier_wrapper494=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper494.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:29: ( field_modifiers )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==167) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4560);
                            field_modifiers495=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers495.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==199) ) {
                        alt100=1;
                    }
                    else if ( (LA100_0==ID||LA100_0==119||LA100_0==178||LA100_0==183||LA100_0==188||(LA100_0 >= 191 && LA100_0 <= 192)||LA100_0==194||LA100_0==196||(LA100_0 >= 200 && LA100_0 <= 202)) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;

                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4564);
                            typedef_declaration_wrapper496=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper496.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4568);
                            field_declaration_wrapper497=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper497.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4575);
                    comments498=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier499 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4588);
            group_modifier499=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier499.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set500=null;

        Object set500_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:754:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set500=(Token)input.LT(1);

            if ( input.LA(1)==156||input.LA(1)==158||input.LA(1)==160 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set500)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal501=null;

        Object string_literal501_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal501=(Token)match(input,167,FOLLOW_167_in_field_modifiers4633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal501_tree = 
            (Object)adaptor.create(string_literal501)
            ;
            adaptor.addChild(root_0, string_literal501_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID502=null;
        ObjcParser.category_return category503 =null;


        Object ID502_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:5: ID ( category )?
            {
            ID502=(Token)match(input,ID,FOLLOW_ID_in_interface_name4648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID502);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:8: ( category )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==119) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4650);
                    category503=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category503.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: category, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 761:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal504=null;
        Token ID505=null;
        Token char_literal506=null;

        Object char_literal504_tree=null;
        Object ID505_tree=null;
        Object char_literal506_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:11: '(' ( ID )? ')'
            {
            char_literal504=(Token)match(input,119,FOLLOW_119_in_category4669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal504);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:15: ( ID )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==ID) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:15: ID
                    {
                    ID505=(Token)match(input,ID,FOLLOW_ID_in_category4671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID505);


                    }
                    break;

            }


            char_literal506=(Token)match(input,120,FOLLOW_120_in_category4674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal506);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 763:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:765:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal507=null;
        Token ID508=null;
        ObjcParser.implements_interfaces_return implements_interfaces509 =null;


        Object char_literal507_tree=null;
        Object ID508_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:5: ( ':' ID )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==134) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:6: ':' ID
                    {
                    char_literal507=(Token)match(input,134,FOLLOW_134_in_superclass_name4694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal507);


                    ID508=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID508);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:15: ( implements_interfaces )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==136) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4700);
                    implements_interfaces509=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces509.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, implements_interfaces
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 766:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration510 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: ( field_declaration )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==ID||LA106_0==119||LA106_0==178||LA106_0==183||LA106_0==188||(LA106_0 >= 191 && LA106_0 <= 192)||LA106_0==194||LA106_0==196||(LA106_0 >= 200 && LA106_0 <= 202)) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4729);
            	    field_declaration510=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration510.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 770:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal513=null;
        Token char_literal516=null;
        Token char_literal520=null;
        Token char_literal521=null;
        ObjcParser.type_declaration_return type_declaration511 =null;

        ObjcParser.field_name_return field_name512 =null;

        ObjcParser.field_name_return field_name514 =null;

        ObjcParser.classical_method_params_return classical_method_params515 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper517 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper518 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init519 =null;


        Object char_literal513_tree=null;
        Object char_literal516_tree=null;
        Object char_literal520_tree=null;
        Object char_literal521_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4753);
            type_declaration511=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration511.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4755);
            field_name512=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name512.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:36: ( ',' field_name )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==126) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:37: ',' field_name
            	    {
            	    char_literal513=(Token)match(input,126,FOLLOW_126_in_field_declaration4759); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal513_tree = 
            	    (Object)adaptor.create(char_literal513)
            	    ;
            	    adaptor.addChild(root_0, char_literal513_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4761);
            	    field_name514=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name514.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( ((LA110_0 >= 118 && LA110_0 <= 119)||LA110_0==122||LA110_0==125||LA110_0==129||LA110_0==133||LA110_0==138||LA110_0==140||LA110_0==145||LA110_0==206) ) {
                alt110=1;
            }
            else if ( (LA110_0==135) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==119) ) {
                        alt109=1;
                    }
                    else if ( (LA109_0==118||LA109_0==122||LA109_0==125||LA109_0==129||LA109_0==133||LA109_0==138||LA109_0==140||LA109_0==145||LA109_0==206) ) {
                        alt109=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;

                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4768);
                            classical_method_params515=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params515.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:81: ( ';' | block_multiline_wrapper )
                            int alt108=2;
                            int LA108_0 = input.LA(1);

                            if ( (LA108_0==135) ) {
                                alt108=1;
                            }
                            else if ( (LA108_0==204) ) {
                                alt108=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 108, 0, input);

                                throw nvae;

                            }
                            switch (alt108) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:82: ';'
                                    {
                                    char_literal516=(Token)match(input,135,FOLLOW_135_in_field_declaration4771); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal516_tree = 
                                    (Object)adaptor.create(char_literal516)
                                    ;
                                    adaptor.addChild(root_0, char_literal516_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4775);
                                    block_multiline_wrapper517=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper517.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4782);
                            op_assign_wrapper518=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper518.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4784);
                            element_value_or_array_init519=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init519.getTree());

                            char_literal520=(Token)match(input,135,FOLLOW_135_in_field_declaration4786); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal520_tree = 
                            (Object)adaptor.create(char_literal520)
                            ;
                            adaptor.addChild(root_0, char_literal520_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:171: ';'
                    {
                    char_literal521=(Token)match(input,135,FOLLOW_135_in_field_declaration4792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal521_tree = 
                    (Object)adaptor.create(char_literal521)
                    ;
                    adaptor.addChild(root_0, char_literal521_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration522 =null;

        ObjcParser.field_name_return field_name523 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4807);
            type_declaration522=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration522.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4809);
            field_name523=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name523.getTree());

            // AST REWRITE
            // elements: field_name, type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 777:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal524=null;
        Token char_literal526=null;
        Token char_literal528=null;
        ObjcParser.classical_param_return classical_param525 =null;

        ObjcParser.classical_param_return classical_param527 =null;


        Object char_literal524_tree=null;
        Object char_literal526_tree=null;
        Object char_literal528_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal524=(Token)match(input,119,FOLLOW_119_in_classical_method_params4834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal524);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:9: ( classical_param )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ID||LA111_0==119||LA111_0==178||LA111_0==183||LA111_0==188||(LA111_0 >= 191 && LA111_0 <= 192)||LA111_0==194||LA111_0==196||(LA111_0 >= 200 && LA111_0 <= 202)) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4836);
                    classical_param525=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param525.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:26: ( ',' classical_param )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==126) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:27: ',' classical_param
            	    {
            	    char_literal526=(Token)match(input,126,FOLLOW_126_in_classical_method_params4840); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal526);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4842);
            	    classical_param527=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param527.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            char_literal528=(Token)match(input,120,FOLLOW_120_in_classical_method_params4846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal528);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 781:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration529 =null;

        ObjcParser.param_name_return param_name530 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4871);
            classical_type_declaration529=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration529.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4873);
            param_name530=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name530.getTree());

            // AST REWRITE
            // elements: param_name, classical_type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 785:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal534=null;
        Token string_literal535=null;
        Token char_literal537=null;
        Token string_literal538=null;
        Token char_literal540=null;
        Token string_literal541=null;
        Token char_literal543=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol531 =null;

        ObjcParser.func_pointer_return func_pointer532 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane533 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper536 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper539 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper542 =null;


        Object char_literal534_tree=null;
        Object string_literal535_tree=null;
        Object char_literal537_tree=null;
        Object string_literal538_tree=null;
        Object char_literal540_tree=null;
        Object string_literal541_tree=null;
        Object char_literal543_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt117=6;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==188) ) {
                int LA117_1 = input.LA(2);

                if ( (LA117_1==136) && (synpred23_Objc())) {
                    alt117=1;
                }
                else if ( (LA117_1==ID||LA117_1==117||(LA117_1 >= 120 && LA117_1 <= 121)||LA117_1==171||LA117_1==178) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA117_0==119) && (synpred24_Objc())) {
                alt117=2;
            }
            else if ( (LA117_0==ID||LA117_0==178||(LA117_0 >= 191 && LA117_0 <= 192)||LA117_0==194||(LA117_0 >= 201 && LA117_0 <= 202)) ) {
                alt117=3;
            }
            else if ( (LA117_0==196) ) {
                alt117=4;
            }
            else if ( (LA117_0==200) ) {
                alt117=5;
            }
            else if ( (LA117_0==183) ) {
                alt117=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4902);
                    type_declaration_protocol531=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol531.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4913);
                    func_pointer532=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer532.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4919);
                    type_declaration_plane533=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane533.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:28: ( '&' )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==117) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:28: '&'
                            {
                            char_literal534=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration4921); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal534_tree = 
                            (Object)adaptor.create(char_literal534)
                            ;
                            adaptor.addChild(root_0, char_literal534_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal535=(Token)match(input,196,FOLLOW_196_in_classical_type_declaration4929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal535);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4931);
                    type_dec_wrapper536=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper536.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:32: ( '&' )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==117) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:32: '&'
                            {
                            char_literal537=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration4933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal537);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal538=(Token)match(input,200,FOLLOW_200_in_classical_type_declaration4950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal538);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4952);
                    type_dec_wrapper539=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper539.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:31: ( '&' )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==117) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:31: '&'
                            {
                            char_literal540=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration4954); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal540);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 793:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal541=(Token)match(input,183,FOLLOW_183_in_classical_type_declaration4971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(string_literal541);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4973);
                    type_dec_wrapper542=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper542.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:30: ( '&' )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==117) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:30: '&'
                            {
                            char_literal543=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration4975); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal543);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 794:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal547=null;
        Token char_literal548=null;
        Token char_literal550=null;
        Token char_literal552=null;
        Token char_literal554=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol544 =null;

        ObjcParser.func_pointer_return func_pointer545 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct546 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum549 =null;

        ObjcParser.type_declaration_union_return type_declaration_union551 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane553 =null;


        Object char_literal547_tree=null;
        Object char_literal548_tree=null;
        Object char_literal550_tree=null;
        Object char_literal552_tree=null;
        Object char_literal554_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt123=6;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==188) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==136) && (synpred25_Objc())) {
                    alt123=1;
                }
                else if ( (LA123_1==ID||LA123_1==117||(LA123_1 >= 120 && LA123_1 <= 121)||LA123_1==171||LA123_1==178) ) {
                    alt123=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA123_0==119) && (synpred26_Objc())) {
                alt123=2;
            }
            else if ( (LA123_0==196) ) {
                alt123=3;
            }
            else if ( (LA123_0==183) ) {
                alt123=4;
            }
            else if ( (LA123_0==200) ) {
                alt123=5;
            }
            else if ( (LA123_0==ID||LA123_0==178||(LA123_0 >= 191 && LA123_0 <= 192)||LA123_0==194||(LA123_0 >= 201 && LA123_0 <= 202)) ) {
                alt123=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration5004);
                    type_declaration_protocol544=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol544.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration5015);
                    func_pointer545=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer545.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration5021);
                    type_declaration_struct546=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct546.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:29: ( '&' )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==117) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:29: '&'
                            {
                            char_literal547=(Token)match(input,117,FOLLOW_117_in_type_declaration5023); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal547_tree = 
                            (Object)adaptor.create(char_literal547)
                            ;
                            adaptor.addChild(root_0, char_literal547_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:33: ( '*' )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==121) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:33: '*'
                            {
                            char_literal548=(Token)match(input,121,FOLLOW_121_in_type_declaration5025); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal548_tree = 
                            (Object)adaptor.create(char_literal548)
                            ;
                            adaptor.addChild(root_0, char_literal548_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration5032);
                    type_declaration_enum549=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum549.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:27: ( '&' )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==117) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:27: '&'
                            {
                            char_literal550=(Token)match(input,117,FOLLOW_117_in_type_declaration5034); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal550_tree = 
                            (Object)adaptor.create(char_literal550)
                            ;
                            adaptor.addChild(root_0, char_literal550_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration5041);
                    type_declaration_union551=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union551.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:28: ( '&' )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==117) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:28: '&'
                            {
                            char_literal552=(Token)match(input,117,FOLLOW_117_in_type_declaration5043); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal552_tree = 
                            (Object)adaptor.create(char_literal552)
                            ;
                            adaptor.addChild(root_0, char_literal552_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration5050);
                    type_declaration_plane553=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane553.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:28: ( '&' )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==117) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:28: '&'
                            {
                            char_literal554=(Token)match(input,117,FOLLOW_117_in_type_declaration5052); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal554_tree = 
                            (Object)adaptor.create(char_literal554)
                            ;
                            adaptor.addChild(root_0, char_literal554_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:1: type_declaration_plane : ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal555=null;
        Token string_literal556=null;
        Token string_literal557=null;
        Token string_literal559=null;
        Token char_literal560=null;
        ObjcParser.type_dec_return type_dec558 =null;


        Object string_literal555_tree=null;
        Object string_literal556_tree=null;
        Object string_literal557_tree=null;
        Object string_literal559_tree=null;
        Object char_literal560_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:3: ( ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:5: ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:5: ( 'volatile' )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==202) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:5: 'volatile'
                    {
                    string_literal555=(Token)match(input,202,FOLLOW_202_in_type_declaration_plane5067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(string_literal555);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:17: ( 'const' )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==178) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:17: 'const'
                    {
                    string_literal556=(Token)match(input,178,FOLLOW_178_in_type_declaration_plane5070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal556);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:26: ( 'unsigned' )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==201) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:26: 'unsigned'
                    {
                    string_literal557=(Token)match(input,201,FOLLOW_201_in_type_declaration_plane5073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(string_literal557);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane5076);
            type_dec558=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec558.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:47: ( 'const' ( '*' )? )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==178) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:48: 'const' ( '*' )?
                    {
                    string_literal559=(Token)match(input,178,FOLLOW_178_in_type_declaration_plane5079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal559);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:56: ( '*' )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==121) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:56: '*'
                            {
                            char_literal560=(Token)match(input,121,FOLLOW_121_in_type_declaration_plane5081); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal560);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 178, type_dec, 202
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 807:63: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:66: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:79: ( 'volatile' )?
                if ( stream_202.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_202.nextNode()
                    );

                }
                stream_202.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:100: ( 'const' )?
                if ( stream_178.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_178.nextNode()
                    );

                }
                stream_178.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal561=null;
        Token char_literal562=null;

        Object string_literal561_tree=null;
        Object char_literal562_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:6: 'id' '<'
            {
            string_literal561=(Token)match(input,188,FOLLOW_188_in_type_decl_protocol_predicate5113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal561_tree = 
            (Object)adaptor.create(string_literal561)
            ;
            adaptor.addChild(root_0, string_literal561_tree);
            }

            char_literal562=(Token)match(input,136,FOLLOW_136_in_type_decl_protocol_predicate5115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal562_tree = 
            (Object)adaptor.create(char_literal562)
            ;
            adaptor.addChild(root_0, char_literal562_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal563=null;
        Token char_literal564=null;
        Token char_literal566=null;
        ObjcParser.type_dec_internal_return type_dec_internal565 =null;


        Object string_literal563_tree=null;
        Object char_literal564_tree=null;
        Object char_literal566_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:5: 'id' '<' type_dec_internal '>'
            {
            string_literal563=(Token)match(input,188,FOLLOW_188_in_type_declaration_protocol5131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal563);


            char_literal564=(Token)match(input,136,FOLLOW_136_in_type_declaration_protocol5133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal564);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5135);
            type_dec_internal565=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal565.getTree());

            char_literal566=(Token)match(input,142,FOLLOW_142_in_type_declaration_protocol5137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(char_literal566);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 815:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal567=null;
        ObjcParser.typedef_name_return typedef_name568 =null;


        Object string_literal567_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:819:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:819:5: 'struct' typedef_name
            {
            string_literal567=(Token)match(input,196,FOLLOW_196_in_type_declaration_struct_simple5159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal567);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5161);
            typedef_name568=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name568.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 819:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:819:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal569=null;
        ObjcParser.typedef_name_return typedef_name570 =null;


        Object string_literal569_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:5: 'union' typedef_name
            {
            string_literal569=(Token)match(input,200,FOLLOW_200_in_type_declaration_union_simple5181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(string_literal569);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5183);
            typedef_name570=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name570.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 823:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal571=null;
        ObjcParser.typedef_name_return typedef_name572 =null;


        Object string_literal571_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:5: 'enum' typedef_name
            {
            string_literal571=(Token)match(input,183,FOLLOW_183_in_type_declaration_enum_simple5207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal571);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5209);
            typedef_name572=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name572.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 827:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:1: type_declaration_struct_full : 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_struct_full_return type_declaration_struct_full() throws RecognitionException {
        ObjcParser.type_declaration_struct_full_return retval = new ObjcParser.type_declaration_struct_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal573=null;
        ObjcParser.typedef_name_return typedef_name574 =null;

        ObjcParser.struct_wrapper_return struct_wrapper575 =null;


        Object string_literal573_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:3: ( 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:5: 'struct' ( typedef_name )? struct_wrapper
            {
            string_literal573=(Token)match(input,196,FOLLOW_196_in_type_declaration_struct_full5229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal573);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:14: ( typedef_name )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ID) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:14: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_full5231);
                    typedef_name574=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name574.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct_full5234);
            struct_wrapper575=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper575.getTree());

            // AST REWRITE
            // elements: typedef_name, struct_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 831:43: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:45: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:58: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_full"


    public static class type_declaration_union_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:1: type_declaration_union_full : 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_union_full_return type_declaration_union_full() throws RecognitionException {
        ObjcParser.type_declaration_union_full_return retval = new ObjcParser.type_declaration_union_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal576=null;
        ObjcParser.typedef_name_return typedef_name577 =null;

        ObjcParser.struct_wrapper_return struct_wrapper578 =null;


        Object string_literal576_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:3: ( 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:5: 'union' ( typedef_name )? struct_wrapper
            {
            string_literal576=(Token)match(input,200,FOLLOW_200_in_type_declaration_union_full5258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(string_literal576);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:13: ( typedef_name )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ID) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:13: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union_full5260);
                    typedef_name577=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name577.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union_full5263);
            struct_wrapper578=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper578.getTree());

            // AST REWRITE
            // elements: struct_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 835:42: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:44: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:56: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_full"


    public static class type_declaration_enum_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:1: type_declaration_enum_full : 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) ;
    public final ObjcParser.type_declaration_enum_full_return type_declaration_enum_full() throws RecognitionException {
        ObjcParser.type_declaration_enum_full_return retval = new ObjcParser.type_declaration_enum_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal579=null;
        ObjcParser.typedef_name_return typedef_name580 =null;

        ObjcParser.enum_wrapper_return enum_wrapper581 =null;


        Object string_literal579_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:3: ( 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:5: 'enum' ( typedef_name )? enum_wrapper
            {
            string_literal579=(Token)match(input,183,FOLLOW_183_in_type_declaration_enum_full5287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal579);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:12: ( typedef_name )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ID) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:12: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_full5289);
                    typedef_name580=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name580.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum_full5292);
            enum_wrapper581=enum_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper581.getTree());

            // AST REWRITE
            // elements: typedef_name, enum_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 839:39: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:41: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:52: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_full"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full582 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple583 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:3: ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==196) ) {
                int LA132_1 = input.LA(2);

                if ( (LA132_1==ID) ) {
                    int LA132_2 = input.LA(3);

                    if ( (LA132_2==204) && (synpred27_Objc())) {
                        alt132=1;
                    }
                    else if ( (LA132_2==ID||LA132_2==117||(LA132_2 >= 120 && LA132_2 <= 121)) ) {
                        alt132=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA132_1==204) && (synpred27_Objc())) {
                    alt132=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct5327);
                    type_declaration_struct_full582=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full582.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5333);
                    type_declaration_struct_simple583=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full584 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple585 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:3: ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==200) ) {
                int LA133_1 = input.LA(2);

                if ( (LA133_1==ID) ) {
                    int LA133_2 = input.LA(3);

                    if ( (LA133_2==204) && (synpred28_Objc())) {
                        alt133=1;
                    }
                    else if ( (LA133_2==ID||LA133_2==117||LA133_2==120) ) {
                        alt133=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA133_1==204) && (synpred28_Objc())) {
                    alt133=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 133, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:5: ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_union5357);
                    type_declaration_union_full584=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full584.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:849:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5363);
                    type_declaration_union_simple585=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple585.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full586 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple587 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:3: ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==183) ) {
                int LA134_1 = input.LA(2);

                if ( (LA134_1==ID) ) {
                    int LA134_2 = input.LA(3);

                    if ( (LA134_2==204) && (synpred29_Objc())) {
                        alt134=1;
                    }
                    else if ( (LA134_2==ID||LA134_2==117||LA134_2==120) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA134_1==204) && (synpred29_Objc())) {
                    alt134=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:5: ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_enum5387);
                    type_declaration_enum_full586=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full586.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5393);
                    type_declaration_enum_simple587=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple587.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal588=null;
        Token char_literal590=null;
        ObjcParser.enum_element_return enum_element589 =null;


        Object char_literal588_tree=null;
        Object char_literal590_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal588=(Token)match(input,204,FOLLOW_204_in_enum_wrapper5406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal588_tree = 
            (Object)adaptor.create(char_literal588)
            ;
            adaptor.addChild(root_0, char_literal588_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:9: ( enum_element )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==ID||LA135_0==MULTI_COMMENT_LIT||LA135_0==SINGLE_COMMENT_LIT) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5416);
            	    enum_element589=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element589.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);


            char_literal590=(Token)match(input,208,FOLLOW_208_in_enum_wrapper5423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal590_tree = 
            (Object)adaptor.create(char_literal590)
            ;
            adaptor.addChild(root_0, char_literal590_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal594=null;
        ObjcParser.name_return name591 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper592 =null;

        ObjcParser.element_value_return element_value593 =null;

        ObjcParser.comments_return comments595 =null;


        Object char_literal594_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ID) ) {
                alt138=1;
            }
            else if ( (LA138_0==MULTI_COMMENT_LIT||LA138_0==SINGLE_COMMENT_LIT) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element5438);
                    name591=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name591.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:10: ( op_assign_wrapper element_value )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==118||LA136_0==122||LA136_0==125||LA136_0==129||LA136_0==133||LA136_0==138||LA136_0==140||LA136_0==145||LA136_0==206) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5441);
                            op_assign_wrapper592=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper592.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5443);
                            element_value593=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value593.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:45: ( ',' )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==126) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:45: ','
                            {
                            char_literal594=(Token)match(input,126,FOLLOW_126_in_enum_element5447); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal594);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: element_value, op_assign_wrapper, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 864:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:70: ( op_assign_wrapper element_value )?
                        if ( stream_element_value.hasNext()||stream_op_assign_wrapper.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_element_value.reset();
                        stream_op_assign_wrapper.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5468);
                    comments595=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments595.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct596 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5483);
            struct596=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct596.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 869:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal597=null;
        Token char_literal599=null;
        ObjcParser.struct_internal_return struct_internal598 =null;


        Object char_literal597_tree=null;
        Object char_literal599_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal597=(Token)match(input,204,FOLLOW_204_in_struct5501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal597_tree = 
            (Object)adaptor.create(char_literal597)
            ;
            adaptor.addChild(root_0, char_literal597_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:7: ( struct_internal )+
            int cnt139=0;
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==ID||LA139_0==MULTI_COMMENT_LIT||LA139_0==SINGLE_COMMENT_LIT||LA139_0==119||LA139_0==178||LA139_0==183||LA139_0==188||(LA139_0 >= 191 && LA139_0 <= 192)||LA139_0==194||LA139_0==196||(LA139_0 >= 200 && LA139_0 <= 202)) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5510);
            	    struct_internal598=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal598.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            char_literal599=(Token)match(input,208,FOLLOW_208_in_struct5517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal599_tree = 
            (Object)adaptor.create(char_literal599)
            ;
            adaptor.addChild(root_0, char_literal599_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:877:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper600 =null;

        ObjcParser.comments_return comments601 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:3: ( field_declaration_wrapper | comments )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==ID||LA140_0==119||LA140_0==178||LA140_0==183||LA140_0==188||(LA140_0 >= 191 && LA140_0 <= 192)||LA140_0==194||LA140_0==196||(LA140_0 >= 200 && LA140_0 <= 202)) ) {
                alt140=1;
            }
            else if ( (LA140_0==MULTI_COMMENT_LIT||LA140_0==SINGLE_COMMENT_LIT) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5531);
                    field_declaration_wrapper600=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper600.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5537);
                    comments601=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments601.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec602 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5552);
            type_dec602=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec602.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 883:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:1: type_dec : type_dec_internal ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal604=null;
        ObjcParser.type_dec_internal_return type_dec_internal603 =null;

        ObjcParser.array_size_return array_size605 =null;


        Object char_literal604_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:9: ( type_dec_internal ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:11: type_dec_internal ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5572);
            type_dec_internal603=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal603.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:29: ( '*' )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==121) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:29: '*'
            	    {
            	    char_literal604=(Token)match(input,121,FOLLOW_121_in_type_dec5574); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal604_tree = 
            	    (Object)adaptor.create(char_literal604)
            	    ;
            	    adaptor.addChild(root_0, char_literal604_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:34: ( array_size )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==171) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:35: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5578);
            	    array_size605=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size605.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID607=null;
        ObjcParser.knownTypes_return knownTypes606 =null;


        Object ID607_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:890:3: ( knownTypes | ID )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==188||(LA143_0 >= 191 && LA143_0 <= 192)||LA143_0==194) ) {
                alt143=1;
            }
            else if ( (LA143_0==ID) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:890:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5595);
                    knownTypes606=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes606.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID607=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID607_tree = 
                    (Object)adaptor.create(ID607)
                    ;
                    adaptor.addChild(root_0, ID607_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal608=null;
        Token string_literal609=null;
        Token string_literal610=null;
        Token string_literal611=null;
        Token string_literal612=null;
        Token string_literal613=null;

        Object string_literal608_tree=null;
        Object string_literal609_tree=null;
        Object string_literal610_tree=null;
        Object string_literal611_tree=null;
        Object string_literal612_tree=null;
        Object string_literal613_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt148=4;
            switch ( input.LA(1) ) {
            case 191:
                {
                alt148=1;
                }
                break;
            case 188:
                {
                alt148=2;
                }
                break;
            case 192:
                {
                alt148=3;
                }
                break;
            case 194:
                {
                alt148=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }

            switch (alt148) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal608=(Token)match(input,191,FOLLOW_191_in_knownTypes5617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal608_tree = 
                    (Object)adaptor.create(string_literal608)
                    ;
                    adaptor.addChild(root_0, string_literal608_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal609=(Token)match(input,188,FOLLOW_188_in_knownTypes5623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal609_tree = 
                    (Object)adaptor.create(string_literal609)
                    ;
                    adaptor.addChild(root_0, string_literal609_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: ( 'long' )+
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==192) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: 'long'
                    	    {
                    	    string_literal610=(Token)match(input,192,FOLLOW_192_in_knownTypes5629); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal610_tree = 
                    	    (Object)adaptor.create(string_literal610)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal610_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:13: ( 'int' )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==191) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:13: 'int'
                            {
                            string_literal611=(Token)match(input,191,FOLLOW_191_in_knownTypes5632); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal611_tree = 
                            (Object)adaptor.create(string_literal611)
                            ;
                            adaptor.addChild(root_0, string_literal611_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: ( 'short' )+
                    int cnt146=0;
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==194) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: 'short'
                    	    {
                    	    string_literal612=(Token)match(input,194,FOLLOW_194_in_knownTypes5639); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal612_tree = 
                    	    (Object)adaptor.create(string_literal612)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal612_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt146 >= 1 ) break loop146;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(146, input);
                                throw eee;
                        }
                        cnt146++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:14: ( 'int' )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==191) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:14: 'int'
                            {
                            string_literal613=(Token)match(input,191,FOLLOW_191_in_knownTypes5642); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal613_tree = 
                            (Object)adaptor.create(string_literal613)
                            ;
                            adaptor.addChild(root_0, string_literal613_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID614=null;
        ObjcParser.array_size_return array_size615 =null;

        ObjcParser.field_crap_return field_crap616 =null;


        Object ID614_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:5: ID ( array_size )* ( field_crap )?
            {
            ID614=(Token)match(input,ID,FOLLOW_ID_in_field_name5658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID614);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:8: ( array_size )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==171) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5660);
            	    array_size615=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size615.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:20: ( field_crap )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==134) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5664);
                    field_crap616=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap616.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 902:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal617=null;
        Token set618=null;
        Token char_literal619=null;

        Object char_literal617_tree=null;
        Object set618_tree=null;
        Object char_literal619_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:906:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:906:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal617=(Token)match(input,171,FOLLOW_171_in_array_size5695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal617_tree = 
            (Object)adaptor.create(char_literal617)
            ;
            adaptor.addChild(root_0, char_literal617_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:906:9: ( NUMBER_LITERAL | ID )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ID||LA151_0==NUMBER_LITERAL) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set618=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set618)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal619=(Token)match(input,173,FOLLOW_173_in_array_size5706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal619_tree = 
            (Object)adaptor.create(char_literal619)
            ;
            adaptor.addChild(root_0, char_literal619_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal620=null;
        Token NUMBER_LITERAL621=null;

        Object char_literal620_tree=null;
        Object NUMBER_LITERAL621_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal620=(Token)match(input,134,FOLLOW_134_in_field_crap5716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal620_tree = 
            (Object)adaptor.create(char_literal620)
            ;
            adaptor.addChild(root_0, char_literal620_tree);
            }

            NUMBER_LITERAL621=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL621_tree = 
            (Object)adaptor.create(NUMBER_LITERAL621)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL621_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper622 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants623 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5730);
            method_modifier_wrapper622=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper622.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5732);
            method_declaration_variants623=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants623.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier624 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5744);
            method_modifier624=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier624.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 915:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set625=null;

        Object set625_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set625=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set625)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common626 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:921:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:921:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5781);
            method_declaration_common626=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common626.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal627=null;
        Token char_literal629=null;
        Token char_literal632=null;
        ObjcParser.type_declaration_return type_declaration628 =null;

        ObjcParser.method_name_return method_name630 =null;

        ObjcParser.method_params_return method_params631 =null;


        Object char_literal627_tree=null;
        Object char_literal629_tree=null;
        Object char_literal632_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:6: '(' type_declaration ')' method_name
            {
            char_literal627=(Token)match(input,119,FOLLOW_119_in_method_declaration_common5794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal627_tree = 
            (Object)adaptor.create(char_literal627)
            ;
            adaptor.addChild(root_0, char_literal627_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5796);
            type_declaration628=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration628.getTree());

            char_literal629=(Token)match(input,120,FOLLOW_120_in_method_declaration_common5798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal629_tree = 
            (Object)adaptor.create(char_literal629)
            ;
            adaptor.addChild(root_0, char_literal629_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5800);
            method_name630=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name630.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:44: ( method_params )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ID||LA152_0==134) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5803);
                    method_params631=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params631.getTree());

                    }
                    break;

            }


            char_literal632=(Token)match(input,135,FOLLOW_135_in_method_declaration_common5806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal632_tree = 
            (Object)adaptor.create(char_literal632)
            ;
            adaptor.addChild(root_0, char_literal632_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal634=null;
        Token char_literal636=null;
        ObjcParser.method_modifier_return method_modifier633 =null;

        ObjcParser.type_declaration_return type_declaration635 =null;

        ObjcParser.method_name_return method_name637 =null;


        Object char_literal634_tree=null;
        Object char_literal636_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5818);
            method_modifier633=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier633.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:22: '(' type_declaration ')' method_name
            {
            char_literal634=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate5821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal634_tree = 
            (Object)adaptor.create(char_literal634)
            ;
            adaptor.addChild(root_0, char_literal634_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5823);
            type_declaration635=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration635.getTree());

            char_literal636=(Token)match(input,120,FOLLOW_120_in_method_declaration_predicate5825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal636_tree = 
            (Object)adaptor.create(char_literal636)
            ;
            adaptor.addChild(root_0, char_literal636_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5827);
            method_name637=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name637.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID638=null;

        Object ID638_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:5: ID
            {
            ID638=(Token)match(input,ID,FOLLOW_ID_in_method_name5845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID638);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 931:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param639 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:5: ( method_param )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==ID||LA153_0==134) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5868);
            	    method_param639=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param639.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 935:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal641=null;
        Token char_literal642=null;
        Token char_literal644=null;
        ObjcParser.prefix_return prefix640 =null;

        ObjcParser.type_declaration_return type_declaration643 =null;

        ObjcParser.param_name_return param_name645 =null;


        Object char_literal641_tree=null;
        Object char_literal642_tree=null;
        Object char_literal644_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:5: ( prefix )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==ID) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5888);
                    prefix640=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix640.getTree());

                    }
                    break;

            }


            char_literal641=(Token)match(input,134,FOLLOW_134_in_method_param5891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal641);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:17: ( '(' type_declaration ')' )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==119) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:18: '(' type_declaration ')'
                    {
                    char_literal642=(Token)match(input,119,FOLLOW_119_in_method_param5894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal642);


                    pushFollow(FOLLOW_type_declaration_in_method_param5896);
                    type_declaration643=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration643.getTree());

                    char_literal644=(Token)match(input,120,FOLLOW_120_in_method_param5898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal644);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5902);
            param_name645=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name645.getTree());

            // AST REWRITE
            // elements: 120, 119, param_name, type_declaration, 134, prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 938:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_134.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_120.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID646=null;

        Object ID646_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:5: ID
            {
            ID646=(Token)match(input,ID,FOLLOW_ID_in_param_name5935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID646);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 941:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:943:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID647=null;

        Object ID647_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:943:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:943:11: ID
            {
            ID647=(Token)match(input,ID,FOLLOW_ID_in_prefix5954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID647);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 943:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:943:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL649=null;
        Token DEFINE_LITERAL652=null;
        ObjcParser.define_as_function_return define_as_function648 =null;

        ObjcParser.name_return name650 =null;

        ObjcParser.element_value_return element_value651 =null;

        ObjcParser.name_return name653 =null;


        Object DEFINE_LITERAL649_tree=null;
        Object DEFINE_LITERAL652_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt156=3;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration5983);
                    define_as_function648=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function648.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL649=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL649);


                    pushFollow(FOLLOW_name_in_define_declaration5999);
                    name650=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name650.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration6001);
                    element_value651=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value651.getTree());

                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 948:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL652=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL652);


                    pushFollow(FOLLOW_name_in_define_declaration6019);
                    name653=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name653.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 949:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL654=null;
        Token char_literal656=null;
        Token char_literal657=null;
        Token char_literal659=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper655 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper658 =null;


        Object DEFINE_LITERAL654_tree=null;
        Object char_literal656_tree=null;
        Object char_literal657_tree=null;
        Object char_literal659_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL654=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function6043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL654);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function6045);
            classical_method_call_wrapper655=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper655.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt159=0;
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==172) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal656=(Token)match(input,172,FOLLOW_172_in_define_as_function6048); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_172.add(char_literal656);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:56: ( '{' )?
            	    int alt157=2;
            	    int LA157_0 = input.LA(1);

            	    if ( (LA157_0==204) ) {
            	        alt157=1;
            	    }
            	    switch (alt157) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:56: '{'
            	            {
            	            char_literal657=(Token)match(input,204,FOLLOW_204_in_define_as_function6050); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_204.add(char_literal657);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function6053);
            	    block_singleline_wrapper658=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper658.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:86: ( '}' )?
            	    int alt158=2;
            	    int LA158_0 = input.LA(1);

            	    if ( (LA158_0==208) ) {
            	        alt158=1;
            	    }
            	    switch (alt158) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:86: '}'
            	            {
            	            char_literal659=(Token)match(input,208,FOLLOW_208_in_define_as_function6055); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_208.add(char_literal659);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt159 >= 1 ) break loop159;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(159, input);
                        throw eee;
                }
                cnt159++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 953:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"


    public static class string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:1: string : STRING_LITERAL -> ^( STRING STRING_LITERAL ) ;
    public final ObjcParser.string_return string() throws RecognitionException {
        ObjcParser.string_return retval = new ObjcParser.string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL660=null;

        Object STRING_LITERAL660_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:3: ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:5: STRING_LITERAL
            {
            STRING_LITERAL660=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string6082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL660);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 957:20: -> ^( STRING STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:23: ^( STRING STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING, "STRING")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class string_objc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_objc"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:1: string_objc : '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) ;
    public final ObjcParser.string_objc_return string_objc() throws RecognitionException {
        ObjcParser.string_objc_return retval = new ObjcParser.string_objc_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal661=null;
        Token STRING_LITERAL662=null;

        Object char_literal661_tree=null;
        Object STRING_LITERAL662_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:961:3: ( '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:961:5: '@' STRING_LITERAL
            {
            char_literal661=(Token)match(input,147,FOLLOW_147_in_string_objc6105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal661);


            STRING_LITERAL662=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_objc6107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL662);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 961:24: -> ^( STRING_OBJC STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:961:27: ^( STRING_OBJC STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING_OBJC, "STRING_OBJC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_objc"


    public static class bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bool"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:964:1: bool : ( 'YES' | 'NO' | 'true' | 'false' ) ;
    public final ObjcParser.bool_return bool() throws RecognitionException {
        ObjcParser.bool_return retval = new ObjcParser.bool_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set663=null;

        Object set663_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:3: ( ( 'YES' | 'NO' | 'true' | 'false' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set663=(Token)input.LT(1);

            if ( input.LA(1)==168||input.LA(1)==170||input.LA(1)==185||input.LA(1)==198 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set663)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bool"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:6: type_declaration field_name
        {
        pushFollow(FOLLOW_type_declaration_in_synpred1_Objc507);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_field_name_in_synpred1_Objc509);
        field_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc760);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1185);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1316);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1327);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred5_Objc1329);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred6_Objc1342);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred6_Objc1344);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1599);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred7_Objc1601); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc1618);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,190,FOLLOW_190_in_synpred8_Objc1620); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred9_Objc1637);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred9_Objc1639);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred10_Objc2225);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred10_Objc2227);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2820);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,119,FOLLOW_119_in_synpred12_Objc2833); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred12_Objc2835);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred12_Objc2837);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,120,FOLLOW_120_in_synpred12_Objc2839); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred12_Objc2841);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred13_Objc2878);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred13_Objc2880); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred14_Objc2961);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:30: ( access_wrapper name )*
        loop160:
        do {
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( ((LA160_0 >= 130 && LA160_0 <= 131)) ) {
                alt160=1;
            }


            switch (alt160) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred14_Objc2964);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred14_Objc2966);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop160;
            }
        } while (true);


        match(input,119,FOLLOW_119_in_synpred14_Objc2970); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:6: ( '&' )?
        int alt161=2;
        int LA161_0 = input.LA(1);

        if ( (LA161_0==117) ) {
            alt161=1;
        }
        switch (alt161) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred15_Objc3019); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred15_Objc3022);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,171,FOLLOW_171_in_synpred15_Objc3024); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==117||input.LA(1)==121 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred16_Objc3060);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred17_Objc3139);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3432);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred19_Objc3566);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:6: '(' type_cast_wrapper
        {
        match(input,119,FOLLOW_119_in_synpred20_Objc3579); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred20_Objc3581);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:6: ( '&' )?
        int alt162=2;
        int LA162_0 = input.LA(1);

        if ( (LA162_0==117) ) {
            alt162=1;
        }
        switch (alt162) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred21_Objc3657); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred21_Objc3660);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,171,FOLLOW_171_in_synpred21_Objc3662); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred22_Objc4124);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4898);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred24_Objc4909);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred25_Objc5000);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred26_Objc5011);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:6: 'struct' ( typedef_name )? '{'
        {
        match(input,196,FOLLOW_196_in_synpred27_Objc5318); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:15: ( typedef_name )?
        int alt163=2;
        int LA163_0 = input.LA(1);

        if ( (LA163_0==ID) ) {
            alt163=1;
        }
        switch (alt163) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred27_Objc5320);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,204,FOLLOW_204_in_synpred27_Objc5323); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:6: 'union' ( typedef_name )? '{'
        {
        match(input,200,FOLLOW_200_in_synpred28_Objc5348); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:14: ( typedef_name )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( (LA164_0==ID) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred28_Objc5350);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,204,FOLLOW_204_in_synpred28_Objc5353); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:6: 'enum' ( typedef_name )? '{'
        {
        match(input,183,FOLLOW_183_in_synpred29_Objc5378); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:13: ( typedef_name )?
        int alt165=2;
        int LA165_0 = input.LA(1);

        if ( (LA165_0==ID) ) {
            alt165=1;
        }
        switch (alt165) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred29_Objc5380);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,204,FOLLOW_204_in_synpred29_Objc5383); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5974); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred30_Objc5976);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,172,FOLLOW_172_in_synpred30_Objc5978); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // $ANTLR start synpred31_Objc
    public final void synpred31_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred31_Objc5990); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred31_Objc5992);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred31_Objc5994);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_Objc

    // Delegated rules

    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA156 dfa156 = new DFA156(this);
    static final String DFA2_eotS =
        "\u012b\uffff";
    static final String DFA2_eofS =
        "\u012b\uffff";
    static final String DFA2_minS =
        "\1\26\2\uffff\3\56\11\uffff\1\56\10\uffff\6\56\1\100\1\56\4\uffff"+
        "\1\56\1\171\15\56\3\uffff\4\56\3\uffff\1\56\1\171\14\56\10\uffff"+
        "\u00d7\0\1\uffff";
    static final String DFA2_maxS =
        "\1\u00ca\2\uffff\3\u00cc\11\uffff\1\56\10\uffff\1\u00cc\1\u00ca"+
        "\1\u00cc\1\122\1\u00cc\1\u00ca\1\u00a1\1\u00ca\4\uffff\1\u00b2\1"+
        "\171\3\u00cc\2\u00c9\1\u00c2\1\u00b2\1\u00c0\1\u00c2\1\u00b2\2\u00d0"+
        "\1\122\3\uffff\3\u00d0\1\u00ca\3\uffff\1\u00b2\1\171\3\u00cc\2\u00c9"+
        "\1\u00c2\1\u00b2\1\u00c0\1\u00c2\1\u00b2\2\u00d0\10\uffff\u00d7"+
        "\0\1\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\2\1\3\uffff\7\1\1\2\1\3\1\uffff\1\5\1\6\1\7\1\10\1\11\1"+
        "\13\1\uffff\1\14\10\uffff\3\1\20\uffff\2\1\5\uffff\2\1\20\uffff"+
        "\1\4\u00dd\uffff\1\12";
    static final String DFA2_specialS =
        "\1\0\27\uffff\1\1\1\uffff\1\2\1\uffff\1\3\66\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
        "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1"+
        "\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
        "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
        "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
        "\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d"+
        "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095"+
        "\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d"+
        "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5"+
        "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad"+
        "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5"+
        "\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd"+
        "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5"+
        "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
        "\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
        "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\22\27\uffff\1\14\21\uffff\1\25\21\uffff\1\25\44\uffff\1\2"+
            "\17\uffff\1\27\15\uffff\1\16\3\uffff\1\15\1\20\4\uffff\1\17"+
            "\22\uffff\1\7\4\uffff\1\4\1\21\3\uffff\1\1\2\uffff\1\11\1\12"+
            "\1\uffff\1\13\1\24\1\3\2\uffff\1\23\1\5\1\10\1\6",
            "",
            "",
            "\1\30\u009d\uffff\1\31",
            "\1\32\u009d\uffff\1\33",
            "\1\34\u009d\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\106\uffff\1\40\3\uffff\1\41\15\uffff\1\16\104\uffff\1"+
            "\37",
            "\1\57\21\uffff\1\61\21\uffff\1\60\44\uffff\1\45\72\uffff\1"+
            "\52\4\uffff\1\47\4\uffff\1\44\2\uffff\1\54\1\55\1\uffff\1\56"+
            "\1\uffff\1\46\3\uffff\1\50\1\53\1\51",
            "\1\64\106\uffff\1\63\21\uffff\1\16\104\uffff\1\62",
            "\1\66\21\uffff\1\70\21\uffff\1\67",
            "\1\73\106\uffff\1\72\21\uffff\1\16\104\uffff\1\71",
            "\1\110\21\uffff\1\112\21\uffff\1\111\44\uffff\1\76\72\uffff"+
            "\1\103\4\uffff\1\100\4\uffff\1\75\2\uffff\1\105\1\106\1\uffff"+
            "\1\107\1\uffff\1\77\3\uffff\1\101\1\104\1\102",
            "\1\114\21\uffff\1\114\50\uffff\1\114\3\uffff\1\114\7\uffff"+
            "\1\16\1\114\16\uffff\1\114\3\uffff\1\114\1\uffff\1\114\3\uffff"+
            "\1\114",
            "\1\136\21\uffff\1\140\21\uffff\1\137\44\uffff\1\124\72\uffff"+
            "\1\131\4\uffff\1\126\4\uffff\1\123\2\uffff\1\133\1\134\1\uffff"+
            "\1\135\1\uffff\1\125\3\uffff\1\127\1\132\1\130",
            "",
            "",
            "",
            "",
            "\1\146\106\uffff\1\145\3\uffff\1\142\16\uffff\1\141\42\uffff"+
            "\1\143\6\uffff\1\144",
            "\1\147",
            "\1\150\u009d\uffff\1\151",
            "\1\152\u009d\uffff\1\153",
            "\1\154\u009d\uffff\1\155",
            "\1\164\u0083\uffff\1\156\11\uffff\1\161\2\uffff\1\160\1\162"+
            "\1\uffff\1\163\6\uffff\1\157",
            "\1\172\u008d\uffff\1\167\2\uffff\1\166\1\170\1\uffff\1\171"+
            "\6\uffff\1\165",
            "\1\177\u008d\uffff\1\174\2\uffff\1\173\1\175\1\uffff\1\176",
            "\1\u0084\106\uffff\1\u0083\3\uffff\1\u0080\61\uffff\1\u0081"+
            "\6\uffff\1\u0082",
            "\1\u008a\106\uffff\1\u0089\3\uffff\1\u0086\61\uffff\1\u0087"+
            "\6\uffff\1\u0088\14\uffff\1\u0085\1\u008b",
            "\1\u0091\106\uffff\1\u0090\3\uffff\1\u008d\61\uffff\1\u008e"+
            "\6\uffff\1\u008f\14\uffff\1\u008c\2\uffff\1\u0092",
            "\1\u0097\106\uffff\1\u0096\3\uffff\1\u0093\61\uffff\1\u0094"+
            "\6\uffff\1\u0095",
            "\1\u00a4\21\uffff\1\u00a6\21\uffff\1\u00a5\44\uffff\1\u009a"+
            "\72\uffff\1\u009f\4\uffff\1\u009c\4\uffff\1\u0099\2\uffff\1"+
            "\u00a1\1\u00a2\1\uffff\1\u00a3\1\uffff\1\u009b\3\uffff\1\u009d"+
            "\1\u00a0\1\u009e\5\uffff\1\u0098",
            "\1\u00b3\21\uffff\1\u00b5\21\uffff\1\u00b4\44\uffff\1\u00a9"+
            "\72\uffff\1\u00ae\4\uffff\1\u00ab\4\uffff\1\u00a8\2\uffff\1"+
            "\u00b0\1\u00b1\1\uffff\1\u00b2\1\uffff\1\u00aa\3\uffff\1\u00ac"+
            "\1\u00af\1\u00ad\5\uffff\1\u00a7",
            "\1\u00b6\21\uffff\1\u00b8\21\uffff\1\u00b7",
            "",
            "",
            "",
            "\1\u00bc\21\uffff\1\u00be\21\uffff\1\u00bd\43\uffff\1\u00b9"+
            "\3\uffff\1\u00b9\2\uffff\1\u00b9\1\u00ba\2\uffff\1\u00b9\3\uffff"+
            "\1\u00b9\4\uffff\1\u00b9\1\uffff\1\u00b9\4\uffff\1\u00b9\74"+
            "\uffff\1\u00b9\1\uffff\1\u00bb",
            "\1\u00c0\21\uffff\1\u00c2\21\uffff\1\u00c1\175\uffff\1\u00bf",
            "\1\u00c4\21\uffff\1\u00c6\21\uffff\1\u00c5\175\uffff\1\u00c3",
            "\1\u00d2\21\uffff\1\u00d4\21\uffff\1\u00d3\44\uffff\1\u00c8"+
            "\72\uffff\1\u00cd\4\uffff\1\u00ca\4\uffff\1\u00c7\2\uffff\1"+
            "\u00cf\1\u00d0\1\uffff\1\u00d1\1\uffff\1\u00c9\3\uffff\1\u00cb"+
            "\1\u00ce\1\u00cc",
            "",
            "",
            "",
            "\1\u00da\106\uffff\1\u00d9\3\uffff\1\u00d6\16\uffff\1\u00d5"+
            "\42\uffff\1\u00d7\6\uffff\1\u00d8",
            "\1\u00db",
            "\1\u00dc\u009d\uffff\1\u00dd",
            "\1\u00de\u009d\uffff\1\u00df",
            "\1\u00e0\u009d\uffff\1\u00e1",
            "\1\u00e8\u0083\uffff\1\u00e2\11\uffff\1\u00e5\2\uffff\1\u00e4"+
            "\1\u00e6\1\uffff\1\u00e7\6\uffff\1\u00e3",
            "\1\u00ee\u008d\uffff\1\u00eb\2\uffff\1\u00ea\1\u00ec\1\uffff"+
            "\1\u00ed\6\uffff\1\u00e9",
            "\1\u00f3\u008d\uffff\1\u00f0\2\uffff\1\u00ef\1\u00f1\1\uffff"+
            "\1\u00f2",
            "\1\u00f8\106\uffff\1\u00f7\3\uffff\1\u00f4\61\uffff\1\u00f5"+
            "\6\uffff\1\u00f6",
            "\1\u00fe\106\uffff\1\u00fd\3\uffff\1\u00fa\61\uffff\1\u00fb"+
            "\6\uffff\1\u00fc\14\uffff\1\u00f9\1\u00ff",
            "\1\u0105\106\uffff\1\u0104\3\uffff\1\u0101\61\uffff\1\u0102"+
            "\6\uffff\1\u0103\14\uffff\1\u0100\2\uffff\1\u0106",
            "\1\u010b\106\uffff\1\u010a\3\uffff\1\u0107\61\uffff\1\u0108"+
            "\6\uffff\1\u0109",
            "\1\u0118\21\uffff\1\u011a\21\uffff\1\u0119\44\uffff\1\u010e"+
            "\72\uffff\1\u0113\4\uffff\1\u0110\4\uffff\1\u010d\2\uffff\1"+
            "\u0115\1\u0116\1\uffff\1\u0117\1\uffff\1\u010f\3\uffff\1\u0111"+
            "\1\u0114\1\u0112\5\uffff\1\u010c",
            "\1\u0127\21\uffff\1\u0129\21\uffff\1\u0128\44\uffff\1\u011d"+
            "\72\uffff\1\u0122\4\uffff\1\u011f\4\uffff\1\u011c\2\uffff\1"+
            "\u0124\1\u0125\1\uffff\1\u0126\1\uffff\1\u011e\3\uffff\1\u0120"+
            "\1\u0123\1\u0121\5\uffff\1\u011b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_0==188) && (synpred1_Objc())) {s = 1;}

                        else if ( (LA2_0==119) && (synpred1_Objc())) {s = 2;}

                        else if ( (LA2_0==196) ) {s = 3;}

                        else if ( (LA2_0==183) ) {s = 4;}

                        else if ( (LA2_0==200) ) {s = 5;}

                        else if ( (LA2_0==202) && (synpred1_Objc())) {s = 6;}

                        else if ( (LA2_0==178) && (synpred1_Objc())) {s = 7;}

                        else if ( (LA2_0==201) && (synpred1_Objc())) {s = 8;}

                        else if ( (LA2_0==191) && (synpred1_Objc())) {s = 9;}

                        else if ( (LA2_0==192) && (synpred1_Objc())) {s = 10;}

                        else if ( (LA2_0==194) && (synpred1_Objc())) {s = 11;}

                        else if ( (LA2_0==ID) && (synpred1_Objc())) {s = 12;}

                        else if ( (LA2_0==153) ) {s = 13;}

                        else if ( (LA2_0==149) ) {s = 14;}

                        else if ( (LA2_0==159) ) {s = 15;}

                        else if ( (LA2_0==154) ) {s = 16;}

                        else if ( (LA2_0==184) ) {s = 17;}

                        else if ( (LA2_0==DEFINE_LITERAL) ) {s = 18;}

                        else if ( (LA2_0==199) ) {s = 19;}

                        else if ( (LA2_0==195) ) {s = 20;}

                        else if ( (LA2_0==MULTI_COMMENT_LIT||LA2_0==SINGLE_COMMENT_LIT) ) {s = 21;}

                        else if ( (LA2_0==135) ) {s = 23;}

                         
                        input.seek(index2_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_24==204) ) {s = 31;}

                        else if ( (LA2_24==117) && (synpred1_Objc())) {s = 32;}

                        else if ( (LA2_24==121) && (synpred1_Objc())) {s = 33;}

                        else if ( (LA2_24==ID) && (synpred1_Objc())) {s = 34;}

                        else if ( (LA2_24==135) ) {s = 14;}

                         
                        input.seek(index2_24);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_26==204) ) {s = 50;}

                        else if ( (LA2_26==117) && (synpred1_Objc())) {s = 51;}

                        else if ( (LA2_26==ID) && (synpred1_Objc())) {s = 52;}

                        else if ( (LA2_26==135) ) {s = 14;}

                         
                        input.seek(index2_26);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_28==204) ) {s = 57;}

                        else if ( (LA2_28==117) && (synpred1_Objc())) {s = 58;}

                        else if ( (LA2_28==ID) && (synpred1_Objc())) {s = 59;}

                        else if ( (LA2_28==135) ) {s = 14;}

                         
                        input.seek(index2_28);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_83);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_84);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_85);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_86);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_87);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_88);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_89);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_90);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_91);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_92);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_93);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_94);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_95);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_96);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_97);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_98);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_99);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_100);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_101);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_102);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_103);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_104);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_105);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_106);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_107);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_108);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_109);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_110);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_111);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_112);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_113);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_114);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_115);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_116);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_117);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_118);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_119);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_120);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_121);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_122);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_123);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_124);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_125);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_126);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_127);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_128);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_129);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_130);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_131);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_132);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_133);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_134);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_135);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_136);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_137);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_138);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_139);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_140);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_141);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_142);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_143);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_144);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_145);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_146);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_147);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_148);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_149);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_150);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_151);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_152);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_153);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_154);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_155);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_156);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_157);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_158);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_159);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_160);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_161);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_162);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_163);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_164);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_165);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_166);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_167);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_168);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_169);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_170);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_171);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_172);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_173);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_174);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_175);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_176);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_177);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_178);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_179);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_180);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_181);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_182);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_183);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_184);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_185);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_186);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_187);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_188);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_189 = input.LA(1);

                         
                        int index2_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_189);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_190 = input.LA(1);

                         
                        int index2_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_190);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_191 = input.LA(1);

                         
                        int index2_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_191);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_192 = input.LA(1);

                         
                        int index2_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_192);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_193 = input.LA(1);

                         
                        int index2_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_193);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_194 = input.LA(1);

                         
                        int index2_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_194);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_195 = input.LA(1);

                         
                        int index2_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_195);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_196 = input.LA(1);

                         
                        int index2_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_196);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_197 = input.LA(1);

                         
                        int index2_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_197);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_198 = input.LA(1);

                         
                        int index2_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_198);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_199 = input.LA(1);

                         
                        int index2_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_199);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_200 = input.LA(1);

                         
                        int index2_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_200);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_201 = input.LA(1);

                         
                        int index2_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_201);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_202 = input.LA(1);

                         
                        int index2_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_202);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_203 = input.LA(1);

                         
                        int index2_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_203);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_204 = input.LA(1);

                         
                        int index2_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_204);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_205 = input.LA(1);

                         
                        int index2_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_205);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_206 = input.LA(1);

                         
                        int index2_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_206);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_207 = input.LA(1);

                         
                        int index2_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_207);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_208 = input.LA(1);

                         
                        int index2_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_208);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_209 = input.LA(1);

                         
                        int index2_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_209);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_210 = input.LA(1);

                         
                        int index2_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_210);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_211 = input.LA(1);

                         
                        int index2_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_211);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_212 = input.LA(1);

                         
                        int index2_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_212);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_213 = input.LA(1);

                         
                        int index2_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_213);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA2_214 = input.LA(1);

                         
                        int index2_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_214);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA2_215 = input.LA(1);

                         
                        int index2_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_215);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA2_216 = input.LA(1);

                         
                        int index2_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_216);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA2_217 = input.LA(1);

                         
                        int index2_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_217);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA2_218 = input.LA(1);

                         
                        int index2_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_218);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA2_219 = input.LA(1);

                         
                        int index2_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_219);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA2_220 = input.LA(1);

                         
                        int index2_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_220);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA2_221 = input.LA(1);

                         
                        int index2_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_221);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA2_222 = input.LA(1);

                         
                        int index2_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_222);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA2_223 = input.LA(1);

                         
                        int index2_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_223);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA2_224 = input.LA(1);

                         
                        int index2_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_224);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA2_225 = input.LA(1);

                         
                        int index2_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_225);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA2_226 = input.LA(1);

                         
                        int index2_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_226);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA2_227 = input.LA(1);

                         
                        int index2_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_227);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA2_228 = input.LA(1);

                         
                        int index2_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_228);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA2_229 = input.LA(1);

                         
                        int index2_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_229);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA2_230 = input.LA(1);

                         
                        int index2_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_230);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA2_231 = input.LA(1);

                         
                        int index2_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_231);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA2_232 = input.LA(1);

                         
                        int index2_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_232);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA2_233 = input.LA(1);

                         
                        int index2_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_233);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA2_234 = input.LA(1);

                         
                        int index2_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_234);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA2_235 = input.LA(1);

                         
                        int index2_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_235);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA2_236 = input.LA(1);

                         
                        int index2_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_236);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA2_237 = input.LA(1);

                         
                        int index2_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_237);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA2_238 = input.LA(1);

                         
                        int index2_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_238);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA2_239 = input.LA(1);

                         
                        int index2_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_239);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA2_240 = input.LA(1);

                         
                        int index2_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_240);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA2_241 = input.LA(1);

                         
                        int index2_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_241);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA2_242 = input.LA(1);

                         
                        int index2_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_242);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA2_243 = input.LA(1);

                         
                        int index2_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_243);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA2_244 = input.LA(1);

                         
                        int index2_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_244);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA2_245 = input.LA(1);

                         
                        int index2_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_245);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA2_246 = input.LA(1);

                         
                        int index2_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_246);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA2_247 = input.LA(1);

                         
                        int index2_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_247);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA2_248 = input.LA(1);

                         
                        int index2_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_248);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA2_249 = input.LA(1);

                         
                        int index2_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_249);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA2_250 = input.LA(1);

                         
                        int index2_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_250);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA2_251 = input.LA(1);

                         
                        int index2_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_251);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA2_252 = input.LA(1);

                         
                        int index2_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_252);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA2_253 = input.LA(1);

                         
                        int index2_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_253);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA2_254 = input.LA(1);

                         
                        int index2_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_254);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA2_255 = input.LA(1);

                         
                        int index2_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_255);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA2_256 = input.LA(1);

                         
                        int index2_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_256);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA2_257 = input.LA(1);

                         
                        int index2_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_257);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA2_258 = input.LA(1);

                         
                        int index2_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_258);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA2_259 = input.LA(1);

                         
                        int index2_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_259);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA2_260 = input.LA(1);

                         
                        int index2_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_260);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA2_261 = input.LA(1);

                         
                        int index2_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_261);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA2_262 = input.LA(1);

                         
                        int index2_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_262);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA2_263 = input.LA(1);

                         
                        int index2_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_263);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA2_264 = input.LA(1);

                         
                        int index2_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_264);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA2_265 = input.LA(1);

                         
                        int index2_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_265);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA2_266 = input.LA(1);

                         
                        int index2_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_266);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA2_267 = input.LA(1);

                         
                        int index2_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_267);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA2_268 = input.LA(1);

                         
                        int index2_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_268);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA2_269 = input.LA(1);

                         
                        int index2_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_269);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA2_270 = input.LA(1);

                         
                        int index2_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_270);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA2_271 = input.LA(1);

                         
                        int index2_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_271);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA2_272 = input.LA(1);

                         
                        int index2_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_272);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA2_273 = input.LA(1);

                         
                        int index2_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_273);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA2_274 = input.LA(1);

                         
                        int index2_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_274);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA2_275 = input.LA(1);

                         
                        int index2_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_275);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA2_276 = input.LA(1);

                         
                        int index2_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_276);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA2_277 = input.LA(1);

                         
                        int index2_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_277);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA2_278 = input.LA(1);

                         
                        int index2_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_278);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA2_279 = input.LA(1);

                         
                        int index2_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_279);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA2_280 = input.LA(1);

                         
                        int index2_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_280);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA2_281 = input.LA(1);

                         
                        int index2_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_281);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA2_282 = input.LA(1);

                         
                        int index2_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_282);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA2_283 = input.LA(1);

                         
                        int index2_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_283);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA2_284 = input.LA(1);

                         
                        int index2_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_284);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA2_285 = input.LA(1);

                         
                        int index2_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_285);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA2_286 = input.LA(1);

                         
                        int index2_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_286);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA2_287 = input.LA(1);

                         
                        int index2_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_287);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA2_288 = input.LA(1);

                         
                        int index2_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_288);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA2_289 = input.LA(1);

                         
                        int index2_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_289);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA2_290 = input.LA(1);

                         
                        int index2_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_290);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA2_291 = input.LA(1);

                         
                        int index2_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_291);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA2_292 = input.LA(1);

                         
                        int index2_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_292);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA2_293 = input.LA(1);

                         
                        int index2_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_293);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA2_294 = input.LA(1);

                         
                        int index2_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_294);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA2_295 = input.LA(1);

                         
                        int index2_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_295);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA2_296 = input.LA(1);

                         
                        int index2_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_296);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA2_297 = input.LA(1);

                         
                        int index2_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_297);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA22_eotS =
        "\152\uffff";
    static final String DFA22_eofS =
        "\152\uffff";
    static final String DFA22_minS =
        "\3\56\37\uffff\1\56\2\uffff\1\20\5\uffff\1\56\15\uffff\1\166\5\uffff"+
        "\1\161\4\uffff\1\161\17\uffff\1\170\1\uffff\1\0\10\uffff\1\0\5\uffff"+
        "\1\0\3\uffff\1\0";
    static final String DFA22_maxS =
        "\1\u00cc\1\u00ce\1\u00ca\37\uffff\1\56\2\uffff\1\u00d1\5\uffff\1"+
        "\u00ca\15\uffff\1\u00ce\5\uffff\1\u00cf\4\uffff\1\u00cf\17\uffff"+
        "\1\u00b2\1\uffff\1\0\10\uffff\1\0\5\uffff\1\0\3\uffff\1\0";
    static final String DFA22_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\5\uffff\15\3\1\uffff\5\3\1\uffff\4\3\1\uffff\7\3\11"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\5\uffff";
    static final String DFA22_specialS =
        "\1\0\1\1\1\2\42\uffff\1\3\23\uffff\1\4\5\uffff\1\5\4\uffff\1\6\21"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11\3\uffff\1\12}>";
    static final String[] DFA22_transitionS = {
            "\1\1\21\uffff\1\40\21\uffff\1\40\42\uffff\1\3\1\uffff\1\2\1"+
            "\uffff\1\4\15\uffff\1\32\33\uffff\1\17\1\uffff\1\21\1\20\4\uffff"+
            "\1\37\4\uffff\1\33\1\uffff\1\5\1\34\1\uffff\1\23\1\25\1\5\2"+
            "\uffff\1\30\1\35\1\5\1\24\1\uffff\2\5\1\27\1\5\1\22\1\5\1\26"+
            "\2\uffff\3\5\1\31\1\36",
            "\1\5\106\uffff\1\5\1\46\1\43\1\uffff\1\5\1\46\1\uffff\1\44"+
            "\1\46\2\uffff\1\44\1\46\2\42\1\uffff\1\46\4\uffff\1\46\1\uffff"+
            "\1\46\4\uffff\1\46\31\uffff\1\45\6\uffff\1\5\33\uffff\1\46",
            "\1\64\106\uffff\1\70\1\uffff\1\55\1\uffff\1\53\70\uffff\1\57"+
            "\4\uffff\1\67\4\uffff\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1"+
            "\uffff\1\65\3\uffff\1\66\1\60\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\71",
            "",
            "",
            "\1\103\35\uffff\1\77\24\uffff\1\104\23\uffff\1\101\30\uffff"+
            "\1\111\4\uffff\1\76\1\uffff\1\73\1\uffff\1\100\2\uffff\1\113"+
            "\2\uffff\1\72\1\113\22\uffff\1\102\13\uffff\1\75\2\uffff\1\74"+
            "\5\uffff\1\105\1\uffff\1\105\1\110\1\uffff\1\5\1\106\1\107\11"+
            "\uffff\1\105\14\uffff\1\105\12\uffff\1\112",
            "",
            "",
            "",
            "",
            "",
            "\1\124\u0083\uffff\1\5\11\uffff\1\5\2\uffff\2\5\1\uffff\1\5"+
            "\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\130\1\125\2\uffff\1\130\1\uffff\1\127\1\130\2\uffff\1\127"+
            "\1\130\2\126\1\uffff\1\130\4\uffff\1\130\1\uffff\1\130\4\uffff"+
            "\1\130\74\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "\1\135\1\uffff\3\135\1\uffff\1\133\1\uffff\1\135\1\uffff\1"+
            "\135\1\134\2\uffff\1\135\1\134\1\uffff\2\132\1\135\3\uffff\2"+
            "\135\1\uffff\6\135\1\uffff\1\136\30\uffff\1\131\1\uffff\1\137"+
            "\1\135\36\uffff\1\135\1\uffff\1\135",
            "",
            "",
            "",
            "",
            "\1\143\1\uffff\3\143\1\uffff\1\141\1\uffff\1\143\1\uffff\1"+
            "\143\1\142\2\uffff\1\143\1\142\1\uffff\2\140\1\143\3\uffff\2"+
            "\143\1\uffff\6\143\1\uffff\1\144\32\uffff\1\145\1\143\36\uffff"+
            "\1\143\1\uffff\1\143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\151\1\5\61\uffff\1\5\6\uffff\1\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "264:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_0==ID) ) {s = 1;}

                        else if ( (LA22_0==119) ) {s = 2;}

                        else if ( (LA22_0==117) && (synpred6_Objc())) {s = 3;}

                        else if ( (LA22_0==121) && (synpred6_Objc())) {s = 4;}

                        else if ( (LA22_0==178||LA22_0==183||LA22_0==188||(LA22_0 >= 191 && LA22_0 <= 192)||LA22_0==194||LA22_0==196||(LA22_0 >= 200 && LA22_0 <= 202)) ) {s = 5;}

                        else if ( (LA22_0==163) ) {s = 15;}

                        else if ( (LA22_0==166) ) {s = 16;}

                        else if ( (LA22_0==165) ) {s = 17;}

                        else if ( (LA22_0==195) ) {s = 18;}

                        else if ( (LA22_0==181) ) {s = 19;}

                        else if ( (LA22_0==189) ) {s = 20;}

                        else if ( (LA22_0==182) ) {s = 21;}

                        else if ( (LA22_0==197) ) {s = 22;}

                        else if ( (LA22_0==193) ) {s = 23;}

                        else if ( (LA22_0==186) ) {s = 24;}

                        else if ( (LA22_0==203) ) {s = 25;}

                        else if ( (LA22_0==135) ) {s = 26;}

                        else if ( (LA22_0==176) ) {s = 27;}

                        else if ( (LA22_0==179) ) {s = 28;}

                        else if ( (LA22_0==187) ) {s = 29;}

                        else if ( (LA22_0==204) ) {s = 30;}

                        else if ( (LA22_0==171) ) {s = 31;}

                        else if ( (LA22_0==MULTI_COMMENT_LIT||LA22_0==SINGLE_COMMENT_LIT) ) {s = 32;}

                         
                        input.seek(index22_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA22_1 >= 130 && LA22_1 <= 131)) ) {s = 34;}

                        else if ( (LA22_1==119) && (synpred4_Objc())) {s = 35;}

                        else if ( (LA22_1==124||LA22_1==128) && (synpred5_Objc())) {s = 36;}

                        else if ( (LA22_1==171) ) {s = 37;}

                        else if ( (LA22_1==118||LA22_1==122||LA22_1==125||LA22_1==129||LA22_1==133||LA22_1==138||LA22_1==140||LA22_1==145||LA22_1==206) && (synpred6_Objc())) {s = 38;}

                        else if ( (LA22_1==ID||LA22_1==117||LA22_1==121||LA22_1==178) ) {s = 5;}

                         
                        input.seek(index22_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_2==121) ) {s = 43;}

                        else if ( (LA22_2==188) && (synpred6_Objc())) {s = 44;}

                        else if ( (LA22_2==119) && (synpred6_Objc())) {s = 45;}

                        else if ( (LA22_2==202) && (synpred6_Objc())) {s = 46;}

                        else if ( (LA22_2==178) && (synpred6_Objc())) {s = 47;}

                        else if ( (LA22_2==201) && (synpred6_Objc())) {s = 48;}

                        else if ( (LA22_2==191) && (synpred6_Objc())) {s = 49;}

                        else if ( (LA22_2==192) && (synpred6_Objc())) {s = 50;}

                        else if ( (LA22_2==194) && (synpred6_Objc())) {s = 51;}

                        else if ( (LA22_2==ID) && (synpred6_Objc())) {s = 52;}

                        else if ( (LA22_2==196) && (synpred6_Objc())) {s = 53;}

                        else if ( (LA22_2==200) && (synpred6_Objc())) {s = 54;}

                        else if ( (LA22_2==183) && (synpred6_Objc())) {s = 55;}

                        else if ( (LA22_2==117) && (synpred6_Objc())) {s = 56;}

                         
                        input.seek(index22_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_37 = input.LA(1);

                         
                        int index22_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_37==127) && (synpred6_Objc())) {s = 58;}

                        else if ( (LA22_37==119) && (synpred6_Objc())) {s = 59;}

                        else if ( (LA22_37==162) && (synpred6_Objc())) {s = 60;}

                        else if ( (LA22_37==159) && (synpred6_Objc())) {s = 61;}

                        else if ( (LA22_37==117) && (synpred6_Objc())) {s = 62;}

                        else if ( (LA22_37==ID) ) {s = 63;}

                        else if ( (LA22_37==121) && (synpred6_Objc())) {s = 64;}

                        else if ( (LA22_37==STRING_LITERAL) && (synpred6_Objc())) {s = 65;}

                        else if ( (LA22_37==147) && (synpred6_Objc())) {s = 66;}

                        else if ( (LA22_37==CHAR_LITERAL) && (synpred6_Objc())) {s = 67;}

                        else if ( (LA22_37==NUMBER_LITERAL) ) {s = 68;}

                        else if ( (LA22_37==168||LA22_37==170||LA22_37==185||LA22_37==198) && (synpred6_Objc())) {s = 69;}

                        else if ( (LA22_37==174) && (synpred6_Objc())) {s = 70;}

                        else if ( (LA22_37==175) && (synpred6_Objc())) {s = 71;}

                        else if ( (LA22_37==171) && (synpred6_Objc())) {s = 72;}

                        else if ( (LA22_37==112) && (synpred6_Objc())) {s = 73;}

                        else if ( (LA22_37==209) && (synpred6_Objc())) {s = 74;}

                        else if ( (LA22_37==124||LA22_37==128) && (synpred6_Objc())) {s = 75;}

                        else if ( (LA22_37==173) ) {s = 5;}

                         
                        input.seek(index22_37);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_57 = input.LA(1);

                         
                        int index22_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_57==119) && (synpred4_Objc())) {s = 85;}

                        else if ( ((LA22_57 >= 130 && LA22_57 <= 131)) ) {s = 86;}

                        else if ( (LA22_57==124||LA22_57==128) && (synpred5_Objc())) {s = 87;}

                        else if ( (LA22_57==118||LA22_57==122||LA22_57==125||LA22_57==129||LA22_57==133||LA22_57==138||LA22_57==140||LA22_57==145||LA22_57==206) && (synpred6_Objc())) {s = 88;}

                         
                        input.seek(index22_57);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_63 = input.LA(1);

                         
                        int index22_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_63==171) && (synpred6_Objc())) {s = 89;}

                        else if ( ((LA22_63 >= 130 && LA22_63 <= 131)) && (synpred6_Objc())) {s = 90;}

                        else if ( (LA22_63==119) && (synpred6_Objc())) {s = 91;}

                        else if ( (LA22_63==124||LA22_63==128) && (synpred6_Objc())) {s = 92;}

                        else if ( (LA22_63==113||(LA22_63 >= 115 && LA22_63 <= 117)||LA22_63==121||LA22_63==123||LA22_63==127||LA22_63==132||(LA22_63 >= 136 && LA22_63 <= 137)||(LA22_63 >= 139 && LA22_63 <= 144)||LA22_63==174||LA22_63==205||LA22_63==207) && (synpred6_Objc())) {s = 93;}

                        else if ( (LA22_63==146) && (synpred6_Objc())) {s = 94;}

                        else if ( (LA22_63==173) ) {s = 95;}

                         
                        input.seek(index22_63);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA22_68 = input.LA(1);

                         
                        int index22_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA22_68 >= 130 && LA22_68 <= 131)) && (synpred6_Objc())) {s = 96;}

                        else if ( (LA22_68==119) && (synpred6_Objc())) {s = 97;}

                        else if ( (LA22_68==124||LA22_68==128) && (synpred6_Objc())) {s = 98;}

                        else if ( (LA22_68==113||(LA22_68 >= 115 && LA22_68 <= 117)||LA22_68==121||LA22_68==123||LA22_68==127||LA22_68==132||(LA22_68 >= 136 && LA22_68 <= 137)||(LA22_68 >= 139 && LA22_68 <= 144)||LA22_68==174||LA22_68==205||LA22_68==207) && (synpred6_Objc())) {s = 99;}

                        else if ( (LA22_68==146) && (synpred6_Objc())) {s = 100;}

                        else if ( (LA22_68==173) ) {s = 101;}

                         
                        input.seek(index22_68);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA22_86 = input.LA(1);

                         
                        int index22_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 85;}

                        else if ( (synpred5_Objc()) ) {s = 87;}

                        else if ( (synpred6_Objc()) ) {s = 100;}

                         
                        input.seek(index22_86);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA22_95 = input.LA(1);

                         
                        int index22_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 100;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_95);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA22_101 = input.LA(1);

                         
                        int index22_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 100;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_101);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA22_105 = input.LA(1);

                         
                        int index22_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 100;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_105);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA26_eotS =
        "\122\uffff";
    static final String DFA26_eofS =
        "\122\uffff";
    static final String DFA26_minS =
        "\3\56\16\uffff\1\20\6\uffff\1\56\22\uffff\1\161\4\uffff\1\161\17"+
        "\uffff\1\170\6\uffff\1\0\5\uffff\1\0\3\uffff\1\0";
    static final String DFA26_maxS =
        "\1\u00ca\1\u00ce\1\u00ca\16\uffff\1\u00d1\6\uffff\1\u00ca\22\uffff"+
        "\1\u00cf\4\uffff\1\u00cf\17\uffff\1\u00b2\6\uffff\1\0\5\uffff\1"+
        "\0\3\uffff\1\0";
    static final String DFA26_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\1\1\2\1\uffff\2\3\5\uffff\22\3\1\uffff"+
        "\4\3\1\uffff\7\3\11\uffff\6\3\1\uffff\5\3\5\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\2\16\uffff\1\3\31\uffff\1\4\4\uffff\1\5\26\uffff\1\6"+
        "\5\uffff\1\7\3\uffff\1\10}>";
    static final String[] DFA26_transitionS = {
            "\1\1\106\uffff\1\3\1\uffff\1\2\1\uffff\1\4\70\uffff\1\5\4\uffff"+
            "\1\5\4\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\3\5",
            "\1\5\106\uffff\1\5\1\23\2\uffff\1\5\1\23\2\uffff\1\23\3\uffff"+
            "\1\23\2\22\1\uffff\1\23\1\uffff\1\17\2\uffff\1\23\1\uffff\1"+
            "\23\4\uffff\1\23\31\uffff\1\21\6\uffff\1\5\13\uffff\1\20\17"+
            "\uffff\1\23",
            "\1\41\106\uffff\1\45\1\uffff\1\32\1\uffff\1\30\70\uffff\1\34"+
            "\4\uffff\1\44\4\uffff\1\31\2\uffff\1\36\1\37\1\uffff\1\40\1"+
            "\uffff\1\42\3\uffff\1\43\1\35\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\35\uffff\1\53\24\uffff\1\60\23\uffff\1\55\30\uffff\1"+
            "\65\4\uffff\1\52\1\uffff\1\47\1\uffff\1\54\2\uffff\1\67\2\uffff"+
            "\1\46\1\67\22\uffff\1\56\13\uffff\1\51\2\uffff\1\50\5\uffff"+
            "\1\61\1\uffff\1\61\1\64\1\uffff\1\5\1\62\1\63\11\uffff\1\61"+
            "\14\uffff\1\61\12\uffff\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\100\u0083\uffff\1\5\11\uffff\1\5\2\uffff\2\5\1\uffff\1\5"+
            "\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\105\1\uffff\3\105\1\uffff\1\103\1\uffff\1\105\1\uffff\1"+
            "\105\1\104\2\uffff\1\105\1\104\1\uffff\2\102\1\105\3\uffff\2"+
            "\105\1\uffff\6\105\1\uffff\1\106\30\uffff\1\101\1\uffff\1\107"+
            "\1\105\36\uffff\1\105\1\uffff\1\105",
            "",
            "",
            "",
            "",
            "\1\113\1\uffff\3\113\1\uffff\1\111\1\uffff\1\113\1\uffff\1"+
            "\113\1\112\2\uffff\1\113\1\112\1\uffff\2\110\1\113\3\uffff\2"+
            "\113\1\uffff\6\113\1\uffff\1\114\32\uffff\1\115\1\113\36\uffff"+
            "\1\113\1\uffff\1\113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\121\1\5\61\uffff\1\5\6\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "309:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_0==ID) ) {s = 1;}

                        else if ( (LA26_0==119) ) {s = 2;}

                        else if ( (LA26_0==117) && (synpred9_Objc())) {s = 3;}

                        else if ( (LA26_0==121) && (synpred9_Objc())) {s = 4;}

                        else if ( (LA26_0==178||LA26_0==183||LA26_0==188||(LA26_0 >= 191 && LA26_0 <= 192)||LA26_0==194||LA26_0==196||(LA26_0 >= 200 && LA26_0 <= 202)) ) {s = 5;}

                         
                        input.seek(index26_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_1==135) && (synpred7_Objc())) {s = 15;}

                        else if ( (LA26_1==190) && (synpred8_Objc())) {s = 16;}

                        else if ( (LA26_1==171) ) {s = 17;}

                        else if ( ((LA26_1 >= 130 && LA26_1 <= 131)) && (synpred9_Objc())) {s = 18;}

                        else if ( (LA26_1==118||LA26_1==122||LA26_1==125||LA26_1==129||LA26_1==133||LA26_1==138||LA26_1==140||LA26_1==145||LA26_1==206) && (synpred9_Objc())) {s = 19;}

                        else if ( (LA26_1==ID||LA26_1==117||LA26_1==121||LA26_1==178) ) {s = 5;}

                         
                        input.seek(index26_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_2==121) ) {s = 24;}

                        else if ( (LA26_2==188) && (synpred9_Objc())) {s = 25;}

                        else if ( (LA26_2==119) && (synpred9_Objc())) {s = 26;}

                        else if ( (LA26_2==202) && (synpred9_Objc())) {s = 27;}

                        else if ( (LA26_2==178) && (synpred9_Objc())) {s = 28;}

                        else if ( (LA26_2==201) && (synpred9_Objc())) {s = 29;}

                        else if ( (LA26_2==191) && (synpred9_Objc())) {s = 30;}

                        else if ( (LA26_2==192) && (synpred9_Objc())) {s = 31;}

                        else if ( (LA26_2==194) && (synpred9_Objc())) {s = 32;}

                        else if ( (LA26_2==ID) && (synpred9_Objc())) {s = 33;}

                        else if ( (LA26_2==196) && (synpred9_Objc())) {s = 34;}

                        else if ( (LA26_2==200) && (synpred9_Objc())) {s = 35;}

                        else if ( (LA26_2==183) && (synpred9_Objc())) {s = 36;}

                        else if ( (LA26_2==117) && (synpred9_Objc())) {s = 37;}

                         
                        input.seek(index26_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_17==127) && (synpred9_Objc())) {s = 38;}

                        else if ( (LA26_17==119) && (synpred9_Objc())) {s = 39;}

                        else if ( (LA26_17==162) && (synpred9_Objc())) {s = 40;}

                        else if ( (LA26_17==159) && (synpred9_Objc())) {s = 41;}

                        else if ( (LA26_17==117) && (synpred9_Objc())) {s = 42;}

                        else if ( (LA26_17==ID) ) {s = 43;}

                        else if ( (LA26_17==121) && (synpred9_Objc())) {s = 44;}

                        else if ( (LA26_17==STRING_LITERAL) && (synpred9_Objc())) {s = 45;}

                        else if ( (LA26_17==147) && (synpred9_Objc())) {s = 46;}

                        else if ( (LA26_17==CHAR_LITERAL) && (synpred9_Objc())) {s = 47;}

                        else if ( (LA26_17==NUMBER_LITERAL) ) {s = 48;}

                        else if ( (LA26_17==168||LA26_17==170||LA26_17==185||LA26_17==198) && (synpred9_Objc())) {s = 49;}

                        else if ( (LA26_17==174) && (synpred9_Objc())) {s = 50;}

                        else if ( (LA26_17==175) && (synpred9_Objc())) {s = 51;}

                        else if ( (LA26_17==171) && (synpred9_Objc())) {s = 52;}

                        else if ( (LA26_17==112) && (synpred9_Objc())) {s = 53;}

                        else if ( (LA26_17==209) && (synpred9_Objc())) {s = 54;}

                        else if ( (LA26_17==124||LA26_17==128) && (synpred9_Objc())) {s = 55;}

                        else if ( (LA26_17==173) ) {s = 5;}

                         
                        input.seek(index26_17);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_43==171) && (synpred9_Objc())) {s = 65;}

                        else if ( ((LA26_43 >= 130 && LA26_43 <= 131)) && (synpred9_Objc())) {s = 66;}

                        else if ( (LA26_43==119) && (synpred9_Objc())) {s = 67;}

                        else if ( (LA26_43==124||LA26_43==128) && (synpred9_Objc())) {s = 68;}

                        else if ( (LA26_43==113||(LA26_43 >= 115 && LA26_43 <= 117)||LA26_43==121||LA26_43==123||LA26_43==127||LA26_43==132||(LA26_43 >= 136 && LA26_43 <= 137)||(LA26_43 >= 139 && LA26_43 <= 144)||LA26_43==174||LA26_43==205||LA26_43==207) && (synpred9_Objc())) {s = 69;}

                        else if ( (LA26_43==146) && (synpred9_Objc())) {s = 70;}

                        else if ( (LA26_43==173) ) {s = 71;}

                         
                        input.seek(index26_43);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_48 = input.LA(1);

                         
                        int index26_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA26_48 >= 130 && LA26_48 <= 131)) && (synpred9_Objc())) {s = 72;}

                        else if ( (LA26_48==119) && (synpred9_Objc())) {s = 73;}

                        else if ( (LA26_48==124||LA26_48==128) && (synpred9_Objc())) {s = 74;}

                        else if ( (LA26_48==113||(LA26_48 >= 115 && LA26_48 <= 117)||LA26_48==121||LA26_48==123||LA26_48==127||LA26_48==132||(LA26_48 >= 136 && LA26_48 <= 137)||(LA26_48 >= 139 && LA26_48 <= 144)||LA26_48==174||LA26_48==205||LA26_48==207) && (synpred9_Objc())) {s = 75;}

                        else if ( (LA26_48==146) && (synpred9_Objc())) {s = 76;}

                        else if ( (LA26_48==173) ) {s = 77;}

                         
                        input.seek(index26_48);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_71 = input.LA(1);

                         
                        int index26_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 76;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_71);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_77 = input.LA(1);

                         
                        int index26_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 76;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_77);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_81 = input.LA(1);

                         
                        int index26_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 76;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_81);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA56_eotS =
        "\u0137\uffff";
    static final String DFA56_eofS =
        "\113\uffff\1\2\u00eb\uffff";
    static final String DFA56_minS =
        "\2\20\16\uffff\1\20\6\uffff\1\161\23\uffff\1\56\1\165\1\20\3\56"+
        "\3\165\1\161\3\56\17\uffff\2\20\1\uffff\2\20\14\uffff\10\0\33\uffff"+
        "\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\17\uffff\1\0\6\uffff"+
        "\1\0\37\uffff\4\0\5\uffff\1\0\1\uffff\2\0\66\uffff";
    static final String DFA56_maxS =
        "\1\u00c6\1\u00d1\16\uffff\1\u00d1\6\uffff\1\u00cf\23\uffff\1\u00ca"+
        "\1\u00b2\1\u00d1\2\u00c9\1\u00c2\1\u00b2\1\u00c0\1\u00c2\1\u00cf"+
        "\3\u00c2\17\uffff\2\u00d1\1\uffff\1\u00d1\1\u00d0\14\uffff\10\0"+
        "\33\uffff\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\17\uffff\1\0"+
        "\6\uffff\1\0\37\uffff\4\0\5\uffff\1\0\1\uffff\2\0\66\uffff";
    static final String DFA56_acceptS =
        "\2\uffff\1\3\14\uffff\1\1\1\uffff\6\1\1\uffff\3\1\56\uffff\1\1\7"+
        "\uffff\7\1\142\uffff\1\1\1\uffff\1\1\21\uffff\1\1\21\uffff\1\1\22"+
        "\uffff\1\1\4\uffff\5\1\1\uffff\1\1\67\uffff\1\2";
    static final String DFA56_specialS =
        "\1\uffff\1\0\25\uffff\1\1\23\uffff\1\2\33\uffff\1\3\1\4\1\uffff"+
        "\1\5\1\6\14\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\33\uffff"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\5\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\uffff\1\111\1"+
        "\uffff\1\112\17\uffff\1\113\6\uffff\1\114\37\uffff\1\115\1\116\1"+
        "\117\1\120\5\uffff\1\121\1\uffff\1\122\1\123\66\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\35\uffff\1\2\1\uffff"+
            "\1\1\1\uffff\1\2\31\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\11\uffff\1\2\14\uffff\1\2",
            "\1\2\35\uffff\1\27\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\20\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\2\2\2\uffff\1\22\4\uffff\1\32\1\uffff\1\2\2\uffff"+
            "\1\17\2\uffff\1\24\1\25\1\uffff\1\26\1\uffff\1\30\1\uffff\1"+
            "\2\1\uffff\1\31\1\23\1\21\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\64\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\55\1\uffff\1\53\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\2\2\2\uffff\1\57\4\uffff\1\67\1\uffff\1\2\2\uffff"+
            "\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1\uffff\1\65\1\uffff\1"+
            "\2\1\uffff\1\66\1\60\1\56\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\2\2\1\112\1\uffff\1\2\1\113\1\107\1\uffff\2\2"+
            "\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff\1\2"+
            "\30\uffff\1\110\2\uffff\1\2\3\uffff\1\111\32\uffff\1\2\1\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\130\u0083\uffff\1\122\11\uffff\1\125\2\uffff\1\124\1\126"+
            "\1\uffff\1\127\6\uffff\1\123\1\121",
            "\1\135\2\uffff\1\136\1\132\16\uffff\1\131\42\uffff\1\133\6"+
            "\uffff\1\134",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\137\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\2\2\2\uffff\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1"+
            "\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\3"+
            "\2\6\uffff\1\2",
            "\1\u0081\u0083\uffff\1\173\11\uffff\1\176\2\uffff\1\175\1\177"+
            "\1\uffff\1\u0080\6\uffff\1\174",
            "\1\u0087\u008d\uffff\1\u0084\2\uffff\1\u0083\1\u0085\1\uffff"+
            "\1\u0086\6\uffff\1\u0082",
            "\1\u008c\u008d\uffff\1\u0089\2\uffff\1\u0088\1\u008a\1\uffff"+
            "\1\u008b",
            "\1\u0090\2\uffff\1\u0091\1\u008d\61\uffff\1\u008e\6\uffff\1"+
            "\u008f",
            "\1\u0096\2\uffff\1\u0097\1\u0093\61\uffff\1\u0094\6\uffff\1"+
            "\u0095\14\uffff\1\u0092\1\u0098",
            "\1\u009d\2\uffff\1\u009e\1\u009a\61\uffff\1\u009b\6\uffff\1"+
            "\u009c\14\uffff\1\u0099\2\uffff\1\u009f",
            "\1\2\1\uffff\2\2\1\u00a3\1\uffff\1\2\1\u00a4\1\u00a0\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\30\uffff\1\u00a1\2\uffff\1\2\3\uffff\1\u00a2\32\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u00ae\u008d\uffff\1\u00ab\2\uffff\1\u00aa\1\u00ac\1\uffff"+
            "\1\u00ad",
            "\1\u00b3\u008d\uffff\1\u00b0\2\uffff\1\u00af\1\u00b1\1\uffff"+
            "\1\u00b2",
            "\1\u00b8\u008d\uffff\1\u00b5\2\uffff\1\u00b4\1\u00b6\1\uffff"+
            "\1\u00b7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\u00bb\1\uffff\1\2\1\u00bc\1\u00bd\2\uffff\1\2\2\uffff"+
            "\2\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\1\u00b9\2\uffff\2\2\2\uffff\1\u00ba\6\uffff\1\2\14\uffff"+
            "\1\2\12\uffff\1\2",
            "\1\2\35\uffff\1\u00cd\24\uffff\1\u00d4\23\uffff\1\2\30\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\u00ce\2\2\11\uffff\1\2\14\uffff\1\2\12\uffff"+
            "\1\2",
            "",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\1\u00e0\1\2\2\uffff\1\2\2\uffff\2\2\22"+
            "\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\2\2"+
            "\2\uffff\2\2\11\uffff\1\2\14\uffff\1\2\12\uffff\1\2",
            "\1\u00fa\5\uffff\1\2\27\uffff\1\u00f6\21\uffff\1\2\2\uffff"+
            "\1\u00fb\16\uffff\1\2\4\uffff\1\u00f8\31\uffff\1\2\1\uffff\2"+
            "\2\1\u00f5\1\uffff\1\u0100\1\2\1\u00f7\1\uffff\2\2\1\uffff\3"+
            "\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\1\uffff\1\2\1\u00f9\7"+
            "\2\4\uffff\1\u00f4\2\uffff\1\u00f3\4\2\1\uffff\1\u00fc\1\uffff"+
            "\1\u00fc\1\u00ff\2\2\1\u00fd\1\u00fe\11\2\1\u00fc\4\2\1\uffff"+
            "\7\2\1\u00fc\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "490:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_1 = input.LA(1);

                         
                        int index56_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_1==188) && (synpred11_Objc())) {s = 15;}

                        else if ( (LA56_1==119) ) {s = 16;}

                        else if ( (LA56_1==202) && (synpred11_Objc())) {s = 17;}

                        else if ( (LA56_1==178) && (synpred11_Objc())) {s = 18;}

                        else if ( (LA56_1==201) && (synpred11_Objc())) {s = 19;}

                        else if ( (LA56_1==191) && (synpred11_Objc())) {s = 20;}

                        else if ( (LA56_1==192) && (synpred11_Objc())) {s = 21;}

                        else if ( (LA56_1==194) && (synpred11_Objc())) {s = 22;}

                        else if ( (LA56_1==ID) ) {s = 23;}

                        else if ( (LA56_1==196) && (synpred11_Objc())) {s = 24;}

                        else if ( (LA56_1==200) && (synpred11_Objc())) {s = 25;}

                        else if ( (LA56_1==183) && (synpred11_Objc())) {s = 26;}

                        else if ( (LA56_1==CHAR_LITERAL||LA56_1==NUMBER_LITERAL||LA56_1==STRING_LITERAL||LA56_1==112||LA56_1==117||LA56_1==121||LA56_1==124||(LA56_1 >= 127 && LA56_1 <= 128)||LA56_1==147||LA56_1==159||LA56_1==162||LA56_1==168||(LA56_1 >= 170 && LA56_1 <= 171)||(LA56_1 >= 174 && LA56_1 <= 175)||LA56_1==185||LA56_1==198||LA56_1==209) ) {s = 2;}

                         
                        input.seek(index56_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_23==121) ) {s = 71;}

                        else if ( (LA56_23==171) ) {s = 72;}

                        else if ( (LA56_23==178) && (synpred11_Objc())) {s = 73;}

                        else if ( (LA56_23==117) ) {s = 74;}

                        else if ( (LA56_23==120) ) {s = 75;}

                        else if ( (LA56_23==113||(LA56_23 >= 115 && LA56_23 <= 116)||LA56_23==119||(LA56_23 >= 123 && LA56_23 <= 124)||(LA56_23 >= 127 && LA56_23 <= 128)||(LA56_23 >= 130 && LA56_23 <= 132)||(LA56_23 >= 136 && LA56_23 <= 137)||(LA56_23 >= 139 && LA56_23 <= 144)||LA56_23==146||LA56_23==174||LA56_23==205||LA56_23==207) ) {s = 2;}

                         
                        input.seek(index56_23);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_43 = input.LA(1);

                         
                        int index56_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_43==202) && (synpred11_Objc())) {s = 81;}

                        else if ( (LA56_43==178) && (synpred11_Objc())) {s = 82;}

                        else if ( (LA56_43==201) && (synpred11_Objc())) {s = 83;}

                        else if ( (LA56_43==191) && (synpred11_Objc())) {s = 84;}

                        else if ( (LA56_43==188) && (synpred11_Objc())) {s = 85;}

                        else if ( (LA56_43==192) && (synpred11_Objc())) {s = 86;}

                        else if ( (LA56_43==194) && (synpred11_Objc())) {s = 87;}

                        else if ( (LA56_43==ID) ) {s = 88;}

                         
                        input.seek(index56_43);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_71 = input.LA(1);

                         
                        int index56_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_71==171) ) {s = 185;}

                        else if ( (LA56_71==178) && (synpred11_Objc())) {s = 186;}

                        else if ( (LA56_71==117) ) {s = 187;}

                        else if ( (LA56_71==120) && (synpred11_Objc())) {s = 188;}

                        else if ( (LA56_71==121) ) {s = 189;}

                        else if ( (LA56_71==CHAR_LITERAL||LA56_71==ID||LA56_71==NUMBER_LITERAL||LA56_71==STRING_LITERAL||LA56_71==112||LA56_71==119||LA56_71==124||(LA56_71 >= 127 && LA56_71 <= 128)||LA56_71==147||LA56_71==159||LA56_71==162||LA56_71==168||LA56_71==170||(LA56_71 >= 174 && LA56_71 <= 175)||LA56_71==185||LA56_71==198||LA56_71==209) ) {s = 2;}

                         
                        input.seek(index56_71);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_72 = input.LA(1);

                         
                        int index56_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_72==ID) ) {s = 205;}

                        else if ( (LA56_72==173) && (synpred11_Objc())) {s = 206;}

                        else if ( (LA56_72==CHAR_LITERAL||LA56_72==STRING_LITERAL||LA56_72==112||LA56_72==117||LA56_72==119||LA56_72==121||LA56_72==124||(LA56_72 >= 127 && LA56_72 <= 128)||LA56_72==147||LA56_72==159||LA56_72==162||LA56_72==168||(LA56_72 >= 170 && LA56_72 <= 171)||(LA56_72 >= 174 && LA56_72 <= 175)||LA56_72==185||LA56_72==198||LA56_72==209) ) {s = 2;}

                        else if ( (LA56_72==NUMBER_LITERAL) ) {s = 212;}

                         
                        input.seek(index56_72);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_74 = input.LA(1);

                         
                        int index56_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_74==120) && (synpred11_Objc())) {s = 224;}

                        else if ( (LA56_74==CHAR_LITERAL||LA56_74==ID||LA56_74==NUMBER_LITERAL||LA56_74==STRING_LITERAL||LA56_74==112||LA56_74==117||LA56_74==119||LA56_74==121||LA56_74==124||(LA56_74 >= 127 && LA56_74 <= 128)||LA56_74==147||LA56_74==159||LA56_74==162||LA56_74==168||(LA56_74 >= 170 && LA56_74 <= 171)||(LA56_74 >= 174 && LA56_74 <= 175)||LA56_74==185||LA56_74==198||LA56_74==209) ) {s = 2;}

                         
                        input.seek(index56_74);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_75 = input.LA(1);

                         
                        int index56_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_75==162) && (synpred11_Objc())) {s = 243;}

                        else if ( (LA56_75==159) ) {s = 244;}

                        else if ( (LA56_75==117) ) {s = 245;}

                        else if ( (LA56_75==ID) ) {s = 246;}

                        else if ( (LA56_75==121) ) {s = 247;}

                        else if ( (LA56_75==STRING_LITERAL) && (synpred11_Objc())) {s = 248;}

                        else if ( (LA56_75==147) && (synpred11_Objc())) {s = 249;}

                        else if ( (LA56_75==CHAR_LITERAL) && (synpred11_Objc())) {s = 250;}

                        else if ( (LA56_75==NUMBER_LITERAL) && (synpred11_Objc())) {s = 251;}

                        else if ( (LA56_75==168||LA56_75==170||LA56_75==185||LA56_75==198) && (synpred11_Objc())) {s = 252;}

                        else if ( (LA56_75==174) ) {s = 253;}

                        else if ( (LA56_75==175) && (synpred11_Objc())) {s = 254;}

                        else if ( (LA56_75==171) ) {s = 255;}

                        else if ( (LA56_75==119) ) {s = 256;}

                        else if ( (LA56_75==EOF||LA56_75==DEFINE_LITERAL||LA56_75==MULTI_COMMENT_LIT||LA56_75==SINGLE_COMMENT_LIT||LA56_75==113||(LA56_75 >= 115 && LA56_75 <= 116)||LA56_75==120||(LA56_75 >= 123 && LA56_75 <= 124)||(LA56_75 >= 126 && LA56_75 <= 128)||(LA56_75 >= 130 && LA56_75 <= 132)||(LA56_75 >= 134 && LA56_75 <= 137)||(LA56_75 >= 139 && LA56_75 <= 144)||LA56_75==146||(LA56_75 >= 148 && LA56_75 <= 154)||(LA56_75 >= 163 && LA56_75 <= 166)||(LA56_75 >= 172 && LA56_75 <= 173)||(LA56_75 >= 176 && LA56_75 <= 184)||(LA56_75 >= 186 && LA56_75 <= 189)||(LA56_75 >= 191 && LA56_75 <= 197)||(LA56_75 >= 199 && LA56_75 <= 205)||(LA56_75 >= 207 && LA56_75 <= 208)) ) {s = 2;}

                         
                        input.seek(index56_75);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_88 = input.LA(1);

                         
                        int index56_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_88);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_89 = input.LA(1);

                         
                        int index56_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_89);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_90 = input.LA(1);

                         
                        int index56_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_90);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_91 = input.LA(1);

                         
                        int index56_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_91);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_92 = input.LA(1);

                         
                        int index56_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_92);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_93 = input.LA(1);

                         
                        int index56_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_93);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_94 = input.LA(1);

                         
                        int index56_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_94);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_95 = input.LA(1);

                         
                        int index56_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_95);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_123 = input.LA(1);

                         
                        int index56_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_123);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_124 = input.LA(1);

                         
                        int index56_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_124);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_125 = input.LA(1);

                         
                        int index56_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_125);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_126 = input.LA(1);

                         
                        int index56_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_126);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_127 = input.LA(1);

                         
                        int index56_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_127);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_128 = input.LA(1);

                         
                        int index56_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_128);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_129 = input.LA(1);

                         
                        int index56_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_129);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_130 = input.LA(1);

                         
                        int index56_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_130);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA56_131 = input.LA(1);

                         
                        int index56_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_131);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA56_132 = input.LA(1);

                         
                        int index56_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_132);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA56_133 = input.LA(1);

                         
                        int index56_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_133);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA56_134 = input.LA(1);

                         
                        int index56_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_134);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA56_135 = input.LA(1);

                         
                        int index56_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_135);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA56_136 = input.LA(1);

                         
                        int index56_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_136);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA56_137 = input.LA(1);

                         
                        int index56_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_137);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA56_138 = input.LA(1);

                         
                        int index56_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_138);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA56_139 = input.LA(1);

                         
                        int index56_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_139);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA56_140 = input.LA(1);

                         
                        int index56_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_140);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA56_141 = input.LA(1);

                         
                        int index56_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_141);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA56_142 = input.LA(1);

                         
                        int index56_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_142);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA56_143 = input.LA(1);

                         
                        int index56_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_143);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA56_144 = input.LA(1);

                         
                        int index56_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_144);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA56_145 = input.LA(1);

                         
                        int index56_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_145);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA56_146 = input.LA(1);

                         
                        int index56_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_146);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA56_147 = input.LA(1);

                         
                        int index56_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_147);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA56_148 = input.LA(1);

                         
                        int index56_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_148);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA56_149 = input.LA(1);

                         
                        int index56_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_149);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA56_150 = input.LA(1);

                         
                        int index56_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_150);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA56_151 = input.LA(1);

                         
                        int index56_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_151);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA56_152 = input.LA(1);

                         
                        int index56_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_152);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA56_153 = input.LA(1);

                         
                        int index56_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_153);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA56_154 = input.LA(1);

                         
                        int index56_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_154);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA56_155 = input.LA(1);

                         
                        int index56_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_155);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA56_156 = input.LA(1);

                         
                        int index56_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_156);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA56_157 = input.LA(1);

                         
                        int index56_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_157);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA56_158 = input.LA(1);

                         
                        int index56_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_158);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA56_159 = input.LA(1);

                         
                        int index56_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_159);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA56_160 = input.LA(1);

                         
                        int index56_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_160);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA56_161 = input.LA(1);

                         
                        int index56_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_161);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA56_162 = input.LA(1);

                         
                        int index56_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_162);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA56_163 = input.LA(1);

                         
                        int index56_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_163);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA56_164 = input.LA(1);

                         
                        int index56_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_164);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA56_170 = input.LA(1);

                         
                        int index56_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_170);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA56_171 = input.LA(1);

                         
                        int index56_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_171);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA56_172 = input.LA(1);

                         
                        int index56_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_172);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA56_173 = input.LA(1);

                         
                        int index56_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_173);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA56_174 = input.LA(1);

                         
                        int index56_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_174);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA56_175 = input.LA(1);

                         
                        int index56_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_175);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA56_176 = input.LA(1);

                         
                        int index56_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_176);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA56_177 = input.LA(1);

                         
                        int index56_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_177);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA56_178 = input.LA(1);

                         
                        int index56_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_178);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA56_179 = input.LA(1);

                         
                        int index56_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_179);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA56_180 = input.LA(1);

                         
                        int index56_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_180);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA56_181 = input.LA(1);

                         
                        int index56_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_181);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA56_182 = input.LA(1);

                         
                        int index56_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_182);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA56_183 = input.LA(1);

                         
                        int index56_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_183);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA56_184 = input.LA(1);

                         
                        int index56_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 310;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_184);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA56_185 = input.LA(1);

                         
                        int index56_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_185);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA56_187 = input.LA(1);

                         
                        int index56_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_187);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA56_189 = input.LA(1);

                         
                        int index56_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_189);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA56_205 = input.LA(1);

                         
                        int index56_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_205);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA56_212 = input.LA(1);

                         
                        int index56_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_212);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA56_244 = input.LA(1);

                         
                        int index56_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_244);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA56_245 = input.LA(1);

                         
                        int index56_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_245);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA56_246 = input.LA(1);

                         
                        int index56_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_246);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA56_247 = input.LA(1);

                         
                        int index56_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_247);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA56_253 = input.LA(1);

                         
                        int index56_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_253);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA56_255 = input.LA(1);

                         
                        int index56_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_255);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA56_256 = input.LA(1);

                         
                        int index56_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 254;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_256);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA55_eotS =
        "\74\uffff";
    static final String DFA55_eofS =
        "\1\1\73\uffff";
    static final String DFA55_minS =
        "\1\26\73\uffff";
    static final String DFA55_maxS =
        "\1\u00d0\73\uffff";
    static final String DFA55_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA55_specialS =
        "\74\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\1\1\1\uffff\7\1\4\uffff\1\1\3"+
            "\uffff\4\1\4\uffff\4\1\1\uffff\11\1\1\uffff\4\1\1\uffff\7\1"+
            "\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()+ loopback of 492:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA58_eotS =
        "\u008e\uffff";
    static final String DFA58_eofS =
        "\1\uffff\1\3\u008c\uffff";
    static final String DFA58_minS =
        "\1\56\1\26\1\20\72\uffff\1\56\3\uffff\1\20\2\uffff\1\56\1\100\35"+
        "\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA58_maxS =
        "\1\56\1\u00d0\1\u00d1\72\uffff\1\u00ca\3\uffff\1\u00d1\2\uffff\1"+
        "\56\1\u00cf\35\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2"+
        "\uffff";
    static final String DFA58_acceptS =
        "\3\uffff\1\2\72\uffff\3\1\1\uffff\2\1\2\uffff\14\1\37\uffff\17\1"+
        "\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1";
    static final String DFA58_specialS =
        "\2\uffff\1\0\76\uffff\1\1\3\uffff\1\2\35\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\17\uffff\1\21\1"+
        "\22\3\uffff\1\23\4\uffff\1\24\1\25\2\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\36\uffff\1\3\1"+
            "\uffff\3\3\1\uffff\1\2\2\3\1\uffff\2\3\1\uffff\3\3\1\uffff\3"+
            "\3\1\uffff\4\3\1\uffff\6\3\1\uffff\1\3\1\uffff\7\3\4\uffff\1"+
            "\3\3\uffff\4\3\4\uffff\4\3\1\uffff\11\3\1\uffff\4\3\1\uffff"+
            "\7\3\1\uffff\7\3\1\uffff\2\3",
            "\1\110\35\uffff\1\105\21\uffff\1\77\2\uffff\1\111\16\uffff"+
            "\1\76\4\uffff\1\106\30\uffff\1\116\4\uffff\1\104\1\uffff\1\101"+
            "\1\121\1\75\2\uffff\1\120\2\uffff\1\100\1\120\22\uffff\1\107"+
            "\13\uffff\1\103\2\uffff\1\102\5\uffff\1\112\1\uffff\1\112\1"+
            "\115\2\uffff\1\113\1\114\2\uffff\1\3\4\uffff\1\3\1\uffff\1\112"+
            "\2\uffff\1\3\2\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\112"+
            "\1\uffff\3\3\6\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\143\u0083\uffff\1\3\11\uffff\1\3\2\uffff\2\3\1\uffff\1\3"+
            "\6\uffff\2\3",
            "",
            "",
            "",
            "\1\167\35\uffff\1\155\24\uffff\1\170\23\uffff\1\165\30\uffff"+
            "\1\175\4\uffff\1\164\1\uffff\1\146\1\uffff\1\144\2\uffff\1\177"+
            "\2\uffff\1\161\1\177\22\uffff\1\166\13\uffff\1\163\2\uffff\1"+
            "\162\5\uffff\1\171\1\uffff\1\171\1\174\2\uffff\1\172\1\173\2"+
            "\uffff\1\150\4\uffff\1\160\1\uffff\1\171\2\uffff\1\145\2\uffff"+
            "\1\152\1\153\1\uffff\1\154\1\uffff\1\156\1\uffff\1\171\1\uffff"+
            "\1\157\1\151\1\147\6\uffff\1\176",
            "",
            "",
            "\1\u0080",
            "\1\u0088\21\uffff\1\u0087\36\uffff\1\u008d\1\uffff\2\u008d"+
            "\1\u008b\1\uffff\1\u0083\1\u008a\1\u0085\1\uffff\1\u008d\1\u0084"+
            "\1\uffff\1\u0089\1\u008d\1\u0084\1\uffff\2\u0082\1\u008d\3\uffff"+
            "\2\u008d\1\uffff\6\u008d\1\uffff\1\u0086\30\uffff\1\u0081\2"+
            "\uffff\1\u008d\3\uffff\1\3\32\uffff\1\u008d\1\uffff\1\u008d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "496:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_2 = input.LA(1);

                         
                        int index58_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_2==121) ) {s = 61;}

                        else if ( (LA58_2==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 62;}

                        else if ( (LA58_2==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 63;}

                        else if ( (LA58_2==127) && (synpred13_Objc())) {s = 64;}

                        else if ( (LA58_2==119) ) {s = 65;}

                        else if ( (LA58_2==162) && (synpred13_Objc())) {s = 66;}

                        else if ( (LA58_2==159) && (synpred13_Objc())) {s = 67;}

                        else if ( (LA58_2==117) ) {s = 68;}

                        else if ( (LA58_2==ID) ) {s = 69;}

                        else if ( (LA58_2==STRING_LITERAL) && (synpred13_Objc())) {s = 70;}

                        else if ( (LA58_2==147) && (synpred13_Objc())) {s = 71;}

                        else if ( (LA58_2==CHAR_LITERAL) && (synpred13_Objc())) {s = 72;}

                        else if ( (LA58_2==NUMBER_LITERAL) && (synpred13_Objc())) {s = 73;}

                        else if ( (LA58_2==168||LA58_2==170||LA58_2==185||LA58_2==198) && (synpred13_Objc())) {s = 74;}

                        else if ( (LA58_2==174) && (synpred13_Objc())) {s = 75;}

                        else if ( (LA58_2==175) && (synpred13_Objc())) {s = 76;}

                        else if ( (LA58_2==171) && (synpred13_Objc())) {s = 77;}

                        else if ( (LA58_2==112) && (synpred13_Objc())) {s = 78;}

                        else if ( (LA58_2==209) && (synpred13_Objc())) {s = 79;}

                        else if ( (LA58_2==124||LA58_2==128) && (synpred13_Objc())) {s = 80;}

                        else if ( (LA58_2==120) && (synpred13_Objc())) {s = 81;}

                        else if ( (LA58_2==178||LA58_2==183||LA58_2==188||(LA58_2 >= 191 && LA58_2 <= 192)||LA58_2==194||LA58_2==196||(LA58_2 >= 200 && LA58_2 <= 202)) ) {s = 3;}

                         
                        input.seek(index58_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_65 = input.LA(1);

                         
                        int index58_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_65==121) ) {s = 100;}

                        else if ( (LA58_65==188) ) {s = 101;}

                        else if ( (LA58_65==119) ) {s = 102;}

                        else if ( (LA58_65==202) ) {s = 103;}

                        else if ( (LA58_65==178) ) {s = 104;}

                        else if ( (LA58_65==201) ) {s = 105;}

                        else if ( (LA58_65==191) ) {s = 106;}

                        else if ( (LA58_65==192) ) {s = 107;}

                        else if ( (LA58_65==194) ) {s = 108;}

                        else if ( (LA58_65==ID) ) {s = 109;}

                        else if ( (LA58_65==196) ) {s = 110;}

                        else if ( (LA58_65==200) ) {s = 111;}

                        else if ( (LA58_65==183) ) {s = 112;}

                        else if ( (LA58_65==127) && (synpred13_Objc())) {s = 113;}

                        else if ( (LA58_65==162) && (synpred13_Objc())) {s = 114;}

                        else if ( (LA58_65==159) && (synpred13_Objc())) {s = 115;}

                        else if ( (LA58_65==117) && (synpred13_Objc())) {s = 116;}

                        else if ( (LA58_65==STRING_LITERAL) && (synpred13_Objc())) {s = 117;}

                        else if ( (LA58_65==147) && (synpred13_Objc())) {s = 118;}

                        else if ( (LA58_65==CHAR_LITERAL) && (synpred13_Objc())) {s = 119;}

                        else if ( (LA58_65==NUMBER_LITERAL) && (synpred13_Objc())) {s = 120;}

                        else if ( (LA58_65==168||LA58_65==170||LA58_65==185||LA58_65==198) && (synpred13_Objc())) {s = 121;}

                        else if ( (LA58_65==174) && (synpred13_Objc())) {s = 122;}

                        else if ( (LA58_65==175) && (synpred13_Objc())) {s = 123;}

                        else if ( (LA58_65==171) && (synpred13_Objc())) {s = 124;}

                        else if ( (LA58_65==112) && (synpred13_Objc())) {s = 125;}

                        else if ( (LA58_65==209) && (synpred13_Objc())) {s = 126;}

                        else if ( (LA58_65==124||LA58_65==128) && (synpred13_Objc())) {s = 127;}

                         
                        input.seek(index58_65);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_69 = input.LA(1);

                         
                        int index58_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_69==171) ) {s = 129;}

                        else if ( ((LA58_69 >= 130 && LA58_69 <= 131)) && (synpred13_Objc())) {s = 130;}

                        else if ( (LA58_69==119) && (synpred13_Objc())) {s = 131;}

                        else if ( (LA58_69==124||LA58_69==128) && (synpred13_Objc())) {s = 132;}

                        else if ( (LA58_69==121) ) {s = 133;}

                        else if ( (LA58_69==146) && (synpred13_Objc())) {s = 134;}

                        else if ( (LA58_69==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 135;}

                        else if ( (LA58_69==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 136;}

                        else if ( (LA58_69==126) && (synpred13_Objc())) {s = 137;}

                        else if ( (LA58_69==120) ) {s = 138;}

                        else if ( (LA58_69==117) ) {s = 139;}

                        else if ( (LA58_69==178) ) {s = 3;}

                        else if ( (LA58_69==113||(LA58_69 >= 115 && LA58_69 <= 116)||LA58_69==123||LA58_69==127||LA58_69==132||(LA58_69 >= 136 && LA58_69 <= 137)||(LA58_69 >= 139 && LA58_69 <= 144)||LA58_69==174||LA58_69==205||LA58_69==207) && (synpred13_Objc())) {s = 141;}

                         
                        input.seek(index58_69);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_99 = input.LA(1);

                         
                        int index58_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_99);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_100 = input.LA(1);

                         
                        int index58_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_100);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA58_101 = input.LA(1);

                         
                        int index58_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_101);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA58_102 = input.LA(1);

                         
                        int index58_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_102);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA58_103 = input.LA(1);

                         
                        int index58_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_103);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA58_104 = input.LA(1);

                         
                        int index58_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_104);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA58_105 = input.LA(1);

                         
                        int index58_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_105);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA58_106 = input.LA(1);

                         
                        int index58_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_106);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA58_107 = input.LA(1);

                         
                        int index58_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_107);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA58_108 = input.LA(1);

                         
                        int index58_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_108);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA58_109 = input.LA(1);

                         
                        int index58_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_109);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA58_110 = input.LA(1);

                         
                        int index58_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_110);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA58_111 = input.LA(1);

                         
                        int index58_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_111);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA58_112 = input.LA(1);

                         
                        int index58_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_112);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA58_128 = input.LA(1);

                         
                        int index58_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_128);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA58_129 = input.LA(1);

                         
                        int index58_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_129);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA58_133 = input.LA(1);

                         
                        int index58_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_133);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA58_138 = input.LA(1);

                         
                        int index58_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_138);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA58_139 = input.LA(1);

                         
                        int index58_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 141;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index58_139);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA64_eotS =
        "\u05cc\uffff";
    static final String DFA64_eofS =
        "\4\uffff\1\13\1\uffff\1\13\1\uffff\3\13\4\uffff\1\13\73\uffff\1"+
        "\13\73\uffff\1\13\u00fe\uffff\1\13\132\uffff\1\13\132\uffff\1\13"+
        "\37\uffff\1\13\37\uffff\1\13\u034f\uffff";
    static final String DFA64_minS =
        "\1\20\2\uffff\1\56\1\26\1\56\1\26\1\127\3\26\4\uffff\1\26\1\20\1"+
        "\56\1\20\70\uffff\1\26\1\56\1\20\71\uffff\1\26\1\56\1\20\71\uffff"+
        "\1\56\1\20\71\uffff\1\56\1\20\71\uffff\1\20\1\56\1\20\70\uffff\2"+
        "\20\2\167\4\56\1\127\3\56\1\u00cc\1\56\4\20\1\26\1\56\3\uffff\1"+
        "\20\2\uffff\1\56\1\100\26\uffff\1\56\1\20\71\uffff\1\26\1\56\3\uffff"+
        "\1\20\2\uffff\1\56\1\100\26\uffff\1\56\1\20\71\uffff\1\26\1\56\3"+
        "\uffff\1\20\2\uffff\1\56\1\100\26\uffff\1\26\1\56\3\uffff\1\20\2"+
        "\uffff\1\56\1\100\26\uffff\1\26\1\56\3\uffff\1\20\2\uffff\1\56\1"+
        "\100\26\uffff\24\0\3\uffff\1\0\2\uffff\2\0\26\uffff\64\0\1\uffff"+
        "\7\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\114\0\100\uffff"+
        "\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\3\uffff\1"+
        "\0\2\uffff\2\0\26\uffff\2\0\100\uffff\16\0\17\uffff\2\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\3\uffff\1\0\2\uffff\2\0\26\uffff\2"+
        "\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2"+
        "\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2"+
        "\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA64_maxS =
        "\1\u00c6\2\uffff\1\56\1\u00d0\1\56\1\u00d0\1\127\3\u00d0\4\uffff"+
        "\1\u00d0\1\u00d1\1\56\1\u00d1\70\uffff\1\u00d0\1\56\1\u00d1\71\uffff"+
        "\1\u00d0\1\56\1\u00d1\71\uffff\1\56\1\u00d1\71\uffff\1\56\1\u00d1"+
        "\71\uffff\1\u00d1\1\56\1\u00d1\70\uffff\1\u00c6\1\u00d1\2\167\1"+
        "\56\1\u00cf\1\56\1\u00cf\1\127\3\u00cf\1\u00cc\1\u00ca\1\u00d1\3"+
        "\u00c6\1\u00d0\1\u00ca\3\uffff\1\u00d1\2\uffff\1\56\1\u00cf\26\uffff"+
        "\1\56\1\u00d1\71\uffff\1\u00d0\1\u00ca\3\uffff\1\u00d1\2\uffff\1"+
        "\56\1\u00cf\26\uffff\1\56\1\u00d1\71\uffff\1\u00d0\1\u00ca\3\uffff"+
        "\1\u00d1\2\uffff\1\56\1\u00cf\26\uffff\1\u00d0\1\u00ca\3\uffff\1"+
        "\u00d1\2\uffff\1\56\1\u00cf\26\uffff\1\u00d0\1\u00ca\3\uffff\1\u00d1"+
        "\2\uffff\1\56\1\u00cf\26\uffff\24\0\3\uffff\1\0\2\uffff\2\0\26\uffff"+
        "\64\0\1\uffff\7\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\114"+
        "\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2"+
        "\0\3\uffff\1\0\2\uffff\2\0\26\uffff\2\0\100\uffff\16\0\17\uffff"+
        "\2\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\3\uffff\1\0\2\uffff\2\0"+
        "\26\uffff\2\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2"+
        "\0\2\uffff\2\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2"+
        "\0\2\uffff\2\0\100\uffff\16\0\17\uffff\2\0\3\uffff\1\0\4\uffff\2"+
        "\0\2\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\1\1\2\10\uffff\1\4\u017c\uffff\3\3\1\uffff\2\3\2\uffff"+
        "\14\3\107\uffff\3\3\1\uffff\2\3\2\uffff\14\3\107\uffff\3\3\1\uffff"+
        "\2\3\2\uffff\14\3\14\uffff\3\3\1\uffff\2\3\2\uffff\14\3\14\uffff"+
        "\3\3\1\uffff\2\3\2\uffff\14\3\36\uffff\3\3\1\uffff\2\3\2\uffff\14"+
        "\3\u00f7\uffff\17\3\2\uffff\3\3\1\uffff\4\3\3\uffff\1\3\2\uffff"+
        "\3\3\1\uffff\2\3\2\uffff\14\3\132\uffff\17\3\2\uffff\3\3\1\uffff"+
        "\4\3\3\uffff\1\3\2\uffff\3\3\1\uffff\2\3\2\uffff\14\3\132\uffff"+
        "\17\3\2\uffff\3\3\1\uffff\4\3\3\uffff\1\3\120\uffff\17\3\2\uffff"+
        "\3\3\1\uffff\4\3\3\uffff\1\3\120\uffff\17\3\2\uffff\3\3\1\uffff"+
        "\4\3\3\uffff\1\3";
    static final String DFA64_specialS =
        "\22\uffff\1\0\72\uffff\1\1\73\uffff\1\2\72\uffff\1\3\72\uffff\1"+
        "\4\73\uffff\1\5\117\uffff\1\6\3\uffff\1\7\27\uffff\1\10\76\uffff"+
        "\1\11\3\uffff\1\12\27\uffff\1\13\76\uffff\1\14\3\uffff\1\15\33\uffff"+
        "\1\16\3\uffff\1\17\33\uffff\1\20\3\uffff\1\21\26\uffff\1\22\1\23"+
        "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\3\uffff\1\46\2\uffff\1\47\1\50\26\uffff"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1"+
        "\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
        "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
        "\1\130\1\131\1\132\1\133\1\134\1\uffff\1\135\1\136\1\137\1\140\1"+
        "\141\1\142\1\143\1\uffff\1\144\1\145\1\146\1\147\1\150\1\151\1\152"+
        "\1\uffff\1\153\1\154\1\155\1\156\1\157\1\160\1\uffff\1\161\1\162"+
        "\1\163\1\164\1\165\1\166\1\uffff\1\167\1\170\1\171\1\172\1\173\1"+
        "\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1"+
        "\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1"+
        "\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1"+
        "\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1"+
        "\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1"+
        "\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1"+
        "\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1"+
        "\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1"+
        "\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\100\uffff\1\u00c3"+
        "\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb"+
        "\1\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\17\uffff\1\u00d1\1\u00d2"+
        "\3\uffff\1\u00d3\4\uffff\1\u00d4\1\u00d5\2\uffff\1\u00d6\1\u00d7"+
        "\3\uffff\1\u00d8\2\uffff\1\u00d9\1\u00da\26\uffff\1\u00db\1\u00dc"+
        "\100\uffff\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3"+
        "\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\17\uffff"+
        "\1\u00eb\1\u00ec\3\uffff\1\u00ed\4\uffff\1\u00ee\1\u00ef\2\uffff"+
        "\1\u00f0\1\u00f1\3\uffff\1\u00f2\2\uffff\1\u00f3\1\u00f4\26\uffff"+
        "\1\u00f5\1\u00f6\100\uffff\1\u00f7\1\u00f8\1\u00f9\1\u00fa\1\u00fb"+
        "\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1\u0100\1\u0101\1\u0102\1\u0103"+
        "\1\u0104\17\uffff\1\u0105\1\u0106\3\uffff\1\u0107\4\uffff\1\u0108"+
        "\1\u0109\2\uffff\1\u010a\1\u010b\100\uffff\1\u010c\1\u010d\1\u010e"+
        "\1\u010f\1\u0110\1\u0111\1\u0112\1\u0113\1\u0114\1\u0115\1\u0116"+
        "\1\u0117\1\u0118\1\u0119\17\uffff\1\u011a\1\u011b\3\uffff\1\u011c"+
        "\4\uffff\1\u011d\1\u011e\2\uffff\1\u011f\1\u0120\100\uffff\1\u0121"+
        "\1\u0122\1\u0123\1\u0124\1\u0125\1\u0126\1\u0127\1\u0128\1\u0129"+
        "\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e\17\uffff\1\u012f\1\u0130"+
        "\3\uffff\1\u0131\4\uffff\1\u0132\1\u0133\2\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\10\35\uffff\1\4\24\uffff\1\11\23\uffff\1\6\35\uffff\1\3\1"+
            "\uffff\1\13\1\uffff\1\5\31\uffff\1\7\13\uffff\1\2\2\uffff\1"+
            "\1\5\uffff\1\12\1\uffff\1\12\1\13\2\uffff\2\13\11\uffff\1\12"+
            "\14\uffff\1\12",
            "",
            "",
            "\1\17",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\22\2\13\1\uffff\2\13\1\uffff\3\13"+
            "\1\uffff\2\21\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1\13\1"+
            "\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\1\20\3\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\113",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\115\2\13\1\uffff\2\13\1\uffff\3\13"+
            "\1\uffff\2\114\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1\13\1"+
            "\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff\11"+
            "\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u0087",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u0089\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u0088\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u00c4\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u00c3\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u00ff\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u00fe\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u013b\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u013a\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\1\u0139\3"+
            "\13\1\uffff\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff"+
            "\2\13",
            "\1\u017d\35\uffff\1\u0179\24\uffff\1\u017e\23\uffff\1\u017b"+
            "\30\uffff\1\u0183\4\uffff\1\u0178\1\uffff\1\u0175\1\uffff\1"+
            "\u017a\2\uffff\1\u0185\2\uffff\1\u0174\1\u0185\22\uffff\1\u017c"+
            "\13\uffff\1\u0177\2\uffff\1\u0176\5\uffff\1\u017f\1\uffff\1"+
            "\u017f\1\u0182\2\uffff\1\u0180\1\u0181\11\uffff\1\u017f\14\uffff"+
            "\1\u017f\12\uffff\1\u0184",
            "\1\u0186",
            "\1\u0192\35\uffff\1\u018f\21\uffff\1\u0189\2\uffff\1\u0193"+
            "\16\uffff\1\u0188\4\uffff\1\u0190\30\uffff\1\u0198\4\uffff\1"+
            "\u018e\1\uffff\1\u018b\1\u019b\1\u0187\2\uffff\1\u019a\2\uffff"+
            "\1\u018a\1\u019a\22\uffff\1\u0191\13\uffff\1\u018d\2\uffff\1"+
            "\u018c\5\uffff\1\u0194\1\uffff\1\u0194\1\u0197\2\uffff\1\u0195"+
            "\1\u0196\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u0194\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u0194\1"+
            "\uffff\3\13\6\uffff\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u01a7\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u01a6\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u01e1",
            "\1\u01ed\35\uffff\1\u01ea\21\uffff\1\u01e4\2\uffff\1\u01ee"+
            "\16\uffff\1\u01e3\4\uffff\1\u01eb\30\uffff\1\u01f3\4\uffff\1"+
            "\u01e9\1\uffff\1\u01e6\1\u01f6\1\u01e2\2\uffff\1\u01f5\2\uffff"+
            "\1\u01e5\1\u01f5\22\uffff\1\u01ec\13\uffff\1\u01e8\2\uffff\1"+
            "\u01e7\5\uffff\1\u01ef\1\uffff\1\u01ef\1\u01f2\2\uffff\1\u01f0"+
            "\1\u01f1\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u01ef\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u01ef\1"+
            "\uffff\3\13\6\uffff\1\u01f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u0202\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u0201\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u023c",
            "\1\u0248\35\uffff\1\u0245\21\uffff\1\u023f\2\uffff\1\u0249"+
            "\16\uffff\1\u023e\4\uffff\1\u0246\30\uffff\1\u024e\4\uffff\1"+
            "\u0244\1\uffff\1\u0241\1\u0251\1\u023d\2\uffff\1\u0250\2\uffff"+
            "\1\u0240\1\u0250\22\uffff\1\u0247\13\uffff\1\u0243\2\uffff\1"+
            "\u0242\5\uffff\1\u024a\1\uffff\1\u024a\1\u024d\2\uffff\1\u024b"+
            "\1\u024c\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u024a\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u024a\1"+
            "\uffff\3\13\6\uffff\1\u024f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u025c",
            "\1\u0268\35\uffff\1\u0265\21\uffff\1\u025f\2\uffff\1\u0269"+
            "\16\uffff\1\u025e\4\uffff\1\u0266\30\uffff\1\u026e\4\uffff\1"+
            "\u0264\1\uffff\1\u0261\1\u0271\1\u025d\2\uffff\1\u0270\2\uffff"+
            "\1\u0260\1\u0270\22\uffff\1\u0267\13\uffff\1\u0263\2\uffff\1"+
            "\u0262\5\uffff\1\u026a\1\uffff\1\u026a\1\u026d\2\uffff\1\u026b"+
            "\1\u026c\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u026a\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u026a\1"+
            "\uffff\3\13\6\uffff\1\u026f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u027c",
            "\1\u0288\35\uffff\1\u0285\21\uffff\1\u027f\2\uffff\1\u0289"+
            "\16\uffff\1\u027e\4\uffff\1\u0286\30\uffff\1\u028e\4\uffff\1"+
            "\u0284\1\uffff\1\u0281\1\u0291\1\u027d\2\uffff\1\u0290\2\uffff"+
            "\1\u0280\1\u0290\22\uffff\1\u0287\13\uffff\1\u0283\2\uffff\1"+
            "\u0282\5\uffff\1\u028a\1\uffff\1\u028a\1\u028d\2\uffff\1\u028b"+
            "\1\u028c\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u028a\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u028a\1"+
            "\uffff\3\13\6\uffff\1\u028f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02a5\35\uffff\1\u02a1\24\uffff\1\u02a6\23\uffff\1\u02a3"+
            "\30\uffff\1\u02ab\4\uffff\1\u02a0\1\uffff\1\u029d\1\uffff\1"+
            "\u02a2\2\uffff\1\u02ad\2\uffff\1\u029c\1\u02ad\22\uffff\1\u02a4"+
            "\13\uffff\1\u029f\2\uffff\1\u029e\5\uffff\1\u02a7\1\uffff\1"+
            "\u02a7\1\u02aa\2\uffff\1\u02a8\1\u02a9\11\uffff\1\u02a7\14\uffff"+
            "\1\u02a7\12\uffff\1\u02ac",
            "\1\u02ae",
            "\1\u02ba\35\uffff\1\u02b7\21\uffff\1\u02b1\2\uffff\1\u02bb"+
            "\16\uffff\1\u02b0\4\uffff\1\u02b8\30\uffff\1\u02c0\4\uffff\1"+
            "\u02b6\1\uffff\1\u02b3\1\u02c3\1\u02af\2\uffff\1\u02c2\2\uffff"+
            "\1\u02b2\1\u02c2\22\uffff\1\u02b9\13\uffff\1\u02b5\2\uffff\1"+
            "\u02b4\5\uffff\1\u02bc\1\uffff\1\u02bc\1\u02bf\2\uffff\1\u02bd"+
            "\1\u02be\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u02bc\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u02bc\1"+
            "\uffff\3\13\6\uffff\1\u02c1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d6\35\uffff\1\u02d2\24\uffff\1\u02d7\23\uffff\1\u02d4"+
            "\35\uffff\1\u02d1\1\uffff\1\u02ce\1\uffff\1\u02d3\31\uffff\1"+
            "\u02d5\13\uffff\1\u02d0\2\uffff\1\u02cf\5\uffff\1\u02d8\1\uffff"+
            "\1\u02d8\1\u02db\2\uffff\1\u02d9\1\u02da\11\uffff\1\u02d8\14"+
            "\uffff\1\u02d8",
            "\1\u02ef\35\uffff\1\u02e4\24\uffff\1\u02f0\23\uffff\1\u02ed"+
            "\30\uffff\1\u02f5\4\uffff\1\u02eb\1\uffff\1\u02dd\1\uffff\1"+
            "\u02ec\2\uffff\1\u02f7\2\uffff\1\u02e8\1\u02f7\22\uffff\1\u02ee"+
            "\13\uffff\1\u02ea\2\uffff\1\u02e9\5\uffff\1\u02f1\1\uffff\1"+
            "\u02f1\1\u02f4\2\uffff\1\u02f2\1\u02f3\2\uffff\1\u02df\4\uffff"+
            "\1\u02e7\1\uffff\1\u02f1\2\uffff\1\u02dc\2\uffff\1\u02e1\1\u02e2"+
            "\1\uffff\1\u02e3\1\uffff\1\u02e5\1\uffff\1\u02f1\1\uffff\1\u02e6"+
            "\1\u02e0\1\u02de\6\uffff\1\u02f6",
            "\1\u02f8",
            "\1\u02f9",
            "\1\u02fa",
            "\1\13\102\uffff\1\u02ff\1\uffff\3\u02ff\1\uffff\1\u02fd\1\uffff"+
            "\1\u02ff\1\uffff\1\u02ff\1\u02fe\2\uffff\1\u02ff\1\u02fe\1\uffff"+
            "\2\u02fc\1\u02ff\3\uffff\2\u02ff\1\uffff\6\u02ff\1\uffff\1\u0300"+
            "\30\uffff\1\u02fb\1\uffff\1\u0301\1\u02ff\36\uffff\1\u02ff\1"+
            "\uffff\1\u02ff",
            "\1\u0303",
            "\1\13\102\uffff\1\u0307\1\uffff\3\u0307\1\uffff\1\u0305\1\uffff"+
            "\1\u0307\1\uffff\1\u0307\1\u0306\2\uffff\1\u0307\1\u0306\1\uffff"+
            "\2\u0304\1\u0307\3\uffff\2\u0307\1\uffff\6\u0307\1\uffff\1\u0308"+
            "\32\uffff\1\u0309\1\u0307\36\uffff\1\u0307\1\uffff\1\u0307",
            "\1\u030b",
            "\1\13\102\uffff\1\u030f\1\uffff\3\u030f\1\uffff\1\u030d\1\uffff"+
            "\1\u030f\1\uffff\1\u030f\1\u030e\2\uffff\1\u030f\1\u030e\1\uffff"+
            "\2\u030c\1\u030f\3\uffff\2\u030f\1\uffff\6\u030f\1\uffff\1\u0310"+
            "\32\uffff\1\u0311\1\u030f\36\uffff\1\u030f\1\uffff\1\u030f",
            "\1\13\102\uffff\1\u0316\1\uffff\3\u0316\1\uffff\1\u0314\1\uffff"+
            "\1\u0316\1\uffff\1\u0316\1\u0315\2\uffff\1\u0316\1\u0315\1\uffff"+
            "\2\u0313\1\u0316\3\uffff\2\u0316\1\uffff\6\u0316\1\uffff\1\u0317"+
            "\32\uffff\1\u0318\1\u0316\36\uffff\1\u0316\1\uffff\1\u0316",
            "\1\13\102\uffff\1\u031d\1\uffff\3\u031d\1\uffff\1\u031b\1\uffff"+
            "\1\u031d\1\uffff\1\u031d\1\u031c\2\uffff\1\u031d\1\u031c\1\uffff"+
            "\2\u031a\1\u031d\3\uffff\2\u031d\1\uffff\6\u031d\1\uffff\1\u031e"+
            "\32\uffff\1\u031f\1\u031d\36\uffff\1\u031d\1\uffff\1\u031d",
            "\1\u0321",
            "\1\u032a\110\uffff\1\u0323\1\u032e\71\uffff\1\u0325\4\uffff"+
            "\1\u032d\4\uffff\1\u0322\2\uffff\1\u0327\1\u0328\1\uffff\1\u0329"+
            "\1\uffff\1\u032b\3\uffff\1\u032c\1\u0326\1\u0324",
            "\1\u0338\35\uffff\1\u0334\24\uffff\1\u0339\23\uffff\1\u0336"+
            "\30\uffff\1\u033e\4\uffff\1\u0333\1\uffff\1\u0330\1\uffff\1"+
            "\u0335\2\uffff\1\u0340\2\uffff\1\u032f\1\u0340\22\uffff\1\u0337"+
            "\13\uffff\1\u0332\2\uffff\1\u0331\5\uffff\1\u033a\1\uffff\1"+
            "\u033a\1\u033d\2\uffff\1\u033b\1\u033c\11\uffff\1\u033a\14\uffff"+
            "\1\u033a\12\uffff\1\u033f",
            "\1\u0349\35\uffff\1\u0345\24\uffff\1\u034a\23\uffff\1\u0347"+
            "\35\uffff\1\u0344\1\uffff\1\u0341\1\uffff\1\u0346\31\uffff\1"+
            "\u0348\13\uffff\1\u0343\2\uffff\1\u0342\5\uffff\1\u034b\1\uffff"+
            "\1\u034b\1\u034e\2\uffff\1\u034c\1\u034d\11\uffff\1\u034b\14"+
            "\uffff\1\u034b",
            "\1\u0357\35\uffff\1\u0353\24\uffff\1\u0358\23\uffff\1\u0355"+
            "\35\uffff\1\u0352\1\uffff\1\u034f\1\uffff\1\u0354\31\uffff\1"+
            "\u0356\13\uffff\1\u0351\2\uffff\1\u0350\5\uffff\1\u0359\1\uffff"+
            "\1\u0359\1\u035c\2\uffff\1\u035a\1\u035b\11\uffff\1\u0359\14"+
            "\uffff\1\u0359",
            "\1\u0365\35\uffff\1\u0361\24\uffff\1\u0366\23\uffff\1\u0363"+
            "\35\uffff\1\u0360\1\uffff\1\u035d\1\uffff\1\u0362\31\uffff\1"+
            "\u0364\13\uffff\1\u035f\2\uffff\1\u035e\5\uffff\1\u0367\1\uffff"+
            "\1\u0367\1\u036a\2\uffff\1\u0368\1\u0369\11\uffff\1\u0367\14"+
            "\uffff\1\u0367",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u036b\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u036c\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u03ad\u0083\uffff\1\13\11\uffff\1\13\2\uffff\2\13\1\uffff"+
            "\1\13\6\uffff\2\13",
            "",
            "",
            "",
            "\1\u03c1\35\uffff\1\u03b7\24\uffff\1\u03c2\23\uffff\1\u03bf"+
            "\30\uffff\1\u03c7\4\uffff\1\u03be\1\uffff\1\u03b0\1\uffff\1"+
            "\u03ae\2\uffff\1\u03c9\2\uffff\1\u03bb\1\u03c9\22\uffff\1\u03c0"+
            "\13\uffff\1\u03bd\2\uffff\1\u03bc\5\uffff\1\u03c3\1\uffff\1"+
            "\u03c3\1\u03c6\2\uffff\1\u03c4\1\u03c5\2\uffff\1\u03b2\4\uffff"+
            "\1\u03ba\1\uffff\1\u03c3\2\uffff\1\u03af\2\uffff\1\u03b4\1\u03b5"+
            "\1\uffff\1\u03b6\1\uffff\1\u03b8\1\uffff\1\u03c3\1\uffff\1\u03b9"+
            "\1\u03b3\1\u03b1\6\uffff\1\u03c8",
            "",
            "",
            "\1\u03ca",
            "\1\u03d2\21\uffff\1\u03d1\36\uffff\1\u03d7\1\uffff\2\u03d7"+
            "\1\u03d5\1\uffff\1\u03cd\1\u03d4\1\u03cf\1\uffff\1\u03d7\1\u03ce"+
            "\1\uffff\1\u03d3\1\u03d7\1\u03ce\1\uffff\2\u03cc\1\u03d7\3\uffff"+
            "\2\u03d7\1\uffff\6\u03d7\1\uffff\1\u03d0\30\uffff\1\u03cb\2"+
            "\uffff\1\u03d7\3\uffff\1\13\32\uffff\1\u03d7\1\uffff\1\u03d7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03d8",
            "\1\u03e4\35\uffff\1\u03e1\21\uffff\1\u03db\2\uffff\1\u03e5"+
            "\16\uffff\1\u03da\4\uffff\1\u03e2\30\uffff\1\u03ea\4\uffff\1"+
            "\u03e0\1\uffff\1\u03dd\1\u03ed\1\u03d9\2\uffff\1\u03ec\2\uffff"+
            "\1\u03dc\1\u03ec\22\uffff\1\u03e3\13\uffff\1\u03df\2\uffff\1"+
            "\u03de\5\uffff\1\u03e6\1\uffff\1\u03e6\1\u03e9\2\uffff\1\u03e7"+
            "\1\u03e8\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u03e6\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u03e6\1"+
            "\uffff\3\13\6\uffff\1\u03eb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u03f8\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u03f9\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u043a\u0083\uffff\1\13\11\uffff\1\13\2\uffff\2\13\1\uffff"+
            "\1\13\6\uffff\2\13",
            "",
            "",
            "",
            "\1\u044e\35\uffff\1\u0444\24\uffff\1\u044f\23\uffff\1\u044c"+
            "\30\uffff\1\u0454\4\uffff\1\u044b\1\uffff\1\u043d\1\uffff\1"+
            "\u043b\2\uffff\1\u0456\2\uffff\1\u0448\1\u0456\22\uffff\1\u044d"+
            "\13\uffff\1\u044a\2\uffff\1\u0449\5\uffff\1\u0450\1\uffff\1"+
            "\u0450\1\u0453\2\uffff\1\u0451\1\u0452\2\uffff\1\u043f\4\uffff"+
            "\1\u0447\1\uffff\1\u0450\2\uffff\1\u043c\2\uffff\1\u0441\1\u0442"+
            "\1\uffff\1\u0443\1\uffff\1\u0445\1\uffff\1\u0450\1\uffff\1\u0446"+
            "\1\u0440\1\u043e\6\uffff\1\u0455",
            "",
            "",
            "\1\u0457",
            "\1\u045f\21\uffff\1\u045e\36\uffff\1\u0464\1\uffff\2\u0464"+
            "\1\u0462\1\uffff\1\u045a\1\u0461\1\u045c\1\uffff\1\u0464\1\u045b"+
            "\1\uffff\1\u0460\1\u0464\1\u045b\1\uffff\2\u0459\1\u0464\3\uffff"+
            "\2\u0464\1\uffff\6\u0464\1\uffff\1\u045d\30\uffff\1\u0458\2"+
            "\uffff\1\u0464\3\uffff\1\13\32\uffff\1\u0464\1\uffff\1\u0464",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0465",
            "\1\u0471\35\uffff\1\u046e\21\uffff\1\u0468\2\uffff\1\u0472"+
            "\16\uffff\1\u0467\4\uffff\1\u046f\30\uffff\1\u0477\4\uffff\1"+
            "\u046d\1\uffff\1\u046a\1\u047a\1\u0466\2\uffff\1\u0479\2\uffff"+
            "\1\u0469\1\u0479\22\uffff\1\u0470\13\uffff\1\u046c\2\uffff\1"+
            "\u046b\5\uffff\1\u0473\1\uffff\1\u0473\1\u0476\2\uffff\1\u0474"+
            "\1\u0475\2\uffff\1\13\4\uffff\1\13\1\uffff\1\u0473\2\uffff\1"+
            "\13\2\uffff\2\13\1\uffff\1\13\1\uffff\1\13\1\uffff\1\u0473\1"+
            "\uffff\3\13\6\uffff\1\u0478",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u0485\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u0486\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u04c7\u0083\uffff\1\13\11\uffff\1\13\2\uffff\2\13\1\uffff"+
            "\1\13\6\uffff\2\13",
            "",
            "",
            "",
            "\1\u04db\35\uffff\1\u04d1\24\uffff\1\u04dc\23\uffff\1\u04d9"+
            "\30\uffff\1\u04e1\4\uffff\1\u04d8\1\uffff\1\u04ca\1\uffff\1"+
            "\u04c8\2\uffff\1\u04e3\2\uffff\1\u04d5\1\u04e3\22\uffff\1\u04da"+
            "\13\uffff\1\u04d7\2\uffff\1\u04d6\5\uffff\1\u04dd\1\uffff\1"+
            "\u04dd\1\u04e0\2\uffff\1\u04de\1\u04df\2\uffff\1\u04cc\4\uffff"+
            "\1\u04d4\1\uffff\1\u04dd\2\uffff\1\u04c9\2\uffff\1\u04ce\1\u04cf"+
            "\1\uffff\1\u04d0\1\uffff\1\u04d2\1\uffff\1\u04dd\1\uffff\1\u04d3"+
            "\1\u04cd\1\u04cb\6\uffff\1\u04e2",
            "",
            "",
            "\1\u04e4",
            "\1\u04ec\21\uffff\1\u04eb\36\uffff\1\u04f1\1\uffff\2\u04f1"+
            "\1\u04ef\1\uffff\1\u04e7\1\u04ee\1\u04e9\1\uffff\1\u04f1\1\u04e8"+
            "\1\uffff\1\u04ed\1\u04f1\1\u04e8\1\uffff\2\u04e6\1\u04f1\3\uffff"+
            "\2\u04f1\1\uffff\6\u04f1\1\uffff\1\u04ea\30\uffff\1\u04e5\2"+
            "\uffff\1\u04f1\3\uffff\1\13\32\uffff\1\u04f1\1\uffff\1\u04f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u04f2\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u04f3\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u0534\u0083\uffff\1\13\11\uffff\1\13\2\uffff\2\13\1\uffff"+
            "\1\13\6\uffff\2\13",
            "",
            "",
            "",
            "\1\u0548\35\uffff\1\u053e\24\uffff\1\u0549\23\uffff\1\u0546"+
            "\30\uffff\1\u054e\4\uffff\1\u0545\1\uffff\1\u0537\1\uffff\1"+
            "\u0535\2\uffff\1\u0550\2\uffff\1\u0542\1\u0550\22\uffff\1\u0547"+
            "\13\uffff\1\u0544\2\uffff\1\u0543\5\uffff\1\u054a\1\uffff\1"+
            "\u054a\1\u054d\2\uffff\1\u054b\1\u054c\2\uffff\1\u0539\4\uffff"+
            "\1\u0541\1\uffff\1\u054a\2\uffff\1\u0536\2\uffff\1\u053b\1\u053c"+
            "\1\uffff\1\u053d\1\uffff\1\u053f\1\uffff\1\u054a\1\uffff\1\u0540"+
            "\1\u053a\1\u0538\6\uffff\1\u054f",
            "",
            "",
            "\1\u0551",
            "\1\u0559\21\uffff\1\u0558\36\uffff\1\u055e\1\uffff\2\u055e"+
            "\1\u055c\1\uffff\1\u0554\1\u055b\1\u0556\1\uffff\1\u055e\1\u0555"+
            "\1\uffff\1\u055a\1\u055e\1\u0555\1\uffff\2\u0553\1\u055e\3\uffff"+
            "\2\u055e\1\uffff\6\u055e\1\uffff\1\u0557\30\uffff\1\u0552\2"+
            "\uffff\1\u055e\3\uffff\1\13\32\uffff\1\u055e\1\uffff\1\u055e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\u055f\2\13\1\uffff\2\13\1\uffff\3"+
            "\13\1\uffff\2\u0560\1\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1"+
            "\13\1\uffff\7\13\4\uffff\1\13\3\uffff\4\13\4\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "\1\u05a1\u0083\uffff\1\13\11\uffff\1\13\2\uffff\2\13\1\uffff"+
            "\1\13\6\uffff\2\13",
            "",
            "",
            "",
            "\1\u05b5\35\uffff\1\u05ab\24\uffff\1\u05b6\23\uffff\1\u05b3"+
            "\30\uffff\1\u05bb\4\uffff\1\u05b2\1\uffff\1\u05a4\1\uffff\1"+
            "\u05a2\2\uffff\1\u05bd\2\uffff\1\u05af\1\u05bd\22\uffff\1\u05b4"+
            "\13\uffff\1\u05b1\2\uffff\1\u05b0\5\uffff\1\u05b7\1\uffff\1"+
            "\u05b7\1\u05ba\2\uffff\1\u05b8\1\u05b9\2\uffff\1\u05a6\4\uffff"+
            "\1\u05ae\1\uffff\1\u05b7\2\uffff\1\u05a3\2\uffff\1\u05a8\1\u05a9"+
            "\1\uffff\1\u05aa\1\uffff\1\u05ac\1\uffff\1\u05b7\1\uffff\1\u05ad"+
            "\1\u05a7\1\u05a5\6\uffff\1\u05bc",
            "",
            "",
            "\1\u05be",
            "\1\u05c6\21\uffff\1\u05c5\36\uffff\1\u05cb\1\uffff\2\u05cb"+
            "\1\u05c9\1\uffff\1\u05c1\1\u05c8\1\u05c3\1\uffff\1\u05cb\1\u05c2"+
            "\1\uffff\1\u05c7\1\u05cb\1\u05c2\1\uffff\2\u05c0\1\u05cb\3\uffff"+
            "\2\u05cb\1\uffff\6\u05cb\1\uffff\1\u05c4\30\uffff\1\u05bf\2"+
            "\uffff\1\u05cb\3\uffff\1\13\32\uffff\1\u05cb\1\uffff\1\u05cb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "501:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_18==121) ) {s = 391;}

                        else if ( (LA64_18==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 392;}

                        else if ( (LA64_18==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 393;}

                        else if ( (LA64_18==127) && (synpred14_Objc())) {s = 394;}

                        else if ( (LA64_18==119) ) {s = 395;}

                        else if ( (LA64_18==162) && (synpred14_Objc())) {s = 396;}

                        else if ( (LA64_18==159) && (synpred14_Objc())) {s = 397;}

                        else if ( (LA64_18==117) ) {s = 398;}

                        else if ( (LA64_18==ID) ) {s = 399;}

                        else if ( (LA64_18==STRING_LITERAL) && (synpred14_Objc())) {s = 400;}

                        else if ( (LA64_18==147) && (synpred14_Objc())) {s = 401;}

                        else if ( (LA64_18==CHAR_LITERAL) && (synpred14_Objc())) {s = 402;}

                        else if ( (LA64_18==NUMBER_LITERAL) && (synpred14_Objc())) {s = 403;}

                        else if ( (LA64_18==168||LA64_18==170||LA64_18==185||LA64_18==198) && (synpred14_Objc())) {s = 404;}

                        else if ( (LA64_18==174) && (synpred14_Objc())) {s = 405;}

                        else if ( (LA64_18==175) && (synpred14_Objc())) {s = 406;}

                        else if ( (LA64_18==171) && (synpred14_Objc())) {s = 407;}

                        else if ( (LA64_18==112) && (synpred14_Objc())) {s = 408;}

                        else if ( (LA64_18==209) && (synpred14_Objc())) {s = 409;}

                        else if ( (LA64_18==124||LA64_18==128) && (synpred14_Objc())) {s = 410;}

                        else if ( (LA64_18==120) && (synpred14_Objc())) {s = 411;}

                        else if ( (LA64_18==178||LA64_18==183||LA64_18==188||(LA64_18 >= 191 && LA64_18 <= 192)||LA64_18==194||LA64_18==196||(LA64_18 >= 200 && LA64_18 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_18);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_77 = input.LA(1);

                         
                        int index64_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_77==121) ) {s = 482;}

                        else if ( (LA64_77==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 483;}

                        else if ( (LA64_77==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 484;}

                        else if ( (LA64_77==127) && (synpred14_Objc())) {s = 485;}

                        else if ( (LA64_77==119) ) {s = 486;}

                        else if ( (LA64_77==162) && (synpred14_Objc())) {s = 487;}

                        else if ( (LA64_77==159) && (synpred14_Objc())) {s = 488;}

                        else if ( (LA64_77==117) ) {s = 489;}

                        else if ( (LA64_77==ID) ) {s = 490;}

                        else if ( (LA64_77==STRING_LITERAL) && (synpred14_Objc())) {s = 491;}

                        else if ( (LA64_77==147) && (synpred14_Objc())) {s = 492;}

                        else if ( (LA64_77==CHAR_LITERAL) && (synpred14_Objc())) {s = 493;}

                        else if ( (LA64_77==NUMBER_LITERAL) && (synpred14_Objc())) {s = 494;}

                        else if ( (LA64_77==168||LA64_77==170||LA64_77==185||LA64_77==198) && (synpred14_Objc())) {s = 495;}

                        else if ( (LA64_77==174) && (synpred14_Objc())) {s = 496;}

                        else if ( (LA64_77==175) && (synpred14_Objc())) {s = 497;}

                        else if ( (LA64_77==171) && (synpred14_Objc())) {s = 498;}

                        else if ( (LA64_77==112) && (synpred14_Objc())) {s = 499;}

                        else if ( (LA64_77==209) && (synpred14_Objc())) {s = 500;}

                        else if ( (LA64_77==124||LA64_77==128) && (synpred14_Objc())) {s = 501;}

                        else if ( (LA64_77==120) && (synpred14_Objc())) {s = 502;}

                        else if ( (LA64_77==178||LA64_77==183||LA64_77==188||(LA64_77 >= 191 && LA64_77 <= 192)||LA64_77==194||LA64_77==196||(LA64_77 >= 200 && LA64_77 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_77);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_137 = input.LA(1);

                         
                        int index64_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_137==121) ) {s = 573;}

                        else if ( (LA64_137==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 574;}

                        else if ( (LA64_137==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 575;}

                        else if ( (LA64_137==127) && (synpred14_Objc())) {s = 576;}

                        else if ( (LA64_137==119) ) {s = 577;}

                        else if ( (LA64_137==162) && (synpred14_Objc())) {s = 578;}

                        else if ( (LA64_137==159) && (synpred14_Objc())) {s = 579;}

                        else if ( (LA64_137==117) ) {s = 580;}

                        else if ( (LA64_137==ID) ) {s = 581;}

                        else if ( (LA64_137==STRING_LITERAL) && (synpred14_Objc())) {s = 582;}

                        else if ( (LA64_137==147) && (synpred14_Objc())) {s = 583;}

                        else if ( (LA64_137==CHAR_LITERAL) && (synpred14_Objc())) {s = 584;}

                        else if ( (LA64_137==NUMBER_LITERAL) && (synpred14_Objc())) {s = 585;}

                        else if ( (LA64_137==168||LA64_137==170||LA64_137==185||LA64_137==198) && (synpred14_Objc())) {s = 586;}

                        else if ( (LA64_137==174) && (synpred14_Objc())) {s = 587;}

                        else if ( (LA64_137==175) && (synpred14_Objc())) {s = 588;}

                        else if ( (LA64_137==171) && (synpred14_Objc())) {s = 589;}

                        else if ( (LA64_137==112) && (synpred14_Objc())) {s = 590;}

                        else if ( (LA64_137==209) && (synpred14_Objc())) {s = 591;}

                        else if ( (LA64_137==124||LA64_137==128) && (synpred14_Objc())) {s = 592;}

                        else if ( (LA64_137==120) && (synpred14_Objc())) {s = 593;}

                        else if ( (LA64_137==178||LA64_137==183||LA64_137==188||(LA64_137 >= 191 && LA64_137 <= 192)||LA64_137==194||LA64_137==196||(LA64_137 >= 200 && LA64_137 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_137);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_196 = input.LA(1);

                         
                        int index64_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_196==121) ) {s = 605;}

                        else if ( (LA64_196==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 606;}

                        else if ( (LA64_196==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 607;}

                        else if ( (LA64_196==127) && (synpred14_Objc())) {s = 608;}

                        else if ( (LA64_196==119) ) {s = 609;}

                        else if ( (LA64_196==162) && (synpred14_Objc())) {s = 610;}

                        else if ( (LA64_196==159) && (synpred14_Objc())) {s = 611;}

                        else if ( (LA64_196==117) ) {s = 612;}

                        else if ( (LA64_196==ID) ) {s = 613;}

                        else if ( (LA64_196==STRING_LITERAL) && (synpred14_Objc())) {s = 614;}

                        else if ( (LA64_196==147) && (synpred14_Objc())) {s = 615;}

                        else if ( (LA64_196==CHAR_LITERAL) && (synpred14_Objc())) {s = 616;}

                        else if ( (LA64_196==NUMBER_LITERAL) && (synpred14_Objc())) {s = 617;}

                        else if ( (LA64_196==168||LA64_196==170||LA64_196==185||LA64_196==198) && (synpred14_Objc())) {s = 618;}

                        else if ( (LA64_196==174) && (synpred14_Objc())) {s = 619;}

                        else if ( (LA64_196==175) && (synpred14_Objc())) {s = 620;}

                        else if ( (LA64_196==171) && (synpred14_Objc())) {s = 621;}

                        else if ( (LA64_196==112) && (synpred14_Objc())) {s = 622;}

                        else if ( (LA64_196==209) && (synpred14_Objc())) {s = 623;}

                        else if ( (LA64_196==124||LA64_196==128) && (synpred14_Objc())) {s = 624;}

                        else if ( (LA64_196==120) && (synpred14_Objc())) {s = 625;}

                        else if ( (LA64_196==178||LA64_196==183||LA64_196==188||(LA64_196 >= 191 && LA64_196 <= 192)||LA64_196==194||LA64_196==196||(LA64_196 >= 200 && LA64_196 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_196);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA64_255 = input.LA(1);

                         
                        int index64_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_255==121) ) {s = 637;}

                        else if ( (LA64_255==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 638;}

                        else if ( (LA64_255==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 639;}

                        else if ( (LA64_255==127) && (synpred14_Objc())) {s = 640;}

                        else if ( (LA64_255==119) ) {s = 641;}

                        else if ( (LA64_255==162) && (synpred14_Objc())) {s = 642;}

                        else if ( (LA64_255==159) && (synpred14_Objc())) {s = 643;}

                        else if ( (LA64_255==117) ) {s = 644;}

                        else if ( (LA64_255==ID) ) {s = 645;}

                        else if ( (LA64_255==STRING_LITERAL) && (synpred14_Objc())) {s = 646;}

                        else if ( (LA64_255==147) && (synpred14_Objc())) {s = 647;}

                        else if ( (LA64_255==CHAR_LITERAL) && (synpred14_Objc())) {s = 648;}

                        else if ( (LA64_255==NUMBER_LITERAL) && (synpred14_Objc())) {s = 649;}

                        else if ( (LA64_255==168||LA64_255==170||LA64_255==185||LA64_255==198) && (synpred14_Objc())) {s = 650;}

                        else if ( (LA64_255==174) && (synpred14_Objc())) {s = 651;}

                        else if ( (LA64_255==175) && (synpred14_Objc())) {s = 652;}

                        else if ( (LA64_255==171) && (synpred14_Objc())) {s = 653;}

                        else if ( (LA64_255==112) && (synpred14_Objc())) {s = 654;}

                        else if ( (LA64_255==209) && (synpred14_Objc())) {s = 655;}

                        else if ( (LA64_255==124||LA64_255==128) && (synpred14_Objc())) {s = 656;}

                        else if ( (LA64_255==120) && (synpred14_Objc())) {s = 657;}

                        else if ( (LA64_255==178||LA64_255==183||LA64_255==188||(LA64_255 >= 191 && LA64_255 <= 192)||LA64_255==194||LA64_255==196||(LA64_255 >= 200 && LA64_255 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_255);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA64_315 = input.LA(1);

                         
                        int index64_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_315==121) ) {s = 687;}

                        else if ( (LA64_315==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 688;}

                        else if ( (LA64_315==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 689;}

                        else if ( (LA64_315==127) && (synpred14_Objc())) {s = 690;}

                        else if ( (LA64_315==119) ) {s = 691;}

                        else if ( (LA64_315==162) && (synpred14_Objc())) {s = 692;}

                        else if ( (LA64_315==159) && (synpred14_Objc())) {s = 693;}

                        else if ( (LA64_315==117) ) {s = 694;}

                        else if ( (LA64_315==ID) ) {s = 695;}

                        else if ( (LA64_315==STRING_LITERAL) && (synpred14_Objc())) {s = 696;}

                        else if ( (LA64_315==147) && (synpred14_Objc())) {s = 697;}

                        else if ( (LA64_315==CHAR_LITERAL) && (synpred14_Objc())) {s = 698;}

                        else if ( (LA64_315==NUMBER_LITERAL) && (synpred14_Objc())) {s = 699;}

                        else if ( (LA64_315==168||LA64_315==170||LA64_315==185||LA64_315==198) && (synpred14_Objc())) {s = 700;}

                        else if ( (LA64_315==174) && (synpred14_Objc())) {s = 701;}

                        else if ( (LA64_315==175) && (synpred14_Objc())) {s = 702;}

                        else if ( (LA64_315==171) && (synpred14_Objc())) {s = 703;}

                        else if ( (LA64_315==112) && (synpred14_Objc())) {s = 704;}

                        else if ( (LA64_315==209) && (synpred14_Objc())) {s = 705;}

                        else if ( (LA64_315==124||LA64_315==128) && (synpred14_Objc())) {s = 706;}

                        else if ( (LA64_315==120) && (synpred14_Objc())) {s = 707;}

                        else if ( (LA64_315==178||LA64_315==183||LA64_315==188||(LA64_315 >= 191 && LA64_315 <= 192)||LA64_315==194||LA64_315==196||(LA64_315 >= 200 && LA64_315 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_315);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA64_395 = input.LA(1);

                         
                        int index64_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_395==121) ) {s = 942;}

                        else if ( (LA64_395==188) ) {s = 943;}

                        else if ( (LA64_395==119) ) {s = 944;}

                        else if ( (LA64_395==202) ) {s = 945;}

                        else if ( (LA64_395==178) ) {s = 946;}

                        else if ( (LA64_395==201) ) {s = 947;}

                        else if ( (LA64_395==191) ) {s = 948;}

                        else if ( (LA64_395==192) ) {s = 949;}

                        else if ( (LA64_395==194) ) {s = 950;}

                        else if ( (LA64_395==ID) ) {s = 951;}

                        else if ( (LA64_395==196) ) {s = 952;}

                        else if ( (LA64_395==200) ) {s = 953;}

                        else if ( (LA64_395==183) ) {s = 954;}

                        else if ( (LA64_395==127) && (synpred14_Objc())) {s = 955;}

                        else if ( (LA64_395==162) && (synpred14_Objc())) {s = 956;}

                        else if ( (LA64_395==159) && (synpred14_Objc())) {s = 957;}

                        else if ( (LA64_395==117) && (synpred14_Objc())) {s = 958;}

                        else if ( (LA64_395==STRING_LITERAL) && (synpred14_Objc())) {s = 959;}

                        else if ( (LA64_395==147) && (synpred14_Objc())) {s = 960;}

                        else if ( (LA64_395==CHAR_LITERAL) && (synpred14_Objc())) {s = 961;}

                        else if ( (LA64_395==NUMBER_LITERAL) && (synpred14_Objc())) {s = 962;}

                        else if ( (LA64_395==168||LA64_395==170||LA64_395==185||LA64_395==198) && (synpred14_Objc())) {s = 963;}

                        else if ( (LA64_395==174) && (synpred14_Objc())) {s = 964;}

                        else if ( (LA64_395==175) && (synpred14_Objc())) {s = 965;}

                        else if ( (LA64_395==171) && (synpred14_Objc())) {s = 966;}

                        else if ( (LA64_395==112) && (synpred14_Objc())) {s = 967;}

                        else if ( (LA64_395==209) && (synpred14_Objc())) {s = 968;}

                        else if ( (LA64_395==124||LA64_395==128) && (synpred14_Objc())) {s = 969;}

                         
                        input.seek(index64_395);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA64_399 = input.LA(1);

                         
                        int index64_399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_399==171) ) {s = 971;}

                        else if ( ((LA64_399 >= 130 && LA64_399 <= 131)) && (synpred14_Objc())) {s = 972;}

                        else if ( (LA64_399==119) && (synpred14_Objc())) {s = 973;}

                        else if ( (LA64_399==124||LA64_399==128) && (synpred14_Objc())) {s = 974;}

                        else if ( (LA64_399==121) ) {s = 975;}

                        else if ( (LA64_399==146) && (synpred14_Objc())) {s = 976;}

                        else if ( (LA64_399==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 977;}

                        else if ( (LA64_399==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 978;}

                        else if ( (LA64_399==126) && (synpred14_Objc())) {s = 979;}

                        else if ( (LA64_399==120) ) {s = 980;}

                        else if ( (LA64_399==117) ) {s = 981;}

                        else if ( (LA64_399==178) ) {s = 11;}

                        else if ( (LA64_399==113||(LA64_399 >= 115 && LA64_399 <= 116)||LA64_399==123||LA64_399==127||LA64_399==132||(LA64_399 >= 136 && LA64_399 <= 137)||(LA64_399 >= 139 && LA64_399 <= 144)||LA64_399==174||LA64_399==205||LA64_399==207) && (synpred14_Objc())) {s = 983;}

                         
                        input.seek(index64_399);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA64_423 = input.LA(1);

                         
                        int index64_423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_423==121) ) {s = 985;}

                        else if ( (LA64_423==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 986;}

                        else if ( (LA64_423==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 987;}

                        else if ( (LA64_423==127) && (synpred14_Objc())) {s = 988;}

                        else if ( (LA64_423==119) ) {s = 989;}

                        else if ( (LA64_423==162) && (synpred14_Objc())) {s = 990;}

                        else if ( (LA64_423==159) && (synpred14_Objc())) {s = 991;}

                        else if ( (LA64_423==117) ) {s = 992;}

                        else if ( (LA64_423==ID) ) {s = 993;}

                        else if ( (LA64_423==STRING_LITERAL) && (synpred14_Objc())) {s = 994;}

                        else if ( (LA64_423==147) && (synpred14_Objc())) {s = 995;}

                        else if ( (LA64_423==CHAR_LITERAL) && (synpred14_Objc())) {s = 996;}

                        else if ( (LA64_423==NUMBER_LITERAL) && (synpred14_Objc())) {s = 997;}

                        else if ( (LA64_423==168||LA64_423==170||LA64_423==185||LA64_423==198) && (synpred14_Objc())) {s = 998;}

                        else if ( (LA64_423==174) && (synpred14_Objc())) {s = 999;}

                        else if ( (LA64_423==175) && (synpred14_Objc())) {s = 1000;}

                        else if ( (LA64_423==171) && (synpred14_Objc())) {s = 1001;}

                        else if ( (LA64_423==112) && (synpred14_Objc())) {s = 1002;}

                        else if ( (LA64_423==209) && (synpred14_Objc())) {s = 1003;}

                        else if ( (LA64_423==124||LA64_423==128) && (synpred14_Objc())) {s = 1004;}

                        else if ( (LA64_423==120) && (synpred14_Objc())) {s = 1005;}

                        else if ( (LA64_423==178||LA64_423==183||LA64_423==188||(LA64_423 >= 191 && LA64_423 <= 192)||LA64_423==194||LA64_423==196||(LA64_423 >= 200 && LA64_423 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_423);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA64_486 = input.LA(1);

                         
                        int index64_486 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_486==121) ) {s = 1083;}

                        else if ( (LA64_486==188) ) {s = 1084;}

                        else if ( (LA64_486==119) ) {s = 1085;}

                        else if ( (LA64_486==202) ) {s = 1086;}

                        else if ( (LA64_486==178) ) {s = 1087;}

                        else if ( (LA64_486==201) ) {s = 1088;}

                        else if ( (LA64_486==191) ) {s = 1089;}

                        else if ( (LA64_486==192) ) {s = 1090;}

                        else if ( (LA64_486==194) ) {s = 1091;}

                        else if ( (LA64_486==ID) ) {s = 1092;}

                        else if ( (LA64_486==196) ) {s = 1093;}

                        else if ( (LA64_486==200) ) {s = 1094;}

                        else if ( (LA64_486==183) ) {s = 1095;}

                        else if ( (LA64_486==127) && (synpred14_Objc())) {s = 1096;}

                        else if ( (LA64_486==162) && (synpred14_Objc())) {s = 1097;}

                        else if ( (LA64_486==159) && (synpred14_Objc())) {s = 1098;}

                        else if ( (LA64_486==117) && (synpred14_Objc())) {s = 1099;}

                        else if ( (LA64_486==STRING_LITERAL) && (synpred14_Objc())) {s = 1100;}

                        else if ( (LA64_486==147) && (synpred14_Objc())) {s = 1101;}

                        else if ( (LA64_486==CHAR_LITERAL) && (synpred14_Objc())) {s = 1102;}

                        else if ( (LA64_486==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1103;}

                        else if ( (LA64_486==168||LA64_486==170||LA64_486==185||LA64_486==198) && (synpred14_Objc())) {s = 1104;}

                        else if ( (LA64_486==174) && (synpred14_Objc())) {s = 1105;}

                        else if ( (LA64_486==175) && (synpred14_Objc())) {s = 1106;}

                        else if ( (LA64_486==171) && (synpred14_Objc())) {s = 1107;}

                        else if ( (LA64_486==112) && (synpred14_Objc())) {s = 1108;}

                        else if ( (LA64_486==209) && (synpred14_Objc())) {s = 1109;}

                        else if ( (LA64_486==124||LA64_486==128) && (synpred14_Objc())) {s = 1110;}

                         
                        input.seek(index64_486);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA64_490 = input.LA(1);

                         
                        int index64_490 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_490==171) ) {s = 1112;}

                        else if ( ((LA64_490 >= 130 && LA64_490 <= 131)) && (synpred14_Objc())) {s = 1113;}

                        else if ( (LA64_490==119) && (synpred14_Objc())) {s = 1114;}

                        else if ( (LA64_490==124||LA64_490==128) && (synpred14_Objc())) {s = 1115;}

                        else if ( (LA64_490==121) ) {s = 1116;}

                        else if ( (LA64_490==146) && (synpred14_Objc())) {s = 1117;}

                        else if ( (LA64_490==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1118;}

                        else if ( (LA64_490==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1119;}

                        else if ( (LA64_490==126) && (synpred14_Objc())) {s = 1120;}

                        else if ( (LA64_490==120) ) {s = 1121;}

                        else if ( (LA64_490==117) ) {s = 1122;}

                        else if ( (LA64_490==178) ) {s = 11;}

                        else if ( (LA64_490==113||(LA64_490 >= 115 && LA64_490 <= 116)||LA64_490==123||LA64_490==127||LA64_490==132||(LA64_490 >= 136 && LA64_490 <= 137)||(LA64_490 >= 139 && LA64_490 <= 144)||LA64_490==174||LA64_490==205||LA64_490==207) && (synpred14_Objc())) {s = 1124;}

                         
                        input.seek(index64_490);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA64_514 = input.LA(1);

                         
                        int index64_514 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_514==121) ) {s = 1126;}

                        else if ( (LA64_514==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1127;}

                        else if ( (LA64_514==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1128;}

                        else if ( (LA64_514==127) && (synpred14_Objc())) {s = 1129;}

                        else if ( (LA64_514==119) ) {s = 1130;}

                        else if ( (LA64_514==162) && (synpred14_Objc())) {s = 1131;}

                        else if ( (LA64_514==159) && (synpred14_Objc())) {s = 1132;}

                        else if ( (LA64_514==117) ) {s = 1133;}

                        else if ( (LA64_514==ID) ) {s = 1134;}

                        else if ( (LA64_514==STRING_LITERAL) && (synpred14_Objc())) {s = 1135;}

                        else if ( (LA64_514==147) && (synpred14_Objc())) {s = 1136;}

                        else if ( (LA64_514==CHAR_LITERAL) && (synpred14_Objc())) {s = 1137;}

                        else if ( (LA64_514==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1138;}

                        else if ( (LA64_514==168||LA64_514==170||LA64_514==185||LA64_514==198) && (synpred14_Objc())) {s = 1139;}

                        else if ( (LA64_514==174) && (synpred14_Objc())) {s = 1140;}

                        else if ( (LA64_514==175) && (synpred14_Objc())) {s = 1141;}

                        else if ( (LA64_514==171) && (synpred14_Objc())) {s = 1142;}

                        else if ( (LA64_514==112) && (synpred14_Objc())) {s = 1143;}

                        else if ( (LA64_514==209) && (synpred14_Objc())) {s = 1144;}

                        else if ( (LA64_514==124||LA64_514==128) && (synpred14_Objc())) {s = 1145;}

                        else if ( (LA64_514==120) && (synpred14_Objc())) {s = 1146;}

                        else if ( (LA64_514==178||LA64_514==183||LA64_514==188||(LA64_514 >= 191 && LA64_514 <= 192)||LA64_514==194||LA64_514==196||(LA64_514 >= 200 && LA64_514 <= 202)) ) {s = 11;}

                         
                        input.seek(index64_514);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA64_577 = input.LA(1);

                         
                        int index64_577 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_577==121) ) {s = 1224;}

                        else if ( (LA64_577==188) ) {s = 1225;}

                        else if ( (LA64_577==119) ) {s = 1226;}

                        else if ( (LA64_577==202) ) {s = 1227;}

                        else if ( (LA64_577==178) ) {s = 1228;}

                        else if ( (LA64_577==201) ) {s = 1229;}

                        else if ( (LA64_577==191) ) {s = 1230;}

                        else if ( (LA64_577==192) ) {s = 1231;}

                        else if ( (LA64_577==194) ) {s = 1232;}

                        else if ( (LA64_577==ID) ) {s = 1233;}

                        else if ( (LA64_577==196) ) {s = 1234;}

                        else if ( (LA64_577==200) ) {s = 1235;}

                        else if ( (LA64_577==183) ) {s = 1236;}

                        else if ( (LA64_577==127) && (synpred14_Objc())) {s = 1237;}

                        else if ( (LA64_577==162) && (synpred14_Objc())) {s = 1238;}

                        else if ( (LA64_577==159) && (synpred14_Objc())) {s = 1239;}

                        else if ( (LA64_577==117) && (synpred14_Objc())) {s = 1240;}

                        else if ( (LA64_577==STRING_LITERAL) && (synpred14_Objc())) {s = 1241;}

                        else if ( (LA64_577==147) && (synpred14_Objc())) {s = 1242;}

                        else if ( (LA64_577==CHAR_LITERAL) && (synpred14_Objc())) {s = 1243;}

                        else if ( (LA64_577==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1244;}

                        else if ( (LA64_577==168||LA64_577==170||LA64_577==185||LA64_577==198) && (synpred14_Objc())) {s = 1245;}

                        else if ( (LA64_577==174) && (synpred14_Objc())) {s = 1246;}

                        else if ( (LA64_577==175) && (synpred14_Objc())) {s = 1247;}

                        else if ( (LA64_577==171) && (synpred14_Objc())) {s = 1248;}

                        else if ( (LA64_577==112) && (synpred14_Objc())) {s = 1249;}

                        else if ( (LA64_577==209) && (synpred14_Objc())) {s = 1250;}

                        else if ( (LA64_577==124||LA64_577==128) && (synpred14_Objc())) {s = 1251;}

                         
                        input.seek(index64_577);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA64_581 = input.LA(1);

                         
                        int index64_581 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_581==171) ) {s = 1253;}

                        else if ( ((LA64_581 >= 130 && LA64_581 <= 131)) && (synpred14_Objc())) {s = 1254;}

                        else if ( (LA64_581==119) && (synpred14_Objc())) {s = 1255;}

                        else if ( (LA64_581==124||LA64_581==128) && (synpred14_Objc())) {s = 1256;}

                        else if ( (LA64_581==121) ) {s = 1257;}

                        else if ( (LA64_581==146) && (synpred14_Objc())) {s = 1258;}

                        else if ( (LA64_581==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1259;}

                        else if ( (LA64_581==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1260;}

                        else if ( (LA64_581==126) && (synpred14_Objc())) {s = 1261;}

                        else if ( (LA64_581==120) ) {s = 1262;}

                        else if ( (LA64_581==117) ) {s = 1263;}

                        else if ( (LA64_581==178) ) {s = 11;}

                        else if ( (LA64_581==113||(LA64_581 >= 115 && LA64_581 <= 116)||LA64_581==123||LA64_581==127||LA64_581==132||(LA64_581 >= 136 && LA64_581 <= 137)||(LA64_581 >= 139 && LA64_581 <= 144)||LA64_581==174||LA64_581==205||LA64_581==207) && (synpred14_Objc())) {s = 1265;}

                         
                        input.seek(index64_581);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA64_609 = input.LA(1);

                         
                        int index64_609 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_609==121) ) {s = 1333;}

                        else if ( (LA64_609==188) ) {s = 1334;}

                        else if ( (LA64_609==119) ) {s = 1335;}

                        else if ( (LA64_609==202) ) {s = 1336;}

                        else if ( (LA64_609==178) ) {s = 1337;}

                        else if ( (LA64_609==201) ) {s = 1338;}

                        else if ( (LA64_609==191) ) {s = 1339;}

                        else if ( (LA64_609==192) ) {s = 1340;}

                        else if ( (LA64_609==194) ) {s = 1341;}

                        else if ( (LA64_609==ID) ) {s = 1342;}

                        else if ( (LA64_609==196) ) {s = 1343;}

                        else if ( (LA64_609==200) ) {s = 1344;}

                        else if ( (LA64_609==183) ) {s = 1345;}

                        else if ( (LA64_609==127) && (synpred14_Objc())) {s = 1346;}

                        else if ( (LA64_609==162) && (synpred14_Objc())) {s = 1347;}

                        else if ( (LA64_609==159) && (synpred14_Objc())) {s = 1348;}

                        else if ( (LA64_609==117) && (synpred14_Objc())) {s = 1349;}

                        else if ( (LA64_609==STRING_LITERAL) && (synpred14_Objc())) {s = 1350;}

                        else if ( (LA64_609==147) && (synpred14_Objc())) {s = 1351;}

                        else if ( (LA64_609==CHAR_LITERAL) && (synpred14_Objc())) {s = 1352;}

                        else if ( (LA64_609==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1353;}

                        else if ( (LA64_609==168||LA64_609==170||LA64_609==185||LA64_609==198) && (synpred14_Objc())) {s = 1354;}

                        else if ( (LA64_609==174) && (synpred14_Objc())) {s = 1355;}

                        else if ( (LA64_609==175) && (synpred14_Objc())) {s = 1356;}

                        else if ( (LA64_609==171) && (synpred14_Objc())) {s = 1357;}

                        else if ( (LA64_609==112) && (synpred14_Objc())) {s = 1358;}

                        else if ( (LA64_609==209) && (synpred14_Objc())) {s = 1359;}

                        else if ( (LA64_609==124||LA64_609==128) && (synpred14_Objc())) {s = 1360;}

                         
                        input.seek(index64_609);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA64_613 = input.LA(1);

                         
                        int index64_613 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_613==171) ) {s = 1362;}

                        else if ( ((LA64_613 >= 130 && LA64_613 <= 131)) && (synpred14_Objc())) {s = 1363;}

                        else if ( (LA64_613==119) && (synpred14_Objc())) {s = 1364;}

                        else if ( (LA64_613==124||LA64_613==128) && (synpred14_Objc())) {s = 1365;}

                        else if ( (LA64_613==121) ) {s = 1366;}

                        else if ( (LA64_613==146) && (synpred14_Objc())) {s = 1367;}

                        else if ( (LA64_613==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1368;}

                        else if ( (LA64_613==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1369;}

                        else if ( (LA64_613==126) && (synpred14_Objc())) {s = 1370;}

                        else if ( (LA64_613==120) ) {s = 1371;}

                        else if ( (LA64_613==117) ) {s = 1372;}

                        else if ( (LA64_613==178) ) {s = 11;}

                        else if ( (LA64_613==113||(LA64_613 >= 115 && LA64_613 <= 116)||LA64_613==123||LA64_613==127||LA64_613==132||(LA64_613 >= 136 && LA64_613 <= 137)||(LA64_613 >= 139 && LA64_613 <= 144)||LA64_613==174||LA64_613==205||LA64_613==207) && (synpred14_Objc())) {s = 1374;}

                         
                        input.seek(index64_613);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA64_641 = input.LA(1);

                         
                        int index64_641 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_641==121) ) {s = 1442;}

                        else if ( (LA64_641==188) ) {s = 1443;}

                        else if ( (LA64_641==119) ) {s = 1444;}

                        else if ( (LA64_641==202) ) {s = 1445;}

                        else if ( (LA64_641==178) ) {s = 1446;}

                        else if ( (LA64_641==201) ) {s = 1447;}

                        else if ( (LA64_641==191) ) {s = 1448;}

                        else if ( (LA64_641==192) ) {s = 1449;}

                        else if ( (LA64_641==194) ) {s = 1450;}

                        else if ( (LA64_641==ID) ) {s = 1451;}

                        else if ( (LA64_641==196) ) {s = 1452;}

                        else if ( (LA64_641==200) ) {s = 1453;}

                        else if ( (LA64_641==183) ) {s = 1454;}

                        else if ( (LA64_641==127) && (synpred14_Objc())) {s = 1455;}

                        else if ( (LA64_641==162) && (synpred14_Objc())) {s = 1456;}

                        else if ( (LA64_641==159) && (synpred14_Objc())) {s = 1457;}

                        else if ( (LA64_641==117) && (synpred14_Objc())) {s = 1458;}

                        else if ( (LA64_641==STRING_LITERAL) && (synpred14_Objc())) {s = 1459;}

                        else if ( (LA64_641==147) && (synpred14_Objc())) {s = 1460;}

                        else if ( (LA64_641==CHAR_LITERAL) && (synpred14_Objc())) {s = 1461;}

                        else if ( (LA64_641==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1462;}

                        else if ( (LA64_641==168||LA64_641==170||LA64_641==185||LA64_641==198) && (synpred14_Objc())) {s = 1463;}

                        else if ( (LA64_641==174) && (synpred14_Objc())) {s = 1464;}

                        else if ( (LA64_641==175) && (synpred14_Objc())) {s = 1465;}

                        else if ( (LA64_641==171) && (synpred14_Objc())) {s = 1466;}

                        else if ( (LA64_641==112) && (synpred14_Objc())) {s = 1467;}

                        else if ( (LA64_641==209) && (synpred14_Objc())) {s = 1468;}

                        else if ( (LA64_641==124||LA64_641==128) && (synpred14_Objc())) {s = 1469;}

                         
                        input.seek(index64_641);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA64_645 = input.LA(1);

                         
                        int index64_645 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_645==171) ) {s = 1471;}

                        else if ( ((LA64_645 >= 130 && LA64_645 <= 131)) && (synpred14_Objc())) {s = 1472;}

                        else if ( (LA64_645==119) && (synpred14_Objc())) {s = 1473;}

                        else if ( (LA64_645==124||LA64_645==128) && (synpred14_Objc())) {s = 1474;}

                        else if ( (LA64_645==121) ) {s = 1475;}

                        else if ( (LA64_645==146) && (synpred14_Objc())) {s = 1476;}

                        else if ( (LA64_645==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1477;}

                        else if ( (LA64_645==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1478;}

                        else if ( (LA64_645==126) && (synpred14_Objc())) {s = 1479;}

                        else if ( (LA64_645==120) ) {s = 1480;}

                        else if ( (LA64_645==117) ) {s = 1481;}

                        else if ( (LA64_645==178) ) {s = 11;}

                        else if ( (LA64_645==113||(LA64_645 >= 115 && LA64_645 <= 116)||LA64_645==123||LA64_645==127||LA64_645==132||(LA64_645 >= 136 && LA64_645 <= 137)||(LA64_645 >= 139 && LA64_645 <= 144)||LA64_645==174||LA64_645==205||LA64_645==207) && (synpred14_Objc())) {s = 1483;}

                         
                        input.seek(index64_645);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA64_668 = input.LA(1);

                         
                        int index64_668 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_668);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA64_669 = input.LA(1);

                         
                        int index64_669 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_669);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA64_670 = input.LA(1);

                         
                        int index64_670 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_670);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA64_671 = input.LA(1);

                         
                        int index64_671 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_671);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA64_672 = input.LA(1);

                         
                        int index64_672 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_672);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA64_673 = input.LA(1);

                         
                        int index64_673 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_673);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA64_674 = input.LA(1);

                         
                        int index64_674 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_674);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA64_675 = input.LA(1);

                         
                        int index64_675 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_675);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA64_676 = input.LA(1);

                         
                        int index64_676 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_676);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA64_677 = input.LA(1);

                         
                        int index64_677 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_677);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA64_678 = input.LA(1);

                         
                        int index64_678 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_678);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA64_679 = input.LA(1);

                         
                        int index64_679 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_679);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA64_680 = input.LA(1);

                         
                        int index64_680 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_680);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA64_681 = input.LA(1);

                         
                        int index64_681 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_681);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA64_682 = input.LA(1);

                         
                        int index64_682 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_682);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA64_683 = input.LA(1);

                         
                        int index64_683 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_683);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA64_684 = input.LA(1);

                         
                        int index64_684 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_684);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA64_685 = input.LA(1);

                         
                        int index64_685 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_685);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA64_686 = input.LA(1);

                         
                        int index64_686 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_686);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA64_687 = input.LA(1);

                         
                        int index64_687 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_687);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA64_691 = input.LA(1);

                         
                        int index64_691 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_691);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA64_694 = input.LA(1);

                         
                        int index64_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_694);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA64_695 = input.LA(1);

                         
                        int index64_695 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_695);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA64_718 = input.LA(1);

                         
                        int index64_718 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_718);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA64_719 = input.LA(1);

                         
                        int index64_719 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_719);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA64_720 = input.LA(1);

                         
                        int index64_720 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_720);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA64_721 = input.LA(1);

                         
                        int index64_721 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_721);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA64_722 = input.LA(1);

                         
                        int index64_722 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_722);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA64_723 = input.LA(1);

                         
                        int index64_723 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_723);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA64_724 = input.LA(1);

                         
                        int index64_724 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_724);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA64_725 = input.LA(1);

                         
                        int index64_725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_725);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA64_726 = input.LA(1);

                         
                        int index64_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_726);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA64_727 = input.LA(1);

                         
                        int index64_727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_727);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA64_728 = input.LA(1);

                         
                        int index64_728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_728);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA64_729 = input.LA(1);

                         
                        int index64_729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_729);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA64_730 = input.LA(1);

                         
                        int index64_730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_730);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA64_731 = input.LA(1);

                         
                        int index64_731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_731);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA64_732 = input.LA(1);

                         
                        int index64_732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_732);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA64_733 = input.LA(1);

                         
                        int index64_733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_733);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA64_734 = input.LA(1);

                         
                        int index64_734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_734);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA64_735 = input.LA(1);

                         
                        int index64_735 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_735);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA64_736 = input.LA(1);

                         
                        int index64_736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_736);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA64_737 = input.LA(1);

                         
                        int index64_737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_737);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA64_738 = input.LA(1);

                         
                        int index64_738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_738);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA64_739 = input.LA(1);

                         
                        int index64_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_739);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA64_740 = input.LA(1);

                         
                        int index64_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_740);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA64_741 = input.LA(1);

                         
                        int index64_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_741);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA64_742 = input.LA(1);

                         
                        int index64_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_742);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA64_743 = input.LA(1);

                         
                        int index64_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_743);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA64_744 = input.LA(1);

                         
                        int index64_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_744);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA64_745 = input.LA(1);

                         
                        int index64_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_745);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA64_746 = input.LA(1);

                         
                        int index64_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_746);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA64_747 = input.LA(1);

                         
                        int index64_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_747);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA64_748 = input.LA(1);

                         
                        int index64_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_748);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA64_749 = input.LA(1);

                         
                        int index64_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_749);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA64_750 = input.LA(1);

                         
                        int index64_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_750);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA64_751 = input.LA(1);

                         
                        int index64_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_751);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA64_752 = input.LA(1);

                         
                        int index64_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_752);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA64_753 = input.LA(1);

                         
                        int index64_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_753);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA64_754 = input.LA(1);

                         
                        int index64_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_754);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA64_755 = input.LA(1);

                         
                        int index64_755 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_755);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA64_756 = input.LA(1);

                         
                        int index64_756 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_756);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA64_757 = input.LA(1);

                         
                        int index64_757 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_757);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA64_758 = input.LA(1);

                         
                        int index64_758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_758);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA64_759 = input.LA(1);

                         
                        int index64_759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_759);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA64_760 = input.LA(1);

                         
                        int index64_760 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_760);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA64_761 = input.LA(1);

                         
                        int index64_761 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_761);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA64_762 = input.LA(1);

                         
                        int index64_762 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_762);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA64_763 = input.LA(1);

                         
                        int index64_763 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_763);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA64_764 = input.LA(1);

                         
                        int index64_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_764);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA64_765 = input.LA(1);

                         
                        int index64_765 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_765);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA64_766 = input.LA(1);

                         
                        int index64_766 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_766);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA64_767 = input.LA(1);

                         
                        int index64_767 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_767);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA64_768 = input.LA(1);

                         
                        int index64_768 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_768);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA64_769 = input.LA(1);

                         
                        int index64_769 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_769);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA64_771 = input.LA(1);

                         
                        int index64_771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_771);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA64_772 = input.LA(1);

                         
                        int index64_772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_772);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA64_773 = input.LA(1);

                         
                        int index64_773 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_773);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA64_774 = input.LA(1);

                         
                        int index64_774 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_774);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA64_775 = input.LA(1);

                         
                        int index64_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_775);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA64_776 = input.LA(1);

                         
                        int index64_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_776);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA64_777 = input.LA(1);

                         
                        int index64_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_777);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA64_779 = input.LA(1);

                         
                        int index64_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_779);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA64_780 = input.LA(1);

                         
                        int index64_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_780);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA64_781 = input.LA(1);

                         
                        int index64_781 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_781);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA64_782 = input.LA(1);

                         
                        int index64_782 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_782);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA64_783 = input.LA(1);

                         
                        int index64_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_783);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA64_784 = input.LA(1);

                         
                        int index64_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_784);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA64_785 = input.LA(1);

                         
                        int index64_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_785);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA64_787 = input.LA(1);

                         
                        int index64_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_787);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA64_788 = input.LA(1);

                         
                        int index64_788 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_788);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA64_789 = input.LA(1);

                         
                        int index64_789 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_789);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA64_790 = input.LA(1);

                         
                        int index64_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_790);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA64_791 = input.LA(1);

                         
                        int index64_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_791);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA64_792 = input.LA(1);

                         
                        int index64_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_792);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA64_794 = input.LA(1);

                         
                        int index64_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_794);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA64_795 = input.LA(1);

                         
                        int index64_795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_795);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA64_796 = input.LA(1);

                         
                        int index64_796 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_796);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA64_797 = input.LA(1);

                         
                        int index64_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_797);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA64_798 = input.LA(1);

                         
                        int index64_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_798);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA64_799 = input.LA(1);

                         
                        int index64_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_799);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA64_801 = input.LA(1);

                         
                        int index64_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_801);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA64_802 = input.LA(1);

                         
                        int index64_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_802);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA64_803 = input.LA(1);

                         
                        int index64_803 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_803);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA64_804 = input.LA(1);

                         
                        int index64_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_804);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA64_805 = input.LA(1);

                         
                        int index64_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_805);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA64_806 = input.LA(1);

                         
                        int index64_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_806);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA64_807 = input.LA(1);

                         
                        int index64_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_807);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA64_808 = input.LA(1);

                         
                        int index64_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_808);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA64_809 = input.LA(1);

                         
                        int index64_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_809);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA64_810 = input.LA(1);

                         
                        int index64_810 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_810);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA64_811 = input.LA(1);

                         
                        int index64_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_811);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA64_812 = input.LA(1);

                         
                        int index64_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_812);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA64_813 = input.LA(1);

                         
                        int index64_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_813);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA64_814 = input.LA(1);

                         
                        int index64_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_814);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA64_815 = input.LA(1);

                         
                        int index64_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_815);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA64_816 = input.LA(1);

                         
                        int index64_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_816);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA64_817 = input.LA(1);

                         
                        int index64_817 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_817);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA64_818 = input.LA(1);

                         
                        int index64_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_818);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA64_819 = input.LA(1);

                         
                        int index64_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_819);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA64_820 = input.LA(1);

                         
                        int index64_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_820);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA64_821 = input.LA(1);

                         
                        int index64_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_821);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA64_822 = input.LA(1);

                         
                        int index64_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_822);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA64_823 = input.LA(1);

                         
                        int index64_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_823);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA64_824 = input.LA(1);

                         
                        int index64_824 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_824);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA64_825 = input.LA(1);

                         
                        int index64_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_825);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA64_826 = input.LA(1);

                         
                        int index64_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_826);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA64_827 = input.LA(1);

                         
                        int index64_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_827);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA64_828 = input.LA(1);

                         
                        int index64_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_828);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA64_829 = input.LA(1);

                         
                        int index64_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_829);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA64_830 = input.LA(1);

                         
                        int index64_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_830);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA64_831 = input.LA(1);

                         
                        int index64_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_831);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA64_832 = input.LA(1);

                         
                        int index64_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_832);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA64_833 = input.LA(1);

                         
                        int index64_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_833);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA64_834 = input.LA(1);

                         
                        int index64_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_834);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA64_835 = input.LA(1);

                         
                        int index64_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_835);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA64_836 = input.LA(1);

                         
                        int index64_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_836);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA64_837 = input.LA(1);

                         
                        int index64_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_837);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA64_838 = input.LA(1);

                         
                        int index64_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_838);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA64_839 = input.LA(1);

                         
                        int index64_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_839);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA64_840 = input.LA(1);

                         
                        int index64_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_840);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA64_841 = input.LA(1);

                         
                        int index64_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_841);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA64_842 = input.LA(1);

                         
                        int index64_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_842);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA64_843 = input.LA(1);

                         
                        int index64_843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_843);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA64_844 = input.LA(1);

                         
                        int index64_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_844);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA64_845 = input.LA(1);

                         
                        int index64_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_845);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA64_846 = input.LA(1);

                         
                        int index64_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_846);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA64_847 = input.LA(1);

                         
                        int index64_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_847);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA64_848 = input.LA(1);

                         
                        int index64_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_848);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA64_849 = input.LA(1);

                         
                        int index64_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_849);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA64_850 = input.LA(1);

                         
                        int index64_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_850);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA64_851 = input.LA(1);

                         
                        int index64_851 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_851);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA64_852 = input.LA(1);

                         
                        int index64_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_852);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA64_853 = input.LA(1);

                         
                        int index64_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_853);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA64_854 = input.LA(1);

                         
                        int index64_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_854);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA64_855 = input.LA(1);

                         
                        int index64_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_855);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA64_856 = input.LA(1);

                         
                        int index64_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_856);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA64_857 = input.LA(1);

                         
                        int index64_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_857);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA64_858 = input.LA(1);

                         
                        int index64_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_858);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA64_859 = input.LA(1);

                         
                        int index64_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_859);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA64_860 = input.LA(1);

                         
                        int index64_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_860);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA64_861 = input.LA(1);

                         
                        int index64_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_861);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA64_862 = input.LA(1);

                         
                        int index64_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_862);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA64_863 = input.LA(1);

                         
                        int index64_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_863);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA64_864 = input.LA(1);

                         
                        int index64_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_864);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA64_865 = input.LA(1);

                         
                        int index64_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_865);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA64_866 = input.LA(1);

                         
                        int index64_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_866);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA64_867 = input.LA(1);

                         
                        int index64_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_867);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA64_868 = input.LA(1);

                         
                        int index64_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_868);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA64_869 = input.LA(1);

                         
                        int index64_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_869);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA64_870 = input.LA(1);

                         
                        int index64_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_870);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA64_871 = input.LA(1);

                         
                        int index64_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_871);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA64_872 = input.LA(1);

                         
                        int index64_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_872);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA64_873 = input.LA(1);

                         
                        int index64_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_873);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA64_874 = input.LA(1);

                         
                        int index64_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_874);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA64_875 = input.LA(1);

                         
                        int index64_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_875);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA64_876 = input.LA(1);

                         
                        int index64_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_876);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA64_941 = input.LA(1);

                         
                        int index64_941 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_941);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA64_942 = input.LA(1);

                         
                        int index64_942 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_942);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA64_943 = input.LA(1);

                         
                        int index64_943 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_943);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA64_944 = input.LA(1);

                         
                        int index64_944 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_944);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA64_945 = input.LA(1);

                         
                        int index64_945 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_945);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA64_946 = input.LA(1);

                         
                        int index64_946 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_946);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA64_947 = input.LA(1);

                         
                        int index64_947 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_947);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA64_948 = input.LA(1);

                         
                        int index64_948 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_948);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA64_949 = input.LA(1);

                         
                        int index64_949 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_949);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA64_950 = input.LA(1);

                         
                        int index64_950 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_950);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA64_951 = input.LA(1);

                         
                        int index64_951 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_951);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA64_952 = input.LA(1);

                         
                        int index64_952 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_952);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA64_953 = input.LA(1);

                         
                        int index64_953 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_953);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA64_954 = input.LA(1);

                         
                        int index64_954 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_954);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA64_970 = input.LA(1);

                         
                        int index64_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_970);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA64_971 = input.LA(1);

                         
                        int index64_971 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_971);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA64_975 = input.LA(1);

                         
                        int index64_975 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_975);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA64_980 = input.LA(1);

                         
                        int index64_980 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_980);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA64_981 = input.LA(1);

                         
                        int index64_981 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_981);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA64_984 = input.LA(1);

                         
                        int index64_984 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_984);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA64_985 = input.LA(1);

                         
                        int index64_985 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_985);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA64_989 = input.LA(1);

                         
                        int index64_989 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_989);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA64_992 = input.LA(1);

                         
                        int index64_992 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_992);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA64_993 = input.LA(1);

                         
                        int index64_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_993);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA64_1016 = input.LA(1);

                         
                        int index64_1016 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1016);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA64_1017 = input.LA(1);

                         
                        int index64_1017 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1017);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA64_1082 = input.LA(1);

                         
                        int index64_1082 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1082);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA64_1083 = input.LA(1);

                         
                        int index64_1083 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1083);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA64_1084 = input.LA(1);

                         
                        int index64_1084 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1084);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA64_1085 = input.LA(1);

                         
                        int index64_1085 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1085);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA64_1086 = input.LA(1);

                         
                        int index64_1086 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1086);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA64_1087 = input.LA(1);

                         
                        int index64_1087 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1087);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA64_1088 = input.LA(1);

                         
                        int index64_1088 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1088);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA64_1089 = input.LA(1);

                         
                        int index64_1089 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1089);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA64_1090 = input.LA(1);

                         
                        int index64_1090 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1090);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA64_1091 = input.LA(1);

                         
                        int index64_1091 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1091);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA64_1092 = input.LA(1);

                         
                        int index64_1092 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1092);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA64_1093 = input.LA(1);

                         
                        int index64_1093 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1093);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA64_1094 = input.LA(1);

                         
                        int index64_1094 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1094);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA64_1095 = input.LA(1);

                         
                        int index64_1095 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1095);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA64_1111 = input.LA(1);

                         
                        int index64_1111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1111);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA64_1112 = input.LA(1);

                         
                        int index64_1112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1112);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA64_1116 = input.LA(1);

                         
                        int index64_1116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1116);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA64_1121 = input.LA(1);

                         
                        int index64_1121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1121);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA64_1122 = input.LA(1);

                         
                        int index64_1122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1122);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA64_1125 = input.LA(1);

                         
                        int index64_1125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1125);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA64_1126 = input.LA(1);

                         
                        int index64_1126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1126);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA64_1130 = input.LA(1);

                         
                        int index64_1130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1130);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA64_1133 = input.LA(1);

                         
                        int index64_1133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1133);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA64_1134 = input.LA(1);

                         
                        int index64_1134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1134);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA64_1157 = input.LA(1);

                         
                        int index64_1157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1157);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA64_1158 = input.LA(1);

                         
                        int index64_1158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1158);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA64_1223 = input.LA(1);

                         
                        int index64_1223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1223);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA64_1224 = input.LA(1);

                         
                        int index64_1224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1224);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA64_1225 = input.LA(1);

                         
                        int index64_1225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1225);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA64_1226 = input.LA(1);

                         
                        int index64_1226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1226);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA64_1227 = input.LA(1);

                         
                        int index64_1227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1227);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA64_1228 = input.LA(1);

                         
                        int index64_1228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1228);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA64_1229 = input.LA(1);

                         
                        int index64_1229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1229);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA64_1230 = input.LA(1);

                         
                        int index64_1230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1230);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA64_1231 = input.LA(1);

                         
                        int index64_1231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1231);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA64_1232 = input.LA(1);

                         
                        int index64_1232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1232);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA64_1233 = input.LA(1);

                         
                        int index64_1233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1233);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA64_1234 = input.LA(1);

                         
                        int index64_1234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1234);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA64_1235 = input.LA(1);

                         
                        int index64_1235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1235);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA64_1236 = input.LA(1);

                         
                        int index64_1236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1236);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA64_1252 = input.LA(1);

                         
                        int index64_1252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1252);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA64_1253 = input.LA(1);

                         
                        int index64_1253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1253);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA64_1257 = input.LA(1);

                         
                        int index64_1257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1257);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA64_1262 = input.LA(1);

                         
                        int index64_1262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1262);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA64_1263 = input.LA(1);

                         
                        int index64_1263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1263);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA64_1266 = input.LA(1);

                         
                        int index64_1266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1266);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA64_1267 = input.LA(1);

                         
                        int index64_1267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1267);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA64_1332 = input.LA(1);

                         
                        int index64_1332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1332);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA64_1333 = input.LA(1);

                         
                        int index64_1333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1333);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA64_1334 = input.LA(1);

                         
                        int index64_1334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1334);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA64_1335 = input.LA(1);

                         
                        int index64_1335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1335);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA64_1336 = input.LA(1);

                         
                        int index64_1336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1336);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA64_1337 = input.LA(1);

                         
                        int index64_1337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1337);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA64_1338 = input.LA(1);

                         
                        int index64_1338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1338);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA64_1339 = input.LA(1);

                         
                        int index64_1339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1339);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA64_1340 = input.LA(1);

                         
                        int index64_1340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1340);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA64_1341 = input.LA(1);

                         
                        int index64_1341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1341);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA64_1342 = input.LA(1);

                         
                        int index64_1342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1342);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA64_1343 = input.LA(1);

                         
                        int index64_1343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1343);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA64_1344 = input.LA(1);

                         
                        int index64_1344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1344);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA64_1345 = input.LA(1);

                         
                        int index64_1345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1345);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA64_1361 = input.LA(1);

                         
                        int index64_1361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1361);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA64_1362 = input.LA(1);

                         
                        int index64_1362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1362);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA64_1366 = input.LA(1);

                         
                        int index64_1366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1366);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA64_1371 = input.LA(1);

                         
                        int index64_1371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1371);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA64_1372 = input.LA(1);

                         
                        int index64_1372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1372);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA64_1375 = input.LA(1);

                         
                        int index64_1375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1375);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA64_1376 = input.LA(1);

                         
                        int index64_1376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1376);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA64_1441 = input.LA(1);

                         
                        int index64_1441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1441);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA64_1442 = input.LA(1);

                         
                        int index64_1442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1442);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA64_1443 = input.LA(1);

                         
                        int index64_1443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1443);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA64_1444 = input.LA(1);

                         
                        int index64_1444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1444);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA64_1445 = input.LA(1);

                         
                        int index64_1445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1445);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA64_1446 = input.LA(1);

                         
                        int index64_1446 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1446);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA64_1447 = input.LA(1);

                         
                        int index64_1447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1447);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA64_1448 = input.LA(1);

                         
                        int index64_1448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1448);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA64_1449 = input.LA(1);

                         
                        int index64_1449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1449);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA64_1450 = input.LA(1);

                         
                        int index64_1450 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1450);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA64_1451 = input.LA(1);

                         
                        int index64_1451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1451);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA64_1452 = input.LA(1);

                         
                        int index64_1452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1452);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA64_1453 = input.LA(1);

                         
                        int index64_1453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1453);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA64_1454 = input.LA(1);

                         
                        int index64_1454 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1454);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA64_1470 = input.LA(1);

                         
                        int index64_1470 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1470);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA64_1471 = input.LA(1);

                         
                        int index64_1471 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1471);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA64_1475 = input.LA(1);

                         
                        int index64_1475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1475);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA64_1480 = input.LA(1);

                         
                        int index64_1480 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1480);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA64_1481 = input.LA(1);

                         
                        int index64_1481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1483;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_1481);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA63_eotS =
        "\74\uffff";
    static final String DFA63_eofS =
        "\1\1\73\uffff";
    static final String DFA63_minS =
        "\1\26\73\uffff";
    static final String DFA63_maxS =
        "\1\u00d0\73\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA63_specialS =
        "\74\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\1\1\1\uffff\7\1\4\uffff\1\1\3"+
            "\uffff\4\1\4\uffff\4\1\1\uffff\11\1\1\uffff\4\1\1\uffff\7\1"+
            "\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 505:30: ( access_wrapper name )*";
        }
    }
    static final String DFA66_eotS =
        "\u0141\uffff";
    static final String DFA66_eofS =
        "\2\uffff\1\13\6\uffff\1\160\u0137\uffff";
    static final String DFA66_minS =
        "\1\20\1\56\1\26\6\uffff\1\26\1\20\72\uffff\1\20\72\uffff\2\20\2"+
        "\167\4\56\1\127\3\56\1\u00cc\1\56\4\20\105\0\2\uffff\6\0\2\uffff"+
        "\6\0\2\uffff\5\0\2\uffff\5\0\2\uffff\112\0";
    static final String DFA66_maxS =
        "\1\u00c6\1\56\1\u00d0\6\uffff\1\u00d0\1\u00d1\72\uffff\1\u00d1\72"+
        "\uffff\1\u00c6\1\u00d1\2\167\1\56\1\u00cf\1\56\1\u00cf\1\127\3\u00cf"+
        "\1\u00cc\1\u00ca\1\u00d1\3\u00c6\105\0\2\uffff\6\0\2\uffff\6\0\2"+
        "\uffff\5\0\2\uffff\5\0\2\uffff\112\0";
    static final String DFA66_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\72\uffff\72\2\127"+
        "\uffff\1\1\7\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\113\uffff";
    static final String DFA66_specialS =
        "\1\0\10\uffff\1\1\173\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6"+
        "\6\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1"+
        "\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\2\uffff\1\114\1\115\1"+
        "\116\1\117\1\120\1\121\2\uffff\1\122\1\123\1\124\1\125\1\126\1\127"+
        "\2\uffff\1\130\1\131\1\132\1\133\1\134\2\uffff\1\135\1\136\1\137"+
        "\1\140\1\141\2\uffff\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1"+
        "\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
        "\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176"+
        "\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1"+
        "\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1"+
        "\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1"+
        "\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1"+
        "\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1"+
        "\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab}>";
    static final String[] DFA66_transitionS = {
            "\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\35\uffff\1\1\3\uffff"+
            "\1\3\31\uffff\1\5\24\uffff\1\10\1\uffff\1\10\16\uffff\1\10\14"+
            "\uffff\1\10",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\3\13\1\uffff\2\13\1\uffff\3\13\1\uffff"+
            "\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1\13\1\uffff\7\13\4"+
            "\uffff\1\13\3\uffff\4\13\4\uffff\1\12\3\13\1\uffff\11\13\1\uffff"+
            "\4\13\1\uffff\7\13\1\uffff\7\13\1\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\27\uffff\1\114\21\uffff\1\152\21\uffff\1\151\36\uffff"+
            "\1\171\1\uffff\2\171\1\110\1\uffff\1\107\1\112\1\115\1\uffff"+
            "\1\116\1\177\1\uffff\1\174\1\116\1\177\1\uffff\2\106\1\171\1"+
            "\uffff\1\176\1\144\2\171\1\uffff\6\171\1\uffff\1\111\1\uffff"+
            "\1\154\1\162\1\173\1\170\1\155\1\161\1\164\4\uffff\1\163\3\uffff"+
            "\1\131\1\172\1\133\1\132\4\uffff\1\105\1\153\1\175\1\171\1\uffff"+
            "\1\145\1\156\1\124\1\146\1\157\1\135\1\137\1\121\1\165\1\uffff"+
            "\1\142\1\147\1\117\1\136\1\uffff\1\126\1\127\1\141\1\130\1\134"+
            "\1\120\1\140\1\uffff\1\167\1\122\1\125\1\123\1\143\1\150\1\171"+
            "\1\uffff\1\171\1\113",
            "\1\u0089\35\uffff\1\u0085\24\uffff\1\u008a\23\uffff\1\u0087"+
            "\30\uffff\1\u008f\4\uffff\1\u0084\1\uffff\1\u0081\1\uffff\1"+
            "\u0086\2\uffff\1\u0091\2\uffff\1\u0080\1\u0091\22\uffff\1\u0088"+
            "\13\uffff\1\u0083\2\uffff\1\u0082\5\uffff\1\u008b\1\uffff\1"+
            "\u008b\1\u008e\2\uffff\1\u008c\1\u008d\11\uffff\1\u008b\14\uffff"+
            "\1\u008b\12\uffff\1\u0090",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\35\uffff\1\u0097\24\uffff\1\u009c\23\uffff\1\u0099"+
            "\30\uffff\1\u00a1\4\uffff\1\u0096\1\uffff\1\u0093\1\uffff\1"+
            "\u0098\2\uffff\1\u00a3\2\uffff\1\u0092\1\u00a3\22\uffff\1\u009a"+
            "\13\uffff\1\u0095\2\uffff\1\u0094\5\uffff\1\u009d\1\uffff\1"+
            "\u009d\1\u00a0\2\uffff\1\u009e\1\u009f\11\uffff\1\u009d\14\uffff"+
            "\1\u009d\12\uffff\1\u00a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ac\35\uffff\1\u00a8\24\uffff\1\u00ad\23\uffff\1\u00aa"+
            "\35\uffff\1\u00a7\1\uffff\1\u00a4\1\uffff\1\u00a9\31\uffff\1"+
            "\u00ab\13\uffff\1\u00a6\2\uffff\1\u00a5\5\uffff\1\u00ae\1\uffff"+
            "\1\u00ae\1\u00b1\2\uffff\1\u00af\1\u00b0\11\uffff\1\u00ae\14"+
            "\uffff\1\u00ae",
            "\1\u00c5\35\uffff\1\u00ba\24\uffff\1\u00c6\23\uffff\1\u00c3"+
            "\30\uffff\1\u00cb\4\uffff\1\u00c1\1\uffff\1\u00b3\1\uffff\1"+
            "\u00c2\2\uffff\1\u00cd\2\uffff\1\u00be\1\u00cd\22\uffff\1\u00c4"+
            "\13\uffff\1\u00c0\2\uffff\1\u00bf\5\uffff\1\u00c7\1\uffff\1"+
            "\u00c7\1\u00ca\2\uffff\1\u00c8\1\u00c9\2\uffff\1\u00b5\4\uffff"+
            "\1\u00bd\1\uffff\1\u00c7\2\uffff\1\u00b2\2\uffff\1\u00b7\1\u00b8"+
            "\1\uffff\1\u00b9\1\uffff\1\u00bb\1\uffff\1\u00c7\1\uffff\1\u00bc"+
            "\1\u00b6\1\u00b4\6\uffff\1\u00cc",
            "\1\u00ce",
            "\1\u00cf",
            "\1\u00d0",
            "\1\13\102\uffff\1\u00d5\1\uffff\3\u00d5\1\uffff\1\u00d3\1\uffff"+
            "\1\u00d5\1\uffff\1\u00d5\1\u00d4\2\uffff\1\u00d5\1\u00d4\1\uffff"+
            "\2\u00d2\1\u00d5\3\uffff\2\u00d5\1\uffff\6\u00d5\1\uffff\1\u00d6"+
            "\30\uffff\1\u00d1\1\uffff\1\u00d7\1\u00d5\36\uffff\1\u00d5\1"+
            "\uffff\1\u00d5",
            "\1\u00d9",
            "\1\13\102\uffff\1\u00dd\1\uffff\3\u00dd\1\uffff\1\u00db\1\uffff"+
            "\1\u00dd\1\uffff\1\u00dd\1\u00dc\2\uffff\1\u00dd\1\u00dc\1\uffff"+
            "\2\u00da\1\u00dd\3\uffff\2\u00dd\1\uffff\6\u00dd\1\uffff\1\u00de"+
            "\32\uffff\1\u00df\1\u00dd\36\uffff\1\u00dd\1\uffff\1\u00dd",
            "\1\u00e1",
            "\1\13\102\uffff\1\u00e5\1\uffff\3\u00e5\1\uffff\1\u00e3\1\uffff"+
            "\1\u00e5\1\uffff\1\u00e5\1\u00e4\2\uffff\1\u00e5\1\u00e4\1\uffff"+
            "\2\u00e2\1\u00e5\3\uffff\2\u00e5\1\uffff\6\u00e5\1\uffff\1\u00e6"+
            "\32\uffff\1\u00e7\1\u00e5\36\uffff\1\u00e5\1\uffff\1\u00e5",
            "\1\13\102\uffff\1\u00ec\1\uffff\3\u00ec\1\uffff\1\u00ea\1\uffff"+
            "\1\u00ec\1\uffff\1\u00ec\1\u00eb\2\uffff\1\u00ec\1\u00eb\1\uffff"+
            "\2\u00e9\1\u00ec\3\uffff\2\u00ec\1\uffff\6\u00ec\1\uffff\1\u00ed"+
            "\32\uffff\1\u00ee\1\u00ec\36\uffff\1\u00ec\1\uffff\1\u00ec",
            "\1\13\102\uffff\1\u00f3\1\uffff\3\u00f3\1\uffff\1\u00f1\1\uffff"+
            "\1\u00f3\1\uffff\1\u00f3\1\u00f2\2\uffff\1\u00f3\1\u00f2\1\uffff"+
            "\2\u00f0\1\u00f3\3\uffff\2\u00f3\1\uffff\6\u00f3\1\uffff\1\u00f4"+
            "\32\uffff\1\u00f5\1\u00f3\36\uffff\1\u00f3\1\uffff\1\u00f3",
            "\1\u00f7",
            "\1\u0100\110\uffff\1\u00f9\1\u0104\71\uffff\1\u00fb\4\uffff"+
            "\1\u0103\4\uffff\1\u00f8\2\uffff\1\u00fd\1\u00fe\1\uffff\1\u00ff"+
            "\1\uffff\1\u0101\3\uffff\1\u0102\1\u00fc\1\u00fa",
            "\1\u010e\35\uffff\1\u010a\24\uffff\1\u010f\23\uffff\1\u010c"+
            "\30\uffff\1\u0114\4\uffff\1\u0109\1\uffff\1\u0106\1\uffff\1"+
            "\u010b\2\uffff\1\u0116\2\uffff\1\u0105\1\u0116\22\uffff\1\u010d"+
            "\13\uffff\1\u0108\2\uffff\1\u0107\5\uffff\1\u0110\1\uffff\1"+
            "\u0110\1\u0113\2\uffff\1\u0111\1\u0112\11\uffff\1\u0110\14\uffff"+
            "\1\u0110\12\uffff\1\u0115",
            "\1\u011f\35\uffff\1\u011b\24\uffff\1\u0120\23\uffff\1\u011d"+
            "\35\uffff\1\u011a\1\uffff\1\u0117\1\uffff\1\u011c\31\uffff\1"+
            "\u011e\13\uffff\1\u0119\2\uffff\1\u0118\5\uffff\1\u0121\1\uffff"+
            "\1\u0121\1\u0124\2\uffff\1\u0122\1\u0123\11\uffff\1\u0121\14"+
            "\uffff\1\u0121",
            "\1\u012d\35\uffff\1\u0129\24\uffff\1\u012e\23\uffff\1\u012b"+
            "\35\uffff\1\u0128\1\uffff\1\u0125\1\uffff\1\u012a\31\uffff\1"+
            "\u012c\13\uffff\1\u0127\2\uffff\1\u0126\5\uffff\1\u012f\1\uffff"+
            "\1\u012f\1\u0132\2\uffff\1\u0130\1\u0131\11\uffff\1\u012f\14"+
            "\uffff\1\u012f",
            "\1\u013b\35\uffff\1\u0137\24\uffff\1\u013c\23\uffff\1\u0139"+
            "\35\uffff\1\u0136\1\uffff\1\u0133\1\uffff\1\u0138\31\uffff\1"+
            "\u013a\13\uffff\1\u0135\2\uffff\1\u0134\5\uffff\1\u013d\1\uffff"+
            "\1\u013d\1\u0140\2\uffff\1\u013e\1\u013f\11\uffff\1\u013d\14"+
            "\uffff\1\u013d",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "508:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_0 = input.LA(1);

                         
                        int index66_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA66_0==117) ) {s = 1;}

                        else if ( (LA66_0==ID) ) {s = 2;}

                        else if ( (LA66_0==121) && (synpred16_Objc())) {s = 3;}

                        else if ( (LA66_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA66_0==147) ) {s = 5;}

                        else if ( (LA66_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA66_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA66_0==168||LA66_0==170||LA66_0==185||LA66_0==198) ) {s = 8;}

                         
                        input.seek(index66_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA66_9 = input.LA(1);

                         
                        int index66_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA66_9==171) ) {s = 69;}

                        else if ( ((LA66_9 >= 130 && LA66_9 <= 131)) && (synpred16_Objc())) {s = 70;}

                        else if ( (LA66_9==119) && (synpred16_Objc())) {s = 71;}

                        else if ( (LA66_9==117) && (synpred16_Objc())) {s = 72;}

                        else if ( (LA66_9==146) && (synpred16_Objc())) {s = 73;}

                        else if ( (LA66_9==120) && (synpred16_Objc())) {s = 74;}

                        else if ( (LA66_9==208) && (synpred16_Objc())) {s = 75;}

                        else if ( (LA66_9==ID) && (synpred16_Objc())) {s = 76;}

                        else if ( (LA66_9==121) && (synpred16_Objc())) {s = 77;}

                        else if ( (LA66_9==123||LA66_9==127) && (synpred16_Objc())) {s = 78;}

                        else if ( (LA66_9==188) && (synpred16_Objc())) {s = 79;}

                        else if ( (LA66_9==196) && (synpred16_Objc())) {s = 80;}

                        else if ( (LA66_9==183) && (synpred16_Objc())) {s = 81;}

                        else if ( (LA66_9==200) && (synpred16_Objc())) {s = 82;}

                        else if ( (LA66_9==202) && (synpred16_Objc())) {s = 83;}

                        else if ( (LA66_9==178) && (synpred16_Objc())) {s = 84;}

                        else if ( (LA66_9==201) && (synpred16_Objc())) {s = 85;}

                        else if ( (LA66_9==191) && (synpred16_Objc())) {s = 86;}

                        else if ( (LA66_9==192) && (synpred16_Objc())) {s = 87;}

                        else if ( (LA66_9==194) && (synpred16_Objc())) {s = 88;}

                        else if ( (LA66_9==163) && (synpred16_Objc())) {s = 89;}

                        else if ( (LA66_9==166) && (synpred16_Objc())) {s = 90;}

                        else if ( (LA66_9==165) && (synpred16_Objc())) {s = 91;}

                        else if ( (LA66_9==195) && (synpred16_Objc())) {s = 92;}

                        else if ( (LA66_9==181) && (synpred16_Objc())) {s = 93;}

                        else if ( (LA66_9==189) && (synpred16_Objc())) {s = 94;}

                        else if ( (LA66_9==182) && (synpred16_Objc())) {s = 95;}

                        else if ( (LA66_9==197) && (synpred16_Objc())) {s = 96;}

                        else if ( (LA66_9==193) && (synpred16_Objc())) {s = 97;}

                        else if ( (LA66_9==186) && (synpred16_Objc())) {s = 98;}

                        else if ( (LA66_9==203) && (synpred16_Objc())) {s = 99;}

                        else if ( (LA66_9==135) && (synpred16_Objc())) {s = 100;}

                        else if ( (LA66_9==176) && (synpred16_Objc())) {s = 101;}

                        else if ( (LA66_9==179) && (synpred16_Objc())) {s = 102;}

                        else if ( (LA66_9==187) && (synpred16_Objc())) {s = 103;}

                        else if ( (LA66_9==204) && (synpred16_Objc())) {s = 104;}

                        else if ( (LA66_9==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 105;}

                        else if ( (LA66_9==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 106;}

                        else if ( (LA66_9==172) && (synpred16_Objc())) {s = 107;}

                        else if ( (LA66_9==148) && (synpred16_Objc())) {s = 108;}

                        else if ( (LA66_9==152) && (synpred16_Objc())) {s = 109;}

                        else if ( (LA66_9==177) && (synpred16_Objc())) {s = 110;}

                        else if ( (LA66_9==180) && (synpred16_Objc())) {s = 111;}

                        else if ( (LA66_9==EOF) && (synpred16_Objc())) {s = 112;}

                        else if ( (LA66_9==153) && (synpred16_Objc())) {s = 113;}

                        else if ( (LA66_9==149) && (synpred16_Objc())) {s = 114;}

                        else if ( (LA66_9==159) && (synpred16_Objc())) {s = 115;}

                        else if ( (LA66_9==154) && (synpred16_Objc())) {s = 116;}

                        else if ( (LA66_9==184) && (synpred16_Objc())) {s = 117;}

                        else if ( (LA66_9==DEFINE_LITERAL) && (synpred16_Objc())) {s = 118;}

                        else if ( (LA66_9==199) && (synpred16_Objc())) {s = 119;}

                        else if ( (LA66_9==151) && (synpred16_Objc())) {s = 120;}

                        else if ( (LA66_9==113||(LA66_9 >= 115 && LA66_9 <= 116)||LA66_9==132||(LA66_9 >= 136 && LA66_9 <= 137)||(LA66_9 >= 139 && LA66_9 <= 144)||LA66_9==174||LA66_9==205||LA66_9==207) && (synpred16_Objc())) {s = 121;}

                        else if ( (LA66_9==164) && (synpred16_Objc())) {s = 122;}

                        else if ( (LA66_9==150) && (synpred16_Objc())) {s = 123;}

                        else if ( (LA66_9==126) && (synpred16_Objc())) {s = 124;}

                        else if ( (LA66_9==173) && (synpred16_Objc())) {s = 125;}

                        else if ( (LA66_9==134) && (synpred16_Objc())) {s = 126;}

                        else if ( (LA66_9==124||LA66_9==128) && (synpred16_Objc())) {s = 127;}

                         
                        input.seek(index66_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA66_133 = input.LA(1);

                         
                        int index66_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA66_133==171) ) {s = 209;}

                        else if ( ((LA66_133 >= 130 && LA66_133 <= 131)) ) {s = 210;}

                        else if ( (LA66_133==119) ) {s = 211;}

                        else if ( (LA66_133==124||LA66_133==128) ) {s = 212;}

                        else if ( (LA66_133==113||(LA66_133 >= 115 && LA66_133 <= 117)||LA66_133==121||LA66_133==123||LA66_133==127||LA66_133==132||(LA66_133 >= 136 && LA66_133 <= 137)||(LA66_133 >= 139 && LA66_133 <= 144)||LA66_133==174||LA66_133==205||LA66_133==207) ) {s = 213;}

                        else if ( (LA66_133==146) ) {s = 214;}

                        else if ( (LA66_133==173) && (synpred15_Objc())) {s = 215;}

                        else if ( (LA66_133==ID) ) {s = 11;}

                         
                        input.seek(index66_133);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA66_135 = input.LA(1);

                         
                        int index66_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA66_135 >= 130 && LA66_135 <= 131)) ) {s = 218;}

                        else if ( (LA66_135==119) ) {s = 219;}

                        else if ( (LA66_135==124||LA66_135==128) ) {s = 220;}

                        else if ( (LA66_135==113||(LA66_135 >= 115 && LA66_135 <= 117)||LA66_135==121||LA66_135==123||LA66_135==127||LA66_135==132||(LA66_135 >= 136 && LA66_135 <= 137)||(LA66_135 >= 139 && LA66_135 <= 144)||LA66_135==174||LA66_135==205||LA66_135==207) ) {s = 221;}

                        else if ( (LA66_135==146) ) {s = 222;}

                        else if ( (LA66_135==173) && (synpred15_Objc())) {s = 223;}

                        else if ( (LA66_135==ID) ) {s = 11;}

                         
                        input.seek(index66_135);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA66_137 = input.LA(1);

                         
                        int index66_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA66_137 >= 130 && LA66_137 <= 131)) ) {s = 226;}

                        else if ( (LA66_137==119) ) {s = 227;}

                        else if ( (LA66_137==124||LA66_137==128) ) {s = 228;}

                        else if ( (LA66_137==113||(LA66_137 >= 115 && LA66_137 <= 117)||LA66_137==121||LA66_137==123||LA66_137==127||LA66_137==132||(LA66_137 >= 136 && LA66_137 <= 137)||(LA66_137 >= 139 && LA66_137 <= 144)||LA66_137==174||LA66_137==205||LA66_137==207) ) {s = 229;}

                        else if ( (LA66_137==146) ) {s = 230;}

                        else if ( (LA66_137==173) && (synpred15_Objc())) {s = 231;}

                        else if ( (LA66_137==ID) ) {s = 11;}

                         
                        input.seek(index66_137);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA66_138 = input.LA(1);

                         
                        int index66_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA66_138 >= 130 && LA66_138 <= 131)) ) {s = 233;}

                        else if ( (LA66_138==119) ) {s = 234;}

                        else if ( (LA66_138==124||LA66_138==128) ) {s = 235;}

                        else if ( (LA66_138==113||(LA66_138 >= 115 && LA66_138 <= 117)||LA66_138==121||LA66_138==123||LA66_138==127||LA66_138==132||(LA66_138 >= 136 && LA66_138 <= 137)||(LA66_138 >= 139 && LA66_138 <= 144)||LA66_138==174||LA66_138==205||LA66_138==207) ) {s = 236;}

                        else if ( (LA66_138==146) ) {s = 237;}

                        else if ( (LA66_138==173) && (synpred15_Objc())) {s = 238;}

                        else if ( (LA66_138==ID) ) {s = 11;}

                         
                        input.seek(index66_138);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA66_139 = input.LA(1);

                         
                        int index66_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA66_139 >= 130 && LA66_139 <= 131)) ) {s = 240;}

                        else if ( (LA66_139==119) ) {s = 241;}

                        else if ( (LA66_139==124||LA66_139==128) ) {s = 242;}

                        else if ( (LA66_139==113||(LA66_139 >= 115 && LA66_139 <= 117)||LA66_139==121||LA66_139==123||LA66_139==127||LA66_139==132||(LA66_139 >= 136 && LA66_139 <= 137)||(LA66_139 >= 139 && LA66_139 <= 144)||LA66_139==174||LA66_139==205||LA66_139==207) ) {s = 243;}

                        else if ( (LA66_139==146) ) {s = 244;}

                        else if ( (LA66_139==173) && (synpred15_Objc())) {s = 245;}

                        else if ( (LA66_139==ID) ) {s = 11;}

                         
                        input.seek(index66_139);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA66_146 = input.LA(1);

                         
                        int index66_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_146);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA66_147 = input.LA(1);

                         
                        int index66_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_147);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA66_148 = input.LA(1);

                         
                        int index66_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_148);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA66_149 = input.LA(1);

                         
                        int index66_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_149);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA66_150 = input.LA(1);

                         
                        int index66_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_150);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA66_151 = input.LA(1);

                         
                        int index66_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_151);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA66_152 = input.LA(1);

                         
                        int index66_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_152);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA66_153 = input.LA(1);

                         
                        int index66_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_153);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA66_154 = input.LA(1);

                         
                        int index66_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_154);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA66_155 = input.LA(1);

                         
                        int index66_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_155);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA66_156 = input.LA(1);

                         
                        int index66_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_156);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA66_157 = input.LA(1);

                         
                        int index66_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_157);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA66_158 = input.LA(1);

                         
                        int index66_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_158);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA66_159 = input.LA(1);

                         
                        int index66_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_159);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA66_160 = input.LA(1);

                         
                        int index66_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_160);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA66_161 = input.LA(1);

                         
                        int index66_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_161);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA66_162 = input.LA(1);

                         
                        int index66_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_162);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA66_163 = input.LA(1);

                         
                        int index66_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index66_163);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA66_164 = input.LA(1);

                         
                        int index66_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_164);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA66_165 = input.LA(1);

                         
                        int index66_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_165);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA66_166 = input.LA(1);

                         
                        int index66_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_166);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA66_167 = input.LA(1);

                         
                        int index66_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_167);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA66_168 = input.LA(1);

                         
                        int index66_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_168);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA66_169 = input.LA(1);

                         
                        int index66_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_169);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA66_170 = input.LA(1);

                         
                        int index66_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_170);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA66_171 = input.LA(1);

                         
                        int index66_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_171);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA66_172 = input.LA(1);

                         
                        int index66_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_172);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA66_173 = input.LA(1);

                         
                        int index66_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_173);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA66_174 = input.LA(1);

                         
                        int index66_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_174);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA66_175 = input.LA(1);

                         
                        int index66_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_175);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA66_176 = input.LA(1);

                         
                        int index66_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_176);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA66_177 = input.LA(1);

                         
                        int index66_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_177);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA66_178 = input.LA(1);

                         
                        int index66_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_178);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA66_179 = input.LA(1);

                         
                        int index66_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_179);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA66_180 = input.LA(1);

                         
                        int index66_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_180);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA66_181 = input.LA(1);

                         
                        int index66_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_181);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA66_182 = input.LA(1);

                         
                        int index66_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_182);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA66_183 = input.LA(1);

                         
                        int index66_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_183);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA66_184 = input.LA(1);

                         
                        int index66_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_184);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA66_185 = input.LA(1);

                         
                        int index66_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_185);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA66_186 = input.LA(1);

                         
                        int index66_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_186);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA66_187 = input.LA(1);

                         
                        int index66_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_187);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA66_188 = input.LA(1);

                         
                        int index66_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_188);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA66_189 = input.LA(1);

                         
                        int index66_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_189);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA66_190 = input.LA(1);

                         
                        int index66_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_190);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA66_191 = input.LA(1);

                         
                        int index66_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_191);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA66_192 = input.LA(1);

                         
                        int index66_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_192);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA66_193 = input.LA(1);

                         
                        int index66_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_193);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA66_194 = input.LA(1);

                         
                        int index66_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_194);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA66_195 = input.LA(1);

                         
                        int index66_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_195);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA66_196 = input.LA(1);

                         
                        int index66_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_196);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA66_197 = input.LA(1);

                         
                        int index66_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_197);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA66_198 = input.LA(1);

                         
                        int index66_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_198);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA66_199 = input.LA(1);

                         
                        int index66_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_199);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA66_200 = input.LA(1);

                         
                        int index66_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_200);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA66_201 = input.LA(1);

                         
                        int index66_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_201);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA66_202 = input.LA(1);

                         
                        int index66_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_202);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA66_203 = input.LA(1);

                         
                        int index66_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_203);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA66_204 = input.LA(1);

                         
                        int index66_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_204);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA66_205 = input.LA(1);

                         
                        int index66_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_205);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA66_206 = input.LA(1);

                         
                        int index66_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_206);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA66_207 = input.LA(1);

                         
                        int index66_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_207);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA66_208 = input.LA(1);

                         
                        int index66_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_208);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA66_209 = input.LA(1);

                         
                        int index66_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_209);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA66_210 = input.LA(1);

                         
                        int index66_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_210);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA66_211 = input.LA(1);

                         
                        int index66_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_211);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA66_212 = input.LA(1);

                         
                        int index66_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_212);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA66_213 = input.LA(1);

                         
                        int index66_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_213);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA66_214 = input.LA(1);

                         
                        int index66_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_214);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA66_217 = input.LA(1);

                         
                        int index66_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_217);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA66_218 = input.LA(1);

                         
                        int index66_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_218);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA66_219 = input.LA(1);

                         
                        int index66_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_219);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA66_220 = input.LA(1);

                         
                        int index66_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_220);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA66_221 = input.LA(1);

                         
                        int index66_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_221);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA66_222 = input.LA(1);

                         
                        int index66_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_222);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA66_225 = input.LA(1);

                         
                        int index66_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_225);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA66_226 = input.LA(1);

                         
                        int index66_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_226);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA66_227 = input.LA(1);

                         
                        int index66_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_227);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA66_228 = input.LA(1);

                         
                        int index66_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_228);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA66_229 = input.LA(1);

                         
                        int index66_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_229);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA66_230 = input.LA(1);

                         
                        int index66_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_230);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA66_233 = input.LA(1);

                         
                        int index66_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_233);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA66_234 = input.LA(1);

                         
                        int index66_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_234);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA66_235 = input.LA(1);

                         
                        int index66_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_235);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA66_236 = input.LA(1);

                         
                        int index66_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_236);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA66_237 = input.LA(1);

                         
                        int index66_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_237);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA66_240 = input.LA(1);

                         
                        int index66_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_240);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA66_241 = input.LA(1);

                         
                        int index66_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_241);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA66_242 = input.LA(1);

                         
                        int index66_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_242);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA66_243 = input.LA(1);

                         
                        int index66_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_243);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA66_244 = input.LA(1);

                         
                        int index66_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_244);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA66_247 = input.LA(1);

                         
                        int index66_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_247);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA66_248 = input.LA(1);

                         
                        int index66_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_248);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA66_249 = input.LA(1);

                         
                        int index66_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_249);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA66_250 = input.LA(1);

                         
                        int index66_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_250);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA66_251 = input.LA(1);

                         
                        int index66_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_251);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA66_252 = input.LA(1);

                         
                        int index66_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_252);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA66_253 = input.LA(1);

                         
                        int index66_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_253);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA66_254 = input.LA(1);

                         
                        int index66_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_254);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA66_255 = input.LA(1);

                         
                        int index66_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_255);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA66_256 = input.LA(1);

                         
                        int index66_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_256);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA66_257 = input.LA(1);

                         
                        int index66_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_257);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA66_258 = input.LA(1);

                         
                        int index66_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_258);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA66_259 = input.LA(1);

                         
                        int index66_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_259);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA66_260 = input.LA(1);

                         
                        int index66_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_260);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA66_261 = input.LA(1);

                         
                        int index66_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_261);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA66_262 = input.LA(1);

                         
                        int index66_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_262);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA66_263 = input.LA(1);

                         
                        int index66_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_263);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA66_264 = input.LA(1);

                         
                        int index66_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_264);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA66_265 = input.LA(1);

                         
                        int index66_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_265);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA66_266 = input.LA(1);

                         
                        int index66_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_266);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA66_267 = input.LA(1);

                         
                        int index66_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_267);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA66_268 = input.LA(1);

                         
                        int index66_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_268);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA66_269 = input.LA(1);

                         
                        int index66_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_269);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA66_270 = input.LA(1);

                         
                        int index66_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_270);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA66_271 = input.LA(1);

                         
                        int index66_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_271);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA66_272 = input.LA(1);

                         
                        int index66_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_272);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA66_273 = input.LA(1);

                         
                        int index66_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_273);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA66_274 = input.LA(1);

                         
                        int index66_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_274);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA66_275 = input.LA(1);

                         
                        int index66_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_275);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA66_276 = input.LA(1);

                         
                        int index66_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA66_277 = input.LA(1);

                         
                        int index66_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_277);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA66_278 = input.LA(1);

                         
                        int index66_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_278);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA66_279 = input.LA(1);

                         
                        int index66_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_279);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA66_280 = input.LA(1);

                         
                        int index66_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_280);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA66_281 = input.LA(1);

                         
                        int index66_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_281);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA66_282 = input.LA(1);

                         
                        int index66_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_282);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA66_283 = input.LA(1);

                         
                        int index66_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_283);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA66_284 = input.LA(1);

                         
                        int index66_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_284);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA66_285 = input.LA(1);

                         
                        int index66_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_285);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA66_286 = input.LA(1);

                         
                        int index66_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_286);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA66_287 = input.LA(1);

                         
                        int index66_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_287);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA66_288 = input.LA(1);

                         
                        int index66_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_288);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA66_289 = input.LA(1);

                         
                        int index66_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_289);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA66_290 = input.LA(1);

                         
                        int index66_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_290);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA66_291 = input.LA(1);

                         
                        int index66_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_291);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA66_292 = input.LA(1);

                         
                        int index66_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_292);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA66_293 = input.LA(1);

                         
                        int index66_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_293);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA66_294 = input.LA(1);

                         
                        int index66_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_294);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA66_295 = input.LA(1);

                         
                        int index66_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_295);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA66_296 = input.LA(1);

                         
                        int index66_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_296);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA66_297 = input.LA(1);

                         
                        int index66_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_297);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA66_298 = input.LA(1);

                         
                        int index66_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_298);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA66_299 = input.LA(1);

                         
                        int index66_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_299);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA66_300 = input.LA(1);

                         
                        int index66_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_300);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA66_301 = input.LA(1);

                         
                        int index66_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_301);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA66_302 = input.LA(1);

                         
                        int index66_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_302);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA66_303 = input.LA(1);

                         
                        int index66_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_303);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA66_304 = input.LA(1);

                         
                        int index66_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_304);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA66_305 = input.LA(1);

                         
                        int index66_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_305);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA66_306 = input.LA(1);

                         
                        int index66_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_306);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA66_307 = input.LA(1);

                         
                        int index66_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_307);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA66_308 = input.LA(1);

                         
                        int index66_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_308);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA66_309 = input.LA(1);

                         
                        int index66_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_309);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA66_310 = input.LA(1);

                         
                        int index66_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_310);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA66_311 = input.LA(1);

                         
                        int index66_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_311);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA66_312 = input.LA(1);

                         
                        int index66_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_312);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA66_313 = input.LA(1);

                         
                        int index66_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_313);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA66_314 = input.LA(1);

                         
                        int index66_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_314);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA66_315 = input.LA(1);

                         
                        int index66_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_315);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA66_316 = input.LA(1);

                         
                        int index66_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_316);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA66_317 = input.LA(1);

                         
                        int index66_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_317);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA66_318 = input.LA(1);

                         
                        int index66_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_318);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA66_319 = input.LA(1);

                         
                        int index66_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_319);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA66_320 = input.LA(1);

                         
                        int index66_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 245;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index66_320);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA71_eotS =
        "\100\uffff";
    static final String DFA71_eofS =
        "\44\uffff\1\2\33\uffff";
    static final String DFA71_minS =
        "\2\56\4\uffff\1\56\6\uffff\1\165\23\uffff\1\20\2\uffff\1\56\1\0"+
        "\6\uffff\1\0\23\uffff";
    static final String DFA71_maxS =
        "\1\171\1\u00ca\4\uffff\1\u00ca\6\uffff\1\u00b2\23\uffff\1\u00d1"+
        "\2\uffff\1\u00ce\1\0\6\uffff\1\0\23\uffff";
    static final String DFA71_acceptS =
        "\2\uffff\1\3\2\uffff\1\1\1\uffff\6\1\1\uffff\3\1\2\uffff\1\1\14"+
        "\2\1\1\1\uffff\2\1\2\uffff\1\1\21\uffff\4\1\4\uffff";
    static final String DFA71_specialS =
        "\1\uffff\1\0\4\uffff\1\1\6\uffff\1\2\23\uffff\1\3\2\uffff\1\4\1"+
        "\5\6\uffff\1\6\23\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\2\106\uffff\1\2\1\uffff\1\1\1\uffff\1\2",
            "\1\15\106\uffff\1\2\1\uffff\1\6\1\uffff\1\2\70\uffff\1\10\4"+
            "\uffff\1\20\4\uffff\1\5\2\uffff\1\12\1\13\1\uffff\1\14\1\uffff"+
            "\1\16\3\uffff\1\17\1\11\1\7",
            "",
            "",
            "",
            "",
            "\1\34\110\uffff\1\25\1\uffff\1\23\70\uffff\1\27\4\uffff\1\37"+
            "\4\uffff\1\24\2\uffff\1\31\1\32\1\uffff\1\33\1\uffff\1\35\3"+
            "\uffff\1\36\1\30\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43\2\uffff\1\44\1\40\61\uffff\1\41\6\uffff\1\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\45\24\uffff\1\54\23\uffff\1\2\30\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\2"+
            "\2\1\uffff\1\46\2\2\11\uffff\1\2\14\uffff\1\2\12\uffff\1\2",
            "",
            "",
            "\1\71\106\uffff\1\70\1\2\1\73\1\uffff\1\72\1\2\1\uffff\2\2"+
            "\2\uffff\4\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2"+
            "\74\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "586:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_1==188) && (synpred19_Objc())) {s = 5;}

                        else if ( (LA71_1==119) ) {s = 6;}

                        else if ( (LA71_1==202) && (synpred19_Objc())) {s = 7;}

                        else if ( (LA71_1==178) && (synpred19_Objc())) {s = 8;}

                        else if ( (LA71_1==201) && (synpred19_Objc())) {s = 9;}

                        else if ( (LA71_1==191) && (synpred19_Objc())) {s = 10;}

                        else if ( (LA71_1==192) && (synpred19_Objc())) {s = 11;}

                        else if ( (LA71_1==194) && (synpred19_Objc())) {s = 12;}

                        else if ( (LA71_1==ID) ) {s = 13;}

                        else if ( (LA71_1==196) && (synpred19_Objc())) {s = 14;}

                        else if ( (LA71_1==200) && (synpred19_Objc())) {s = 15;}

                        else if ( (LA71_1==183) && (synpred19_Objc())) {s = 16;}

                        else if ( (LA71_1==117||LA71_1==121) ) {s = 2;}

                         
                        input.seek(index71_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_6 = input.LA(1);

                         
                        int index71_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_6==121) && (synpred19_Objc())) {s = 19;}

                        else if ( (LA71_6==188) && (synpred20_Objc())) {s = 20;}

                        else if ( (LA71_6==119) && (synpred20_Objc())) {s = 21;}

                        else if ( (LA71_6==202) && (synpred20_Objc())) {s = 22;}

                        else if ( (LA71_6==178) && (synpred20_Objc())) {s = 23;}

                        else if ( (LA71_6==201) && (synpred20_Objc())) {s = 24;}

                        else if ( (LA71_6==191) && (synpred20_Objc())) {s = 25;}

                        else if ( (LA71_6==192) && (synpred20_Objc())) {s = 26;}

                        else if ( (LA71_6==194) && (synpred20_Objc())) {s = 27;}

                        else if ( (LA71_6==ID) && (synpred20_Objc())) {s = 28;}

                        else if ( (LA71_6==196) && (synpred20_Objc())) {s = 29;}

                        else if ( (LA71_6==200) && (synpred20_Objc())) {s = 30;}

                        else if ( (LA71_6==183) && (synpred20_Objc())) {s = 31;}

                         
                        input.seek(index71_6);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_13==121) && (synpred19_Objc())) {s = 32;}

                        else if ( (LA71_13==171) ) {s = 33;}

                        else if ( (LA71_13==178) && (synpred19_Objc())) {s = 34;}

                        else if ( (LA71_13==117) && (synpred19_Objc())) {s = 35;}

                        else if ( (LA71_13==120) ) {s = 36;}

                         
                        input.seek(index71_13);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_33 = input.LA(1);

                         
                        int index71_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_33==ID) ) {s = 37;}

                        else if ( (LA71_33==173) && (synpred19_Objc())) {s = 38;}

                        else if ( (LA71_33==CHAR_LITERAL||LA71_33==STRING_LITERAL||LA71_33==112||LA71_33==117||LA71_33==119||LA71_33==121||LA71_33==124||(LA71_33 >= 127 && LA71_33 <= 128)||LA71_33==147||LA71_33==159||LA71_33==162||LA71_33==168||(LA71_33 >= 170 && LA71_33 <= 171)||(LA71_33 >= 174 && LA71_33 <= 175)||LA71_33==185||LA71_33==198||LA71_33==209) ) {s = 2;}

                        else if ( (LA71_33==NUMBER_LITERAL) ) {s = 44;}

                         
                        input.seek(index71_33);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_36 = input.LA(1);

                         
                        int index71_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_36==117) && (synpred19_Objc())) {s = 56;}

                        else if ( (LA71_36==ID) && (synpred19_Objc())) {s = 57;}

                        else if ( (LA71_36==121) && (synpred19_Objc())) {s = 58;}

                        else if ( (LA71_36==119) && (synpred19_Objc())) {s = 59;}

                        else if ( (LA71_36==EOF||LA71_36==118||LA71_36==122||(LA71_36 >= 124 && LA71_36 <= 125)||(LA71_36 >= 128 && LA71_36 <= 131)||LA71_36==133||LA71_36==138||LA71_36==140||LA71_36==145||LA71_36==206) ) {s = 2;}

                         
                        input.seek(index71_36);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_37 = input.LA(1);

                         
                        int index71_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_37);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_44 = input.LA(1);

                         
                        int index71_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_44);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA156_eotS =
        "\u0081\uffff";
    static final String DFA156_eofS =
        "\2\uffff\1\26\6\uffff\1\144\167\uffff";
    static final String DFA156_minS =
        "\1\26\1\56\1\20\1\uffff\2\20\1\uffff\1\56\1\uffff\1\26\45\uffff"+
        "\1\0\2\uffff\21\0\13\uffff\1\0\17\uffff\3\0\11\uffff\1\0\4\uffff"+
        "\1\0\14\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA156_maxS =
        "\1\26\1\56\1\u00d1\1\uffff\1\u00d1\1\u00c6\1\uffff\1\167\1\uffff"+
        "\1\u00cf\45\uffff\1\0\2\uffff\21\0\13\uffff\1\0\17\uffff\3\0\11"+
        "\uffff\1\0\4\uffff\1\0\14\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA156_acceptS =
        "\3\uffff\1\1\2\uffff\1\2\1\uffff\1\2\1\uffff\14\2\1\3\31\uffff\2"+
        "\1\21\uffff\1\1\12\2\1\uffff\16\2\4\uffff\11\2\1\uffff\4\2\1\uffff"+
        "\14\2\1\uffff\2\2\1\uffff\1\2";
    static final String DFA156_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\1\uffff\1\3\1\uffff\1\4\45\uffff\1"+
        "\5\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
        "\1\21\1\22\1\23\1\24\1\25\1\26\13\uffff\1\27\17\uffff\1\30\1\31"+
        "\1\32\11\uffff\1\33\4\uffff\1\34\14\uffff\1\35\2\uffff\1\36\1\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\1",
            "\1\2",
            "\1\15\5\uffff\1\26\27\uffff\1\11\21\uffff\1\26\2\uffff\1\16"+
            "\16\uffff\1\26\4\uffff\1\13\30\uffff\1\23\4\uffff\1\10\1\uffff"+
            "\1\4\1\uffff\1\12\1\uffff\1\26\1\25\2\uffff\1\5\1\25\1\uffff"+
            "\2\3\3\uffff\1\26\13\uffff\1\14\1\uffff\3\26\1\uffff\2\26\4"+
            "\uffff\1\7\2\uffff\1\6\1\uffff\1\26\3\uffff\1\17\1\uffff\1\17"+
            "\1\22\2\uffff\1\20\1\21\2\uffff\1\26\4\uffff\2\26\1\17\2\uffff"+
            "\1\26\2\uffff\2\26\1\uffff\3\26\1\uffff\1\17\4\26\6\uffff\1"+
            "\24",
            "",
            "\1\72\35\uffff\1\67\21\uffff\1\61\2\uffff\1\73\16\uffff\1\60"+
            "\4\uffff\1\70\30\uffff\1\100\4\uffff\1\66\1\uffff\1\63\1\103"+
            "\1\57\2\uffff\1\102\2\uffff\1\62\1\102\22\uffff\1\71\13\uffff"+
            "\1\65\2\uffff\1\64\5\uffff\1\74\1\uffff\1\74\1\77\2\uffff\1"+
            "\75\1\76\2\uffff\1\106\4\uffff\1\115\1\uffff\1\74\2\uffff\1"+
            "\104\2\uffff\1\110\1\111\1\uffff\1\112\1\uffff\1\113\1\uffff"+
            "\1\74\1\uffff\1\114\1\107\1\105\6\uffff\1\101",
            "\1\126\35\uffff\1\122\24\uffff\1\127\23\uffff\1\124\35\uffff"+
            "\1\121\1\uffff\1\116\1\uffff\1\123\31\uffff\1\125\13\uffff\1"+
            "\120\2\uffff\1\117\5\uffff\1\130\1\uffff\1\130\1\133\2\uffff"+
            "\1\131\1\132\11\uffff\1\130\14\uffff\1\130",
            "",
            "\1\26\110\uffff\1\134",
            "",
            "\1\165\27\uffff\1\157\21\uffff\1\171\21\uffff\1\170\36\uffff"+
            "\1\u0080\1\uffff\2\u0080\1\177\1\uffff\1\140\1\uffff\1\174\1"+
            "\uffff\1\142\1\141\2\uffff\1\142\1\141\1\uffff\2\137\1\u0080"+
            "\2\uffff\1\172\2\u0080\1\uffff\6\u0080\1\uffff\1\143\2\uffff"+
            "\1\161\1\176\1\173\1\uffff\1\160\1\163\4\uffff\1\162\4\uffff"+
            "\1\175\6\uffff\1\136\2\uffff\1\u0080\3\uffff\1\152\4\uffff\1"+
            "\147\1\164\3\uffff\1\145\2\uffff\1\154\1\155\1\uffff\1\156\1"+
            "\167\1\146\2\uffff\1\166\1\150\1\153\1\151\2\uffff\1\u0080\1"+
            "\uffff\1\u0080",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "946:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA156_2 >= 130 && LA156_2 <= 131)) && (synpred30_Objc())) {s = 3;}

                        else if ( (LA156_2==119) ) {s = 4;}

                        else if ( (LA156_2==127) ) {s = 5;}

                        else if ( (LA156_2==162) && (synpred31_Objc())) {s = 6;}

                        else if ( (LA156_2==159) ) {s = 7;}

                        else if ( (LA156_2==117) && (synpred31_Objc())) {s = 8;}

                        else if ( (LA156_2==ID) ) {s = 9;}

                        else if ( (LA156_2==121) && (synpred31_Objc())) {s = 10;}

                        else if ( (LA156_2==STRING_LITERAL) && (synpred31_Objc())) {s = 11;}

                        else if ( (LA156_2==147) && (synpred31_Objc())) {s = 12;}

                        else if ( (LA156_2==CHAR_LITERAL) && (synpred31_Objc())) {s = 13;}

                        else if ( (LA156_2==NUMBER_LITERAL) && (synpred31_Objc())) {s = 14;}

                        else if ( (LA156_2==168||LA156_2==170||LA156_2==185||LA156_2==198) && (synpred31_Objc())) {s = 15;}

                        else if ( (LA156_2==174) && (synpred31_Objc())) {s = 16;}

                        else if ( (LA156_2==175) && (synpred31_Objc())) {s = 17;}

                        else if ( (LA156_2==171) && (synpred31_Objc())) {s = 18;}

                        else if ( (LA156_2==112) && (synpred31_Objc())) {s = 19;}

                        else if ( (LA156_2==209) && (synpred31_Objc())) {s = 20;}

                        else if ( (LA156_2==124||LA156_2==128) && (synpred31_Objc())) {s = 21;}

                        else if ( (LA156_2==EOF||LA156_2==DEFINE_LITERAL||LA156_2==MULTI_COMMENT_LIT||LA156_2==SINGLE_COMMENT_LIT||LA156_2==123||LA156_2==135||(LA156_2 >= 149 && LA156_2 <= 151)||(LA156_2 >= 153 && LA156_2 <= 154)||LA156_2==164||LA156_2==178||(LA156_2 >= 183 && LA156_2 <= 184)||LA156_2==188||(LA156_2 >= 191 && LA156_2 <= 192)||(LA156_2 >= 194 && LA156_2 <= 196)||(LA156_2 >= 199 && LA156_2 <= 202)) ) {s = 22;}

                         
                        input.seek(index156_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA156_4==121) ) {s = 47;}

                        else if ( (LA156_4==SINGLE_COMMENT_LIT) && (synpred30_Objc())) {s = 48;}

                        else if ( (LA156_4==MULTI_COMMENT_LIT) && (synpred30_Objc())) {s = 49;}

                        else if ( (LA156_4==127) ) {s = 50;}

                        else if ( (LA156_4==119) ) {s = 51;}

                        else if ( (LA156_4==162) ) {s = 52;}

                        else if ( (LA156_4==159) ) {s = 53;}

                        else if ( (LA156_4==117) ) {s = 54;}

                        else if ( (LA156_4==ID) ) {s = 55;}

                        else if ( (LA156_4==STRING_LITERAL) ) {s = 56;}

                        else if ( (LA156_4==147) ) {s = 57;}

                        else if ( (LA156_4==CHAR_LITERAL) ) {s = 58;}

                        else if ( (LA156_4==NUMBER_LITERAL) ) {s = 59;}

                        else if ( (LA156_4==168||LA156_4==170||LA156_4==185||LA156_4==198) ) {s = 60;}

                        else if ( (LA156_4==174) ) {s = 61;}

                        else if ( (LA156_4==175) ) {s = 62;}

                        else if ( (LA156_4==171) ) {s = 63;}

                        else if ( (LA156_4==112) ) {s = 64;}

                        else if ( (LA156_4==209) ) {s = 65;}

                        else if ( (LA156_4==124||LA156_4==128) ) {s = 66;}

                        else if ( (LA156_4==120) && (synpred30_Objc())) {s = 67;}

                        else if ( (LA156_4==188) && (synpred31_Objc())) {s = 68;}

                        else if ( (LA156_4==202) && (synpred31_Objc())) {s = 69;}

                        else if ( (LA156_4==178) && (synpred31_Objc())) {s = 70;}

                        else if ( (LA156_4==201) && (synpred31_Objc())) {s = 71;}

                        else if ( (LA156_4==191) && (synpred31_Objc())) {s = 72;}

                        else if ( (LA156_4==192) && (synpred31_Objc())) {s = 73;}

                        else if ( (LA156_4==194) && (synpred31_Objc())) {s = 74;}

                        else if ( (LA156_4==196) && (synpred31_Objc())) {s = 75;}

                        else if ( (LA156_4==200) && (synpred31_Objc())) {s = 76;}

                        else if ( (LA156_4==183) && (synpred31_Objc())) {s = 77;}

                         
                        input.seek(index156_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_5 = input.LA(1);

                         
                        int index156_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA156_5==119) ) {s = 78;}

                        else if ( (LA156_5==162) && (synpred31_Objc())) {s = 79;}

                        else if ( (LA156_5==159) && (synpred31_Objc())) {s = 80;}

                        else if ( (LA156_5==117) && (synpred31_Objc())) {s = 81;}

                        else if ( (LA156_5==ID) && (synpred31_Objc())) {s = 82;}

                        else if ( (LA156_5==121) && (synpred31_Objc())) {s = 83;}

                        else if ( (LA156_5==STRING_LITERAL) && (synpred31_Objc())) {s = 84;}

                        else if ( (LA156_5==147) && (synpred31_Objc())) {s = 85;}

                        else if ( (LA156_5==CHAR_LITERAL) && (synpred31_Objc())) {s = 86;}

                        else if ( (LA156_5==NUMBER_LITERAL) && (synpred31_Objc())) {s = 87;}

                        else if ( (LA156_5==168||LA156_5==170||LA156_5==185||LA156_5==198) && (synpred31_Objc())) {s = 88;}

                        else if ( (LA156_5==174) && (synpred31_Objc())) {s = 89;}

                        else if ( (LA156_5==175) && (synpred31_Objc())) {s = 90;}

                        else if ( (LA156_5==171) && (synpred31_Objc())) {s = 91;}

                         
                        input.seek(index156_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_7 = input.LA(1);

                         
                        int index156_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA156_7==119) && (synpred31_Objc())) {s = 92;}

                        else if ( (LA156_7==ID) ) {s = 22;}

                         
                        input.seek(index156_7);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA156_9==171) ) {s = 94;}

                        else if ( ((LA156_9 >= 130 && LA156_9 <= 131)) ) {s = 95;}

                        else if ( (LA156_9==119) ) {s = 96;}

                        else if ( (LA156_9==124||LA156_9==128) && (synpred31_Objc())) {s = 97;}

                        else if ( (LA156_9==123||LA156_9==127) && (synpred31_Objc())) {s = 98;}

                        else if ( (LA156_9==146) && (synpred31_Objc())) {s = 99;}

                        else if ( (LA156_9==EOF) && (synpred31_Objc())) {s = 100;}

                        else if ( (LA156_9==188) && (synpred31_Objc())) {s = 101;}

                        else if ( (LA156_9==196) && (synpred31_Objc())) {s = 102;}

                        else if ( (LA156_9==183) && (synpred31_Objc())) {s = 103;}

                        else if ( (LA156_9==200) && (synpred31_Objc())) {s = 104;}

                        else if ( (LA156_9==202) && (synpred31_Objc())) {s = 105;}

                        else if ( (LA156_9==178) ) {s = 106;}

                        else if ( (LA156_9==201) && (synpred31_Objc())) {s = 107;}

                        else if ( (LA156_9==191) && (synpred31_Objc())) {s = 108;}

                        else if ( (LA156_9==192) && (synpred31_Objc())) {s = 109;}

                        else if ( (LA156_9==194) && (synpred31_Objc())) {s = 110;}

                        else if ( (LA156_9==ID) ) {s = 111;}

                        else if ( (LA156_9==153) && (synpred31_Objc())) {s = 112;}

                        else if ( (LA156_9==149) && (synpred31_Objc())) {s = 113;}

                        else if ( (LA156_9==159) && (synpred31_Objc())) {s = 114;}

                        else if ( (LA156_9==154) && (synpred31_Objc())) {s = 115;}

                        else if ( (LA156_9==184) && (synpred31_Objc())) {s = 116;}

                        else if ( (LA156_9==DEFINE_LITERAL) && (synpred31_Objc())) {s = 117;}

                        else if ( (LA156_9==199) && (synpred31_Objc())) {s = 118;}

                        else if ( (LA156_9==195) && (synpred31_Objc())) {s = 119;}

                        else if ( (LA156_9==SINGLE_COMMENT_LIT) && (synpred31_Objc())) {s = 120;}

                        else if ( (LA156_9==MULTI_COMMENT_LIT) && (synpred31_Objc())) {s = 121;}

                        else if ( (LA156_9==135) && (synpred31_Objc())) {s = 122;}

                        else if ( (LA156_9==151) && (synpred31_Objc())) {s = 123;}

                        else if ( (LA156_9==121) ) {s = 124;}

                        else if ( (LA156_9==164) && (synpred31_Objc())) {s = 125;}

                        else if ( (LA156_9==150) && (synpred31_Objc())) {s = 126;}

                        else if ( (LA156_9==117) ) {s = 127;}

                        else if ( (LA156_9==113||(LA156_9 >= 115 && LA156_9 <= 116)||LA156_9==132||(LA156_9 >= 136 && LA156_9 <= 137)||(LA156_9 >= 139 && LA156_9 <= 144)||LA156_9==174||LA156_9==205||LA156_9==207) && (synpred31_Objc())) {s = 128;}

                         
                        input.seek(index156_9);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_47 = input.LA(1);

                         
                        int index156_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_47);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_50 = input.LA(1);

                         
                        int index156_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_50);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_51 = input.LA(1);

                         
                        int index156_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_51);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_52 = input.LA(1);

                         
                        int index156_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_52);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_53 = input.LA(1);

                         
                        int index156_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_53);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_54 = input.LA(1);

                         
                        int index156_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_54);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_55 = input.LA(1);

                         
                        int index156_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_55);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_56 = input.LA(1);

                         
                        int index156_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_56);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_57 = input.LA(1);

                         
                        int index156_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_57);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_58 = input.LA(1);

                         
                        int index156_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_58);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_59 = input.LA(1);

                         
                        int index156_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_59);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_60 = input.LA(1);

                         
                        int index156_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_60);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_61 = input.LA(1);

                         
                        int index156_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_61);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_62 = input.LA(1);

                         
                        int index156_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_62);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA156_63 = input.LA(1);

                         
                        int index156_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_63);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA156_64 = input.LA(1);

                         
                        int index156_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_64);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA156_65 = input.LA(1);

                         
                        int index156_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_65);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA156_66 = input.LA(1);

                         
                        int index156_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 67;}

                        else if ( (synpred31_Objc()) ) {s = 128;}

                         
                        input.seek(index156_66);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA156_78 = input.LA(1);

                         
                        int index156_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_78);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA156_94 = input.LA(1);

                         
                        int index156_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_94);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA156_95 = input.LA(1);

                         
                        int index156_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_95);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA156_96 = input.LA(1);

                         
                        int index156_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_96);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA156_106 = input.LA(1);

                         
                        int index156_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_106);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA156_111 = input.LA(1);

                         
                        int index156_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_111);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA156_124 = input.LA(1);

                         
                        int index156_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_124);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA156_127 = input.LA(1);

                         
                        int index156_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index156_127);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code483 = new BitSet(new long[]{0x0000400000400002L,0x0080000000040001L,0x9184000086200080L,0x000000000000079DL});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_code_internal580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_extern682 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern685 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern688 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_extern690 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_extern695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_implementation729 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_implementation732 = new BitSet(new long[]{0x0000400000400000L,0x8880000000040001L,0x9084001000C00080L,0x000000000000079DL});
    public static final BitSet FOLLOW_category_in_implementation735 = new BitSet(new long[]{0x0000400000400000L,0x8880000000040001L,0x9084001000C00080L,0x000000000000079DL});
    public static final BitSet FOLLOW_implementation_body_in_implementation740 = new BitSet(new long[]{0x0000400000400000L,0x8880000000040001L,0x9084001000C00080L,0x000000000000079DL});
    public static final BitSet FOLLOW_151_in_implementation745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implementation_body809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_synthesize842 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_150_in_synthesize846 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001080L});
    public static final BitSet FOLLOW_140_in_synthesize853 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synthesize855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synthesize859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_static_declaration_wrapper883 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_block_call_predicate905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_block_call_predicate912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_block_call_predicate914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_block_call952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_block_call954 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0xBCED086800000080L,0x0000000000011F3FL});
    public static final BitSet FOLLOW_block_internal_in_block_call956 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0xBCED086800000080L,0x0000000000011F3FL});
    public static final BitSet FOLLOW_208_in_block_call959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_block_call980 = new BitSet(new long[]{0x0000400000000000L,0x0180000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_block_params_in_block_call982 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_call985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_synchronized_call1025 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1027 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1029 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synchronized_call1031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1049 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_block_params1052 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_classical_param_in_block_params1054 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_block_multiline1117 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0xBCED186800000080L,0x0000000000011F3FL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1122 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0xBCED186800000080L,0x0000000000011F3FL});
    public static final BitSet FOLLOW_208_in_block_multiline1129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_block_singleline1234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1262 = new BitSet(new long[]{0x0000000000000002L,0x2440000000000000L,0x000000000002142EL,0x0000000000004000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_singleline1266 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_singleline1268 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x000000000002142EL,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_in_block_singleline1272 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_block_singleline1274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_block_internal_macro1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1333 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_block_internal1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1443 = new BitSet(new long[]{0x0000000000000002L,0x2440000000000000L,0x000000000002142EL,0x0000000000004000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_internal1447 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_internal1449 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x000000000002142EL,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_in_block_internal1453 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_block_internal1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_goto_stmt1475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1477 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_goto_stmt1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_while_stmt1527 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1529 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1531 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_while_stmt1533 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_while_stmt1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_for_in_stmt1550 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_for_classic_stmt1575 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080081L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_for_classic_stmt1580 = new BitSet(new long[]{0x0000400000010002L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1607 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1609 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1626 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1628 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1646 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1648 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1656 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x4000000000021422L,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1660 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1664 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1669 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1672 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_for_stmt1687 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt1689 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_return_stmt1727 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080081L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_switch_stmt1752 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1754 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1756 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_switch_stmt1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_switch_stmt1760 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C7B080800000080L,0x0000000000011822L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1763 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C7B080800000080L,0x0000000000011822L});
    public static final BitSet FOLLOW_208_in_switch_stmt1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_case_stmt1826 = new BitSet(new long[]{0x0000400000000000L,0x8000000000000008L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_case_stmt1830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_default_stmt1853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_default_stmt1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_do_stmt1876 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_do_stmt1878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_do_stmt1880 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt1882 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1884 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_do_stmt1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_if_stmt1911 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt1913 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1915 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_if_stmt1917 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_if_stmt1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_else_stmt1942 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_else_stmt1944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_try_stmt_wrapper1966 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_catch_stmt2001 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt2004 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2007 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_catch_stmt2010 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2012 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt2015 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_catch_stmt2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_finally_stmt2042 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_block_in_finally_stmt2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_throw_stmt2083 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_throw_stmt2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_name_number2132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2207 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x0000000000021422L,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2209 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2232 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2240 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2257 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2272 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2274 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_implementation_common2276 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2278 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2341 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2344 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2346 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_119_in_clasical_method_call_predicate2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2365 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2368 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2370 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_119_in_classical_method_call2375 = new BitSet(new long[]{0x0000400000010000L,0x93A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2377 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_classical_method_call2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2395 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_classical_method_params_push2398 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2400 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2424 = new BitSet(new long[]{0x0000400000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_params_push2431 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_126_in_method_params_push2436 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2439 = new BitSet(new long[]{0x0000400000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2460 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_method_param_push2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_method_msg2494 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_method_msg2496 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000040L});
    public static final BitSet FOLLOW_134_in_method_msg2501 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_method_msg2507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_questionmark_if_stmt2533 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_questionmark_if_stmt2537 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_element_value_or_semicolon2587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2608 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_array_init2611 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000021040L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2613 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_204_in_element_value_or_array_init2630 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000031040L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_element_value_or_array_init2635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2656 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2694 = new BitSet(new long[]{0x0000000000000002L,0x8A3A000000000000L,0x000040000005FB10L,0x000000000000A000L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2696 = new BitSet(new long[]{0x0000000000000002L,0x8A3A000000000000L,0x000040000005FB10L,0x000000000000A000L});
    public static final BitSet FOLLOW_127_in_cast_unary_expression12711 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2741 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2763 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2772 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_cast_unary_expression2788 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2804 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2824 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_expression2845 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2847 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2849 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_cast_expression2851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2854 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression2856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2885 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call2888 = new BitSet(new long[]{0x0000400000010000L,0x93A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2890 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_name_or_classical_function_call2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2915 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2917 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2919 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_simple_expression_value_access2922 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_simple_expression_value_access2927 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access2933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_simple_expression_value_access2939 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2941 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2943 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2974 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2977 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2979 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2984 = new BitSet(new long[]{0x0000400000010000L,0x93A1000000840009L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2986 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access2989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2999 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_117_in_simple_expression_value3028 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_simple_expression_value3033 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value3035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_simple_expression_value3037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value3065 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_simple_expression_value3076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_objc_in_simple_expression_value3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_in_simple_expression_value3112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value23144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23162 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23164 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value23166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_selector3376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_type_cast_name3414 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3416 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_cast_name3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3513 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3570 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3585 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3587 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3589 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_cast_lvalue3591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3594 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3620 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_119_in_lvalue_access3630 = new BitSet(new long[]{0x0000400000000000L,0x0220000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3632 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_lvalue_access3634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3637 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_117_in_lvalue3666 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_lvalue3671 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_lvalue3673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_lvalue3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3691 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_break_stmt3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_continue_stmt3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_extern_declaration3787 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3815 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3832 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000208000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3834 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_field_declaration_in_declarations3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_ns_inline3890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_property_prefix3902 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix3904 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3906 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_property_prefix3909 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3911 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_property_prefix3916 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3918 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_property_prefix3921 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3923 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_property_prefix3925 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_property_prefix3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_typedef_declaration_wrapper3983 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration4033 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4035 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_126_in_typedef_declaration4038 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4040 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_typedef_declaration4044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate4056 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer_predicate4058 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9004000000000000L,0x0000000000000605L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate4060 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate4062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer4077 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4079 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9004000000000000L,0x0000000000000605L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4081 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer4083 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer4085 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L,0x9004000000000000L,0x0000000000000605L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4088 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_func_pointer4091 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9004000000000000L,0x0000000000000605L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4093 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer4099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_forward_class_declaration4185 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_forward_class_declaration4202 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_protocol_declaration4291 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4293 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800100L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4295 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4317 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800000L});
    public static final BitSet FOLLOW_151_in_class_protocol_end4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_template4336 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_template_internal_in_template4338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_template4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_implements_protocols4374 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4376 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_126_in_implements_protocols4379 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4381 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_implements_protocols4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4407 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_template_internal4410 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_template_type_in_template_internal4412 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_template_type4432 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_interface_declaration4496 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4498 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800140L,0x0000000000001000L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4500 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800000L,0x0000000000001000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4504 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4509 = new BitSet(new long[]{0x0000000000000000L,0x8800000000040001L,0x0000000228800000L});
    public static final BitSet FOLLOW_151_in_interface_declaration4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_fields_body4531 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x9084008150000000L,0x0000000000010795L});
    public static final BitSet FOLLOW_body_item_in_fields_body4537 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x9084008150000000L,0x0000000000010795L});
    public static final BitSet FOLLOW_208_in_fields_body4542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4557 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084008000000000L,0x0000000000000795L});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4560 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000795L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_field_modifiers4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4648 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_category4669 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ID_in_category4671 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_category4674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_superclass_name4694 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4729 = new BitSet(new long[]{0x0000400000000002L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4753 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4755 = new BitSet(new long[]{0x0000000000000000L,0x64C0000000000000L,0x00000000000214A2L,0x0000000000004000L});
    public static final BitSet FOLLOW_126_in_field_declaration4759 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4761 = new BitSet(new long[]{0x0000000000000000L,0x64C0000000000000L,0x00000000000214A2L,0x0000000000004000L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000001000L});
    public static final BitSet FOLLOW_135_in_field_declaration4771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4782 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000840009L,0x0200CD0480080001L,0x0000000000021040L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_field_declaration4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_field_declaration4792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4807 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classical_method_params4834 = new BitSet(new long[]{0x0000400000000000L,0x4180000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4836 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_classical_method_params4840 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4842 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_classical_method_params4846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4871 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4919 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration4921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_classical_type_declaration4929 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4931 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_classical_type_declaration4950 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4952 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_classical_type_declaration4971 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4973 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration4975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration5015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration5021 = new BitSet(new long[]{0x0000000000000002L,0x0220000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5023 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_declaration5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration5032 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration5041 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration5050 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_type_declaration_plane5067 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9004000000000000L,0x0000000000000205L});
    public static final BitSet FOLLOW_178_in_type_declaration_plane5070 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000205L});
    public static final BitSet FOLLOW_201_in_type_declaration_plane5073 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane5076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_type_declaration_plane5079 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_declaration_plane5081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_type_decl_protocol_predicate5113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type_decl_protocol_predicate5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_type_declaration_protocol5131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type_declaration_protocol5133 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x9000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_type_declaration_protocol5137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_type_declaration_struct_simple5159 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_type_declaration_union_simple5181 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_type_declaration_enum_simple5207 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_type_declaration_struct_full5229 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_full5231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct_full5234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_type_declaration_union_full5258 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_full5260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union_full5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_type_declaration_enum_full5287 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_full5289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum_full5292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct5327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_union5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_enum5387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_enum_wrapper5406 = new BitSet(new long[]{0x0000400000000000L,0x0000000000040001L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5416 = new BitSet(new long[]{0x0000400000000000L,0x0000000000040001L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_enum_wrapper5423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element5438 = new BitSet(new long[]{0x0000000000000002L,0x6440000000000000L,0x0000000000021422L,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5441 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_enum_element5443 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_enum_element5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_struct5501 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_struct_internal_in_struct5510 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x9084000000000000L,0x0000000000010715L});
    public static final BitSet FOLLOW_208_in_struct5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5572 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_121_in_type_dec5574 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_knownTypes5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_knownTypes5623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_knownTypes5629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_191_in_knownTypes5632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_knownTypes5639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_191_in_knownTypes5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000040L});
    public static final BitSet FOLLOW_array_size_in_field_name5660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000040L});
    public static final BitSet FOLLOW_field_crap_in_field_name5664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_array_size5695 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000008L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_array_size5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_crap5716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5730 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_declaration_common5794 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5796 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_declaration_common5798 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5800 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_declaration_common5806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5818 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate5821 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5823 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_declaration_predicate5825 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5868 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_prefix_in_method_param5888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_param5891 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param5894 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x9084000000000000L,0x0000000000000715L});
    public static final BitSet FOLLOW_type_declaration_in_method_param5896 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_param5898 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration5983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5997 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5999 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_define_declaration6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6017 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function6043 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_define_as_function6048 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000001822L});
    public static final BitSet FOLLOW_204_in_define_as_function6050 = new BitSet(new long[]{0x0000400000000000L,0x02A0000000040001L,0x2C69080800000080L,0x0000000000000822L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function6053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_define_as_function6055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_string_objc6105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_objc6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred1_Objc507 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_synpred1_Objc509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1327 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred5_Objc1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred6_Objc1342 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x0000000000021422L,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_in_synpred6_Objc1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred7_Objc1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc1618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred8_Objc1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred9_Objc1637 = new BitSet(new long[]{0x0000000000000000L,0x2440000000000000L,0x0000000000021422L,0x0000000000004000L});
    public static final BitSet FOLLOW_op_assign_in_synpred9_Objc1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred10_Objc2225 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred10_Objc2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred12_Objc2833 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred12_Objc2835 = new BitSet(new long[]{0x0000400000010000L,0x02A0000000800008L,0x0200CD0480080000L,0x0000000000000040L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred12_Objc2837 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synpred12_Objc2839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_synpred12_Objc2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc2878 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred13_Objc2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred14_Objc2961 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_synpred14_Objc2964 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc2966 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_119_in_synpred14_Objc2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred15_Objc3019 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred15_Objc3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_synpred15_Objc3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred16_Objc3054 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred16_Objc3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred17_Objc3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred19_Objc3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred20_Objc3579 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred20_Objc3581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred21_Objc3657 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred21_Objc3660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_synpred21_Objc3662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred22_Objc4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred24_Objc4909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred25_Objc5000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred26_Objc5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_synpred27_Objc5318 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred27_Objc5320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_synpred27_Objc5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred28_Objc5348 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred28_Objc5350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_synpred28_Objc5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred29_Objc5378 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred29_Objc5380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_synpred29_Objc5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5974 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred30_Objc5976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_synpred30_Objc5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred31_Objc5990 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred31_Objc5992 = new BitSet(new long[]{0x0000400000010000L,0x92A1000000800008L,0x0200CD0480080001L,0x0000000000020040L});
    public static final BitSet FOLLOW_element_value_in_synpred31_Objc5994 = new BitSet(new long[]{0x0000000000000002L});

}