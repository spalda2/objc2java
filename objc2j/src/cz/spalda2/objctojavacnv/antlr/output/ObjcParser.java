// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2013-02-03 21:39:41

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'NS_INLINE'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CHAR=16;
    public static final int CHAR_LITERAL=17;
    public static final int CLASS_NAME=18;
    public static final int CODE=19;
    public static final int CONTINUE_STMT=20;
    public static final int DEFAULT_STMT=21;
    public static final int DEFINE=22;
    public static final int DEFINE_LITERAL=23;
    public static final int DIGIT=24;
    public static final int DIRECTIVE=25;
    public static final int DO_STMT=26;
    public static final int ELSE_STMT=27;
    public static final int ENUM=28;
    public static final int ENUM_DEC=29;
    public static final int ENUM_FIELD=30;
    public static final int EXPR_COMPLEMENT=31;
    public static final int EXPR_NEGATE=32;
    public static final int EXPR_NOT=33;
    public static final int EXTERN=34;
    public static final int EscapeSequence=35;
    public static final int FIELD=36;
    public static final int FIELDS=37;
    public static final int FIELD_NAME=38;
    public static final int FINALLY_STMT=39;
    public static final int FORWARD_DECLARATION=40;
    public static final int FOR_IN_STMT=41;
    public static final int FOR_STMT=42;
    public static final int FUNC_POINTER=43;
    public static final int GOTO=44;
    public static final int GROUP_MODIFIER=45;
    public static final int HexDigit=46;
    public static final int ID=47;
    public static final int IF0_COMMENT=48;
    public static final int IF_STMT=49;
    public static final int IMPLEMENTATION=50;
    public static final int IMPLEMENTS_INTERFACES=51;
    public static final int IMPLEMENTS_INTERFACE_NAME=52;
    public static final int INTERFACE=53;
    public static final int INTERFACE_NAME=54;
    public static final int LETTER=55;
    public static final int METHOD=56;
    public static final int METHOD_CALL=57;
    public static final int METHOD_IMPL=58;
    public static final int METHOD_MSG=59;
    public static final int METHOD_NAME=60;
    public static final int METHOD_PARAM=61;
    public static final int METHOD_PARAMS=62;
    public static final int MODIFIER=63;
    public static final int MULTI_COMMENT=64;
    public static final int MULTI_COMMENT_LIT=65;
    public static final int NAME=66;
    public static final int NUMBER=67;
    public static final int NUMBER_LITERAL=68;
    public static final int OBJECT_ACCESS=69;
    public static final int OP=70;
    public static final int PARAMS=71;
    public static final int PARAM_NAME=72;
    public static final int PARAM_PREFIX=73;
    public static final int PREFIX=74;
    public static final int PREPROCESSOR_DECLARATION=75;
    public static final int PROPERTY=76;
    public static final int PROTOCOL=77;
    public static final int PROTOCOL_NAME=78;
    public static final int QUESTION_MARK_IF=79;
    public static final int RETURN_STMT=80;
    public static final int SIMPLE_EXPR=81;
    public static final int SINGLE_COMMENT=82;
    public static final int SINGLE_COMMENT_LIT=83;
    public static final int STATIC=84;
    public static final int STATIC_METHOD=85;
    public static final int STATIC_VARIABLE=86;
    public static final int STRING=87;
    public static final int STRING_LITERAL=88;
    public static final int STRING_OBJC=89;
    public static final int STRUCT=90;
    public static final int STRUCT_DEC=91;
    public static final int SUPERCLASS_NAME=92;
    public static final int SWITCH_STMT=93;
    public static final int SYNCHRONIZED=94;
    public static final int SYNTHETIZE=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==118||LA1_0==134||LA1_0==147||(LA1_0 >= 151 && LA1_0 <= 152)||LA1_0==157||LA1_0==173||(LA1_0 >= 178 && LA1_0 <= 179)||LA1_0==182||(LA1_0 >= 185 && LA1_0 <= 186)||(LA1_0 >= 188 && LA1_0 <= 190)||(LA1_0 >= 192 && LA1_0 <= 195)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code478);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:1: code_internal : ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal12=null;
        ObjcParser.implementation_wrapper_return implementation_wrapper2 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration3 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper4 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper5 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper6 =null;

        ObjcParser.define_declaration_return define_declaration7 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper8 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper9 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper10 =null;

        ObjcParser.comments_return comments11 =null;


        Object char_literal12_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:2: ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt2=11;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt2=1;
                }
                break;
            case 147:
                {
                alt2=2;
                }
                break;
            case 157:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==ID) ) {
                    int LA2_24 = input.LA(3);

                    if ( (LA2_24==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_24==MULTI_COMMENT_LIT||LA2_24==SINGLE_COMMENT_LIT||LA2_24==122||LA2_24==126||LA2_24==135||LA2_24==149||LA2_24==153||LA2_24==155) ) {
                        alt2=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 24, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==ID) ) {
                    int LA2_25 = input.LA(3);

                    if ( (LA2_25==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_25==ID||LA2_25==116||LA2_25==120||LA2_25==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 25, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_4==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case 193:
                {
                int LA2_5 = input.LA(2);

                if ( (LA2_5==ID) ) {
                    int LA2_27 = input.LA(3);

                    if ( (LA2_27==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_27==ID||LA2_27==116||LA2_27==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 27, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_5==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 5, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA2_6 = input.LA(2);

                if ( (LA2_6==ID) ) {
                    int LA2_29 = input.LA(3);

                    if ( (LA2_29==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_29==ID||LA2_29==116||LA2_29==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 29, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_6==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                alt2=4;
                }
                break;
            case 179:
                {
                alt2=5;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt2=6;
                }
                break;
            case 192:
                {
                alt2=7;
                }
                break;
            case 189:
                {
                alt2=8;
                }
                break;
            case ID:
            case 118:
            case 173:
            case 182:
            case 185:
            case 186:
            case 188:
            case 194:
            case 195:
                {
                alt2=9;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt2=10;
                }
                break;
            case 134:
                {
                alt2=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal500);
                    implementation_wrapper2=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal505);
                    forward_class_declaration3=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal511);
                    protocol_declaration_wrapper4=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal518);
                    interface_declaration_wrapper5=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal525);
                    extern_declaration_wrapper6=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal531);
                    define_declaration7=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal537);
                    typedef_declaration_wrapper8=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal543);
                    static_declaration_wrapper9=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal549);
                    variable_declaration_wrapper10=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal555);
                    comments11=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal12=(Token)match(input,134,FOLLOW_134_in_code_internal561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal12_tree = 
                    (Object)adaptor.create(char_literal12)
                    ;
                    adaptor.addChild(root_0, char_literal12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment13 =null;

        ObjcParser.multi_comment_return multi_comment14 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments573);
                    single_comment13=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment13.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments579);
                    multi_comment14=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment14.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT15=null;

        Object SINGLE_COMMENT_LIT15_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT15=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT15);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT16=null;

        Object MULTI_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT16=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT16);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern17 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper644);
            extern17=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern17.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal18=null;
        Token string_literal19=null;
        Token char_literal20=null;
        Token set21=null;
        Token char_literal22=null;

        Object string_literal18_tree=null;
        Object string_literal19_tree=null;
        Object char_literal20_tree=null;
        Object set21_tree=null;
        Object char_literal22_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal18=(Token)match(input,179,FOLLOW_179_in_extern663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal18_tree = 
            (Object)adaptor.create(string_literal18)
            ;
            adaptor.addChild(root_0, string_literal18_tree);
            }

            string_literal19=(Token)match(input,114,FOLLOW_114_in_extern666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            char_literal20=(Token)match(input,118,FOLLOW_118_in_extern669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = 
            (Object)adaptor.create(char_literal20)
            ;
            adaptor.addChild(root_0, char_literal20_tree);
            }

            set21=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 118)||(input.LA(1) >= 120 && input.LA(1) <= 202) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set21)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal22=(Token)match(input,119,FOLLOW_119_in_extern676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = 
            (Object)adaptor.create(char_literal22)
            ;
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation23 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper691);
            implementation23=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation23.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 159:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal24=null;
        Token string_literal28=null;
        ObjcParser.name_return name25 =null;

        ObjcParser.category_return category26 =null;

        ObjcParser.implementation_body_return implementation_body27 =null;


        Object string_literal24_tree=null;
        Object string_literal28_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal24=(Token)match(input,151,FOLLOW_151_in_implementation710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);
            }

            pushFollow(FOLLOW_name_in_implementation713);
            name25=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name25.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==118) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==119) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation716);
                    category26=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category26.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==118||LA5_0==122||LA5_0==126||LA5_0==134||LA5_0==148||LA5_0==161||LA5_0==173||LA5_0==178||LA5_0==182||(LA5_0 >= 185 && LA5_0 <= 186)||(LA5_0 >= 188 && LA5_0 <= 190)||(LA5_0 >= 192 && LA5_0 <= 195)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation721);
            	    implementation_body27=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body27.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal28=(Token)match(input,149,FOLLOW_149_in_implementation726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal28_tree = 
            (Object)adaptor.create(string_literal28)
            ;
            adaptor.addChild(root_0, string_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal37=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper29 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcParser.directives_return directives31 =null;

        ObjcParser.define_declaration_return define_declaration32 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper33 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper34 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper35 =null;

        ObjcParser.comments_return comments36 =null;


        Object char_literal37_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 129 && LA6_1 <= 130)) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==118) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==116||LA6_1==120||LA6_1==166||LA6_1==173) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 122:
            case 126:
                {
                alt6=2;
                }
                break;
            case 148:
            case 161:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 192:
                {
                alt6=5;
                }
                break;
            case 189:
                {
                alt6=6;
                }
                break;
            case 118:
            case 173:
            case 178:
            case 182:
            case 185:
            case 186:
            case 188:
            case 190:
            case 193:
            case 194:
            case 195:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 134:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body745);
                    classical_method_call_wrapper29=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper29.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body751);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body757);
                    directives31=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives31.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body763);
                    define_declaration32=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration32.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body768);
                    typedef_declaration_wrapper33=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body773);
                    static_declaration_wrapper34=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body779);
                    variable_declaration_wrapper35=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper35.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body785);
                    comments36=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments36.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal37=(Token)match(input,134,FOLLOW_134_in_implementation_body790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal37_tree = 
                    (Object)adaptor.create(char_literal37)
                    ;
                    adaptor.addChild(root_0, char_literal37_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize38 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives801);
            synthesize38=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize38.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal39=null;
        Token string_literal40=null;
        Token ID41=null;
        Token char_literal42=null;
        Token char_literal44=null;
        ObjcParser.name_return name43 =null;


        Object string_literal39_tree=null;
        Object string_literal40_tree=null;
        Object ID41_tree=null;
        Object char_literal42_tree=null;
        Object char_literal44_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==161) ) {
                alt7=1;
            }
            else if ( (LA7_0==148) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:5: '@synthesize'
                    {
                    string_literal39=(Token)match(input,161,FOLLOW_161_in_synthesize823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal39);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:21: '@dynamic'
                    {
                    string_literal40=(Token)match(input,148,FOLLOW_148_in_synthesize827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal40);


                    }
                    break;

            }


            ID41=(Token)match(input,ID,FOLLOW_ID_in_synthesize831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID41);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==139) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:38: '=' name
                    {
                    char_literal42=(Token)match(input,139,FOLLOW_139_in_synthesize834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal42);


                    pushFollow(FOLLOW_name_in_synthesize836);
                    name43=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name43.getTree());

                    }
                    break;

            }


            char_literal44=(Token)match(input,134,FOLLOW_134_in_synthesize840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal44);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal45=null;
        ObjcParser.field_declaration_return field_declaration46 =null;


        Object string_literal45_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:4: 'static' field_declaration
            {
            string_literal45=(Token)match(input,189,FOLLOW_189_in_static_declaration_wrapper864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal45);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper866);
            field_declaration46=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration46.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:1: block_call_predicate : ( '^(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal47=null;
        Token char_literal48=null;
        Token char_literal49=null;

        Object string_literal47_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:3: ( '^(' | ( '^' '{' ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==170) ) {
                alt9=1;
            }
            else if ( (LA9_0==169) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal47=(Token)match(input,170,FOLLOW_170_in_block_call_predicate886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal47_tree = 
                    (Object)adaptor.create(string_literal47)
                    ;
                    adaptor.addChild(root_0, string_literal47_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:6: '^' '{'
                    {
                    char_literal48=(Token)match(input,169,FOLLOW_169_in_block_call_predicate893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal48_tree = 
                    (Object)adaptor.create(char_literal48)
                    ;
                    adaptor.addChild(root_0, char_literal48_tree);
                    }

                    char_literal49=(Token)match(input,197,FOLLOW_197_in_block_call_predicate895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call50 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper911);
            block_call50=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call50.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 197:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal54=null;
        Token string_literal55=null;
        Token char_literal57=null;
        ObjcParser.block_internal_return block_internal53 =null;

        ObjcParser.block_params_return block_params56 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper58 =null;


        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal54_tree=null;
        Object string_literal55_tree=null;
        Object char_literal57_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==169) ) {
                alt12=1;
            }
            else if ( (LA12_0==170) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal51=(Token)match(input,169,FOLLOW_169_in_block_call933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(char_literal51);


                    char_literal52=(Token)match(input,197,FOLLOW_197_in_block_call935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal52);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: ( block_internal )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==ID||LA10_0==MULTI_COMMENT_LIT||LA10_0==SINGLE_COMMENT_LIT||LA10_0==116||LA10_0==118||LA10_0==120||LA10_0==134||LA10_0==160||(LA10_0 >= 162 && LA10_0 <= 163)||LA10_0==166||LA10_0==171||(LA10_0 >= 173 && LA10_0 <= 174)||(LA10_0 >= 176 && LA10_0 <= 178)||(LA10_0 >= 180 && LA10_0 <= 183)||(LA10_0 >= 185 && LA10_0 <= 191)||(LA10_0 >= 193 && LA10_0 <= 197)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call937);
                    	    block_internal53=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal53.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    char_literal54=(Token)match(input,201,FOLLOW_201_in_block_call940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal54);


                    }


                    // AST REWRITE
                    // elements: 201, block_internal, 197
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 201:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_197.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_201.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:6: '^(' ( block_params )? ')'
                    {
                    string_literal55=(Token)match(input,170,FOLLOW_170_in_block_call961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = 
                    (Object)adaptor.create(string_literal55)
                    ;
                    adaptor.addChild(root_0, string_literal55_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: ( block_params )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ID||LA11_0==118||LA11_0==173||LA11_0==178||LA11_0==182||(LA11_0 >= 185 && LA11_0 <= 186)||LA11_0==188||LA11_0==190||(LA11_0 >= 193 && LA11_0 <= 195)) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call963);
                            block_params56=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params56.getTree());

                            }
                            break;

                    }


                    char_literal57=(Token)match(input,119,FOLLOW_119_in_block_call966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal57_tree = 
                    (Object)adaptor.create(char_literal57)
                    ;
                    adaptor.addChild(root_0, char_literal57_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call969);
                    block_multiline_wrapper58=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper58.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call59 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper983);
            synchronized_call59=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call59.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal60=null;
        Token char_literal61=null;
        Token char_literal63=null;
        ObjcParser.element_value_return element_value62 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper64 =null;


        Object string_literal60_tree=null;
        Object char_literal61_tree=null;
        Object char_literal63_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal60=(Token)match(input,160,FOLLOW_160_in_synchronized_call1006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal60_tree = 
            (Object)adaptor.create(string_literal60)
            ;
            adaptor.addChild(root_0, string_literal60_tree);
            }

            char_literal61=(Token)match(input,118,FOLLOW_118_in_synchronized_call1008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = 
            (Object)adaptor.create(char_literal61)
            ;
            adaptor.addChild(root_0, char_literal61_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1010);
            element_value62=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value62.getTree());

            char_literal63=(Token)match(input,119,FOLLOW_119_in_synchronized_call1012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal63_tree = 
            (Object)adaptor.create(char_literal63)
            ;
            adaptor.addChild(root_0, char_literal63_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1014);
            block_multiline_wrapper64=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper64.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal66=null;
        ObjcParser.classical_param_return classical_param65 =null;

        ObjcParser.classical_param_return classical_param67 =null;


        Object char_literal66_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1030);
            classical_param65=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param65.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:22: ( ',' classical_param )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==125) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:23: ',' classical_param
            	    {
            	    char_literal66=(Token)match(input,125,FOLLOW_125_in_block_params1033); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal66);


            	    pushFollow(FOLLOW_classical_param_in_block_params1035);
            	    classical_param67=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param67.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:218:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline68 =null;

        ObjcParser.block_singleline_return block_singleline69 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==197) ) {
                alt14=1;
            }
            else if ( (LA14_0==ID||LA14_0==MULTI_COMMENT_LIT||LA14_0==SINGLE_COMMENT_LIT||LA14_0==116||LA14_0==118||LA14_0==120||LA14_0==134||LA14_0==160||LA14_0==166||LA14_0==171||LA14_0==174||(LA14_0 >= 176 && LA14_0 <= 177)||(LA14_0 >= 180 && LA14_0 <= 181)||LA14_0==183||LA14_0==187||LA14_0==191||LA14_0==196) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1064);
                    block_multiline68=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline68.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 219:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1076);
                    block_singleline69=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline69.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal70=null;
        Token char_literal72=null;
        ObjcParser.block_internal_macro_return block_internal_macro71 =null;


        Object char_literal70_tree=null;
        Object char_literal72_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:224:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal70=(Token)match(input,197,FOLLOW_197_in_block_multiline1098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: ( block_internal_macro )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==MULTI_COMMENT_LIT||LA15_0==SINGLE_COMMENT_LIT||LA15_0==116||LA15_0==118||LA15_0==120||LA15_0==134||LA15_0==160||(LA15_0 >= 162 && LA15_0 <= 163)||(LA15_0 >= 166 && LA15_0 <= 167)||LA15_0==171||(LA15_0 >= 173 && LA15_0 <= 174)||(LA15_0 >= 176 && LA15_0 <= 178)||(LA15_0 >= 180 && LA15_0 <= 183)||(LA15_0 >= 185 && LA15_0 <= 191)||(LA15_0 >= 193 && LA15_0 <= 197)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1103);
            	    block_internal_macro71=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro71.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            char_literal72=(Token)match(input,201,FOLLOW_201_in_block_multiline1110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal72_tree = 
            (Object)adaptor.create(char_literal72)
            ;
            adaptor.addChild(root_0, char_literal72_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline73 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1122);
            block_multiline73=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline73.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline74 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1143);
            block_singleline74=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline74.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:238:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal84=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper75 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper76 =null;

        ObjcParser.do_stmt_return do_stmt77 =null;

        ObjcParser.if_stmt_return if_stmt78 =null;

        ObjcParser.else_stmt_return else_stmt79 =null;

        ObjcParser.switch_stmt_return switch_stmt80 =null;

        ObjcParser.return_stmt_return return_stmt81 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper82 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper83 =null;

        ObjcParser.break_stmt_return break_stmt85 =null;

        ObjcParser.continue_stmt_return continue_stmt86 =null;

        ObjcParser.goto_stmt_return goto_stmt87 =null;

        ObjcParser.method_msg_return method_msg88 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper89 =null;

        ObjcParser.comments_return comments90 =null;


        Object char_literal84_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt16=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA16_1 = input.LA(2);

                if ( ((LA16_1 >= 129 && LA16_1 <= 130)) ) {
                    int LA16_20 = input.LA(3);

                    if ( (LA16_20==ID) ) {
                        int LA16_24 = input.LA(4);

                        if ( (LA16_24==118) && (synpred2_Objc())) {
                            alt16=1;
                        }
                        else if ( ((LA16_24 >= 129 && LA16_24 <= 130)) ) {
                            int LA16_26 = input.LA(5);

                            if ( (synpred2_Objc()) ) {
                                alt16=1;
                            }
                            else if ( (true) ) {
                                alt16=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 16, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA16_24==117||LA16_24==121||LA16_24==124||LA16_24==128||LA16_24==132||LA16_24==137||LA16_24==139||LA16_24==144||LA16_24==199) ) {
                            alt16=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 16, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 16, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA16_1==118) && (synpred2_Objc())) {
                    alt16=1;
                }
                else if ( (LA16_1==117||LA16_1==121||LA16_1==124||LA16_1==128||LA16_1==132||LA16_1==137||LA16_1==139||LA16_1==144||LA16_1==166||LA16_1==199) ) {
                    alt16=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
                }
                break;
            case 160:
                {
                alt16=2;
                }
                break;
            case 176:
                {
                alt16=3;
                }
                break;
            case 183:
                {
                alt16=4;
                }
                break;
            case 177:
                {
                alt16=5;
                }
                break;
            case 191:
                {
                alt16=6;
                }
                break;
            case 187:
                {
                alt16=7;
                }
                break;
            case 180:
                {
                alt16=8;
                }
                break;
            case 196:
                {
                alt16=9;
                }
                break;
            case 134:
                {
                alt16=10;
                }
                break;
            case 171:
                {
                alt16=11;
                }
                break;
            case 174:
                {
                alt16=12;
                }
                break;
            case 181:
                {
                alt16=13;
                }
                break;
            case 166:
                {
                alt16=14;
                }
                break;
            case 116:
            case 118:
            case 120:
                {
                alt16=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt16=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1170);
                    classical_method_call_wrapper75=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper75.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1175);
                    synchronized_call_wrapper76=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper76.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1180);
                    do_stmt77=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt77.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1185);
                    if_stmt78=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt78.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1190);
                    else_stmt79=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt79.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1195);
                    switch_stmt80=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt80.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1200);
                    return_stmt81=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt81.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1205);
                    for_stmt_wrapper82=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper82.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1210);
                    while_stmt_wrapper83=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper83.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal84=(Token)match(input,134,FOLLOW_134_in_block_singleline1215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = 
                    (Object)adaptor.create(char_literal84)
                    ;
                    adaptor.addChild(root_0, char_literal84_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1221);
                    break_stmt85=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt85.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1227);
                    continue_stmt86=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt86.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1232);
                    goto_stmt87=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt87.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1237);
                    method_msg88=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg88.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1243);
                    variable_assignment_wrapper89=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper89.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1249);
                    comments90=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:257:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal91=null;
        ObjcParser.block_internal_return block_internal92 =null;


        Object char_literal91_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:3: ( '\\\\' | block_internal )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==167) ) {
                alt17=1;
            }
            else if ( (LA17_0==ID||LA17_0==MULTI_COMMENT_LIT||LA17_0==SINGLE_COMMENT_LIT||LA17_0==116||LA17_0==118||LA17_0==120||LA17_0==134||LA17_0==160||(LA17_0 >= 162 && LA17_0 <= 163)||LA17_0==166||LA17_0==171||(LA17_0 >= 173 && LA17_0 <= 174)||(LA17_0 >= 176 && LA17_0 <= 178)||(LA17_0 >= 180 && LA17_0 <= 183)||(LA17_0 >= 185 && LA17_0 <= 191)||(LA17_0 >= 193 && LA17_0 <= 197)) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal91=(Token)match(input,167,FOLLOW_167_in_block_internal_macro1261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal91_tree = 
                    (Object)adaptor.create(char_literal91)
                    ;
                    adaptor.addChild(root_0, char_literal91_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1267);
                    block_internal92=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal92.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal109=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper93 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper94 =null;

        ObjcParser.increment_decrement_return increment_decrement95 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper96 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper97 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper98 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper99 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper100 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper101 =null;

        ObjcParser.do_stmt_return do_stmt102 =null;

        ObjcParser.if_stmt_return if_stmt103 =null;

        ObjcParser.else_stmt_return else_stmt104 =null;

        ObjcParser.switch_stmt_return switch_stmt105 =null;

        ObjcParser.return_stmt_return return_stmt106 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper107 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper108 =null;

        ObjcParser.break_stmt_return break_stmt110 =null;

        ObjcParser.continue_stmt_return continue_stmt111 =null;

        ObjcParser.goto_stmt_return goto_stmt112 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper113 =null;

        ObjcParser.method_msg_return method_msg114 =null;

        ObjcParser.comments_return comments115 =null;


        Object char_literal109_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments )
            int alt18=22;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1287);
                    classical_method_call_wrapper93=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper93.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1300);
                    object_access_simple_wrapper94=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper94.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1302);
                    increment_decrement95=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement95.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1316);
                    variable_assignment_wrapper96=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper96.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1322);
                    variable_declaration_wrapper97=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper97.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1328);
                    synchronized_call_wrapper98=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper98.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1334);
                    try_stmt_wrapper99=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper99.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1339);
                    throw_stmt_wrapper100=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper100.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1344);
                    static_declaration_wrapper101=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper101.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1349);
                    do_stmt102=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt102.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1354);
                    if_stmt103=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt103.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1359);
                    else_stmt104=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt104.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1364);
                    switch_stmt105=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt105.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1369);
                    return_stmt106=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt106.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1374);
                    for_stmt_wrapper107=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper107.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1379);
                    while_stmt_wrapper108=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper108.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal109=(Token)match(input,134,FOLLOW_134_in_block_internal1384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal109_tree = 
                    (Object)adaptor.create(char_literal109)
                    ;
                    adaptor.addChild(root_0, char_literal109_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1389);
                    break_stmt110=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt110.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1394);
                    continue_stmt111=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt111.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1399);
                    goto_stmt112=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt112.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1404);
                    block_multiline_wrapper113=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper113.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1410);
                    method_msg114=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg114.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1416);
                    comments115=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments115.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal116=null;
        Token char_literal117=null;
        Token ID118=null;
        Token char_literal119=null;

        Object string_literal116_tree=null;
        Object char_literal117_tree=null;
        Object ID118_tree=null;
        Object char_literal119_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: 'goto' ':' ID ';'
            {
            string_literal116=(Token)match(input,181,FOLLOW_181_in_goto_stmt1428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal116);


            char_literal117=(Token)match(input,133,FOLLOW_133_in_goto_stmt1430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal117);


            ID118=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID118);


            char_literal119=(Token)match(input,134,FOLLOW_134_in_goto_stmt1434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal119);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt120 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1457);
            while_stmt120=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt120.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal121=null;
        Token char_literal122=null;
        Token char_literal124=null;
        ObjcParser.element_value_return element_value123 =null;

        ObjcParser.block_return block125 =null;


        Object string_literal121_tree=null;
        Object char_literal122_tree=null;
        Object char_literal124_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal121=(Token)match(input,196,FOLLOW_196_in_while_stmt1480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal121_tree = 
            (Object)adaptor.create(string_literal121)
            ;
            adaptor.addChild(root_0, string_literal121_tree);
            }

            char_literal122=(Token)match(input,118,FOLLOW_118_in_while_stmt1482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal122_tree = 
            (Object)adaptor.create(char_literal122)
            ;
            adaptor.addChild(root_0, char_literal122_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1484);
            element_value123=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value123.getTree());

            char_literal124=(Token)match(input,119,FOLLOW_119_in_while_stmt1486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal124_tree = 
            (Object)adaptor.create(char_literal124)
            ;
            adaptor.addChild(root_0, char_literal124_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1488);
            block125=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block125.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal126=null;
        ObjcParser.element_value_return element_value127 =null;


        Object string_literal126_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:5: 'in' element_value
            {
            string_literal126=(Token)match(input,184,FOLLOW_184_in_for_in_stmt1503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal126);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1505);
            element_value127=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value127.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal128=null;
        Token char_literal130=null;
        ObjcParser.element_value_return element_value129 =null;

        ObjcParser.element_value_return element_value131 =null;


        Object char_literal128_tree=null;
        Object char_literal130_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal128=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal128_tree = 
            (Object)adaptor.create(char_literal128)
            ;
            adaptor.addChild(root_0, char_literal128_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:9: ( element_value )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BOOL_LITERAL||LA19_0==CHAR_LITERAL||LA19_0==ID||LA19_0==NUMBER_LITERAL||(LA19_0 >= STRING_LITERAL && LA19_0 <= STRING_OBJC)||LA19_0==112||LA19_0==116||LA19_0==118||LA19_0==120||LA19_0==123||(LA19_0 >= 126 && LA19_0 <= 127)||LA19_0==159||LA19_0==166||(LA19_0 >= 169 && LA19_0 <= 170)||LA19_0==202) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1530);
                    element_value129=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value129.getTree());

                    }
                    break;

            }


            char_literal130=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal130_tree = 
            (Object)adaptor.create(char_literal130)
            ;
            adaptor.addChild(root_0, char_literal130_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:28: ( element_value )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==BOOL_LITERAL||LA20_0==CHAR_LITERAL||LA20_0==ID||LA20_0==NUMBER_LITERAL||(LA20_0 >= STRING_LITERAL && LA20_0 <= STRING_OBJC)||LA20_0==112||LA20_0==116||LA20_0==118||LA20_0==120||LA20_0==123||(LA20_0 >= 126 && LA20_0 <= 127)||LA20_0==159||LA20_0==166||(LA20_0 >= 169 && LA20_0 <= 170)||LA20_0==202) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1535);
                    element_value131=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value131.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal134=null;
        Token char_literal138=null;
        Token char_literal142=null;
        Token char_literal149=null;
        ObjcParser.name_return name132 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt133 =null;

        ObjcParser.block_return block135 =null;

        ObjcParser.name_return name136 =null;

        ObjcParser.for_in_stmt_return for_in_stmt137 =null;

        ObjcParser.block_return block139 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper140 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt141 =null;

        ObjcParser.block_return block143 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple144 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper145 =null;

        ObjcParser.element_value_return element_value146 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt147 =null;

        ObjcParser.for_in_stmt_return for_in_stmt148 =null;

        ObjcParser.block_return block150 =null;


        Object char_literal134_tree=null;
        Object char_literal138_tree=null;
        Object char_literal142_tree=null;
        Object char_literal149_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt22=4;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1558);
                    name132=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name132.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1560);
                    for_classic_stmt133=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt133.getTree());

                    char_literal134=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = 
                    (Object)adaptor.create(char_literal134)
                    ;
                    adaptor.addChild(root_0, char_literal134_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1564);
                    block135=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block135.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1577);
                    name136=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name136.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1579);
                    for_in_stmt137=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt137.getTree());

                    char_literal138=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal138_tree = 
                    (Object)adaptor.create(char_literal138)
                    ;
                    adaptor.addChild(root_0, char_literal138_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1583);
                    block139=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block139.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1597);
                    variable_assignment_wrapper140=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper140.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1599);
                    for_classic_stmt141=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt141.getTree());

                    char_literal142=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal142_tree = 
                    (Object)adaptor.create(char_literal142)
                    ;
                    adaptor.addChild(root_0, char_literal142_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1603);
                    block143=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block143.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1609);
                    field_declaration_simple144=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple144.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==117||LA21_0==121||LA21_0==124||LA21_0==128||LA21_0==132||LA21_0==137||LA21_0==139||LA21_0==144||LA21_0==199) ) {
                        alt21=1;
                    }
                    else if ( (LA21_0==184) ) {
                        alt21=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1613);
                            op_assign_wrapper145=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper145.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1615);
                            element_value146=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value146.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1617);
                            for_classic_stmt147=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt147.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1622);
                            for_in_stmt148=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt148.getTree());

                            }
                            break;

                    }


                    char_literal149=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal149_tree = 
                    (Object)adaptor.create(char_literal149)
                    ;
                    adaptor.addChild(root_0, char_literal149_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1627);
                    block150=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block150.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal151=null;
        Token char_literal152=null;
        ObjcParser.for_stmt_body_return for_stmt_body153 =null;


        Object string_literal151_tree=null;
        Object char_literal152_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal151=(Token)match(input,180,FOLLOW_180_in_for_stmt1640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal151_tree = 
            (Object)adaptor.create(string_literal151)
            ;
            adaptor.addChild(root_0, string_literal151_tree);
            }

            char_literal152=(Token)match(input,118,FOLLOW_118_in_for_stmt1642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal152_tree = 
            (Object)adaptor.create(char_literal152)
            ;
            adaptor.addChild(root_0, char_literal152_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1644);
            for_stmt_body153=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body153.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt154 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1657);
            for_stmt154=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt154.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal155=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon156 =null;


        Object string_literal155_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:5: 'return' element_value_or_semicolon
            {
            string_literal155=(Token)match(input,187,FOLLOW_187_in_return_stmt1680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal155);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1682);
            element_value_or_semicolon156=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon156.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal157=null;
        Token char_literal158=null;
        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal163=null;
        ObjcParser.element_value_return element_value159 =null;

        ObjcParser.switch_body_return switch_body162 =null;


        Object string_literal157_tree=null;
        Object char_literal158_tree=null;
        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal163_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal157=(Token)match(input,191,FOLLOW_191_in_switch_stmt1705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal157);


            char_literal158=(Token)match(input,118,FOLLOW_118_in_switch_stmt1707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal158);


            pushFollow(FOLLOW_element_value_in_switch_stmt1709);
            element_value159=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value159.getTree());

            char_literal160=(Token)match(input,119,FOLLOW_119_in_switch_stmt1711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal160);


            char_literal161=(Token)match(input,197,FOLLOW_197_in_switch_stmt1713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(char_literal161);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: ( switch_body )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==ID||LA23_0==MULTI_COMMENT_LIT||LA23_0==SINGLE_COMMENT_LIT||LA23_0==116||LA23_0==118||LA23_0==120||LA23_0==134||LA23_0==160||LA23_0==166||(LA23_0 >= 171 && LA23_0 <= 172)||(LA23_0 >= 174 && LA23_0 <= 177)||(LA23_0 >= 180 && LA23_0 <= 181)||LA23_0==183||LA23_0==187||LA23_0==191||(LA23_0 >= 196 && LA23_0 <= 197)) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1716);
            	    switch_body162=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body162.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            char_literal163=(Token)match(input,201,FOLLOW_201_in_switch_stmt1720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_201.add(char_literal163);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt164 =null;

        ObjcParser.default_stmt_return default_stmt165 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper166 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper167 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt24=4;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt24=1;
                }
                break;
            case 175:
                {
                alt24=2;
                }
                break;
            case 197:
                {
                alt24=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 116:
            case 118:
            case 120:
            case 134:
            case 160:
            case 166:
            case 171:
            case 174:
            case 176:
            case 177:
            case 180:
            case 181:
            case 183:
            case 187:
            case 191:
            case 196:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1746);
                    case_stmt164=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt164.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1752);
                    default_stmt165=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt165.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1758);
                    block_multiline_wrapper166=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper166.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1764);
                    block_singleline_wrapper167=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal168=null;
        Token char_literal170=null;
        ObjcParser.name_number_return name_number169 =null;


        Object string_literal168_tree=null;
        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:5: 'case' name_number ':'
            {
            string_literal168=(Token)match(input,172,FOLLOW_172_in_case_stmt1779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal168);


            pushFollow(FOLLOW_name_number_in_case_stmt1781);
            name_number169=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number169.getTree());

            char_literal170=(Token)match(input,133,FOLLOW_133_in_case_stmt1783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal170);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal171=null;
        Token char_literal172=null;

        Object string_literal171_tree=null;
        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:5: 'default' ':'
            {
            string_literal171=(Token)match(input,175,FOLLOW_175_in_default_stmt1806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal171);


            char_literal172=(Token)match(input,133,FOLLOW_133_in_default_stmt1808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal172);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal173=null;
        Token string_literal175=null;
        Token char_literal176=null;
        Token char_literal178=null;
        ObjcParser.block_return block174 =null;

        ObjcParser.element_value_return element_value177 =null;


        Object string_literal173_tree=null;
        Object string_literal175_tree=null;
        Object char_literal176_tree=null;
        Object char_literal178_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal173=(Token)match(input,176,FOLLOW_176_in_do_stmt1829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal173);


            pushFollow(FOLLOW_block_in_do_stmt1831);
            block174=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block174.getTree());

            string_literal175=(Token)match(input,196,FOLLOW_196_in_do_stmt1833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal175);


            char_literal176=(Token)match(input,118,FOLLOW_118_in_do_stmt1835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal176);


            pushFollow(FOLLOW_element_value_in_do_stmt1837);
            element_value177=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value177.getTree());

            char_literal178=(Token)match(input,119,FOLLOW_119_in_do_stmt1839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal178);


            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal179=null;
        Token char_literal180=null;
        Token char_literal182=null;
        ObjcParser.element_value_return element_value181 =null;

        ObjcParser.block_return block183 =null;


        Object string_literal179_tree=null;
        Object char_literal180_tree=null;
        Object char_literal182_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:5: 'if' '(' element_value ')' block
            {
            string_literal179=(Token)match(input,183,FOLLOW_183_in_if_stmt1864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal179);


            char_literal180=(Token)match(input,118,FOLLOW_118_in_if_stmt1866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal180);


            pushFollow(FOLLOW_element_value_in_if_stmt1868);
            element_value181=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value181.getTree());

            char_literal182=(Token)match(input,119,FOLLOW_119_in_if_stmt1870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal182);


            pushFollow(FOLLOW_block_in_if_stmt1872);
            block183=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block183.getTree());

            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal184=null;
        ObjcParser.block_return block185 =null;


        Object string_literal184_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:5: 'else' block
            {
            string_literal184=(Token)match(input,177,FOLLOW_177_in_else_stmt1895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal184);


            pushFollow(FOLLOW_block_in_else_stmt1897);
            block185=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block185.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal186=null;
        ObjcParser.block_return block187 =null;

        ObjcParser.catch_stmt_return catch_stmt188 =null;

        ObjcParser.finally_stmt_return finally_stmt189 =null;


        Object string_literal186_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal186=(Token)match(input,163,FOLLOW_163_in_try_stmt_wrapper1919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal186);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1922);
            block187=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block187.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:19: ( catch_stmt )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==146) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1925);
            	    catch_stmt188=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt188.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:31: ( finally_stmt )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==150) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1928);
                    finally_stmt189=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt189.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: catch_stmt, block, finally_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal190=null;
        Token char_literal191=null;
        Token char_literal193=null;
        Token char_literal195=null;
        ObjcParser.name_return name192 =null;

        ObjcParser.name_return name194 =null;

        ObjcParser.block_return block196 =null;


        Object string_literal190_tree=null;
        Object char_literal191_tree=null;
        Object char_literal193_tree=null;
        Object char_literal195_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:4: '@catch' '(' name '*' name ')' block
            {
            string_literal190=(Token)match(input,146,FOLLOW_146_in_catch_stmt1954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal190);


            char_literal191=(Token)match(input,118,FOLLOW_118_in_catch_stmt1957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal191);


            pushFollow(FOLLOW_name_in_catch_stmt1960);
            name192=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name192.getTree());

            char_literal193=(Token)match(input,120,FOLLOW_120_in_catch_stmt1963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal193);


            pushFollow(FOLLOW_name_in_catch_stmt1965);
            name194=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name194.getTree());

            char_literal195=(Token)match(input,119,FOLLOW_119_in_catch_stmt1968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal195);


            pushFollow(FOLLOW_block_in_catch_stmt1971);
            block196=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block196.getTree());

            // AST REWRITE
            // elements: name, block, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal197=null;
        ObjcParser.block_return block198 =null;


        Object string_literal197_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:4: '@finally' block
            {
            string_literal197=(Token)match(input,150,FOLLOW_150_in_finally_stmt1995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal197);


            pushFollow(FOLLOW_block_in_finally_stmt1998);
            block198=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block198.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:369:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt199 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2017);
            throw_stmt199=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt199.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal200=null;
        Token char_literal202=null;
        ObjcParser.element_value_return element_value201 =null;


        Object string_literal200_tree=null;
        Object char_literal202_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal200=(Token)match(input,162,FOLLOW_162_in_throw_stmt2036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal200_tree = 
            (Object)adaptor.create(string_literal200)
            ;
            adaptor.addChild(root_0, string_literal200_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2038);
            element_value201=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value201.getTree());

            char_literal202=(Token)match(input,134,FOLLOW_134_in_throw_stmt2040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal202_tree = 
            (Object)adaptor.create(char_literal202)
            ;
            adaptor.addChild(root_0, char_literal202_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID203=null;

        Object ID203_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:4: ID
            {
            ID203=(Token)match(input,ID,FOLLOW_ID_in_name2051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID203);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID204=null;
        Token char_literal205=null;
        Token NUMBER_LITERAL206=null;

        Object ID204_tree=null;
        Object char_literal205_tree=null;
        Object NUMBER_LITERAL206_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ID) ) {
                alt28=1;
            }
            else if ( (LA28_0==NUMBER_LITERAL||LA28_0==126) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:5: ID
                    {
                    ID204=(Token)match(input,ID,FOLLOW_ID_in_name_number2071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID204);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 382:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: ( '-' )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==126) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: '-'
                            {
                            char_literal205=(Token)match(input,126,FOLLOW_126_in_name_number2085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal205);


                            }
                            break;

                    }


                    NUMBER_LITERAL206=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL206);


                    // AST REWRITE
                    // elements: 126, NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 383:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:37: ( '-' )?
                        if ( stream_126.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_126.nextNode()
                            );

                        }
                        stream_126.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper207 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2114);
            field_declaration_wrapper207=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper207.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment208 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2137);
            variable_assignment208=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment208.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper209 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper210 =null;

        ObjcParser.element_value_return element_value211 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2160);
            object_access_wrapper209=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper209.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2162);
            op_assign_wrapper210=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper210.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2164);
            element_value211=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value211.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper212 =null;

        ObjcParser.increment_decrement_return increment_decrement213 =null;

        ObjcParser.increment_decrement_return increment_decrement214 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper215 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==118) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==116) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==ID) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==120) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==123||LA29_0==127) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2185);
                    object_access_wrapper212=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper212.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2187);
                    increment_decrement213=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement213.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2193);
                    increment_decrement214=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement214.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2195);
                    object_access_wrapper215=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper215.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper216 =null;

        ObjcParser.method_implementation_common_return method_implementation_common217 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2210);
            method_modifier_wrapper216=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper216.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2212);
            method_implementation_common217=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common217.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal218=null;
        Token char_literal220=null;
        ObjcParser.type_declaration_return type_declaration219 =null;

        ObjcParser.method_name_return method_name221 =null;

        ObjcParser.method_params_return method_params222 =null;


        Object char_literal218_tree=null;
        Object char_literal220_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:6: '(' type_declaration ')' method_name
            {
            char_literal218=(Token)match(input,118,FOLLOW_118_in_method_implementation_common2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal218_tree = 
            (Object)adaptor.create(char_literal218)
            ;
            adaptor.addChild(root_0, char_literal218_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2227);
            type_declaration219=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration219.getTree());

            char_literal220=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal220_tree = 
            (Object)adaptor.create(char_literal220)
            ;
            adaptor.addChild(root_0, char_literal220_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2231);
            method_name221=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name221.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:44: ( method_params )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==133) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2234);
                    method_params222=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params222.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation223 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper224 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2246);
            method_implementation223=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation223.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2250);
            block_multiline_wrapper224=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper224.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call225 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2273);
            classical_method_call225=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call225.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal229=null;
        ObjcParser.name_return name226 =null;

        ObjcParser.access_wrapper_return access_wrapper227 =null;

        ObjcParser.name_return name228 =null;


        Object char_literal229_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2294);
            name226=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name226.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:10: ( access_wrapper name )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0 >= 129 && LA31_0 <= 130)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2297);
            	    access_wrapper227=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper227.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2299);
            	    name228=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name228.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            char_literal229=(Token)match(input,118,FOLLOW_118_in_clasical_method_call_predicate2303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal229_tree = 
            (Object)adaptor.create(char_literal229)
            ;
            adaptor.addChild(root_0, char_literal229_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal233=null;
        Token char_literal235=null;
        ObjcParser.name_return name230 =null;

        ObjcParser.access_wrapper_return access_wrapper231 =null;

        ObjcParser.name_return name232 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push234 =null;


        Object char_literal233_tree=null;
        Object char_literal235_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2318);
            name230=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name230.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:10: ( access_wrapper name )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( ((LA32_0 >= 129 && LA32_0 <= 130)) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2321);
            	    access_wrapper231=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper231.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2323);
            	    name232=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name232.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal233=(Token)match(input,118,FOLLOW_118_in_classical_method_call2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal233_tree = 
            (Object)adaptor.create(char_literal233)
            ;
            adaptor.addChild(root_0, char_literal233_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:38: ( classical_method_params_push )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BOOL_LITERAL||LA33_0==CHAR_LITERAL||LA33_0==ID||LA33_0==MULTI_COMMENT_LIT||LA33_0==NUMBER_LITERAL||LA33_0==SINGLE_COMMENT_LIT||(LA33_0 >= STRING_LITERAL && LA33_0 <= STRING_OBJC)||LA33_0==112||LA33_0==116||LA33_0==118||LA33_0==120||LA33_0==123||(LA33_0 >= 126 && LA33_0 <= 127)||LA33_0==159||LA33_0==166||(LA33_0 >= 169 && LA33_0 <= 170)||LA33_0==202) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2330);
                    classical_method_params_push234=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push234.getTree());

                    }
                    break;

            }


            char_literal235=(Token)match(input,119,FOLLOW_119_in_classical_method_call2333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal235_tree = 
            (Object)adaptor.create(char_literal235)
            ;
            adaptor.addChild(root_0, char_literal235_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal237=null;
        ObjcParser.method_param_push_return method_param_push236 =null;

        ObjcParser.method_param_push_return method_param_push238 =null;


        Object char_literal237_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2348);
            method_param_push236=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push236.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:24: ( ',' method_param_push )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==125) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:25: ',' method_param_push
            	    {
            	    char_literal237=(Token)match(input,125,FOLLOW_125_in_classical_method_params_push2351); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal237);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2353);
            	    method_param_push238=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push238.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:430:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal241=null;
        Token char_literal242=null;
        ObjcParser.method_param_push_return method_param_push239 =null;

        ObjcParser.prefix_return prefix240 =null;

        ObjcParser.method_param_push_return method_param_push243 =null;


        Object char_literal241_tree=null;
        Object char_literal242_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2377);
            method_param_push239=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push239.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID||LA36_0==125) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:23: ( ( prefix ':' ) | ',' )
            	    int alt35=2;
            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==ID) ) {
            	        alt35=1;
            	    }
            	    else if ( (LA35_0==125) ) {
            	        alt35=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 35, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt35) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2382);
            	            prefix240=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix240.getTree());

            	            char_literal241=(Token)match(input,133,FOLLOW_133_in_method_params_push2384); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_133.add(char_literal241);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:39: ','
            	            {
            	            char_literal242=(Token)match(input,125,FOLLOW_125_in_method_params_push2389); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_125.add(char_literal242);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2392);
            	    method_param_push243=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push243.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments244 =null;

        ObjcParser.element_value_return element_value245 =null;

        ObjcParser.comments_return comments246 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:5: ( comments )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==MULTI_COMMENT_LIT||LA37_0==SINGLE_COMMENT_LIT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2413);
                    comments244=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments244.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2416);
            element_value245=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value245.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:29: ( comments )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==MULTI_COMMENT_LIT||LA38_0==SINGLE_COMMENT_LIT) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2418);
                    comments246=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments246.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comments, comments, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal247=null;
        Token char_literal250=null;
        Token char_literal252=null;
        ObjcParser.element_value_return element_value248 =null;

        ObjcParser.method_name_return method_name249 =null;

        ObjcParser.method_params_push_return method_params_push251 =null;


        Object char_literal247_tree=null;
        Object char_literal250_tree=null;
        Object char_literal252_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal247=(Token)match(input,166,FOLLOW_166_in_method_msg2447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(char_literal247);


            pushFollow(FOLLOW_element_value_in_method_msg2449);
            element_value248=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value248.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2451);
            method_name249=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name249.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:35: ( ':' method_params_push )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==133) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:36: ':' method_params_push
                    {
                    char_literal250=(Token)match(input,133,FOLLOW_133_in_method_msg2454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal250);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2456);
                    method_params_push251=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push251.getTree());

                    }
                    break;

            }


            char_literal252=(Token)match(input,168,FOLLOW_168_in_method_msg2460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(char_literal252);


            // AST REWRITE
            // elements: method_name, method_params_push, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal253=null;
        Token char_literal255=null;
        ObjcParser.element_value_return element_value254 =null;

        ObjcParser.element_value_return element_value256 =null;


        Object char_literal253_tree=null;
        Object char_literal255_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:6: '?' element_value ':' element_value
            {
            char_literal253=(Token)match(input,145,FOLLOW_145_in_questionmark_if_stmt2486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(char_literal253);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2488);
            element_value254=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value254.getTree());

            char_literal255=(Token)match(input,133,FOLLOW_133_in_questionmark_if_stmt2490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal255);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2492);
            element_value256=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value256.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression257 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2517);
            simple_expression257=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression257.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:449:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal258=null;
        ObjcParser.element_value_return element_value259 =null;


        Object char_literal258_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: ( ';' | element_value )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==134) ) {
                alt40=1;
            }
            else if ( (LA40_0==BOOL_LITERAL||LA40_0==CHAR_LITERAL||LA40_0==ID||LA40_0==NUMBER_LITERAL||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_OBJC)||LA40_0==112||LA40_0==116||LA40_0==118||LA40_0==120||LA40_0==123||(LA40_0 >= 126 && LA40_0 <= 127)||LA40_0==159||LA40_0==166||(LA40_0 >= 169 && LA40_0 <= 170)||LA40_0==202) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:6: ';'
                    {
                    char_literal258=(Token)match(input,134,FOLLOW_134_in_element_value_or_semicolon2540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal258_tree = 
                    (Object)adaptor.create(char_literal258)
                    ;
                    adaptor.addChild(root_0, char_literal258_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2544);
                    element_value259=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value259.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:453:1: array_init : element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal261=null;
        ObjcParser.element_value_or_array_init_return element_value_or_array_init260 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init262 =null;


        Object char_literal261_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:3: ( element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2561);
            element_value_or_array_init260=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init260.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:33: ( ',' element_value_or_array_init )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==125) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:34: ',' element_value_or_array_init
            	    {
            	    char_literal261=(Token)match(input,125,FOLLOW_125_in_array_init2564); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal261_tree = 
            	    (Object)adaptor.create(char_literal261)
            	    ;
            	    adaptor.addChild(root_0, char_literal261_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2566);
            	    element_value_or_array_init262=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init262.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:458:1: element_value_or_array_init : ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal263=null;
        Token char_literal265=null;
        ObjcParser.array_init_return array_init264 =null;

        ObjcParser.element_value_return element_value266 =null;


        Object char_literal263_tree=null;
        Object char_literal265_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:3: ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==197) ) {
                alt43=1;
            }
            else if ( (LA43_0==BOOL_LITERAL||LA43_0==CHAR_LITERAL||LA43_0==ID||LA43_0==NUMBER_LITERAL||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_OBJC)||LA43_0==112||LA43_0==116||LA43_0==118||LA43_0==120||LA43_0==123||(LA43_0 >= 126 && LA43_0 <= 127)||LA43_0==159||LA43_0==166||(LA43_0 >= 169 && LA43_0 <= 170)||LA43_0==202) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:5: '{' ( array_init )? '}'
                    {
                    char_literal263=(Token)match(input,197,FOLLOW_197_in_element_value_or_array_init2583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal263);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:9: ( array_init )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==BOOL_LITERAL||LA42_0==CHAR_LITERAL||LA42_0==ID||LA42_0==NUMBER_LITERAL||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_OBJC)||LA42_0==112||LA42_0==116||LA42_0==118||LA42_0==120||LA42_0==123||(LA42_0 >= 126 && LA42_0 <= 127)||LA42_0==159||LA42_0==166||(LA42_0 >= 169 && LA42_0 <= 170)||LA42_0==197||LA42_0==202) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2585);
                            array_init264=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init264.getTree());

                            }
                            break;

                    }


                    char_literal265=(Token)match(input,201,FOLLOW_201_in_element_value_or_array_init2588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal265);


                    // AST REWRITE
                    // elements: array_init
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 459:26: -> ^( ARRAY_INIT ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:29: ^( ARRAY_INIT ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:42: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2604);
                    element_value266=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set267=null;

        Object set267_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set267=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set267)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1268 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt269 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2639);
            cast_unary_expression1268=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1268.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop44:
            do {
                int alt44=2;
                switch ( input.LA(1) ) {
                case 116:
                    {
                    alt44=1;
                    }
                    break;
                case 120:
                    {
                    alt44=1;
                    }
                    break;
                case 122:
                case 126:
                    {
                    alt44=1;
                    }
                    break;
                case 113:
                case 115:
                case 131:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 198:
                case 200:
                    {
                    alt44=1;
                    }
                    break;
                case 145:
                    {
                    alt44=1;
                    }
                    break;

                }

                switch (alt44) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2641);
            	    op2_unary_expression_or_questionmark_if_stmt269=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt269.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal270=null;
        ObjcParser.cast_expression_return cast_expression271 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression272 =null;


        Object char_literal270_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==126) ) {
                alt45=1;
            }
            else if ( (LA45_0==BOOL_LITERAL||LA45_0==CHAR_LITERAL||LA45_0==ID||LA45_0==NUMBER_LITERAL||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_OBJC)||LA45_0==112||LA45_0==116||LA45_0==118||LA45_0==120||LA45_0==123||LA45_0==127||LA45_0==159||LA45_0==166||(LA45_0 >= 169 && LA45_0 <= 170)||LA45_0==202) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: '-' cast_expression
                    {
                    char_literal270=(Token)match(input,126,FOLLOW_126_in_cast_unary_expression12656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal270);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12658);
                    cast_expression271=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression271.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 472:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12672);
                    cast_unary_expression272=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper273 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1274 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt275 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==113||(LA46_0 >= 115 && LA46_0 <= 116)||LA46_0==120||LA46_0==122||LA46_0==126||LA46_0==131||(LA46_0 >= 135 && LA46_0 <= 136)||(LA46_0 >= 138 && LA46_0 <= 143)||LA46_0==169||LA46_0==198||LA46_0==200) ) {
                alt46=1;
            }
            else if ( (LA46_0==145) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2686);
                    op2_wrapper273=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper273.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2688);
                    cast_unary_expression1274=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1274.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2695);
                    questionmark_if_stmt275=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt275.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal278=null;
        Token char_literal280=null;
        ObjcParser.cast_expression_return cast_expression276 =null;

        ObjcParser.increment_decrement_return increment_decrement277 =null;

        ObjcParser.cast_expression_return cast_expression279 =null;

        ObjcParser.cast_expression_return cast_expression281 =null;

        ObjcParser.increment_decrement_return increment_decrement282 =null;

        ObjcParser.cast_expression_return cast_expression283 =null;


        Object char_literal278_tree=null;
        Object char_literal280_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt48=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 116:
            case 118:
            case 120:
            case 159:
            case 166:
            case 169:
            case 170:
                {
                alt48=1;
                }
                break;
            case 112:
                {
                alt48=2;
                }
                break;
            case 202:
                {
                alt48=3;
                }
                break;
            case 123:
            case 127:
                {
                alt48=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2708);
                    cast_expression276=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression276.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:21: ( increment_decrement )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==123||LA47_0==127) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2710);
                            increment_decrement277=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement277.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:5: '!' cast_expression
                    {
                    char_literal278=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal278);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2719);
                    cast_expression279=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression279.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 483:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: '~' cast_expression
                    {
                    char_literal280=(Token)match(input,202,FOLLOW_202_in_cast_unary_expression2733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(char_literal280);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2735);
                    cast_expression281=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression281.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2749);
                    increment_decrement282=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement282.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2751);
                    cast_expression283=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression283.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal286=null;
        Token char_literal289=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper284 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access285 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper287 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access288 =null;

        ObjcParser.access_wrapper_return access_wrapper290 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call291 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access292 =null;


        Object char_literal286_tree=null;
        Object char_literal289_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt50=3;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2769);
                    type_cast_wrapper284=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper284.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2771);
                    simple_expression_value_access285=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access285.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal286=(Token)match(input,118,FOLLOW_118_in_cast_expression2790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal286_tree = 
                    (Object)adaptor.create(char_literal286)
                    ;
                    adaptor.addChild(root_0, char_literal286_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2792);
                    type_cast_wrapper287=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper287.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2794);
                    simple_expression_value_access288=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access288.getTree());

                    char_literal289=(Token)match(input,119,FOLLOW_119_in_cast_expression2796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal289_tree = 
                    (Object)adaptor.create(char_literal289)
                    ;
                    adaptor.addChild(root_0, char_literal289_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        alt49 = dfa49.predict(input);
                        switch (alt49) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2799);
                    	    access_wrapper290=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper290.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression2801);
                    	    simple_name_or_classical_function_call291=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call291.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2809);
                    simple_expression_value_access292=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access292.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal294=null;
        Token char_literal296=null;
        ObjcParser.name_return name293 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push295 =null;

        ObjcParser.name_return name297 =null;


        Object char_literal294_tree=null;
        Object char_literal296_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt52=2;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2830);
                    name293=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name293.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal294=(Token)match(input,118,FOLLOW_118_in_simple_name_or_classical_function_call2833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal294_tree = 
                    (Object)adaptor.create(char_literal294)
                    ;
                    adaptor.addChild(root_0, char_literal294_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:29: ( classical_method_params_push )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==BOOL_LITERAL||LA51_0==CHAR_LITERAL||LA51_0==ID||LA51_0==MULTI_COMMENT_LIT||LA51_0==NUMBER_LITERAL||LA51_0==SINGLE_COMMENT_LIT||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_OBJC)||LA51_0==112||LA51_0==116||LA51_0==118||LA51_0==120||LA51_0==123||(LA51_0 >= 126 && LA51_0 <= 127)||LA51_0==159||LA51_0==166||(LA51_0 >= 169 && LA51_0 <= 170)||LA51_0==202) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2835);
                            classical_method_params_push295=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push295.getTree());

                            }
                            break;

                    }


                    char_literal296=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call2838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal296_tree = 
                    (Object)adaptor.create(char_literal296)
                    ;
                    adaptor.addChild(root_0, char_literal296_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2845);
                    name297=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name297.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal299=null;
        Token char_literal301=null;
        Token char_literal303=null;
        Token char_literal304=null;
        Token char_literal308=null;
        Token char_literal310=null;
        ObjcParser.selector_wrapper_return selector_wrapper298 =null;

        ObjcParser.name_return name300 =null;

        ObjcParser.name_return name302 =null;

        ObjcParser.simple_expression_value_return simple_expression_value305 =null;

        ObjcParser.access_wrapper_return access_wrapper306 =null;

        ObjcParser.name_return name307 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push309 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2311 =null;

        ObjcParser.access_wrapper_return access_wrapper312 =null;

        ObjcParser.name_return name313 =null;


        Object char_literal299_tree=null;
        Object char_literal301_tree=null;
        Object char_literal303_tree=null;
        Object char_literal304_tree=null;
        Object char_literal308_tree=null;
        Object char_literal310_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:3: ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt58=3;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2860);
                    selector_wrapper298=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper298.getTree());

                    char_literal299=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal299_tree = 
                    (Object)adaptor.create(char_literal299)
                    ;
                    adaptor.addChild(root_0, char_literal299_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2864);
                    name300=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name300.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:31: ( ':' ( name ':' )* )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==133) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:32: ':' ( name ':' )*
                            {
                            char_literal301=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2867); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal301_tree = 
                            (Object)adaptor.create(char_literal301)
                            ;
                            adaptor.addChild(root_0, char_literal301_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:36: ( name ':' )*
                            loop53:
                            do {
                                int alt53=2;
                                int LA53_0 = input.LA(1);

                                if ( (LA53_0==ID) ) {
                                    alt53=1;
                                }


                                switch (alt53) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access2870);
                            	    name302=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name302.getTree());

                            	    char_literal303=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2872); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal303_tree = 
                            	    (Object)adaptor.create(char_literal303)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal303_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop53;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal304=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal304_tree = 
                    (Object)adaptor.create(char_literal304)
                    ;
                    adaptor.addChild(root_0, char_literal304_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2898);
                    simple_expression_value305=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value305.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:84: ( access_wrapper name )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( ((LA55_0 >= 129 && LA55_0 <= 130)) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2901);
                    	    access_wrapper306=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper306.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2903);
                    	    name307=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name307.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal308=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal308_tree = 
                    (Object)adaptor.create(char_literal308)
                    ;
                    adaptor.addChild(root_0, char_literal308_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:112: ( classical_method_params_push )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==BOOL_LITERAL||LA56_0==CHAR_LITERAL||LA56_0==ID||LA56_0==MULTI_COMMENT_LIT||LA56_0==NUMBER_LITERAL||LA56_0==SINGLE_COMMENT_LIT||(LA56_0 >= STRING_LITERAL && LA56_0 <= STRING_OBJC)||LA56_0==112||LA56_0==116||LA56_0==118||LA56_0==120||LA56_0==123||(LA56_0 >= 126 && LA56_0 <= 127)||LA56_0==159||LA56_0==166||(LA56_0 >= 169 && LA56_0 <= 170)||LA56_0==202) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2910);
                            classical_method_params_push309=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push309.getTree());

                            }
                            break;

                    }


                    char_literal310=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal310_tree = 
                    (Object)adaptor.create(char_literal310)
                    ;
                    adaptor.addChild(root_0, char_literal310_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2920);
                    simple_expression_value2311=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2311.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:30: ( access_wrapper name )*
                    loop57:
                    do {
                        int alt57=2;
                        alt57 = dfa57.predict(input);
                        switch (alt57) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2923);
                    	    access_wrapper312=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper312.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2925);
                    	    name313=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name313.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal314=null;
        Token char_literal316=null;
        Token char_literal318=null;
        Token set319=null;
        Token STRING_LITERAL321=null;
        Token STRING_OBJC322=null;
        Token CHAR_LITERAL323=null;
        Token NUMBER_LITERAL324=null;
        Token BOOL_LITERAL325=null;
        ObjcParser.name_return name315 =null;

        ObjcParser.element_value_return element_value317 =null;

        ObjcParser.name_return name320 =null;

        ObjcParser.name_return name326 =null;


        Object char_literal314_tree=null;
        Object char_literal316_tree=null;
        Object char_literal318_tree=null;
        Object set319_tree=null;
        Object STRING_LITERAL321_tree=null;
        Object STRING_OBJC322_tree=null;
        Object CHAR_LITERAL323_tree=null;
        Object NUMBER_LITERAL324_tree=null;
        Object BOOL_LITERAL325_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name )
            int alt60=8;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:23: ( '&' )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==116) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:23: '&'
                            {
                            char_literal314=(Token)match(input,116,FOLLOW_116_in_simple_expression_value2952); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal314);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2955);
                    name315=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name315.getTree());

                    char_literal316=(Token)match(input,166,FOLLOW_166_in_simple_expression_value2957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal316);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value2959);
                    element_value317=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value317.getTree());

                    char_literal318=(Token)match(input,168,FOLLOW_168_in_simple_expression_value2961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal318);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set319=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set319)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2995);
                    name320=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name320.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:4: STRING_LITERAL
                    {
                    STRING_LITERAL321=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value3000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL321);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 508:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:4: STRING_OBJC
                    {
                    STRING_OBJC322=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value3013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC322);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL323=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL323);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL324=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL324);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL325=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value3052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL325);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 512:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3066);
                    name326=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name326.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:1: simple_expression_value2 : ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal330=null;
        Token char_literal332=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper327 =null;

        ObjcParser.simple_expression_value_return simple_expression_value328 =null;

        ObjcParser.method_msg_return method_msg329 =null;

        ObjcParser.element_value_return element_value331 =null;


        Object char_literal330_tree=null;
        Object char_literal332_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:3: ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt61=4;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==169) && (synpred16_Objc())) {
                alt61=1;
            }
            else if ( (LA61_0==170) && (synpred16_Objc())) {
                alt61=1;
            }
            else if ( (LA61_0==BOOL_LITERAL||LA61_0==CHAR_LITERAL||LA61_0==ID||LA61_0==NUMBER_LITERAL||(LA61_0 >= STRING_LITERAL && LA61_0 <= STRING_OBJC)||LA61_0==116||LA61_0==120) ) {
                alt61=2;
            }
            else if ( (LA61_0==166) ) {
                alt61=3;
            }
            else if ( (LA61_0==118) ) {
                alt61=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value23084);
                    block_call_wrapper327=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper327.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23090);
                    simple_expression_value328=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value328.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23096);
                    method_msg329=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg329.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal330=(Token)match(input,118,FOLLOW_118_in_simple_expression_value23102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal330_tree = 
                    (Object)adaptor.create(char_literal330)
                    ;
                    adaptor.addChild(root_0, char_literal330_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23104);
                    element_value331=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value331.getTree());

                    char_literal332=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal332_tree = 
                    (Object)adaptor.create(char_literal332)
                    ;
                    adaptor.addChild(root_0, char_literal332_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2333 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3120);
            op2333=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2333.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set334=null;

        Object set334_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set334=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 116)||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==131||(input.LA(1) >= 135 && input.LA(1) <= 136)||(input.LA(1) >= 138 && input.LA(1) <= 143)||input.LA(1)==169||input.LA(1)==198||input.LA(1)==200 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set334)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign335 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3221);
            op_assign335=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign335.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set336=null;

        Object set336_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set336=(Token)input.LT(1);

            if ( input.LA(1)==117||input.LA(1)==121||input.LA(1)==124||input.LA(1)==128||input.LA(1)==132||input.LA(1)==137||input.LA(1)==139||input.LA(1)==144||input.LA(1)==199 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set336)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector337 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3289);
            selector337=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector337.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal338=null;

        Object string_literal338_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal338=(Token)match(input,159,FOLLOW_159_in_selector3312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal338_tree = 
            (Object)adaptor.create(string_literal338)
            ;
            adaptor.addChild(root_0, string_literal338_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name339 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3327);
            type_cast_name339=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name339.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal340=null;
        Token char_literal342=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration341 =null;


        Object char_literal340_tree=null;
        Object char_literal342_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal340=(Token)match(input,118,FOLLOW_118_in_type_cast_name3350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal340_tree = 
            (Object)adaptor.create(char_literal340)
            ;
            adaptor.addChild(root_0, char_literal340_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3352);
            type_cast_declaration341=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration341.getTree());

            char_literal342=(Token)match(input,119,FOLLOW_119_in_type_cast_name3354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal342_tree = 
            (Object)adaptor.create(char_literal342)
            ;
            adaptor.addChild(root_0, char_literal342_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol343 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration344 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==182) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==135) ) {
                    switch ( input.LA(3) ) {
                    case 185:
                        {
                        int LA62_19 = input.LA(4);

                        if ( (LA62_19==141) ) {
                            int LA62_24 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 182:
                        {
                        int LA62_20 = input.LA(4);

                        if ( (LA62_20==141) ) {
                            int LA62_25 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 186:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA62_26 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA62_27 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 186:
                            {
                            int LA62_28 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 188:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA62_29 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA62_30 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 188:
                            {
                            int LA62_31 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA62_23 = input.LA(4);

                        if ( (LA62_23==141) ) {
                            int LA62_32 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt62=1;
                            }
                            else if ( (true) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 32, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 23, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 62, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA62_1==116||(LA62_1 >= 119 && LA62_1 <= 120)||LA62_1==166||LA62_1==173) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA62_0==ID||LA62_0==118||LA62_0==173||LA62_0==178||(LA62_0 >= 185 && LA62_0 <= 186)||LA62_0==188||LA62_0==190||(LA62_0 >= 193 && LA62_0 <= 195)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3372);
                    type_declaration_protocol343=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol343.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3378);
                    classical_type_declaration344=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration344.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set345=null;

        Object set345_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set345=(Token)input.LT(1);

            if ( (input.LA(1) >= 129 && input.LA(1) <= 130) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set345)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access346 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3406);
            access346=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access346.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple347 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3425);
            object_access_simple347=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple347.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name348 =null;

        ObjcParser.access_wrapper_return access_wrapper349 =null;

        ObjcParser.name_return name350 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3446);
            name348=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name348.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:10: ( access_wrapper name )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( ((LA63_0 >= 129 && LA63_0 <= 130)) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3449);
            	    access_wrapper349=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper349.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3451);
            	    name350=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name350.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access351 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3468);
            object_access351=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access351.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue352 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3488);
            cast_lvalue352=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue352.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:583:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal355=null;
        Token char_literal358=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper353 =null;

        ObjcParser.lvalue_access_return lvalue_access354 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper356 =null;

        ObjcParser.lvalue_access_return lvalue_access357 =null;

        ObjcParser.access_wrapper_return access_wrapper359 =null;

        ObjcParser.name_return name360 =null;

        ObjcParser.lvalue_access_return lvalue_access361 =null;


        Object char_literal355_tree=null;
        Object char_literal358_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt65=3;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==118) ) {
                int LA65_1 = input.LA(2);

                if ( (LA65_1==182) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==118) ) {
                    int LA65_6 = input.LA(3);

                    if ( (LA65_6==120) && (synpred18_Objc())) {
                        alt65=1;
                    }
                    else if ( (LA65_6==182) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==118) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==195) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==173) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==194) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==185) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==186) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==188) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==ID) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==190) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==193) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else if ( (LA65_6==178) && (synpred19_Objc())) {
                        alt65=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 6, input);

                        throw nvae;

                    }
                }
                else if ( (LA65_1==195) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==173) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==194) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==185) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==186) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==188) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==ID) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==190) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==193) && (synpred18_Objc())) {
                    alt65=1;
                }
                else if ( (LA65_1==178) && (synpred18_Objc())) {
                    alt65=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA65_0==ID||LA65_0==116||LA65_0==120) ) {
                alt65=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3506);
                    type_cast_wrapper353=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper353.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3508);
                    lvalue_access354=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access354.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal355=(Token)match(input,118,FOLLOW_118_in_cast_lvalue3521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal355_tree = 
                    (Object)adaptor.create(char_literal355)
                    ;
                    adaptor.addChild(root_0, char_literal355_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3523);
                    type_cast_wrapper356=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper356.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3525);
                    lvalue_access357=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access357.getTree());

                    char_literal358=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal358_tree = 
                    (Object)adaptor.create(char_literal358)
                    ;
                    adaptor.addChild(root_0, char_literal358_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:71: ( access_wrapper name )+
                    int cnt64=0;
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( ((LA64_0 >= 129 && LA64_0 <= 130)) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3530);
                    	    access_wrapper359=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper359.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3532);
                    	    name360=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name360.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt64 >= 1 ) break loop64;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(64, input);
                                throw eee;
                        }
                        cnt64++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3540);
                    lvalue_access361=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access361.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:589:1: lvalue_access : lvalue ( access_wrapper name )* ;
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.lvalue_return lvalue362 =null;

        ObjcParser.access_wrapper_return access_wrapper363 =null;

        ObjcParser.name_return name364 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:3: ( lvalue ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:5: lvalue ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalue_access3553);
            lvalue362=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue362.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:12: ( access_wrapper name )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( ((LA66_0 >= 129 && LA66_0 <= 130)) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:13: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3556);
            	    access_wrapper363=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper363.getTree());

            	    pushFollow(FOLLOW_name_in_lvalue_access3558);
            	    name364=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name364.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal365=null;
        Token char_literal367=null;
        Token char_literal369=null;
        Token set370=null;
        ObjcParser.name_return name366 =null;

        ObjcParser.element_value_return element_value368 =null;

        ObjcParser.name_return name371 =null;

        ObjcParser.name_return name372 =null;


        Object char_literal365_tree=null;
        Object char_literal367_tree=null;
        Object char_literal369_tree=null;
        Object set370_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt68=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==ID) ) {
                    int LA68_4 = input.LA(3);

                    if ( (LA68_4==166) && (synpred20_Objc())) {
                        alt68=1;
                    }
                    else if ( (LA68_4==EOF||LA68_4==117||LA68_4==119||LA68_4==121||(LA68_4 >= 123 && LA68_4 <= 124)||(LA68_4 >= 127 && LA68_4 <= 130)||LA68_4==132||LA68_4==137||LA68_4==139||LA68_4==144||LA68_4==199) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA68_2 = input.LA(2);

                if ( (LA68_2==166) && (synpred20_Objc())) {
                    alt68=1;
                }
                else if ( (LA68_2==EOF||LA68_2==117||LA68_2==119||LA68_2==121||(LA68_2 >= 123 && LA68_2 <= 124)||(LA68_2 >= 127 && LA68_2 <= 130)||LA68_2==132||LA68_2==137||LA68_2==139||LA68_2==144||LA68_2==199) ) {
                    alt68=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 2, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                alt68=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }

            switch (alt68) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:23: ( '&' )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==116) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:23: '&'
                            {
                            char_literal365=(Token)match(input,116,FOLLOW_116_in_lvalue3585); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal365);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3588);
                    name366=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name366.getTree());

                    char_literal367=(Token)match(input,166,FOLLOW_166_in_lvalue3590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal367);


                    pushFollow(FOLLOW_element_value_in_lvalue3592);
                    element_value368=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value368.getTree());

                    char_literal369=(Token)match(input,168,FOLLOW_168_in_lvalue3594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal369);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 594:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set370=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set370)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3616);
                    name371=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name371.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:596:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3622);
                    name372=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name372.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:600:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal373=null;

        Object string_literal373_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:5: 'break'
            {
            string_literal373=(Token)match(input,171,FOLLOW_171_in_break_stmt3638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal373);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal374=null;

        Object string_literal374_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:5: 'continue'
            {
            string_literal374=(Token)match(input,174,FOLLOW_174_in_continue_stmt3659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal374);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration375 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3685);
            extern_declaration375=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration375.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal376=null;
        ObjcParser.field_declaration_return field_declaration377 =null;


        Object string_literal376_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal376=(Token)match(input,179,FOLLOW_179_in_extern_declaration3706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal376_tree = 
            (Object)adaptor.create(string_literal376)
            ;
            adaptor.addChild(root_0, string_literal376_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3708);
            field_declaration377=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration377.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix378 =null;

        ObjcParser.method_declaration_return method_declaration379 =null;

        ObjcParser.property_prefix_return property_prefix380 =null;

        ObjcParser.optional_prefix_return optional_prefix381 =null;

        ObjcParser.field_declaration_return field_declaration382 =null;

        ObjcParser.comments_return comments383 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt71=3;
            switch ( input.LA(1) ) {
            case 122:
            case 126:
            case 153:
                {
                alt71=1;
                }
                break;
            case 155:
                {
                alt71=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt71=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }

            switch (alt71) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: ( optional_prefix )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==153) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3720);
                            optional_prefix378=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix378.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3723);
                    method_declaration379=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration379.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 618:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3737);
                    property_prefix380=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix380.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:21: ( optional_prefix )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==153) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3739);
                            optional_prefix381=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix381.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3742);
                    field_declaration382=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration382.getTree());

                    // AST REWRITE
                    // elements: field_declaration, property_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 619:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3758);
                    comments383=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments383.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration384 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3773);
            field_declaration384=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration384.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal385=null;

        Object string_literal385_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal385=(Token)match(input,153,FOLLOW_153_in_optional_prefix3796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal385_tree = 
            (Object)adaptor.create(string_literal385)
            ;
            adaptor.addChild(root_0, string_literal385_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal386=null;

        Object string_literal386_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal386=(Token)match(input,165,FOLLOW_165_in_ns_inline3808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = 
            (Object)adaptor.create(string_literal386)
            ;
            adaptor.addChild(root_0, string_literal386_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal387=null;
        Token char_literal388=null;
        Token char_literal390=null;
        Token char_literal392=null;
        Token char_literal394=null;
        Token char_literal396=null;
        Token char_literal397=null;
        ObjcParser.name_return name389 =null;

        ObjcParser.name_return name391 =null;

        ObjcParser.name_return name393 =null;

        ObjcParser.name_return name395 =null;


        Object string_literal387_tree=null;
        Object char_literal388_tree=null;
        Object char_literal390_tree=null;
        Object char_literal392_tree=null;
        Object char_literal394_tree=null;
        Object char_literal396_tree=null;
        Object char_literal397_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal387=(Token)match(input,155,FOLLOW_155_in_property_prefix3820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal387_tree = 
            (Object)adaptor.create(string_literal387)
            ;
            adaptor.addChild(root_0, string_literal387_tree);
            }

            char_literal388=(Token)match(input,118,FOLLOW_118_in_property_prefix3822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal388_tree = 
            (Object)adaptor.create(char_literal388)
            ;
            adaptor.addChild(root_0, char_literal388_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3824);
            name389=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name389.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:26: ( '=' name )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==139) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:27: '=' name
                    {
                    char_literal390=(Token)match(input,139,FOLLOW_139_in_property_prefix3827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal390_tree = 
                    (Object)adaptor.create(char_literal390)
                    ;
                    adaptor.addChild(root_0, char_literal390_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3829);
                    name391=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name391.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==125) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal392=(Token)match(input,125,FOLLOW_125_in_property_prefix3834); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal392_tree = 
            	    (Object)adaptor.create(char_literal392)
            	    ;
            	    adaptor.addChild(root_0, char_literal392_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3836);
            	    name393=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name393.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:48: ( '=' name ( ':' )? )?
            	    int alt74=2;
            	    int LA74_0 = input.LA(1);

            	    if ( (LA74_0==139) ) {
            	        alt74=1;
            	    }
            	    switch (alt74) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:49: '=' name ( ':' )?
            	            {
            	            char_literal394=(Token)match(input,139,FOLLOW_139_in_property_prefix3839); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal394_tree = 
            	            (Object)adaptor.create(char_literal394)
            	            ;
            	            adaptor.addChild(root_0, char_literal394_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3841);
            	            name395=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name395.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:58: ( ':' )?
            	            int alt73=2;
            	            int LA73_0 = input.LA(1);

            	            if ( (LA73_0==133) ) {
            	                alt73=1;
            	            }
            	            switch (alt73) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:58: ':'
            	                    {
            	                    char_literal396=(Token)match(input,133,FOLLOW_133_in_property_prefix3843); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal396_tree = 
            	                    (Object)adaptor.create(char_literal396)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal396_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            char_literal397=(Token)match(input,119,FOLLOW_119_in_property_prefix3850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal397_tree = 
            (Object)adaptor.create(char_literal397)
            ;
            adaptor.addChild(root_0, char_literal397_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration398 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3863);
            interface_declaration398=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration398.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration399 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3883);
            protocol_declaration399=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration399.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal400=null;
        ObjcParser.typedef_declaration_return typedef_declaration401 =null;


        Object string_literal400_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:5: 'typedef' typedef_declaration
            {
            string_literal400=(Token)match(input,192,FOLLOW_192_in_typedef_declaration_wrapper3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal400);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3903);
            typedef_declaration401=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration401.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal404=null;
        Token char_literal406=null;
        ObjcParser.typedef_internal_return typedef_internal402 =null;

        ObjcParser.typedef_name_return typedef_name403 =null;

        ObjcParser.typedef_name_return typedef_name405 =null;


        Object char_literal404_tree=null;
        Object char_literal406_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3921);
            typedef_internal402=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal402.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3923);
            typedef_name403=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name403.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:35: ( ',' typedef_name )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==125) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:36: ',' typedef_name
            	    {
            	    char_literal404=(Token)match(input,125,FOLLOW_125_in_typedef_declaration3926); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal404_tree = 
            	    (Object)adaptor.create(char_literal404)
            	    ;
            	    adaptor.addChild(root_0, char_literal404_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3928);
            	    typedef_name405=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name405.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            char_literal406=(Token)match(input,134,FOLLOW_134_in_typedef_declaration3932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal406_tree = 
            (Object)adaptor.create(char_literal406)
            ;
            adaptor.addChild(root_0, char_literal406_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal407=null;
        Token char_literal408=null;
        Token char_literal410=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane409 =null;


        Object char_literal407_tree=null;
        Object char_literal408_tree=null;
        Object char_literal410_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal407=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal407_tree = 
            (Object)adaptor.create(char_literal407)
            ;
            adaptor.addChild(root_0, char_literal407_tree);
            }

            char_literal408=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate3946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal408_tree = 
            (Object)adaptor.create(char_literal408)
            ;
            adaptor.addChild(root_0, char_literal408_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3948);
            type_declaration_plane409=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane409.getTree());

            char_literal410=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate3950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal410_tree = 
            (Object)adaptor.create(char_literal410)
            ;
            adaptor.addChild(root_0, char_literal410_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal411=null;
        Token char_literal412=null;
        Token char_literal414=null;
        Token char_literal415=null;
        Token char_literal417=null;
        Token char_literal419=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane413 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane416 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane418 =null;


        Object char_literal411_tree=null;
        Object char_literal412_tree=null;
        Object char_literal414_tree=null;
        Object char_literal415_tree=null;
        Object char_literal417_tree=null;
        Object char_literal419_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal411=(Token)match(input,118,FOLLOW_118_in_func_pointer3965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal411);


            char_literal412=(Token)match(input,120,FOLLOW_120_in_func_pointer3967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal412);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3969);
            type_declaration_plane413=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane413.getTree());

            char_literal414=(Token)match(input,119,FOLLOW_119_in_func_pointer3971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal414);


            char_literal415=(Token)match(input,118,FOLLOW_118_in_func_pointer3973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal415);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ID||LA78_0==173||LA78_0==182||(LA78_0 >= 185 && LA78_0 <= 186)||LA78_0==188||(LA78_0 >= 194 && LA78_0 <= 195)) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3976);
                    type_declaration_plane416=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane416.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:68: ( ',' type_declaration_plane )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==125) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:69: ',' type_declaration_plane
                    	    {
                    	    char_literal417=(Token)match(input,125,FOLLOW_125_in_func_pointer3979); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_125.add(char_literal417);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3981);
                    	    type_declaration_plane418=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane418.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal419=(Token)match(input,119,FOLLOW_119_in_func_pointer3987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal419);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 661:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer420 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct421 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum422 =null;

        ObjcParser.type_declaration_union_return type_declaration_union423 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane424 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt79=5;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==118) && (synpred21_Objc())) {
                alt79=1;
            }
            else if ( (LA79_0==190) ) {
                alt79=2;
            }
            else if ( (LA79_0==178) ) {
                alt79=3;
            }
            else if ( (LA79_0==193) ) {
                alt79=4;
            }
            else if ( (LA79_0==ID||LA79_0==173||LA79_0==182||(LA79_0 >= 185 && LA79_0 <= 186)||LA79_0==188||(LA79_0 >= 194 && LA79_0 <= 195)) ) {
                alt79=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4016);
                    func_pointer420=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer420.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4022);
                    type_declaration_struct421=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct421.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4028);
                    type_declaration_enum422=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum422.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4034);
                    type_declaration_union423=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union423.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4040);
                    type_declaration_plane424=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID425=null;

        Object ID425_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: ID
            {
            ID425=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID425);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal426=null;
        Token char_literal428=null;
        Token string_literal429=null;
        Token char_literal431=null;
        Token char_literal433=null;
        Token char_literal435=null;
        Token char_literal437=null;
        ObjcParser.class_name_return class_name427 =null;

        ObjcParser.protocol_name_return protocol_name430 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple432 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple434 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple436 =null;


        Object string_literal426_tree=null;
        Object char_literal428_tree=null;
        Object string_literal429_tree=null;
        Object char_literal431_tree=null;
        Object char_literal433_tree=null;
        Object char_literal435_tree=null;
        Object char_literal437_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt80=5;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt80=1;
                }
                break;
            case 157:
                {
                alt80=2;
                }
                break;
            case 190:
                {
                alt80=3;
                }
                break;
            case 193:
                {
                alt80=4;
                }
                break;
            case 178:
                {
                alt80=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }

            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: '@class' class_name ';'
                    {
                    string_literal426=(Token)match(input,147,FOLLOW_147_in_forward_class_declaration4073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(string_literal426);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4075);
                    class_name427=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name427.getTree());

                    char_literal428=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal428);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: '@protocol' protocol_name ';'
                    {
                    string_literal429=(Token)match(input,157,FOLLOW_157_in_forward_class_declaration4090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal429);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4092);
                    protocol_name430=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name430.getTree());

                    char_literal431=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal431);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4107);
                    type_declaration_struct_simple432=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple432.getTree());

                    char_literal433=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal433);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4122);
                    type_declaration_union_simple434=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple434.getTree());

                    char_literal435=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal435);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 679:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4137);
                    type_declaration_enum_simple436=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple436.getTree());

                    char_literal437=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal437);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 680:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID438=null;

        Object ID438_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:5: ID
            {
            ID438=(Token)match(input,ID,FOLLOW_ID_in_class_name4159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID438);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal439=null;
        ObjcParser.protocol_name_return protocol_name440 =null;

        ObjcParser.implements_interfaces_return implements_interfaces441 =null;

        ObjcParser.class_protocol_end_return class_protocol_end442 =null;


        Object string_literal439_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal439=(Token)match(input,157,FOLLOW_157_in_protocol_declaration4179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal439_tree = 
            (Object)adaptor.create(string_literal439)
            ;
            adaptor.addChild(root_0, string_literal439_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4181);
            protocol_name440=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name440.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:31: ( implements_interfaces )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==135) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4183);
                    implements_interfaces441=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces441.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4191);
            class_protocol_end442=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end442.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal444=null;
        ObjcParser.declarations_return declarations443 =null;


        Object string_literal444_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: ( declarations )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==MULTI_COMMENT_LIT||LA82_0==SINGLE_COMMENT_LIT||LA82_0==122||LA82_0==126||LA82_0==153||LA82_0==155) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4205);
            	    declarations443=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations443.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            string_literal444=(Token)match(input,149,FOLLOW_149_in_class_protocol_end4212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = 
            (Object)adaptor.create(string_literal444)
            ;
            adaptor.addChild(root_0, string_literal444_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal445=null;
        Token char_literal447=null;
        ObjcParser.template_internal_return template_internal446 =null;


        Object char_literal445_tree=null;
        Object char_literal447_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal445=(Token)match(input,135,FOLLOW_135_in_template4224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal445_tree = 
            (Object)adaptor.create(char_literal445)
            ;
            adaptor.addChild(root_0, char_literal445_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4226);
            template_internal446=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal446.getTree());

            char_literal447=(Token)match(input,141,FOLLOW_141_in_template4228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal447_tree = 
            (Object)adaptor.create(char_literal447)
            ;
            adaptor.addChild(root_0, char_literal447_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols448 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4237);
            implements_protocols448=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols448.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal449=null;
        Token char_literal451=null;
        Token char_literal453=null;
        ObjcParser.type_dec_internal_return type_dec_internal450 =null;

        ObjcParser.type_dec_internal_return type_dec_internal452 =null;


        Object char_literal449_tree=null;
        Object char_literal451_tree=null;
        Object char_literal453_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal449=(Token)match(input,135,FOLLOW_135_in_implements_protocols4262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal449);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4264);
            type_dec_internal450=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal450.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:27: ( ',' type_dec_internal )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==125) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:28: ',' type_dec_internal
            	    {
            	    char_literal451=(Token)match(input,125,FOLLOW_125_in_implements_protocols4267); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal451);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4269);
            	    type_dec_internal452=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal452.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            char_literal453=(Token)match(input,141,FOLLOW_141_in_implements_protocols4273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal453);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 703:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal455=null;
        ObjcParser.template_type_return template_type454 =null;

        ObjcParser.template_type_return template_type456 =null;


        Object char_literal455_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4295);
            template_type454=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type454.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:19: ( ',' template_type )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==125) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:20: ',' template_type
            	    {
            	    char_literal455=(Token)match(input,125,FOLLOW_125_in_template_internal4298); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal455_tree = 
            	    (Object)adaptor.create(char_literal455)
            	    ;
            	    adaptor.addChild(root_0, char_literal455_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4300);
            	    template_type456=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type456.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal458=null;
        ObjcParser.template_name_return template_name457 =null;

        ObjcParser.template_name_return template_name459 =null;


        Object string_literal458_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:3: ( template_name | 'struct' template_name )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==ID) ) {
                alt85=1;
            }
            else if ( (LA85_0==190) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4314);
                    template_name457=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name457.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal458=(Token)match(input,190,FOLLOW_190_in_template_type4320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal458_tree = 
                    (Object)adaptor.create(string_literal458)
                    ;
                    adaptor.addChild(root_0, string_literal458_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4322);
                    template_name459=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name459.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID460=null;

        Object ID460_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:5: ID
            {
            ID460=(Token)match(input,ID,FOLLOW_ID_in_template_name4337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID460);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 715:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID461=null;

        Object ID461_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:5: ID
            {
            ID461=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID461);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 719:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal462=null;
        Token string_literal467=null;
        ObjcParser.interface_name_return interface_name463 =null;

        ObjcParser.superclass_name_return superclass_name464 =null;

        ObjcParser.fields_body_return fields_body465 =null;

        ObjcParser.declarations_return declarations466 =null;


        Object string_literal462_tree=null;
        Object string_literal467_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal462=(Token)match(input,152,FOLLOW_152_in_interface_declaration4384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = 
            (Object)adaptor.create(string_literal462)
            ;
            adaptor.addChild(root_0, string_literal462_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4386);
            interface_name463=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name463.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4388);
            superclass_name464=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name464.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:3: ( fields_body )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==197) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4392);
                    fields_body465=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body465.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:3: ( declarations )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==MULTI_COMMENT_LIT||LA87_0==SINGLE_COMMENT_LIT||LA87_0==122||LA87_0==126||LA87_0==153||LA87_0==155) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4397);
            	    declarations466=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations466.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            string_literal467=(Token)match(input,149,FOLLOW_149_in_interface_declaration4402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal468=null;
        Token char_literal470=null;
        ObjcParser.body_item_return body_item469 =null;


        Object char_literal468_tree=null;
        Object char_literal470_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal468=(Token)match(input,197,FOLLOW_197_in_fields_body4419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal468_tree = 
            (Object)adaptor.create(char_literal468)
            ;
            adaptor.addChild(root_0, char_literal468_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: ( body_item )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==ID||LA88_0==MULTI_COMMENT_LIT||LA88_0==SINGLE_COMMENT_LIT||LA88_0==118||LA88_0==154||LA88_0==156||LA88_0==158||LA88_0==164||LA88_0==173||LA88_0==178||LA88_0==182||(LA88_0 >= 185 && LA88_0 <= 186)||LA88_0==188||LA88_0==190||(LA88_0 >= 192 && LA88_0 <= 195)) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4425);
            	    body_item469=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item469.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            char_literal470=(Token)match(input,201,FOLLOW_201_in_fields_body4430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal470_tree = 
            (Object)adaptor.create(char_literal470)
            ;
            adaptor.addChild(root_0, char_literal470_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper471 =null;

        ObjcParser.field_modifiers_return field_modifiers472 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper473 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper474 =null;

        ObjcParser.comments_return comments475 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==ID||LA92_0==118||LA92_0==154||LA92_0==156||LA92_0==158||LA92_0==164||LA92_0==173||LA92_0==178||LA92_0==182||(LA92_0 >= 185 && LA92_0 <= 186)||LA92_0==188||LA92_0==190||(LA92_0 >= 192 && LA92_0 <= 195)) ) {
                alt92=1;
            }
            else if ( (LA92_0==MULTI_COMMENT_LIT||LA92_0==SINGLE_COMMENT_LIT) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( group_modifier_wrapper )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==154||LA89_0==156||LA89_0==158) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4445);
                            group_modifier_wrapper471=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper471.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:29: ( field_modifiers )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==164) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4448);
                            field_modifiers472=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers472.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==192) ) {
                        alt91=1;
                    }
                    else if ( (LA91_0==ID||LA91_0==118||LA91_0==173||LA91_0==178||LA91_0==182||(LA91_0 >= 185 && LA91_0 <= 186)||LA91_0==188||LA91_0==190||(LA91_0 >= 193 && LA91_0 <= 195)) ) {
                        alt91=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;

                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4452);
                            typedef_declaration_wrapper473=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper473.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4456);
                            field_declaration_wrapper474=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper474.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4463);
                    comments475=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments475.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier476 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4476);
            group_modifier476=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier476.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 741:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set477=null;

        Object set477_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set477=(Token)input.LT(1);

            if ( input.LA(1)==154||input.LA(1)==156||input.LA(1)==158 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set477)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal478=null;

        Object string_literal478_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal478=(Token)match(input,164,FOLLOW_164_in_field_modifiers4521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = 
            (Object)adaptor.create(string_literal478)
            ;
            adaptor.addChild(root_0, string_literal478_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID479=null;
        ObjcParser.category_return category480 =null;


        Object ID479_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:5: ID ( category )?
            {
            ID479=(Token)match(input,ID,FOLLOW_ID_in_interface_name4536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID479);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:8: ( category )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==118) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4538);
                    category480=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category480.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: category, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal481=null;
        Token ID482=null;
        Token char_literal483=null;

        Object char_literal481_tree=null;
        Object ID482_tree=null;
        Object char_literal483_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:11: '(' ( ID )? ')'
            {
            char_literal481=(Token)match(input,118,FOLLOW_118_in_category4557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal481);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:15: ( ID )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ID) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:15: ID
                    {
                    ID482=(Token)match(input,ID,FOLLOW_ID_in_category4559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID482);


                    }
                    break;

            }


            char_literal483=(Token)match(input,119,FOLLOW_119_in_category4562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal483);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 753:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal484=null;
        Token ID485=null;
        ObjcParser.implements_interfaces_return implements_interfaces486 =null;


        Object char_literal484_tree=null;
        Object ID485_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( ':' ID )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==133) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:6: ':' ID
                    {
                    char_literal484=(Token)match(input,133,FOLLOW_133_in_superclass_name4582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal484);


                    ID485=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID485);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: ( implements_interfaces )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==135) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4588);
                    implements_interfaces486=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces486.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 756:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration487 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: ( field_declaration )+
            int cnt97=0;
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==ID||LA97_0==118||LA97_0==173||LA97_0==178||LA97_0==182||(LA97_0 >= 185 && LA97_0 <= 186)||LA97_0==188||LA97_0==190||(LA97_0 >= 193 && LA97_0 <= 195)) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4617);
            	    field_declaration487=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration487.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal490=null;
        Token char_literal493=null;
        Token char_literal497=null;
        Token char_literal498=null;
        ObjcParser.type_declaration_return type_declaration488 =null;

        ObjcParser.field_name_return field_name489 =null;

        ObjcParser.field_name_return field_name491 =null;

        ObjcParser.classical_method_params_return classical_method_params492 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper494 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper495 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init496 =null;


        Object char_literal490_tree=null;
        Object char_literal493_tree=null;
        Object char_literal497_tree=null;
        Object char_literal498_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4641);
            type_declaration488=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration488.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4643);
            field_name489=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name489.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:36: ( ',' field_name )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==125) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:37: ',' field_name
            	    {
            	    char_literal490=(Token)match(input,125,FOLLOW_125_in_field_declaration4647); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal490_tree = 
            	    (Object)adaptor.create(char_literal490)
            	    ;
            	    adaptor.addChild(root_0, char_literal490_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4649);
            	    field_name491=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name491.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( ((LA101_0 >= 117 && LA101_0 <= 118)||LA101_0==121||LA101_0==124||LA101_0==128||LA101_0==132||LA101_0==137||LA101_0==139||LA101_0==144||LA101_0==199) ) {
                alt101=1;
            }
            else if ( (LA101_0==134) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==118) ) {
                        alt100=1;
                    }
                    else if ( (LA100_0==117||LA100_0==121||LA100_0==124||LA100_0==128||LA100_0==132||LA100_0==137||LA100_0==139||LA100_0==144||LA100_0==199) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;

                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4656);
                            classical_method_params492=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params492.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:81: ( ';' | block_multiline_wrapper )
                            int alt99=2;
                            int LA99_0 = input.LA(1);

                            if ( (LA99_0==134) ) {
                                alt99=1;
                            }
                            else if ( (LA99_0==197) ) {
                                alt99=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 99, 0, input);

                                throw nvae;

                            }
                            switch (alt99) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:82: ';'
                                    {
                                    char_literal493=(Token)match(input,134,FOLLOW_134_in_field_declaration4659); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal493_tree = 
                                    (Object)adaptor.create(char_literal493)
                                    ;
                                    adaptor.addChild(root_0, char_literal493_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4663);
                                    block_multiline_wrapper494=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper494.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4670);
                            op_assign_wrapper495=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper495.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4672);
                            element_value_or_array_init496=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init496.getTree());

                            char_literal497=(Token)match(input,134,FOLLOW_134_in_field_declaration4674); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal497_tree = 
                            (Object)adaptor.create(char_literal497)
                            ;
                            adaptor.addChild(root_0, char_literal497_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:171: ';'
                    {
                    char_literal498=(Token)match(input,134,FOLLOW_134_in_field_declaration4680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal498_tree = 
                    (Object)adaptor.create(char_literal498)
                    ;
                    adaptor.addChild(root_0, char_literal498_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration499 =null;

        ObjcParser.field_name_return field_name500 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4695);
            type_declaration499=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration499.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4697);
            field_name500=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name500.getTree());

            // AST REWRITE
            // elements: field_name, type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal501=null;
        Token char_literal503=null;
        Token char_literal505=null;
        ObjcParser.classical_param_return classical_param502 =null;

        ObjcParser.classical_param_return classical_param504 =null;


        Object char_literal501_tree=null;
        Object char_literal503_tree=null;
        Object char_literal505_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal501=(Token)match(input,118,FOLLOW_118_in_classical_method_params4722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal501);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:9: ( classical_param )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==ID||LA102_0==118||LA102_0==173||LA102_0==178||LA102_0==182||(LA102_0 >= 185 && LA102_0 <= 186)||LA102_0==188||LA102_0==190||(LA102_0 >= 193 && LA102_0 <= 195)) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4724);
                    classical_param502=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param502.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:26: ( ',' classical_param )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==125) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:27: ',' classical_param
            	    {
            	    char_literal503=(Token)match(input,125,FOLLOW_125_in_classical_method_params4728); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal503);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4730);
            	    classical_param504=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param504.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            char_literal505=(Token)match(input,119,FOLLOW_119_in_classical_method_params4734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal505);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration506 =null;

        ObjcParser.param_name_return param_name507 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4759);
            classical_type_declaration506=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration506.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4761);
            param_name507=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name507.getTree());

            // AST REWRITE
            // elements: classical_type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 775:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal511=null;
        Token string_literal512=null;
        Token char_literal514=null;
        Token string_literal515=null;
        Token char_literal517=null;
        Token string_literal518=null;
        Token char_literal520=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol508 =null;

        ObjcParser.func_pointer_return func_pointer509 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane510 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper513 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper516 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper519 =null;


        Object char_literal511_tree=null;
        Object string_literal512_tree=null;
        Object char_literal514_tree=null;
        Object string_literal515_tree=null;
        Object char_literal517_tree=null;
        Object string_literal518_tree=null;
        Object char_literal520_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt108=6;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==182) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==135) && (synpred22_Objc())) {
                    alt108=1;
                }
                else if ( (LA108_1==ID||LA108_1==116||(LA108_1 >= 119 && LA108_1 <= 120)||LA108_1==166||LA108_1==173) ) {
                    alt108=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==118) && (synpred23_Objc())) {
                alt108=2;
            }
            else if ( (LA108_0==ID||LA108_0==173||(LA108_0 >= 185 && LA108_0 <= 186)||LA108_0==188||(LA108_0 >= 194 && LA108_0 <= 195)) ) {
                alt108=3;
            }
            else if ( (LA108_0==190) ) {
                alt108=4;
            }
            else if ( (LA108_0==193) ) {
                alt108=5;
            }
            else if ( (LA108_0==178) ) {
                alt108=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4790);
                    type_declaration_protocol508=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol508.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4801);
                    func_pointer509=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer509.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4807);
                    type_declaration_plane510=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane510.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:28: ( '&' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==116) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:28: '&'
                            {
                            char_literal511=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4809); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal511_tree = 
                            (Object)adaptor.create(char_literal511)
                            ;
                            adaptor.addChild(root_0, char_literal511_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal512=(Token)match(input,190,FOLLOW_190_in_classical_type_declaration4817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal512);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4819);
                    type_dec_wrapper513=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper513.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:32: ( '&' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==116) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:32: '&'
                            {
                            char_literal514=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4821); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal514);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 782:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal515=(Token)match(input,193,FOLLOW_193_in_classical_type_declaration4838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal515);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4840);
                    type_dec_wrapper516=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper516.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:31: ( '&' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==116) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:31: '&'
                            {
                            char_literal517=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4842); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal517);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal518=(Token)match(input,178,FOLLOW_178_in_classical_type_declaration4859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal518);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4861);
                    type_dec_wrapper519=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper519.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:30: ( '&' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==116) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:30: '&'
                            {
                            char_literal520=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4863); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal520);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal524=null;
        Token char_literal525=null;
        Token char_literal527=null;
        Token char_literal529=null;
        Token char_literal531=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol521 =null;

        ObjcParser.func_pointer_return func_pointer522 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct523 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum526 =null;

        ObjcParser.type_declaration_union_return type_declaration_union528 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane530 =null;


        Object char_literal524_tree=null;
        Object char_literal525_tree=null;
        Object char_literal527_tree=null;
        Object char_literal529_tree=null;
        Object char_literal531_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt114=6;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==182) ) {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==135) && (synpred24_Objc())) {
                    alt114=1;
                }
                else if ( (LA114_1==ID||LA114_1==116||(LA114_1 >= 119 && LA114_1 <= 120)||LA114_1==166||LA114_1==173) ) {
                    alt114=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA114_0==118) && (synpred25_Objc())) {
                alt114=2;
            }
            else if ( (LA114_0==190) ) {
                alt114=3;
            }
            else if ( (LA114_0==178) ) {
                alt114=4;
            }
            else if ( (LA114_0==193) ) {
                alt114=5;
            }
            else if ( (LA114_0==ID||LA114_0==173||(LA114_0 >= 185 && LA114_0 <= 186)||LA114_0==188||(LA114_0 >= 194 && LA114_0 <= 195)) ) {
                alt114=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4892);
                    type_declaration_protocol521=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol521.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4903);
                    func_pointer522=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer522.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4909);
                    type_declaration_struct523=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct523.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:29: ( '&' )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==116) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:29: '&'
                            {
                            char_literal524=(Token)match(input,116,FOLLOW_116_in_type_declaration4911); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal524_tree = 
                            (Object)adaptor.create(char_literal524)
                            ;
                            adaptor.addChild(root_0, char_literal524_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:33: ( '*' )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==120) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:33: '*'
                            {
                            char_literal525=(Token)match(input,120,FOLLOW_120_in_type_declaration4913); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal525_tree = 
                            (Object)adaptor.create(char_literal525)
                            ;
                            adaptor.addChild(root_0, char_literal525_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4920);
                    type_declaration_enum526=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum526.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:27: ( '&' )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==116) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:27: '&'
                            {
                            char_literal527=(Token)match(input,116,FOLLOW_116_in_type_declaration4922); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal527_tree = 
                            (Object)adaptor.create(char_literal527)
                            ;
                            adaptor.addChild(root_0, char_literal527_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4929);
                    type_declaration_union528=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union528.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:28: ( '&' )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==116) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:28: '&'
                            {
                            char_literal529=(Token)match(input,116,FOLLOW_116_in_type_declaration4931); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal529_tree = 
                            (Object)adaptor.create(char_literal529)
                            ;
                            adaptor.addChild(root_0, char_literal529_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4938);
                    type_declaration_plane530=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane530.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:28: ( '&' )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==116) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:28: '&'
                            {
                            char_literal531=(Token)match(input,116,FOLLOW_116_in_type_declaration4940); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal531_tree = 
                            (Object)adaptor.create(char_literal531)
                            ;
                            adaptor.addChild(root_0, char_literal531_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:1: type_declaration_plane : ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal532=null;
        Token string_literal533=null;
        Token string_literal534=null;
        Token string_literal536=null;
        Token char_literal537=null;
        ObjcParser.type_dec_return type_dec535 =null;


        Object string_literal532_tree=null;
        Object string_literal533_tree=null;
        Object string_literal534_tree=null;
        Object string_literal536_tree=null;
        Object char_literal537_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:3: ( ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( 'volatile' )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==195) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: 'volatile'
                    {
                    string_literal532=(Token)match(input,195,FOLLOW_195_in_type_declaration_plane4955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal532);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:17: ( 'const' )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==173) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:17: 'const'
                    {
                    string_literal533=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane4958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal533);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:26: ( 'unsigned' )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==194) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:26: 'unsigned'
                    {
                    string_literal534=(Token)match(input,194,FOLLOW_194_in_type_declaration_plane4961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal534);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane4964);
            type_dec535=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec535.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:47: ( 'const' ( '*' )? )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==173) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:48: 'const' ( '*' )?
                    {
                    string_literal536=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane4967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal536);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: ( '*' )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==120) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: '*'
                            {
                            char_literal537=(Token)match(input,120,FOLLOW_120_in_type_declaration_plane4969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(char_literal537);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 173, 195, type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 797:63: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:66: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:79: ( 'volatile' )?
                if ( stream_195.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_195.nextNode()
                    );

                }
                stream_195.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:100: ( 'const' )?
                if ( stream_173.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_173.nextNode()
                    );

                }
                stream_173.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal538=null;
        Token char_literal539=null;

        Object string_literal538_tree=null;
        Object char_literal539_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:6: 'id' '<'
            {
            string_literal538=(Token)match(input,182,FOLLOW_182_in_type_decl_protocol_predicate5001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = 
            (Object)adaptor.create(string_literal538)
            ;
            adaptor.addChild(root_0, string_literal538_tree);
            }

            char_literal539=(Token)match(input,135,FOLLOW_135_in_type_decl_protocol_predicate5003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal539_tree = 
            (Object)adaptor.create(char_literal539)
            ;
            adaptor.addChild(root_0, char_literal539_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal540=null;
        Token char_literal541=null;
        Token char_literal543=null;
        ObjcParser.type_dec_internal_return type_dec_internal542 =null;


        Object string_literal540_tree=null;
        Object char_literal541_tree=null;
        Object char_literal543_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: 'id' '<' type_dec_internal '>'
            {
            string_literal540=(Token)match(input,182,FOLLOW_182_in_type_declaration_protocol5019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal540);


            char_literal541=(Token)match(input,135,FOLLOW_135_in_type_declaration_protocol5021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal541);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5023);
            type_dec_internal542=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal542.getTree());

            char_literal543=(Token)match(input,141,FOLLOW_141_in_type_declaration_protocol5025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal543);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal544=null;
        ObjcParser.typedef_name_return typedef_name545 =null;


        Object string_literal544_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: 'struct' typedef_name
            {
            string_literal544=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct_simple5047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal544);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5049);
            typedef_name545=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name545.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal546=null;
        ObjcParser.typedef_name_return typedef_name547 =null;


        Object string_literal546_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: 'union' typedef_name
            {
            string_literal546=(Token)match(input,193,FOLLOW_193_in_type_declaration_union_simple5069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal546);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5071);
            typedef_name547=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name547.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 813:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal548=null;
        ObjcParser.typedef_name_return typedef_name549 =null;


        Object string_literal548_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: 'enum' typedef_name
            {
            string_literal548=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum_simple5095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal548);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5097);
            typedef_name549=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name549.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal550=null;
        ObjcParser.typedef_name_return typedef_name551 =null;

        ObjcParser.struct_wrapper_return struct_wrapper552 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple553 =null;


        Object string_literal550_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==190) ) {
                int LA121_1 = input.LA(2);

                if ( (LA121_1==ID) ) {
                    int LA121_2 = input.LA(3);

                    if ( (LA121_2==197) && (synpred26_Objc())) {
                        alt121=1;
                    }
                    else if ( (LA121_2==ID||LA121_2==116||(LA121_2 >= 119 && LA121_2 <= 120)) ) {
                        alt121=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 121, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA121_1==197) && (synpred26_Objc())) {
                    alt121=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper
                    {
                    string_literal550=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct5127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal550);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:45: ( typedef_name )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==ID) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:45: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct5129);
                            typedef_name551=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name551.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct5132);
                    struct_wrapper552=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper552.getTree());

                    // AST REWRITE
                    // elements: struct_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:74: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:76: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:89: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5148);
                    type_declaration_struct_simple553=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple553.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal554=null;
        ObjcParser.typedef_name_return typedef_name555 =null;

        ObjcParser.struct_wrapper_return struct_wrapper556 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple557 =null;


        Object string_literal554_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:3: ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==193) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==ID) ) {
                    int LA123_2 = input.LA(3);

                    if ( (LA123_2==197) && (synpred27_Objc())) {
                        alt123=1;
                    }
                    else if ( (LA123_2==ID||LA123_2==116||LA123_2==119) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA123_1==197) && (synpred27_Objc())) {
                    alt123=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper
                    {
                    string_literal554=(Token)match(input,193,FOLLOW_193_in_type_declaration_union5172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal554);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:43: ( typedef_name )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==ID) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:43: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_union5174);
                            typedef_name555=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name555.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union5177);
                    struct_wrapper556=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper556.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 826:72: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:74: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:86: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5193);
                    type_declaration_union_simple557=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple557.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal558=null;
        ObjcParser.typedef_name_return typedef_name559 =null;

        ObjcParser.enum_wrapper_return enum_wrapper560 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple561 =null;


        Object string_literal558_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:3: ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==178) ) {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==ID) ) {
                    int LA125_2 = input.LA(3);

                    if ( (LA125_2==197) && (synpred28_Objc())) {
                        alt125=1;
                    }
                    else if ( (LA125_2==ID||LA125_2==116||LA125_2==119) ) {
                        alt125=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA125_1==197) && (synpred28_Objc())) {
                    alt125=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:5: ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper
                    {
                    string_literal558=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum5217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal558);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:41: ( typedef_name )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==ID) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:41: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum5219);
                            typedef_name559=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name559.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum5222);
                    enum_wrapper560=enum_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper560.getTree());

                    // AST REWRITE
                    // elements: typedef_name, enum_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 831:68: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:70: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:81: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5238);
                    type_declaration_enum_simple561=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple561.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal562=null;
        Token char_literal564=null;
        ObjcParser.enum_element_return enum_element563 =null;


        Object char_literal562_tree=null;
        Object char_literal564_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal562=(Token)match(input,197,FOLLOW_197_in_enum_wrapper5251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal562_tree = 
            (Object)adaptor.create(char_literal562)
            ;
            adaptor.addChild(root_0, char_literal562_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:9: ( enum_element )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==ID||LA126_0==MULTI_COMMENT_LIT||LA126_0==SINGLE_COMMENT_LIT) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5261);
            	    enum_element563=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element563.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            char_literal564=(Token)match(input,201,FOLLOW_201_in_enum_wrapper5268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal564_tree = 
            (Object)adaptor.create(char_literal564)
            ;
            adaptor.addChild(root_0, char_literal564_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal568=null;
        ObjcParser.name_return name565 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper566 =null;

        ObjcParser.element_value_return element_value567 =null;

        ObjcParser.comments_return comments569 =null;


        Object char_literal568_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ID) ) {
                alt129=1;
            }
            else if ( (LA129_0==MULTI_COMMENT_LIT||LA129_0==SINGLE_COMMENT_LIT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }
            switch (alt129) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element5283);
                    name565=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name565.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:10: ( op_assign_wrapper element_value )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==117||LA127_0==121||LA127_0==124||LA127_0==128||LA127_0==132||LA127_0==137||LA127_0==139||LA127_0==144||LA127_0==199) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5286);
                            op_assign_wrapper566=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper566.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5288);
                            element_value567=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value567.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:45: ( ',' )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==125) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:45: ','
                            {
                            char_literal568=(Token)match(input,125,FOLLOW_125_in_enum_element5292); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(char_literal568);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 842:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5313);
                    comments569=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments569.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct570 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5328);
            struct570=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct570.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 847:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:849:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal571=null;
        Token char_literal573=null;
        ObjcParser.struct_internal_return struct_internal572 =null;


        Object char_literal571_tree=null;
        Object char_literal573_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal571=(Token)match(input,197,FOLLOW_197_in_struct5346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal571_tree = 
            (Object)adaptor.create(char_literal571)
            ;
            adaptor.addChild(root_0, char_literal571_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:7: ( struct_internal )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==ID||LA130_0==MULTI_COMMENT_LIT||LA130_0==SINGLE_COMMENT_LIT||LA130_0==118||LA130_0==173||LA130_0==178||LA130_0==182||(LA130_0 >= 185 && LA130_0 <= 186)||LA130_0==188||LA130_0==190||(LA130_0 >= 193 && LA130_0 <= 195)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5355);
            	    struct_internal572=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal572.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);


            char_literal573=(Token)match(input,201,FOLLOW_201_in_struct5362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal573_tree = 
            (Object)adaptor.create(char_literal573)
            ;
            adaptor.addChild(root_0, char_literal573_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper574 =null;

        ObjcParser.comments_return comments575 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:3: ( field_declaration_wrapper | comments )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ID||LA131_0==118||LA131_0==173||LA131_0==178||LA131_0==182||(LA131_0 >= 185 && LA131_0 <= 186)||LA131_0==188||LA131_0==190||(LA131_0 >= 193 && LA131_0 <= 195)) ) {
                alt131=1;
            }
            else if ( (LA131_0==MULTI_COMMENT_LIT||LA131_0==SINGLE_COMMENT_LIT) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5376);
                    field_declaration_wrapper574=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper574.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5382);
                    comments575=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments575.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec576 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5397);
            type_dec576=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec576.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 861:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:1: type_dec : type_dec_internal ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal578=null;
        ObjcParser.type_dec_internal_return type_dec_internal577 =null;

        ObjcParser.array_size_return array_size579 =null;


        Object char_literal578_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:9: ( type_dec_internal ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:11: type_dec_internal ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5417);
            type_dec_internal577=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal577.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:29: ( '*' )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==120) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:29: '*'
            	    {
            	    char_literal578=(Token)match(input,120,FOLLOW_120_in_type_dec5419); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal578_tree = 
            	    (Object)adaptor.create(char_literal578)
            	    ;
            	    adaptor.addChild(root_0, char_literal578_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:34: ( array_size )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==166) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:35: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5423);
            	    array_size579=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size579.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID581=null;
        ObjcParser.knownTypes_return knownTypes580 =null;


        Object ID581_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:3: ( knownTypes | ID )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==182||(LA134_0 >= 185 && LA134_0 <= 186)||LA134_0==188) ) {
                alt134=1;
            }
            else if ( (LA134_0==ID) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5440);
                    knownTypes580=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes580.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID581=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID581_tree = 
                    (Object)adaptor.create(ID581)
                    ;
                    adaptor.addChild(root_0, ID581_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal582=null;
        Token string_literal583=null;
        Token string_literal584=null;
        Token string_literal585=null;
        Token string_literal586=null;
        Token string_literal587=null;

        Object string_literal582_tree=null;
        Object string_literal583_tree=null;
        Object string_literal584_tree=null;
        Object string_literal585_tree=null;
        Object string_literal586_tree=null;
        Object string_literal587_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt139=4;
            switch ( input.LA(1) ) {
            case 185:
                {
                alt139=1;
                }
                break;
            case 182:
                {
                alt139=2;
                }
                break;
            case 186:
                {
                alt139=3;
                }
                break;
            case 188:
                {
                alt139=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }

            switch (alt139) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal582=(Token)match(input,185,FOLLOW_185_in_knownTypes5462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal582_tree = 
                    (Object)adaptor.create(string_literal582)
                    ;
                    adaptor.addChild(root_0, string_literal582_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal583=(Token)match(input,182,FOLLOW_182_in_knownTypes5468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal583_tree = 
                    (Object)adaptor.create(string_literal583)
                    ;
                    adaptor.addChild(root_0, string_literal583_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: ( 'long' )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==186) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: 'long'
                    	    {
                    	    string_literal584=(Token)match(input,186,FOLLOW_186_in_knownTypes5474); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal584_tree = 
                    	    (Object)adaptor.create(string_literal584)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal584_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:13: ( 'int' )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==185) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:13: 'int'
                            {
                            string_literal585=(Token)match(input,185,FOLLOW_185_in_knownTypes5477); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal585_tree = 
                            (Object)adaptor.create(string_literal585)
                            ;
                            adaptor.addChild(root_0, string_literal585_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: ( 'short' )+
                    int cnt137=0;
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==188) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: 'short'
                    	    {
                    	    string_literal586=(Token)match(input,188,FOLLOW_188_in_knownTypes5484); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal586_tree = 
                    	    (Object)adaptor.create(string_literal586)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal586_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt137 >= 1 ) break loop137;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(137, input);
                                throw eee;
                        }
                        cnt137++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: ( 'int' )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==185) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: 'int'
                            {
                            string_literal587=(Token)match(input,185,FOLLOW_185_in_knownTypes5487); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal587_tree = 
                            (Object)adaptor.create(string_literal587)
                            ;
                            adaptor.addChild(root_0, string_literal587_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID588=null;
        ObjcParser.array_size_return array_size589 =null;

        ObjcParser.field_crap_return field_crap590 =null;


        Object ID588_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:5: ID ( array_size )* ( field_crap )?
            {
            ID588=(Token)match(input,ID,FOLLOW_ID_in_field_name5503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID588);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:8: ( array_size )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==166) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5505);
            	    array_size589=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size589.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:20: ( field_crap )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==133) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5509);
                    field_crap590=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap590.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal591=null;
        Token set592=null;
        Token char_literal593=null;

        Object char_literal591_tree=null;
        Object set592_tree=null;
        Object char_literal593_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal591=(Token)match(input,166,FOLLOW_166_in_array_size5537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal591_tree = 
            (Object)adaptor.create(char_literal591)
            ;
            adaptor.addChild(root_0, char_literal591_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:9: ( NUMBER_LITERAL | ID )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ID||LA142_0==NUMBER_LITERAL) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set592=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set592)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal593=(Token)match(input,168,FOLLOW_168_in_array_size5548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal593_tree = 
            (Object)adaptor.create(char_literal593)
            ;
            adaptor.addChild(root_0, char_literal593_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:885:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal594=null;
        Token NUMBER_LITERAL595=null;

        Object char_literal594_tree=null;
        Object NUMBER_LITERAL595_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal594=(Token)match(input,133,FOLLOW_133_in_field_crap5558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal594_tree = 
            (Object)adaptor.create(char_literal594)
            ;
            adaptor.addChild(root_0, char_literal594_tree);
            }

            NUMBER_LITERAL595=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL595_tree = 
            (Object)adaptor.create(NUMBER_LITERAL595)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL595_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper596 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants597 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5572);
            method_modifier_wrapper596=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper596.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5574);
            method_declaration_variants597=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants597.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier598 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5586);
            method_modifier598=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier598.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 892:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set599=null;

        Object set599_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set599=(Token)input.LT(1);

            if ( input.LA(1)==122||input.LA(1)==126 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set599)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common600 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5623);
            method_declaration_common600=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common600.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal601=null;
        Token char_literal603=null;
        Token char_literal606=null;
        ObjcParser.type_declaration_return type_declaration602 =null;

        ObjcParser.method_name_return method_name604 =null;

        ObjcParser.method_params_return method_params605 =null;


        Object char_literal601_tree=null;
        Object char_literal603_tree=null;
        Object char_literal606_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:6: '(' type_declaration ')' method_name
            {
            char_literal601=(Token)match(input,118,FOLLOW_118_in_method_declaration_common5636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal601_tree = 
            (Object)adaptor.create(char_literal601)
            ;
            adaptor.addChild(root_0, char_literal601_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5638);
            type_declaration602=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration602.getTree());

            char_literal603=(Token)match(input,119,FOLLOW_119_in_method_declaration_common5640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal603_tree = 
            (Object)adaptor.create(char_literal603)
            ;
            adaptor.addChild(root_0, char_literal603_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5642);
            method_name604=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name604.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:44: ( method_params )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ID||LA143_0==133) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5645);
                    method_params605=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params605.getTree());

                    }
                    break;

            }


            char_literal606=(Token)match(input,134,FOLLOW_134_in_method_declaration_common5648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal606_tree = 
            (Object)adaptor.create(char_literal606)
            ;
            adaptor.addChild(root_0, char_literal606_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal608=null;
        Token char_literal610=null;
        ObjcParser.method_modifier_return method_modifier607 =null;

        ObjcParser.type_declaration_return type_declaration609 =null;

        ObjcParser.method_name_return method_name611 =null;


        Object char_literal608_tree=null;
        Object char_literal610_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5660);
            method_modifier607=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier607.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:22: '(' type_declaration ')' method_name
            {
            char_literal608=(Token)match(input,118,FOLLOW_118_in_method_declaration_predicate5663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal608_tree = 
            (Object)adaptor.create(char_literal608)
            ;
            adaptor.addChild(root_0, char_literal608_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5665);
            type_declaration609=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration609.getTree());

            char_literal610=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate5667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal610_tree = 
            (Object)adaptor.create(char_literal610)
            ;
            adaptor.addChild(root_0, char_literal610_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5669);
            method_name611=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name611.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID612=null;

        Object ID612_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ID
            {
            ID612=(Token)match(input,ID,FOLLOW_ID_in_method_name5687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID612);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param613 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: ( method_param )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==ID||LA144_0==133) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5710);
            	    method_param613=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param613.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 912:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal615=null;
        Token char_literal616=null;
        Token char_literal618=null;
        ObjcParser.prefix_return prefix614 =null;

        ObjcParser.type_declaration_return type_declaration617 =null;

        ObjcParser.param_name_return param_name619 =null;


        Object char_literal615_tree=null;
        Object char_literal616_tree=null;
        Object char_literal618_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: ( prefix )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5730);
                    prefix614=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix614.getTree());

                    }
                    break;

            }


            char_literal615=(Token)match(input,133,FOLLOW_133_in_method_param5733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal615);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:17: ( '(' type_declaration ')' )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==118) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:18: '(' type_declaration ')'
                    {
                    char_literal616=(Token)match(input,118,FOLLOW_118_in_method_param5736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal616);


                    pushFollow(FOLLOW_type_declaration_in_method_param5738);
                    type_declaration617=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration617.getTree());

                    char_literal618=(Token)match(input,119,FOLLOW_119_in_method_param5740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal618);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5744);
            param_name619=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name619.getTree());

            // AST REWRITE
            // elements: 133, prefix, type_declaration, 119, param_name, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 915:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_133.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID620=null;

        Object ID620_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:5: ID
            {
            ID620=(Token)match(input,ID,FOLLOW_ID_in_param_name5777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID620);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 918:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID621=null;

        Object ID621_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:11: ID
            {
            ID621=(Token)match(input,ID,FOLLOW_ID_in_prefix5796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID621);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL623=null;
        Token DEFINE_LITERAL626=null;
        ObjcParser.define_as_function_return define_as_function622 =null;

        ObjcParser.name_return name624 =null;

        ObjcParser.element_value_return element_value625 =null;

        ObjcParser.name_return name627 =null;


        Object DEFINE_LITERAL623_tree=null;
        Object DEFINE_LITERAL626_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt147=3;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration5825);
                    define_as_function622=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function622.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL623=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL623);


                    pushFollow(FOLLOW_name_in_define_declaration5841);
                    name624=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name624.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration5843);
                    element_value625=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value625.getTree());

                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 925:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL626=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL626);


                    pushFollow(FOLLOW_name_in_define_declaration5861);
                    name627=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name627.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 926:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:929:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL628=null;
        Token char_literal630=null;
        Token char_literal631=null;
        Token char_literal633=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper629 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper632 =null;


        Object DEFINE_LITERAL628_tree=null;
        Object char_literal630_tree=null;
        Object char_literal631_tree=null;
        Object char_literal633_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL628=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function5885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL628);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function5887);
            classical_method_call_wrapper629=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper629.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==167) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal630=(Token)match(input,167,FOLLOW_167_in_define_as_function5890); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_167.add(char_literal630);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:56: ( '{' )?
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==197) ) {
            	        alt148=1;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:56: '{'
            	            {
            	            char_literal631=(Token)match(input,197,FOLLOW_197_in_define_as_function5892); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_197.add(char_literal631);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function5895);
            	    block_singleline_wrapper632=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper632.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:86: ( '}' )?
            	    int alt149=2;
            	    int LA149_0 = input.LA(1);

            	    if ( (LA149_0==201) ) {
            	        alt149=1;
            	    }
            	    switch (alt149) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:86: '}'
            	            {
            	            char_literal633=(Token)match(input,201,FOLLOW_201_in_define_as_function5897); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_201.add(char_literal633);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 930:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1283);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1294);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred4_Objc1296);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred5_Objc1309);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred5_Objc1311);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred6_Objc1552);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,134,FOLLOW_134_in_synpred6_Objc1554); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1571);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,184,FOLLOW_184_in_synpred7_Objc1573); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred8_Objc1590);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred8_Objc1592);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred9_Objc2178);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred9_Objc2180);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred10_Objc2765);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred11_Objc2778); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2780);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred11_Objc2782);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred11_Objc2784); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred11_Objc2786);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred12_Objc2823);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,118,FOLLOW_118_in_synpred12_Objc2825); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred13_Objc2885);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:30: ( access_wrapper name )*
        loop151:
        do {
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0 >= 129 && LA151_0 <= 130)) ) {
                alt151=1;
            }


            switch (alt151) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred13_Objc2888);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred13_Objc2890);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop151;
            }
        } while (true);


        match(input,118,FOLLOW_118_in_synpred13_Objc2894); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: ( '&' )?
        int alt152=2;
        int LA152_0 = input.LA(1);

        if ( (LA152_0==116) ) {
            alt152=1;
        }
        switch (alt152) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred14_Objc2943); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred14_Objc2946);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred14_Objc2948); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==116||input.LA(1)==120 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred15_Objc2984);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred16_Objc3079);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred17_Objc3368);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred18_Objc3502);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:6: '(' type_cast_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred19_Objc3515); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred19_Objc3517);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: ( '&' )?
        int alt153=2;
        int LA153_0 = input.LA(1);

        if ( (LA153_0==116) ) {
            alt153=1;
        }
        switch (alt153) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred20_Objc3576); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred20_Objc3579);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred20_Objc3581); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred21_Objc4012);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred22_Objc4786);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred23_Objc4797);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc4888);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred25_Objc4899);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:6: 'struct' ( typedef_name )? '{'
        {
        match(input,190,FOLLOW_190_in_synpred26_Objc5118); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:15: ( typedef_name )?
        int alt154=2;
        int LA154_0 = input.LA(1);

        if ( (LA154_0==ID) ) {
            alt154=1;
        }
        switch (alt154) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred26_Objc5120);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred26_Objc5123); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:6: 'union' ( typedef_name )? '{'
        {
        match(input,193,FOLLOW_193_in_synpred27_Objc5163); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: ( typedef_name )?
        int alt155=2;
        int LA155_0 = input.LA(1);

        if ( (LA155_0==ID) ) {
            alt155=1;
        }
        switch (alt155) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred27_Objc5165);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred27_Objc5168); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:6: 'enum' ( typedef_name )? '{'
        {
        match(input,178,FOLLOW_178_in_synpred28_Objc5208); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:13: ( typedef_name )?
        int alt156=2;
        int LA156_0 = input.LA(1);

        if ( (LA156_0==ID) ) {
            alt156=1;
        }
        switch (alt156) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred28_Objc5210);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred28_Objc5213); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred29_Objc5816); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred29_Objc5818);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,167,FOLLOW_167_in_synpred29_Objc5820); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5832); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred30_Objc5834);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred30_Objc5836);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // Delegated rules

    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA147 dfa147 = new DFA147(this);
    static final String DFA18_eotS =
        "\134\uffff";
    static final String DFA18_eofS =
        "\134\uffff";
    static final String DFA18_minS =
        "\3\57\37\uffff\1\57\2\uffff\1\13\22\uffff\1\165\4\uffff\1\161\4"+
        "\uffff\1\161\11\uffff\1\0\10\uffff\1\0\5\uffff\1\0";
    static final String DFA18_maxS =
        "\1\u00c5\1\u00c7\1\u00c3\37\uffff\1\57\2\uffff\1\u00ca\22\uffff"+
        "\1\u00c7\4\uffff\1\u00c8\4\uffff\1\u00c8\11\uffff\1\0\10\uffff\1"+
        "\0\5\uffff\1\0";
    static final String DFA18_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\5\uffff\14\3\1\uffff\4\3\1\uffff\4\3\1\uffff\7\3\1"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\1\uffff";
    static final String DFA18_specialS =
        "\1\0\1\1\1\2\42\uffff\1\3\22\uffff\1\4\4\uffff\1\5\4\uffff\1\6\11"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11}>";
    static final String[] DFA18_transitionS = {
            "\1\1\21\uffff\1\40\21\uffff\1\40\40\uffff\1\3\1\uffff\1\2\1"+
            "\uffff\1\4\15\uffff\1\32\31\uffff\1\17\1\uffff\1\21\1\20\2\uffff"+
            "\1\37\4\uffff\1\33\1\uffff\1\5\1\34\1\uffff\1\23\1\25\1\5\1"+
            "\uffff\1\30\1\35\1\5\1\24\1\uffff\2\5\1\27\1\5\1\22\1\5\1\26"+
            "\1\uffff\3\5\1\31\1\36",
            "\1\5\104\uffff\1\5\1\46\1\43\1\uffff\1\5\1\46\1\uffff\1\44"+
            "\1\46\2\uffff\1\44\1\46\2\42\1\uffff\1\46\4\uffff\1\46\1\uffff"+
            "\1\46\4\uffff\1\46\25\uffff\1\45\6\uffff\1\5\31\uffff\1\46",
            "\1\64\106\uffff\1\55\1\uffff\1\5\64\uffff\1\57\4\uffff\1\67"+
            "\3\uffff\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1\uffff\1\65\2"+
            "\uffff\1\66\1\60\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\70",
            "",
            "",
            "\1\103\5\uffff\1\101\35\uffff\1\75\24\uffff\1\102\23\uffff"+
            "\1\77\1\100\26\uffff\1\107\3\uffff\1\74\1\uffff\1\72\1\uffff"+
            "\1\76\2\uffff\1\111\2\uffff\1\71\1\111\37\uffff\1\73\6\uffff"+
            "\1\106\1\uffff\1\5\1\104\1\105\37\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\116\1\113\2\uffff\1\116\1\uffff\1\115\1\116\2\uffff\1\115"+
            "\1\116\2\114\1\uffff\1\116\4\uffff\1\116\1\uffff\1\116\4\uffff"+
            "\1\116\66\uffff\1\116",
            "",
            "",
            "",
            "",
            "\1\123\1\uffff\2\123\1\uffff\1\121\1\uffff\1\123\1\uffff\1"+
            "\123\1\122\2\uffff\1\123\1\122\1\uffff\2\120\1\123\3\uffff\2"+
            "\123\1\uffff\6\123\1\uffff\1\124\24\uffff\1\117\1\uffff\1\125"+
            "\1\123\34\uffff\1\123\1\uffff\1\123",
            "",
            "",
            "",
            "",
            "\1\131\1\uffff\2\131\1\uffff\1\127\1\uffff\1\131\1\uffff\1"+
            "\131\1\130\2\uffff\1\131\1\130\1\uffff\2\126\1\131\3\uffff\2"+
            "\131\1\uffff\6\131\1\uffff\1\132\26\uffff\1\133\1\131\34\uffff"+
            "\1\131\1\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "262:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_0==ID) ) {s = 1;}

                        else if ( (LA18_0==118) ) {s = 2;}

                        else if ( (LA18_0==116) && (synpred5_Objc())) {s = 3;}

                        else if ( (LA18_0==120) && (synpred5_Objc())) {s = 4;}

                        else if ( (LA18_0==173||LA18_0==178||LA18_0==182||(LA18_0 >= 185 && LA18_0 <= 186)||LA18_0==188||LA18_0==190||(LA18_0 >= 193 && LA18_0 <= 195)) ) {s = 5;}

                        else if ( (LA18_0==160) ) {s = 15;}

                        else if ( (LA18_0==163) ) {s = 16;}

                        else if ( (LA18_0==162) ) {s = 17;}

                        else if ( (LA18_0==189) ) {s = 18;}

                        else if ( (LA18_0==176) ) {s = 19;}

                        else if ( (LA18_0==183) ) {s = 20;}

                        else if ( (LA18_0==177) ) {s = 21;}

                        else if ( (LA18_0==191) ) {s = 22;}

                        else if ( (LA18_0==187) ) {s = 23;}

                        else if ( (LA18_0==180) ) {s = 24;}

                        else if ( (LA18_0==196) ) {s = 25;}

                        else if ( (LA18_0==134) ) {s = 26;}

                        else if ( (LA18_0==171) ) {s = 27;}

                        else if ( (LA18_0==174) ) {s = 28;}

                        else if ( (LA18_0==181) ) {s = 29;}

                        else if ( (LA18_0==197) ) {s = 30;}

                        else if ( (LA18_0==166) ) {s = 31;}

                        else if ( (LA18_0==MULTI_COMMENT_LIT||LA18_0==SINGLE_COMMENT_LIT) ) {s = 32;}

                         
                        input.seek(index18_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_1 >= 129 && LA18_1 <= 130)) ) {s = 34;}

                        else if ( (LA18_1==118) && (synpred3_Objc())) {s = 35;}

                        else if ( (LA18_1==123||LA18_1==127) && (synpred4_Objc())) {s = 36;}

                        else if ( (LA18_1==166) ) {s = 37;}

                        else if ( (LA18_1==117||LA18_1==121||LA18_1==124||LA18_1==128||LA18_1==132||LA18_1==137||LA18_1==139||LA18_1==144||LA18_1==199) && (synpred5_Objc())) {s = 38;}

                        else if ( (LA18_1==ID||LA18_1==116||LA18_1==120||LA18_1==173) ) {s = 5;}

                         
                        input.seek(index18_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_2==120) ) {s = 5;}

                        else if ( (LA18_2==182) && (synpred5_Objc())) {s = 44;}

                        else if ( (LA18_2==118) && (synpred5_Objc())) {s = 45;}

                        else if ( (LA18_2==195) && (synpred5_Objc())) {s = 46;}

                        else if ( (LA18_2==173) && (synpred5_Objc())) {s = 47;}

                        else if ( (LA18_2==194) && (synpred5_Objc())) {s = 48;}

                        else if ( (LA18_2==185) && (synpred5_Objc())) {s = 49;}

                        else if ( (LA18_2==186) && (synpred5_Objc())) {s = 50;}

                        else if ( (LA18_2==188) && (synpred5_Objc())) {s = 51;}

                        else if ( (LA18_2==ID) && (synpred5_Objc())) {s = 52;}

                        else if ( (LA18_2==190) && (synpred5_Objc())) {s = 53;}

                        else if ( (LA18_2==193) && (synpred5_Objc())) {s = 54;}

                        else if ( (LA18_2==178) && (synpred5_Objc())) {s = 55;}

                         
                        input.seek(index18_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_37==126) && (synpred5_Objc())) {s = 57;}

                        else if ( (LA18_37==118) && (synpred5_Objc())) {s = 58;}

                        else if ( (LA18_37==159) && (synpred5_Objc())) {s = 59;}

                        else if ( (LA18_37==116) && (synpred5_Objc())) {s = 60;}

                        else if ( (LA18_37==ID) ) {s = 61;}

                        else if ( (LA18_37==120) && (synpred5_Objc())) {s = 62;}

                        else if ( (LA18_37==STRING_LITERAL) && (synpred5_Objc())) {s = 63;}

                        else if ( (LA18_37==STRING_OBJC) && (synpred5_Objc())) {s = 64;}

                        else if ( (LA18_37==CHAR_LITERAL) && (synpred5_Objc())) {s = 65;}

                        else if ( (LA18_37==NUMBER_LITERAL) ) {s = 66;}

                        else if ( (LA18_37==BOOL_LITERAL) && (synpred5_Objc())) {s = 67;}

                        else if ( (LA18_37==169) && (synpred5_Objc())) {s = 68;}

                        else if ( (LA18_37==170) && (synpred5_Objc())) {s = 69;}

                        else if ( (LA18_37==166) && (synpred5_Objc())) {s = 70;}

                        else if ( (LA18_37==112) && (synpred5_Objc())) {s = 71;}

                        else if ( (LA18_37==202) && (synpred5_Objc())) {s = 72;}

                        else if ( (LA18_37==123||LA18_37==127) && (synpred5_Objc())) {s = 73;}

                        else if ( (LA18_37==168) ) {s = 5;}

                         
                        input.seek(index18_37);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_56==118) && (synpred3_Objc())) {s = 75;}

                        else if ( ((LA18_56 >= 129 && LA18_56 <= 130)) ) {s = 76;}

                        else if ( (LA18_56==123||LA18_56==127) && (synpred4_Objc())) {s = 77;}

                        else if ( (LA18_56==117||LA18_56==121||LA18_56==124||LA18_56==128||LA18_56==132||LA18_56==137||LA18_56==139||LA18_56==144||LA18_56==199) && (synpred5_Objc())) {s = 78;}

                         
                        input.seek(index18_56);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_61==166) && (synpred5_Objc())) {s = 79;}

                        else if ( ((LA18_61 >= 129 && LA18_61 <= 130)) && (synpred5_Objc())) {s = 80;}

                        else if ( (LA18_61==118) && (synpred5_Objc())) {s = 81;}

                        else if ( (LA18_61==123||LA18_61==127) && (synpred5_Objc())) {s = 82;}

                        else if ( (LA18_61==113||(LA18_61 >= 115 && LA18_61 <= 116)||LA18_61==120||LA18_61==122||LA18_61==126||LA18_61==131||(LA18_61 >= 135 && LA18_61 <= 136)||(LA18_61 >= 138 && LA18_61 <= 143)||LA18_61==169||LA18_61==198||LA18_61==200) && (synpred5_Objc())) {s = 83;}

                        else if ( (LA18_61==145) && (synpred5_Objc())) {s = 84;}

                        else if ( (LA18_61==168) ) {s = 85;}

                         
                        input.seek(index18_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_66 >= 129 && LA18_66 <= 130)) && (synpred5_Objc())) {s = 86;}

                        else if ( (LA18_66==118) && (synpred5_Objc())) {s = 87;}

                        else if ( (LA18_66==123||LA18_66==127) && (synpred5_Objc())) {s = 88;}

                        else if ( (LA18_66==113||(LA18_66 >= 115 && LA18_66 <= 116)||LA18_66==120||LA18_66==122||LA18_66==126||LA18_66==131||(LA18_66 >= 135 && LA18_66 <= 136)||(LA18_66 >= 138 && LA18_66 <= 143)||LA18_66==169||LA18_66==198||LA18_66==200) && (synpred5_Objc())) {s = 89;}

                        else if ( (LA18_66==145) && (synpred5_Objc())) {s = 90;}

                        else if ( (LA18_66==168) ) {s = 91;}

                         
                        input.seek(index18_66);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_76 = input.LA(1);

                         
                        int index18_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_Objc()) ) {s = 75;}

                        else if ( (synpred4_Objc()) ) {s = 77;}

                        else if ( (synpred5_Objc()) ) {s = 90;}

                         
                        input.seek(index18_76);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_85 = input.LA(1);

                         
                        int index18_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_85);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_91 = input.LA(1);

                         
                        int index18_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_91);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA22_eotS =
        "\104\uffff";
    static final String DFA22_eofS =
        "\104\uffff";
    static final String DFA22_minS =
        "\3\57\16\uffff\1\13\27\uffff\1\161\4\uffff\1\161\16\uffff\1\0\5"+
        "\uffff\1\0";
    static final String DFA22_maxS =
        "\1\u00c3\1\u00c7\1\u00c3\16\uffff\1\u00ca\27\uffff\1\u00c8\4\uffff"+
        "\1\u00c8\16\uffff\1\0\5\uffff\1\0";
    static final String DFA22_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\1\1\2\1\uffff\2\3\5\uffff\20\3\1\uffff"+
        "\4\3\1\uffff\7\3\1\uffff\6\3\1\uffff\5\3\1\uffff";
    static final String DFA22_specialS =
        "\1\0\1\1\1\2\16\uffff\1\3\27\uffff\1\4\4\uffff\1\5\16\uffff\1\6"+
        "\5\uffff\1\7}>";
    static final String[] DFA22_transitionS = {
            "\1\1\104\uffff\1\3\1\uffff\1\2\1\uffff\1\4\64\uffff\1\5\4\uffff"+
            "\1\5\3\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff\1\5\2\uffff"+
            "\3\5",
            "\1\5\104\uffff\1\5\1\23\2\uffff\1\5\1\23\2\uffff\1\23\3\uffff"+
            "\1\23\2\22\1\uffff\1\23\1\uffff\1\17\2\uffff\1\23\1\uffff\1"+
            "\23\4\uffff\1\23\25\uffff\1\21\6\uffff\1\5\12\uffff\1\20\16"+
            "\uffff\1\23",
            "\1\41\106\uffff\1\32\1\uffff\1\5\64\uffff\1\34\4\uffff\1\44"+
            "\3\uffff\1\31\2\uffff\1\36\1\37\1\uffff\1\40\1\uffff\1\42\2"+
            "\uffff\1\43\1\35\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\5\uffff\1\55\35\uffff\1\51\24\uffff\1\56\23\uffff\1\53"+
            "\1\54\26\uffff\1\63\3\uffff\1\50\1\uffff\1\46\1\uffff\1\52\2"+
            "\uffff\1\65\2\uffff\1\45\1\65\37\uffff\1\47\6\uffff\1\62\1\uffff"+
            "\1\5\1\60\1\61\37\uffff\1\64",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\73\1\uffff\2\73\1\uffff\1\71\1\uffff\1\73\1\uffff\1\73\1"+
            "\72\2\uffff\1\73\1\72\1\uffff\2\70\1\73\3\uffff\2\73\1\uffff"+
            "\6\73\1\uffff\1\74\24\uffff\1\67\1\uffff\1\75\1\73\34\uffff"+
            "\1\73\1\uffff\1\73",
            "",
            "",
            "",
            "",
            "\1\101\1\uffff\2\101\1\uffff\1\77\1\uffff\1\101\1\uffff\1\101"+
            "\1\100\2\uffff\1\101\1\100\1\uffff\2\76\1\101\3\uffff\2\101"+
            "\1\uffff\6\101\1\uffff\1\102\26\uffff\1\103\1\101\34\uffff\1"+
            "\101\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "307:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_0==ID) ) {s = 1;}

                        else if ( (LA22_0==118) ) {s = 2;}

                        else if ( (LA22_0==116) && (synpred8_Objc())) {s = 3;}

                        else if ( (LA22_0==120) && (synpred8_Objc())) {s = 4;}

                        else if ( (LA22_0==173||LA22_0==178||LA22_0==182||(LA22_0 >= 185 && LA22_0 <= 186)||LA22_0==188||LA22_0==190||(LA22_0 >= 193 && LA22_0 <= 195)) ) {s = 5;}

                         
                        input.seek(index22_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_1==134) && (synpred6_Objc())) {s = 15;}

                        else if ( (LA22_1==184) && (synpred7_Objc())) {s = 16;}

                        else if ( (LA22_1==166) ) {s = 17;}

                        else if ( ((LA22_1 >= 129 && LA22_1 <= 130)) && (synpred8_Objc())) {s = 18;}

                        else if ( (LA22_1==117||LA22_1==121||LA22_1==124||LA22_1==128||LA22_1==132||LA22_1==137||LA22_1==139||LA22_1==144||LA22_1==199) && (synpred8_Objc())) {s = 19;}

                        else if ( (LA22_1==ID||LA22_1==116||LA22_1==120||LA22_1==173) ) {s = 5;}

                         
                        input.seek(index22_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_2==120) ) {s = 5;}

                        else if ( (LA22_2==182) && (synpred8_Objc())) {s = 25;}

                        else if ( (LA22_2==118) && (synpred8_Objc())) {s = 26;}

                        else if ( (LA22_2==195) && (synpred8_Objc())) {s = 27;}

                        else if ( (LA22_2==173) && (synpred8_Objc())) {s = 28;}

                        else if ( (LA22_2==194) && (synpred8_Objc())) {s = 29;}

                        else if ( (LA22_2==185) && (synpred8_Objc())) {s = 30;}

                        else if ( (LA22_2==186) && (synpred8_Objc())) {s = 31;}

                        else if ( (LA22_2==188) && (synpred8_Objc())) {s = 32;}

                        else if ( (LA22_2==ID) && (synpred8_Objc())) {s = 33;}

                        else if ( (LA22_2==190) && (synpred8_Objc())) {s = 34;}

                        else if ( (LA22_2==193) && (synpred8_Objc())) {s = 35;}

                        else if ( (LA22_2==178) && (synpred8_Objc())) {s = 36;}

                         
                        input.seek(index22_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_17 = input.LA(1);

                         
                        int index22_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_17==126) && (synpred8_Objc())) {s = 37;}

                        else if ( (LA22_17==118) && (synpred8_Objc())) {s = 38;}

                        else if ( (LA22_17==159) && (synpred8_Objc())) {s = 39;}

                        else if ( (LA22_17==116) && (synpred8_Objc())) {s = 40;}

                        else if ( (LA22_17==ID) ) {s = 41;}

                        else if ( (LA22_17==120) && (synpred8_Objc())) {s = 42;}

                        else if ( (LA22_17==STRING_LITERAL) && (synpred8_Objc())) {s = 43;}

                        else if ( (LA22_17==STRING_OBJC) && (synpred8_Objc())) {s = 44;}

                        else if ( (LA22_17==CHAR_LITERAL) && (synpred8_Objc())) {s = 45;}

                        else if ( (LA22_17==NUMBER_LITERAL) ) {s = 46;}

                        else if ( (LA22_17==BOOL_LITERAL) && (synpred8_Objc())) {s = 47;}

                        else if ( (LA22_17==169) && (synpred8_Objc())) {s = 48;}

                        else if ( (LA22_17==170) && (synpred8_Objc())) {s = 49;}

                        else if ( (LA22_17==166) && (synpred8_Objc())) {s = 50;}

                        else if ( (LA22_17==112) && (synpred8_Objc())) {s = 51;}

                        else if ( (LA22_17==202) && (synpred8_Objc())) {s = 52;}

                        else if ( (LA22_17==123||LA22_17==127) && (synpred8_Objc())) {s = 53;}

                        else if ( (LA22_17==168) ) {s = 5;}

                         
                        input.seek(index22_17);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_41 = input.LA(1);

                         
                        int index22_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_41==166) && (synpred8_Objc())) {s = 55;}

                        else if ( ((LA22_41 >= 129 && LA22_41 <= 130)) && (synpred8_Objc())) {s = 56;}

                        else if ( (LA22_41==118) && (synpred8_Objc())) {s = 57;}

                        else if ( (LA22_41==123||LA22_41==127) && (synpred8_Objc())) {s = 58;}

                        else if ( (LA22_41==113||(LA22_41 >= 115 && LA22_41 <= 116)||LA22_41==120||LA22_41==122||LA22_41==126||LA22_41==131||(LA22_41 >= 135 && LA22_41 <= 136)||(LA22_41 >= 138 && LA22_41 <= 143)||LA22_41==169||LA22_41==198||LA22_41==200) && (synpred8_Objc())) {s = 59;}

                        else if ( (LA22_41==145) && (synpred8_Objc())) {s = 60;}

                        else if ( (LA22_41==168) ) {s = 61;}

                         
                        input.seek(index22_41);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_46 = input.LA(1);

                         
                        int index22_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA22_46 >= 129 && LA22_46 <= 130)) && (synpred8_Objc())) {s = 62;}

                        else if ( (LA22_46==118) && (synpred8_Objc())) {s = 63;}

                        else if ( (LA22_46==123||LA22_46==127) && (synpred8_Objc())) {s = 64;}

                        else if ( (LA22_46==113||(LA22_46 >= 115 && LA22_46 <= 116)||LA22_46==120||LA22_46==122||LA22_46==126||LA22_46==131||(LA22_46 >= 135 && LA22_46 <= 136)||(LA22_46 >= 138 && LA22_46 <= 143)||LA22_46==169||LA22_46==198||LA22_46==200) && (synpred8_Objc())) {s = 65;}

                        else if ( (LA22_46==145) && (synpred8_Objc())) {s = 66;}

                        else if ( (LA22_46==168) ) {s = 67;}

                         
                        input.seek(index22_46);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA22_61 = input.LA(1);

                         
                        int index22_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_61);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA22_67 = input.LA(1);

                         
                        int index22_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_67);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA50_eotS =
        "\u0130\uffff";
    static final String DFA50_eofS =
        "\110\uffff\1\2\u00e7\uffff";
    static final String DFA50_minS =
        "\2\13\15\uffff\1\13\6\uffff\1\161\22\uffff\1\57\1\164\1\13\3\57"+
        "\3\164\1\161\3\57\16\uffff\2\13\1\uffff\2\13\14\uffff\10\0\32\uffff"+
        "\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA50_maxS =
        "\1\u00aa\1\u00ca\15\uffff\1\u00ca\6\uffff\1\u00c8\22\uffff\1\u00c3"+
        "\1\u00ad\1\u00ca\2\u00c2\1\u00bc\1\u00ad\1\u00ba\1\u00bc\1\u00c8"+
        "\3\u00bc\16\uffff\2\u00ca\1\uffff\1\u00ca\1\u00c9\14\uffff\10\0"+
        "\32\uffff\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0"+
        "\5\uffff\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA50_acceptS =
        "\2\uffff\1\3\13\uffff\1\1\1\uffff\6\1\1\uffff\3\1\54\uffff\1\1\7"+
        "\uffff\7\1\141\uffff\1\1\1\uffff\1\1\20\uffff\1\1\20\uffff\1\1\21"+
        "\uffff\1\1\3\uffff\5\1\1\uffff\1\1\70\uffff\1\2";
    static final String DFA50_specialS =
        "\1\uffff\1\0\24\uffff\1\1\22\uffff\1\2\32\uffff\1\3\1\4\1\uffff"+
        "\1\5\1\6\14\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\32\uffff"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\5\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\uffff\1\111\1"+
        "\uffff\1\112\16\uffff\1\113\5\uffff\1\114\36\uffff\1\115\1\116\1"+
        "\117\5\uffff\1\120\1\uffff\1\121\1\122\67\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff"+
            "\1\2\1\uffff\1\1\1\uffff\1\2\46\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2",
            "\1\2\5\uffff\1\2\35\uffff\1\26\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\17\1\uffff\1\2\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\21\4\uffff\1\31\3\uffff\1\16\2\uffff\1\23\1\24\1\uffff\1\25"+
            "\1\uffff\1\27\2\uffff\1\30\1\22\1\20\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\62\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\53\1\uffff\1\51\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\55\4\uffff\1\65\3\uffff\1\52\2\uffff\1\57\1\60\1\uffff\1\61"+
            "\1\uffff\1\63\2\uffff\1\64\1\56\1\54\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\107\1\uffff\1\2\1\110\1\104\1\uffff\2\2"+
            "\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff\1\2"+
            "\24\uffff\1\105\2\uffff\1\2\3\uffff\1\106\30\uffff\1\2\1\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\125\175\uffff\1\117\10\uffff\1\122\2\uffff\1\121\1\123\1"+
            "\uffff\1\124\5\uffff\1\120\1\116",
            "\1\132\2\uffff\1\133\1\127\16\uffff\1\126\36\uffff\1\130\6"+
            "\uffff\1\131",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\134\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\2\4\uffff\1\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\3\2\6\uffff\1\2",
            "\1\175\175\uffff\1\167\10\uffff\1\172\2\uffff\1\171\1\173\1"+
            "\uffff\1\174\5\uffff\1\170",
            "\1\u0083\u0086\uffff\1\u0080\2\uffff\1\177\1\u0081\1\uffff"+
            "\1\u0082\5\uffff\1\176",
            "\1\u0088\u0086\uffff\1\u0085\2\uffff\1\u0084\1\u0086\1\uffff"+
            "\1\u0087",
            "\1\u008c\2\uffff\1\u008d\1\u0089\55\uffff\1\u008a\6\uffff\1"+
            "\u008b",
            "\1\u0092\2\uffff\1\u0093\1\u008f\55\uffff\1\u0090\6\uffff\1"+
            "\u0091\13\uffff\1\u008e\1\u0094",
            "\1\u0099\2\uffff\1\u009a\1\u0096\55\uffff\1\u0097\6\uffff\1"+
            "\u0098\13\uffff\1\u0095\2\uffff\1\u009b",
            "\1\2\1\uffff\1\2\1\u009f\1\uffff\1\2\1\u00a0\1\u009c\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\24\uffff\1\u009d\2\uffff\1\2\3\uffff\1\u009e\30\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u00aa\u0086\uffff\1\u00a7\2\uffff\1\u00a6\1\u00a8\1\uffff"+
            "\1\u00a9",
            "\1\u00af\u0086\uffff\1\u00ac\2\uffff\1\u00ab\1\u00ad\1\uffff"+
            "\1\u00ae",
            "\1\u00b4\u0086\uffff\1\u00b1\2\uffff\1\u00b0\1\u00b2\1\uffff"+
            "\1\u00b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\u00b7\1\uffff\1\2\1\u00b8\1\u00b9\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\u00b5\2\uffff\2\2\2"+
            "\uffff\1\u00b6\34\uffff\1\2",
            "\1\2\5\uffff\1\2\35\uffff\1\u00c8\24\uffff\1\u00ce\23\uffff"+
            "\2\2\26\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\1\u00c9\2"+
            "\2\37\uffff\1\2",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\u00da\1\2\2\uffff\1\2\2"+
            "\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\37\uffff\1\2",
            "\1\u00f4\5\uffff\1\u00f2\5\uffff\1\2\27\uffff\1\u00ee\21\uffff"+
            "\1\2\2\uffff\1\u00f3\16\uffff\1\2\4\uffff\1\u00f0\1\u00f1\27"+
            "\uffff\1\2\1\uffff\1\2\1\u00ed\1\uffff\1\u00f8\1\2\1\u00ef\1"+
            "\uffff\2\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\1"+
            "\uffff\10\2\4\uffff\1\2\1\uffff\1\u00ec\4\2\2\uffff\1\u00f7"+
            "\2\2\1\u00f5\1\u00f6\15\2\1\uffff\16\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "488:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA50_1 = input.LA(1);

                         
                        int index50_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_1==182) && (synpred10_Objc())) {s = 14;}

                        else if ( (LA50_1==118) ) {s = 15;}

                        else if ( (LA50_1==195) && (synpred10_Objc())) {s = 16;}

                        else if ( (LA50_1==173) && (synpred10_Objc())) {s = 17;}

                        else if ( (LA50_1==194) && (synpred10_Objc())) {s = 18;}

                        else if ( (LA50_1==185) && (synpred10_Objc())) {s = 19;}

                        else if ( (LA50_1==186) && (synpred10_Objc())) {s = 20;}

                        else if ( (LA50_1==188) && (synpred10_Objc())) {s = 21;}

                        else if ( (LA50_1==ID) ) {s = 22;}

                        else if ( (LA50_1==190) && (synpred10_Objc())) {s = 23;}

                        else if ( (LA50_1==193) && (synpred10_Objc())) {s = 24;}

                        else if ( (LA50_1==178) && (synpred10_Objc())) {s = 25;}

                        else if ( (LA50_1==BOOL_LITERAL||LA50_1==CHAR_LITERAL||LA50_1==NUMBER_LITERAL||(LA50_1 >= STRING_LITERAL && LA50_1 <= STRING_OBJC)||LA50_1==112||LA50_1==116||LA50_1==120||LA50_1==123||(LA50_1 >= 126 && LA50_1 <= 127)||LA50_1==159||LA50_1==166||(LA50_1 >= 169 && LA50_1 <= 170)||LA50_1==202) ) {s = 2;}

                         
                        input.seek(index50_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA50_22 = input.LA(1);

                         
                        int index50_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_22==120) ) {s = 68;}

                        else if ( (LA50_22==166) ) {s = 69;}

                        else if ( (LA50_22==173) && (synpred10_Objc())) {s = 70;}

                        else if ( (LA50_22==116) ) {s = 71;}

                        else if ( (LA50_22==119) ) {s = 72;}

                        else if ( (LA50_22==113||LA50_22==115||LA50_22==118||(LA50_22 >= 122 && LA50_22 <= 123)||(LA50_22 >= 126 && LA50_22 <= 127)||(LA50_22 >= 129 && LA50_22 <= 131)||(LA50_22 >= 135 && LA50_22 <= 136)||(LA50_22 >= 138 && LA50_22 <= 143)||LA50_22==145||LA50_22==169||LA50_22==198||LA50_22==200) ) {s = 2;}

                         
                        input.seek(index50_22);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA50_41 = input.LA(1);

                         
                        int index50_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_41==195) && (synpred10_Objc())) {s = 78;}

                        else if ( (LA50_41==173) && (synpred10_Objc())) {s = 79;}

                        else if ( (LA50_41==194) && (synpred10_Objc())) {s = 80;}

                        else if ( (LA50_41==185) && (synpred10_Objc())) {s = 81;}

                        else if ( (LA50_41==182) && (synpred10_Objc())) {s = 82;}

                        else if ( (LA50_41==186) && (synpred10_Objc())) {s = 83;}

                        else if ( (LA50_41==188) && (synpred10_Objc())) {s = 84;}

                        else if ( (LA50_41==ID) ) {s = 85;}

                         
                        input.seek(index50_41);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA50_68 = input.LA(1);

                         
                        int index50_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_68==166) ) {s = 181;}

                        else if ( (LA50_68==173) && (synpred10_Objc())) {s = 182;}

                        else if ( (LA50_68==116) ) {s = 183;}

                        else if ( (LA50_68==119) && (synpred10_Objc())) {s = 184;}

                        else if ( (LA50_68==120) ) {s = 185;}

                        else if ( (LA50_68==BOOL_LITERAL||LA50_68==CHAR_LITERAL||LA50_68==ID||LA50_68==NUMBER_LITERAL||(LA50_68 >= STRING_LITERAL && LA50_68 <= STRING_OBJC)||LA50_68==112||LA50_68==118||LA50_68==123||(LA50_68 >= 126 && LA50_68 <= 127)||LA50_68==159||(LA50_68 >= 169 && LA50_68 <= 170)||LA50_68==202) ) {s = 2;}

                         
                        input.seek(index50_68);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA50_69 = input.LA(1);

                         
                        int index50_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_69==ID) ) {s = 200;}

                        else if ( (LA50_69==168) && (synpred10_Objc())) {s = 201;}

                        else if ( (LA50_69==BOOL_LITERAL||LA50_69==CHAR_LITERAL||(LA50_69 >= STRING_LITERAL && LA50_69 <= STRING_OBJC)||LA50_69==112||LA50_69==116||LA50_69==118||LA50_69==120||LA50_69==123||(LA50_69 >= 126 && LA50_69 <= 127)||LA50_69==159||LA50_69==166||(LA50_69 >= 169 && LA50_69 <= 170)||LA50_69==202) ) {s = 2;}

                        else if ( (LA50_69==NUMBER_LITERAL) ) {s = 206;}

                         
                        input.seek(index50_69);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA50_71 = input.LA(1);

                         
                        int index50_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_71==119) && (synpred10_Objc())) {s = 218;}

                        else if ( (LA50_71==BOOL_LITERAL||LA50_71==CHAR_LITERAL||LA50_71==ID||LA50_71==NUMBER_LITERAL||(LA50_71 >= STRING_LITERAL && LA50_71 <= STRING_OBJC)||LA50_71==112||LA50_71==116||LA50_71==118||LA50_71==120||LA50_71==123||(LA50_71 >= 126 && LA50_71 <= 127)||LA50_71==159||LA50_71==166||(LA50_71 >= 169 && LA50_71 <= 170)||LA50_71==202) ) {s = 2;}

                         
                        input.seek(index50_71);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA50_72 = input.LA(1);

                         
                        int index50_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA50_72==159) && (synpred10_Objc())) {s = 236;}

                        else if ( (LA50_72==116) ) {s = 237;}

                        else if ( (LA50_72==ID) ) {s = 238;}

                        else if ( (LA50_72==120) ) {s = 239;}

                        else if ( (LA50_72==STRING_LITERAL) && (synpred10_Objc())) {s = 240;}

                        else if ( (LA50_72==STRING_OBJC) && (synpred10_Objc())) {s = 241;}

                        else if ( (LA50_72==CHAR_LITERAL) && (synpred10_Objc())) {s = 242;}

                        else if ( (LA50_72==NUMBER_LITERAL) && (synpred10_Objc())) {s = 243;}

                        else if ( (LA50_72==BOOL_LITERAL) && (synpred10_Objc())) {s = 244;}

                        else if ( (LA50_72==169) ) {s = 245;}

                        else if ( (LA50_72==170) && (synpred10_Objc())) {s = 246;}

                        else if ( (LA50_72==166) ) {s = 247;}

                        else if ( (LA50_72==118) ) {s = 248;}

                        else if ( (LA50_72==EOF||LA50_72==DEFINE_LITERAL||LA50_72==MULTI_COMMENT_LIT||LA50_72==SINGLE_COMMENT_LIT||LA50_72==113||LA50_72==115||LA50_72==119||(LA50_72 >= 122 && LA50_72 <= 123)||(LA50_72 >= 125 && LA50_72 <= 127)||(LA50_72 >= 129 && LA50_72 <= 131)||(LA50_72 >= 133 && LA50_72 <= 136)||(LA50_72 >= 138 && LA50_72 <= 143)||(LA50_72 >= 145 && LA50_72 <= 152)||LA50_72==157||(LA50_72 >= 160 && LA50_72 <= 163)||(LA50_72 >= 167 && LA50_72 <= 168)||(LA50_72 >= 171 && LA50_72 <= 183)||(LA50_72 >= 185 && LA50_72 <= 198)||(LA50_72 >= 200 && LA50_72 <= 201)) ) {s = 2;}

                         
                        input.seek(index50_72);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA50_85 = input.LA(1);

                         
                        int index50_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_85);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA50_86 = input.LA(1);

                         
                        int index50_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_86);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA50_87 = input.LA(1);

                         
                        int index50_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_87);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA50_88 = input.LA(1);

                         
                        int index50_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_88);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA50_89 = input.LA(1);

                         
                        int index50_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_89);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA50_90 = input.LA(1);

                         
                        int index50_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_90);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA50_91 = input.LA(1);

                         
                        int index50_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_91);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA50_92 = input.LA(1);

                         
                        int index50_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_92);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA50_119 = input.LA(1);

                         
                        int index50_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_119);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA50_120 = input.LA(1);

                         
                        int index50_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_120);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA50_121 = input.LA(1);

                         
                        int index50_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_121);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA50_122 = input.LA(1);

                         
                        int index50_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_122);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA50_123 = input.LA(1);

                         
                        int index50_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_123);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA50_124 = input.LA(1);

                         
                        int index50_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_124);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA50_125 = input.LA(1);

                         
                        int index50_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_125);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA50_126 = input.LA(1);

                         
                        int index50_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_126);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA50_127 = input.LA(1);

                         
                        int index50_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_127);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA50_128 = input.LA(1);

                         
                        int index50_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_128);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA50_129 = input.LA(1);

                         
                        int index50_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_129);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA50_130 = input.LA(1);

                         
                        int index50_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_130);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA50_131 = input.LA(1);

                         
                        int index50_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_131);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA50_132 = input.LA(1);

                         
                        int index50_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_132);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA50_133 = input.LA(1);

                         
                        int index50_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_133);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA50_134 = input.LA(1);

                         
                        int index50_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_134);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA50_135 = input.LA(1);

                         
                        int index50_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_135);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA50_136 = input.LA(1);

                         
                        int index50_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_136);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA50_137 = input.LA(1);

                         
                        int index50_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_137);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA50_138 = input.LA(1);

                         
                        int index50_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_138);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA50_139 = input.LA(1);

                         
                        int index50_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_139);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA50_140 = input.LA(1);

                         
                        int index50_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_140);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA50_141 = input.LA(1);

                         
                        int index50_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_141);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA50_142 = input.LA(1);

                         
                        int index50_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_142);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA50_143 = input.LA(1);

                         
                        int index50_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_143);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA50_144 = input.LA(1);

                         
                        int index50_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_144);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA50_145 = input.LA(1);

                         
                        int index50_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_145);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA50_146 = input.LA(1);

                         
                        int index50_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_146);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA50_147 = input.LA(1);

                         
                        int index50_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_147);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA50_148 = input.LA(1);

                         
                        int index50_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA50_149 = input.LA(1);

                         
                        int index50_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_149);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA50_150 = input.LA(1);

                         
                        int index50_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_150);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA50_151 = input.LA(1);

                         
                        int index50_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_151);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA50_152 = input.LA(1);

                         
                        int index50_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_152);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA50_153 = input.LA(1);

                         
                        int index50_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_153);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA50_154 = input.LA(1);

                         
                        int index50_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_154);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA50_155 = input.LA(1);

                         
                        int index50_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_155);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA50_156 = input.LA(1);

                         
                        int index50_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_156);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA50_157 = input.LA(1);

                         
                        int index50_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_157);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA50_158 = input.LA(1);

                         
                        int index50_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_158);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA50_159 = input.LA(1);

                         
                        int index50_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_159);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA50_160 = input.LA(1);

                         
                        int index50_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_160);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA50_166 = input.LA(1);

                         
                        int index50_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_166);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA50_167 = input.LA(1);

                         
                        int index50_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_167);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA50_168 = input.LA(1);

                         
                        int index50_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_168);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA50_169 = input.LA(1);

                         
                        int index50_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_169);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA50_170 = input.LA(1);

                         
                        int index50_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_170);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA50_171 = input.LA(1);

                         
                        int index50_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_171);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA50_172 = input.LA(1);

                         
                        int index50_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_172);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA50_173 = input.LA(1);

                         
                        int index50_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_173);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA50_174 = input.LA(1);

                         
                        int index50_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_174);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA50_175 = input.LA(1);

                         
                        int index50_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_175);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA50_176 = input.LA(1);

                         
                        int index50_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_176);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA50_177 = input.LA(1);

                         
                        int index50_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_177);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA50_178 = input.LA(1);

                         
                        int index50_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_178);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA50_179 = input.LA(1);

                         
                        int index50_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_179);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA50_180 = input.LA(1);

                         
                        int index50_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_180);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA50_181 = input.LA(1);

                         
                        int index50_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_181);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA50_183 = input.LA(1);

                         
                        int index50_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_183);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA50_185 = input.LA(1);

                         
                        int index50_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_185);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA50_200 = input.LA(1);

                         
                        int index50_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_200);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA50_206 = input.LA(1);

                         
                        int index50_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_206);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA50_237 = input.LA(1);

                         
                        int index50_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_237);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA50_238 = input.LA(1);

                         
                        int index50_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_238);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA50_239 = input.LA(1);

                         
                        int index50_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_239);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA50_245 = input.LA(1);

                         
                        int index50_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_245);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA50_247 = input.LA(1);

                         
                        int index50_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_247);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA50_248 = input.LA(1);

                         
                        int index50_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_248);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA49_eotS =
        "\74\uffff";
    static final String DFA49_eofS =
        "\1\1\73\uffff";
    static final String DFA49_minS =
        "\1\27\73\uffff";
    static final String DFA49_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA49_specialS =
        "\74\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()+ loopback of 490:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA52_eotS =
        "\u008b\uffff";
    static final String DFA52_eofS =
        "\1\uffff\1\3\u0089\uffff";
    static final String DFA52_minS =
        "\1\57\1\27\1\13\72\uffff\1\57\3\uffff\1\13\2\uffff\1\101\35\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA52_maxS =
        "\1\57\1\u00c9\1\u00ca\72\uffff\1\u00c3\3\uffff\1\u00ca\2\uffff\1"+
        "\u00c8\35\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA52_acceptS =
        "\3\uffff\1\2\72\uffff\3\1\1\uffff\2\1\1\uffff\14\1\37\uffff\16\1"+
        "\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1";
    static final String DFA52_specialS =
        "\2\uffff\1\0\76\uffff\1\1\2\uffff\1\2\35\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\16\uffff\1\21\3"+
        "\uffff\1\22\4\uffff\1\23\1\24\2\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\35\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\1\2\2\3\1\uffff\2\3\1\uffff\3\3\1\uffff\3"+
            "\3\1\uffff\4\3\1\uffff\6\3\1\uffff\10\3\4\uffff\1\3\2\uffff"+
            "\4\3\2\uffff\4\3\1\uffff\15\3\1\uffff\16\3\1\uffff\2\3",
            "\1\111\5\uffff\1\107\35\uffff\1\104\21\uffff\1\77\2\uffff\1"+
            "\110\16\uffff\1\76\4\uffff\1\105\1\106\26\uffff\1\115\3\uffff"+
            "\1\103\1\uffff\1\101\1\120\1\75\2\uffff\1\117\2\uffff\1\100"+
            "\1\117\37\uffff\1\102\6\uffff\1\114\2\uffff\1\112\1\113\2\uffff"+
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\3\3\6\uffff\1\116",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\175\uffff\1\3\10\uffff\1\3\2\uffff\2\3\1\uffff\1\3\5"+
            "\uffff\2\3",
            "",
            "",
            "",
            "\1\167\5\uffff\1\165\35\uffff\1\154\24\uffff\1\166\23\uffff"+
            "\1\163\1\164\26\uffff\1\173\3\uffff\1\162\1\uffff\1\145\1\uffff"+
            "\1\143\2\uffff\1\175\2\uffff\1\160\1\175\37\uffff\1\161\6\uffff"+
            "\1\172\2\uffff\1\170\1\171\2\uffff\1\147\4\uffff\1\157\3\uffff"+
            "\1\144\2\uffff\1\151\1\152\1\uffff\1\153\1\uffff\1\155\2\uffff"+
            "\1\156\1\150\1\146\6\uffff\1\174",
            "",
            "",
            "\1\u0085\21\uffff\1\u0084\35\uffff\1\u008a\1\uffff\1\u008a"+
            "\1\u0088\1\uffff\1\u0080\1\u0087\1\u0082\1\uffff\1\u008a\1\u0081"+
            "\1\uffff\1\u0086\1\u008a\1\u0081\1\uffff\2\177\1\u008a\3\uffff"+
            "\2\u008a\1\uffff\6\u008a\1\uffff\1\u0083\24\uffff\1\176\2\uffff"+
            "\1\u008a\3\uffff\1\3\30\uffff\1\u008a\1\uffff\1\u008a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "494:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_2 = input.LA(1);

                         
                        int index52_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA52_2==120) ) {s = 61;}

                        else if ( (LA52_2==SINGLE_COMMENT_LIT) && (synpred12_Objc())) {s = 62;}

                        else if ( (LA52_2==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 63;}

                        else if ( (LA52_2==126) && (synpred12_Objc())) {s = 64;}

                        else if ( (LA52_2==118) ) {s = 65;}

                        else if ( (LA52_2==159) && (synpred12_Objc())) {s = 66;}

                        else if ( (LA52_2==116) && (synpred12_Objc())) {s = 67;}

                        else if ( (LA52_2==ID) ) {s = 68;}

                        else if ( (LA52_2==STRING_LITERAL) && (synpred12_Objc())) {s = 69;}

                        else if ( (LA52_2==STRING_OBJC) && (synpred12_Objc())) {s = 70;}

                        else if ( (LA52_2==CHAR_LITERAL) && (synpred12_Objc())) {s = 71;}

                        else if ( (LA52_2==NUMBER_LITERAL) && (synpred12_Objc())) {s = 72;}

                        else if ( (LA52_2==BOOL_LITERAL) && (synpred12_Objc())) {s = 73;}

                        else if ( (LA52_2==169) && (synpred12_Objc())) {s = 74;}

                        else if ( (LA52_2==170) && (synpred12_Objc())) {s = 75;}

                        else if ( (LA52_2==166) && (synpred12_Objc())) {s = 76;}

                        else if ( (LA52_2==112) && (synpred12_Objc())) {s = 77;}

                        else if ( (LA52_2==202) && (synpred12_Objc())) {s = 78;}

                        else if ( (LA52_2==123||LA52_2==127) && (synpred12_Objc())) {s = 79;}

                        else if ( (LA52_2==119) && (synpred12_Objc())) {s = 80;}

                        else if ( (LA52_2==173||LA52_2==178||LA52_2==182||(LA52_2 >= 185 && LA52_2 <= 186)||LA52_2==188||LA52_2==190||(LA52_2 >= 193 && LA52_2 <= 195)) ) {s = 3;}

                         
                        input.seek(index52_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_65 = input.LA(1);

                         
                        int index52_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA52_65==120) ) {s = 99;}

                        else if ( (LA52_65==182) ) {s = 100;}

                        else if ( (LA52_65==118) ) {s = 101;}

                        else if ( (LA52_65==195) ) {s = 102;}

                        else if ( (LA52_65==173) ) {s = 103;}

                        else if ( (LA52_65==194) ) {s = 104;}

                        else if ( (LA52_65==185) ) {s = 105;}

                        else if ( (LA52_65==186) ) {s = 106;}

                        else if ( (LA52_65==188) ) {s = 107;}

                        else if ( (LA52_65==ID) ) {s = 108;}

                        else if ( (LA52_65==190) ) {s = 109;}

                        else if ( (LA52_65==193) ) {s = 110;}

                        else if ( (LA52_65==178) ) {s = 111;}

                        else if ( (LA52_65==126) && (synpred12_Objc())) {s = 112;}

                        else if ( (LA52_65==159) && (synpred12_Objc())) {s = 113;}

                        else if ( (LA52_65==116) && (synpred12_Objc())) {s = 114;}

                        else if ( (LA52_65==STRING_LITERAL) && (synpred12_Objc())) {s = 115;}

                        else if ( (LA52_65==STRING_OBJC) && (synpred12_Objc())) {s = 116;}

                        else if ( (LA52_65==CHAR_LITERAL) && (synpred12_Objc())) {s = 117;}

                        else if ( (LA52_65==NUMBER_LITERAL) && (synpred12_Objc())) {s = 118;}

                        else if ( (LA52_65==BOOL_LITERAL) && (synpred12_Objc())) {s = 119;}

                        else if ( (LA52_65==169) && (synpred12_Objc())) {s = 120;}

                        else if ( (LA52_65==170) && (synpred12_Objc())) {s = 121;}

                        else if ( (LA52_65==166) && (synpred12_Objc())) {s = 122;}

                        else if ( (LA52_65==112) && (synpred12_Objc())) {s = 123;}

                        else if ( (LA52_65==202) && (synpred12_Objc())) {s = 124;}

                        else if ( (LA52_65==123||LA52_65==127) && (synpred12_Objc())) {s = 125;}

                         
                        input.seek(index52_65);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_68 = input.LA(1);

                         
                        int index52_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA52_68==166) ) {s = 126;}

                        else if ( ((LA52_68 >= 129 && LA52_68 <= 130)) && (synpred12_Objc())) {s = 127;}

                        else if ( (LA52_68==118) && (synpred12_Objc())) {s = 128;}

                        else if ( (LA52_68==123||LA52_68==127) && (synpred12_Objc())) {s = 129;}

                        else if ( (LA52_68==120) ) {s = 130;}

                        else if ( (LA52_68==145) && (synpred12_Objc())) {s = 131;}

                        else if ( (LA52_68==SINGLE_COMMENT_LIT) && (synpred12_Objc())) {s = 132;}

                        else if ( (LA52_68==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 133;}

                        else if ( (LA52_68==125) && (synpred12_Objc())) {s = 134;}

                        else if ( (LA52_68==119) ) {s = 135;}

                        else if ( (LA52_68==116) ) {s = 136;}

                        else if ( (LA52_68==173) ) {s = 3;}

                        else if ( (LA52_68==113||LA52_68==115||LA52_68==122||LA52_68==126||LA52_68==131||(LA52_68 >= 135 && LA52_68 <= 136)||(LA52_68 >= 138 && LA52_68 <= 143)||LA52_68==169||LA52_68==198||LA52_68==200) && (synpred12_Objc())) {s = 138;}

                         
                        input.seek(index52_68);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_98 = input.LA(1);

                         
                        int index52_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_98);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_99 = input.LA(1);

                         
                        int index52_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_99);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_100 = input.LA(1);

                         
                        int index52_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_100);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_101 = input.LA(1);

                         
                        int index52_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_101);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_102 = input.LA(1);

                         
                        int index52_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_102);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_103 = input.LA(1);

                         
                        int index52_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_103);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_104 = input.LA(1);

                         
                        int index52_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_104);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_105 = input.LA(1);

                         
                        int index52_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_105);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA52_106 = input.LA(1);

                         
                        int index52_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_106);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA52_107 = input.LA(1);

                         
                        int index52_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_107);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA52_108 = input.LA(1);

                         
                        int index52_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_108);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA52_109 = input.LA(1);

                         
                        int index52_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_109);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA52_110 = input.LA(1);

                         
                        int index52_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_110);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA52_111 = input.LA(1);

                         
                        int index52_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_111);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA52_126 = input.LA(1);

                         
                        int index52_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_126);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA52_130 = input.LA(1);

                         
                        int index52_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_130);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA52_135 = input.LA(1);

                         
                        int index52_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_135);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA52_136 = input.LA(1);

                         
                        int index52_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index52_136);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA58_eotS =
        "\u0620\uffff";
    static final String DFA58_eofS =
        "\3\uffff\1\12\1\uffff\5\12\4\uffff\1\12\73\uffff\1\12\u0173\uffff"+
        "\1\12\131\uffff\1\12\36\uffff\1\12\36\uffff\1\12\36\uffff\1\12\36"+
        "\uffff\1\12\u038b\uffff";
    static final String DFA58_minS =
        "\1\13\1\uffff\1\57\1\27\1\57\5\27\4\uffff\1\27\1\13\1\57\1\13\70"+
        "\uffff\1\27\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\57\1\13\71\uffff"+
        "\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\13\1\57\1\13\70\uffff\2"+
        "\13\1\166\10\57\1\u00c5\1\57\4\13\1\27\1\57\3\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\57\1\13\71\uffff\1\27\1\57\3\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\27\1\57\3\uffff\1\13\2\uffff\1\101\26\uffff\1"+
        "\27\1\57\3\uffff\1\13\2\uffff\1\101\26\uffff\1\27\1\57\3\uffff\1"+
        "\13\2\uffff\1\101\26\uffff\1\27\1\57\3\uffff\1\13\2\uffff\1\101"+
        "\26\uffff\23\0\3\uffff\1\0\2\uffff\1\0\26\uffff\61\0\1\uffff\7\0"+
        "\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\110\0\100"+
        "\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\3\uffff"+
        "\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff";
    static final String DFA58_maxS =
        "\1\u00aa\1\uffff\1\57\1\u00c9\1\57\5\u00c9\4\uffff\1\u00c9\1\u00ca"+
        "\1\57\1\u00ca\70\uffff\1\u00c9\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\u00ca\1\57\1\u00ca\70\uffff\1\u00aa\1\u00ca\1\166\1"+
        "\57\1\u00c8\1\57\5\u00c8\1\u00c5\1\u00c3\1\u00ca\3\u00aa\1\u00c9"+
        "\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\57\1\u00ca\71"+
        "\uffff\1\u00c9\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff"+
        "\1\u00c9\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9"+
        "\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3"+
        "\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3\3\uffff"+
        "\1\u00ca\2\uffff\1\u00c8\26\uffff\23\0\3\uffff\1\0\2\uffff\1\0\26"+
        "\uffff\61\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff"+
        "\6\0\1\uffff\110\0\100\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff"+
        "\2\0\2\uffff\2\0\3\uffff\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\10\uffff\1\3\u01b5\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\107\uffff\3\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2"+
        "\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3"+
        "\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\35\uffff\3\2\1\uffff\2\2\1\uffff\14\2\u00f6\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\132\uffff\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff"+
        "\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff"+
        "\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff"+
        "\1\2";
    static final String DFA58_specialS =
        "\21\uffff\1\0\72\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1"+
        "\4\72\uffff\1\5\73\uffff\1\6\116\uffff\1\7\2\uffff\1\10\27\uffff"+
        "\1\11\76\uffff\1\12\2\uffff\1\13\33\uffff\1\14\2\uffff\1\15\33\uffff"+
        "\1\16\2\uffff\1\17\33\uffff\1\20\2\uffff\1\21\33\uffff\1\22\2\uffff"+
        "\1\23\26\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\3\uffff\1\47\2\uffff"+
        "\1\50\26\uffff\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\uffff\1\132\1\133\1\134\1\135\1\136\1"+
        "\137\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145\1\146\1\uffff\1"+
        "\147\1\150\1\151\1\152\1\153\1\154\1\uffff\1\155\1\156\1\157\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\164\1\165\1\166\1\167\1\170\1\uffff"+
        "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082"+
        "\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092"+
        "\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a"+
        "\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa"+
        "\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba"+
        "\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\100\uffff\1\u00c1"+
        "\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\16\uffff\1\u00cf\3\uffff"+
        "\1\u00d0\4\uffff\1\u00d1\1\u00d2\2\uffff\1\u00d3\1\u00d4\3\uffff"+
        "\1\u00d5\2\uffff\1\u00d6\26\uffff\1\u00d7\1\u00d8\100\uffff\1\u00d9"+
        "\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1"+
        "\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\16\uffff\1\u00e7\3\uffff"+
        "\1\u00e8\4\uffff\1\u00e9\1\u00ea\2\uffff\1\u00eb\1\u00ec\100\uffff"+
        "\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4"+
        "\1\u00f5\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\16\uffff\1\u00fb"+
        "\3\uffff\1\u00fc\4\uffff\1\u00fd\1\u00fe\2\uffff\1\u00ff\1\u0100"+
        "\100\uffff\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
        "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\16\uffff"+
        "\1\u010f\3\uffff\1\u0110\4\uffff\1\u0111\1\u0112\2\uffff\1\u0113"+
        "\1\u0114\100\uffff\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a"+
        "\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122"+
        "\16\uffff\1\u0123\3\uffff\1\u0124\4\uffff\1\u0125\1\u0126\2\uffff"+
        "\1\u0127\1\u0128\100\uffff\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\16\uffff\1\u0137\3\uffff\1\u0138\4\uffff\1\u0139\1\u013a"+
        "\2\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\11\5\uffff\1\7\35\uffff\1\3\24\uffff\1\10\23\uffff\1\5\1"+
            "\6\32\uffff\1\2\1\uffff\1\12\1\uffff\1\4\46\uffff\1\1\6\uffff"+
            "\1\12\2\uffff\2\12",
            "",
            "\1\16",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\21\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\20\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12\4"+
            "\uffff\1\12\2\uffff\4\12\2\uffff\1\17\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\112",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\114\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\113\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12"+
            "\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0087\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0086\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00c2\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00c1\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00fd\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00fc\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0138\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0137\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0174\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0173\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\1\u0172\3\12\1\uffff\15"+
            "\12\1\uffff\16\12\1\uffff\2\12",
            "\1\u01b7\5\uffff\1\u01b5\35\uffff\1\u01b1\24\uffff\1\u01b6"+
            "\23\uffff\1\u01b3\1\u01b4\26\uffff\1\u01bb\3\uffff\1\u01b0\1"+
            "\uffff\1\u01ae\1\uffff\1\u01b2\2\uffff\1\u01bd\2\uffff\1\u01ad"+
            "\1\u01bd\37\uffff\1\u01af\6\uffff\1\u01ba\2\uffff\1\u01b8\1"+
            "\u01b9\37\uffff\1\u01bc",
            "\1\u01be",
            "\1\u01cb\5\uffff\1\u01c9\35\uffff\1\u01c6\21\uffff\1\u01c1"+
            "\2\uffff\1\u01ca\16\uffff\1\u01c0\4\uffff\1\u01c7\1\u01c8\26"+
            "\uffff\1\u01cf\3\uffff\1\u01c5\1\uffff\1\u01c3\1\u01d2\1\u01bf"+
            "\2\uffff\1\u01d1\2\uffff\1\u01c2\1\u01d1\37\uffff\1\u01c4\6"+
            "\uffff\1\u01ce\2\uffff\1\u01cc\1\u01cd\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u01d0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u01de\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u01dd\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0218",
            "\1\u0225\5\uffff\1\u0223\35\uffff\1\u0220\21\uffff\1\u021b"+
            "\2\uffff\1\u0224\16\uffff\1\u021a\4\uffff\1\u0221\1\u0222\26"+
            "\uffff\1\u0229\3\uffff\1\u021f\1\uffff\1\u021d\1\u022c\1\u0219"+
            "\2\uffff\1\u022b\2\uffff\1\u021c\1\u022b\37\uffff\1\u021e\6"+
            "\uffff\1\u0228\2\uffff\1\u0226\1\u0227\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u022a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0237",
            "\1\u0244\5\uffff\1\u0242\35\uffff\1\u023f\21\uffff\1\u023a"+
            "\2\uffff\1\u0243\16\uffff\1\u0239\4\uffff\1\u0240\1\u0241\26"+
            "\uffff\1\u0248\3\uffff\1\u023e\1\uffff\1\u023c\1\u024b\1\u0238"+
            "\2\uffff\1\u024a\2\uffff\1\u023b\1\u024a\37\uffff\1\u023d\6"+
            "\uffff\1\u0247\2\uffff\1\u0245\1\u0246\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0249",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0256",
            "\1\u0263\5\uffff\1\u0261\35\uffff\1\u025e\21\uffff\1\u0259"+
            "\2\uffff\1\u0262\16\uffff\1\u0258\4\uffff\1\u025f\1\u0260\26"+
            "\uffff\1\u0267\3\uffff\1\u025d\1\uffff\1\u025b\1\u026a\1\u0257"+
            "\2\uffff\1\u0269\2\uffff\1\u025a\1\u0269\37\uffff\1\u025c\6"+
            "\uffff\1\u0266\2\uffff\1\u0264\1\u0265\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0268",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0275",
            "\1\u0282\5\uffff\1\u0280\35\uffff\1\u027d\21\uffff\1\u0278"+
            "\2\uffff\1\u0281\16\uffff\1\u0277\4\uffff\1\u027e\1\u027f\26"+
            "\uffff\1\u0286\3\uffff\1\u027c\1\uffff\1\u027a\1\u0289\1\u0276"+
            "\2\uffff\1\u0288\2\uffff\1\u0279\1\u0288\37\uffff\1\u027b\6"+
            "\uffff\1\u0285\2\uffff\1\u0283\1\u0284\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0287",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0294",
            "\1\u02a1\5\uffff\1\u029f\35\uffff\1\u029c\21\uffff\1\u0297"+
            "\2\uffff\1\u02a0\16\uffff\1\u0296\4\uffff\1\u029d\1\u029e\26"+
            "\uffff\1\u02a5\3\uffff\1\u029b\1\uffff\1\u0299\1\u02a8\1\u0295"+
            "\2\uffff\1\u02a7\2\uffff\1\u0298\1\u02a7\37\uffff\1\u029a\6"+
            "\uffff\1\u02a4\2\uffff\1\u02a2\1\u02a3\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u02a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02bd\5\uffff\1\u02bb\35\uffff\1\u02b7\24\uffff\1\u02bc"+
            "\23\uffff\1\u02b9\1\u02ba\26\uffff\1\u02c1\3\uffff\1\u02b6\1"+
            "\uffff\1\u02b4\1\uffff\1\u02b8\2\uffff\1\u02c3\2\uffff\1\u02b3"+
            "\1\u02c3\37\uffff\1\u02b5\6\uffff\1\u02c0\2\uffff\1\u02be\1"+
            "\u02bf\37\uffff\1\u02c2",
            "\1\u02c4",
            "\1\u02d1\5\uffff\1\u02cf\35\uffff\1\u02cc\21\uffff\1\u02c7"+
            "\2\uffff\1\u02d0\16\uffff\1\u02c6\4\uffff\1\u02cd\1\u02ce\26"+
            "\uffff\1\u02d5\3\uffff\1\u02cb\1\uffff\1\u02c9\1\u02d8\1\u02c5"+
            "\2\uffff\1\u02d7\2\uffff\1\u02c8\1\u02d7\37\uffff\1\u02ca\6"+
            "\uffff\1\u02d4\2\uffff\1\u02d2\1\u02d3\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u02d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02ec\5\uffff\1\u02ea\35\uffff\1\u02e6\24\uffff\1\u02eb"+
            "\23\uffff\1\u02e8\1\u02e9\32\uffff\1\u02e5\1\uffff\1\u02e3\1"+
            "\uffff\1\u02e7\46\uffff\1\u02e4\6\uffff\1\u02ef\2\uffff\1\u02ed"+
            "\1\u02ee",
            "\1\u0304\5\uffff\1\u0302\35\uffff\1\u02f8\24\uffff\1\u0303"+
            "\23\uffff\1\u0300\1\u0301\26\uffff\1\u0308\3\uffff\1\u02fe\1"+
            "\uffff\1\u02f1\1\uffff\1\u02ff\2\uffff\1\u030a\2\uffff\1\u02fc"+
            "\1\u030a\37\uffff\1\u02fd\6\uffff\1\u0307\2\uffff\1\u0305\1"+
            "\u0306\2\uffff\1\u02f3\4\uffff\1\u02fb\3\uffff\1\u02f0\2\uffff"+
            "\1\u02f5\1\u02f6\1\uffff\1\u02f7\1\uffff\1\u02f9\2\uffff\1\u02fa"+
            "\1\u02f4\1\u02f2\6\uffff\1\u0309",
            "\1\u030b",
            "\1\u030c",
            "\1\12\101\uffff\1\u0311\1\uffff\2\u0311\1\uffff\1\u030f\1\uffff"+
            "\1\u0311\1\uffff\1\u0311\1\u0310\2\uffff\1\u0311\1\u0310\1\uffff"+
            "\2\u030e\1\u0311\3\uffff\2\u0311\1\uffff\6\u0311\1\uffff\1\u0312"+
            "\24\uffff\1\u030d\1\uffff\1\u0313\1\u0311\34\uffff\1\u0311\1"+
            "\uffff\1\u0311",
            "\1\u0315",
            "\1\12\101\uffff\1\u0319\1\uffff\2\u0319\1\uffff\1\u0317\1\uffff"+
            "\1\u0319\1\uffff\1\u0319\1\u0318\2\uffff\1\u0319\1\u0318\1\uffff"+
            "\2\u0316\1\u0319\3\uffff\2\u0319\1\uffff\6\u0319\1\uffff\1\u031a"+
            "\26\uffff\1\u031b\1\u0319\34\uffff\1\u0319\1\uffff\1\u0319",
            "\1\12\101\uffff\1\u0320\1\uffff\2\u0320\1\uffff\1\u031e\1\uffff"+
            "\1\u0320\1\uffff\1\u0320\1\u031f\2\uffff\1\u0320\1\u031f\1\uffff"+
            "\2\u031d\1\u0320\3\uffff\2\u0320\1\uffff\6\u0320\1\uffff\1\u0321"+
            "\26\uffff\1\u0322\1\u0320\34\uffff\1\u0320\1\uffff\1\u0320",
            "\1\12\101\uffff\1\u0327\1\uffff\2\u0327\1\uffff\1\u0325\1\uffff"+
            "\1\u0327\1\uffff\1\u0327\1\u0326\2\uffff\1\u0327\1\u0326\1\uffff"+
            "\2\u0324\1\u0327\3\uffff\2\u0327\1\uffff\6\u0327\1\uffff\1\u0328"+
            "\26\uffff\1\u0329\1\u0327\34\uffff\1\u0327\1\uffff\1\u0327",
            "\1\12\101\uffff\1\u032e\1\uffff\2\u032e\1\uffff\1\u032c\1\uffff"+
            "\1\u032e\1\uffff\1\u032e\1\u032d\2\uffff\1\u032e\1\u032d\1\uffff"+
            "\2\u032b\1\u032e\3\uffff\2\u032e\1\uffff\6\u032e\1\uffff\1\u032f"+
            "\26\uffff\1\u0330\1\u032e\34\uffff\1\u032e\1\uffff\1\u032e",
            "\1\12\101\uffff\1\u0335\1\uffff\2\u0335\1\uffff\1\u0333\1\uffff"+
            "\1\u0335\1\uffff\1\u0335\1\u0334\2\uffff\1\u0335\1\u0334\1\uffff"+
            "\2\u0332\1\u0335\3\uffff\2\u0335\1\uffff\6\u0335\1\uffff\1\u0336"+
            "\26\uffff\1\u0337\1\u0335\34\uffff\1\u0335\1\uffff\1\u0335",
            "\1\u0339",
            "\1\u0342\106\uffff\1\u033b\1\u0346\65\uffff\1\u033d\4\uffff"+
            "\1\u0345\3\uffff\1\u033a\2\uffff\1\u033f\1\u0340\1\uffff\1\u0341"+
            "\1\uffff\1\u0343\2\uffff\1\u0344\1\u033e\1\u033c",
            "\1\u0351\5\uffff\1\u034f\35\uffff\1\u034b\24\uffff\1\u0350"+
            "\23\uffff\1\u034d\1\u034e\26\uffff\1\u0355\3\uffff\1\u034a\1"+
            "\uffff\1\u0348\1\uffff\1\u034c\2\uffff\1\u0357\2\uffff\1\u0347"+
            "\1\u0357\37\uffff\1\u0349\6\uffff\1\u0354\2\uffff\1\u0352\1"+
            "\u0353\37\uffff\1\u0356",
            "\1\u0361\5\uffff\1\u035f\35\uffff\1\u035b\24\uffff\1\u0360"+
            "\23\uffff\1\u035d\1\u035e\32\uffff\1\u035a\1\uffff\1\u0358\1"+
            "\uffff\1\u035c\46\uffff\1\u0359\6\uffff\1\u0364\2\uffff\1\u0362"+
            "\1\u0363",
            "\1\u036e\5\uffff\1\u036c\35\uffff\1\u0368\24\uffff\1\u036d"+
            "\23\uffff\1\u036a\1\u036b\32\uffff\1\u0367\1\uffff\1\u0365\1"+
            "\uffff\1\u0369\46\uffff\1\u0366\6\uffff\1\u0371\2\uffff\1\u036f"+
            "\1\u0370",
            "\1\u037b\5\uffff\1\u0379\35\uffff\1\u0375\24\uffff\1\u037a"+
            "\23\uffff\1\u0377\1\u0378\32\uffff\1\u0374\1\uffff\1\u0372\1"+
            "\uffff\1\u0376\46\uffff\1\u0373\6\uffff\1\u037e\2\uffff\1\u037c"+
            "\1\u037d",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u037f\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0380\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u03c1\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u03d6\5\uffff\1\u03d4\35\uffff\1\u03cb\24\uffff\1\u03d5"+
            "\23\uffff\1\u03d2\1\u03d3\26\uffff\1\u03da\3\uffff\1\u03d1\1"+
            "\uffff\1\u03c4\1\uffff\1\u03c2\2\uffff\1\u03dc\2\uffff\1\u03cf"+
            "\1\u03dc\37\uffff\1\u03d0\6\uffff\1\u03d9\2\uffff\1\u03d7\1"+
            "\u03d8\2\uffff\1\u03c6\4\uffff\1\u03ce\3\uffff\1\u03c3\2\uffff"+
            "\1\u03c8\1\u03c9\1\uffff\1\u03ca\1\uffff\1\u03cc\2\uffff\1\u03cd"+
            "\1\u03c7\1\u03c5\6\uffff\1\u03db",
            "",
            "",
            "\1\u03e4\21\uffff\1\u03e3\35\uffff\1\u03e9\1\uffff\1\u03e9"+
            "\1\u03e7\1\uffff\1\u03df\1\u03e6\1\u03e1\1\uffff\1\u03e9\1\u03e0"+
            "\1\uffff\1\u03e5\1\u03e9\1\u03e0\1\uffff\2\u03de\1\u03e9\3\uffff"+
            "\2\u03e9\1\uffff\6\u03e9\1\uffff\1\u03e2\24\uffff\1\u03dd\2"+
            "\uffff\1\u03e9\3\uffff\1\12\30\uffff\1\u03e9\1\uffff\1\u03e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ea",
            "\1\u03f7\5\uffff\1\u03f5\35\uffff\1\u03f2\21\uffff\1\u03ed"+
            "\2\uffff\1\u03f6\16\uffff\1\u03ec\4\uffff\1\u03f3\1\u03f4\26"+
            "\uffff\1\u03fb\3\uffff\1\u03f1\1\uffff\1\u03ef\1\u03fe\1\u03eb"+
            "\2\uffff\1\u03fd\2\uffff\1\u03ee\1\u03fd\37\uffff\1\u03f0\6"+
            "\uffff\1\u03fa\2\uffff\1\u03f8\1\u03f9\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u03fc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0409\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u040a\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u044b\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u0460\5\uffff\1\u045e\35\uffff\1\u0455\24\uffff\1\u045f"+
            "\23\uffff\1\u045c\1\u045d\26\uffff\1\u0464\3\uffff\1\u045b\1"+
            "\uffff\1\u044e\1\uffff\1\u044c\2\uffff\1\u0466\2\uffff\1\u0459"+
            "\1\u0466\37\uffff\1\u045a\6\uffff\1\u0463\2\uffff\1\u0461\1"+
            "\u0462\2\uffff\1\u0450\4\uffff\1\u0458\3\uffff\1\u044d\2\uffff"+
            "\1\u0452\1\u0453\1\uffff\1\u0454\1\uffff\1\u0456\2\uffff\1\u0457"+
            "\1\u0451\1\u044f\6\uffff\1\u0465",
            "",
            "",
            "\1\u046e\21\uffff\1\u046d\35\uffff\1\u0473\1\uffff\1\u0473"+
            "\1\u0471\1\uffff\1\u0469\1\u0470\1\u046b\1\uffff\1\u0473\1\u046a"+
            "\1\uffff\1\u046f\1\u0473\1\u046a\1\uffff\2\u0468\1\u0473\3\uffff"+
            "\2\u0473\1\uffff\6\u0473\1\uffff\1\u046c\24\uffff\1\u0467\2"+
            "\uffff\1\u0473\3\uffff\1\12\30\uffff\1\u0473\1\uffff\1\u0473",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0474\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0475\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u04b6\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u04cb\5\uffff\1\u04c9\35\uffff\1\u04c0\24\uffff\1\u04ca"+
            "\23\uffff\1\u04c7\1\u04c8\26\uffff\1\u04cf\3\uffff\1\u04c6\1"+
            "\uffff\1\u04b9\1\uffff\1\u04b7\2\uffff\1\u04d1\2\uffff\1\u04c4"+
            "\1\u04d1\37\uffff\1\u04c5\6\uffff\1\u04ce\2\uffff\1\u04cc\1"+
            "\u04cd\2\uffff\1\u04bb\4\uffff\1\u04c3\3\uffff\1\u04b8\2\uffff"+
            "\1\u04bd\1\u04be\1\uffff\1\u04bf\1\uffff\1\u04c1\2\uffff\1\u04c2"+
            "\1\u04bc\1\u04ba\6\uffff\1\u04d0",
            "",
            "",
            "\1\u04d9\21\uffff\1\u04d8\35\uffff\1\u04de\1\uffff\1\u04de"+
            "\1\u04dc\1\uffff\1\u04d4\1\u04db\1\u04d6\1\uffff\1\u04de\1\u04d5"+
            "\1\uffff\1\u04da\1\u04de\1\u04d5\1\uffff\2\u04d3\1\u04de\3\uffff"+
            "\2\u04de\1\uffff\6\u04de\1\uffff\1\u04d7\24\uffff\1\u04d2\2"+
            "\uffff\1\u04de\3\uffff\1\12\30\uffff\1\u04de\1\uffff\1\u04de",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u04df\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u04e0\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0521\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u0536\5\uffff\1\u0534\35\uffff\1\u052b\24\uffff\1\u0535"+
            "\23\uffff\1\u0532\1\u0533\26\uffff\1\u053a\3\uffff\1\u0531\1"+
            "\uffff\1\u0524\1\uffff\1\u0522\2\uffff\1\u053c\2\uffff\1\u052f"+
            "\1\u053c\37\uffff\1\u0530\6\uffff\1\u0539\2\uffff\1\u0537\1"+
            "\u0538\2\uffff\1\u0526\4\uffff\1\u052e\3\uffff\1\u0523\2\uffff"+
            "\1\u0528\1\u0529\1\uffff\1\u052a\1\uffff\1\u052c\2\uffff\1\u052d"+
            "\1\u0527\1\u0525\6\uffff\1\u053b",
            "",
            "",
            "\1\u0544\21\uffff\1\u0543\35\uffff\1\u0549\1\uffff\1\u0549"+
            "\1\u0547\1\uffff\1\u053f\1\u0546\1\u0541\1\uffff\1\u0549\1\u0540"+
            "\1\uffff\1\u0545\1\u0549\1\u0540\1\uffff\2\u053e\1\u0549\3\uffff"+
            "\2\u0549\1\uffff\6\u0549\1\uffff\1\u0542\24\uffff\1\u053d\2"+
            "\uffff\1\u0549\3\uffff\1\12\30\uffff\1\u0549\1\uffff\1\u0549",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u054a\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u054b\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u058c\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u05a1\5\uffff\1\u059f\35\uffff\1\u0596\24\uffff\1\u05a0"+
            "\23\uffff\1\u059d\1\u059e\26\uffff\1\u05a5\3\uffff\1\u059c\1"+
            "\uffff\1\u058f\1\uffff\1\u058d\2\uffff\1\u05a7\2\uffff\1\u059a"+
            "\1\u05a7\37\uffff\1\u059b\6\uffff\1\u05a4\2\uffff\1\u05a2\1"+
            "\u05a3\2\uffff\1\u0591\4\uffff\1\u0599\3\uffff\1\u058e\2\uffff"+
            "\1\u0593\1\u0594\1\uffff\1\u0595\1\uffff\1\u0597\2\uffff\1\u0598"+
            "\1\u0592\1\u0590\6\uffff\1\u05a6",
            "",
            "",
            "\1\u05af\21\uffff\1\u05ae\35\uffff\1\u05b4\1\uffff\1\u05b4"+
            "\1\u05b2\1\uffff\1\u05aa\1\u05b1\1\u05ac\1\uffff\1\u05b4\1\u05ab"+
            "\1\uffff\1\u05b0\1\u05b4\1\u05ab\1\uffff\2\u05a9\1\u05b4\3\uffff"+
            "\2\u05b4\1\uffff\6\u05b4\1\uffff\1\u05ad\24\uffff\1\u05a8\2"+
            "\uffff\1\u05b4\3\uffff\1\12\30\uffff\1\u05b4\1\uffff\1\u05b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u05b5\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u05b6\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u05f7\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u060c\5\uffff\1\u060a\35\uffff\1\u0601\24\uffff\1\u060b"+
            "\23\uffff\1\u0608\1\u0609\26\uffff\1\u0610\3\uffff\1\u0607\1"+
            "\uffff\1\u05fa\1\uffff\1\u05f8\2\uffff\1\u0612\2\uffff\1\u0605"+
            "\1\u0612\37\uffff\1\u0606\6\uffff\1\u060f\2\uffff\1\u060d\1"+
            "\u060e\2\uffff\1\u05fc\4\uffff\1\u0604\3\uffff\1\u05f9\2\uffff"+
            "\1\u05fe\1\u05ff\1\uffff\1\u0600\1\uffff\1\u0602\2\uffff\1\u0603"+
            "\1\u05fd\1\u05fb\6\uffff\1\u0611",
            "",
            "",
            "\1\u061a\21\uffff\1\u0619\35\uffff\1\u061f\1\uffff\1\u061f"+
            "\1\u061d\1\uffff\1\u0615\1\u061c\1\u0617\1\uffff\1\u061f\1\u0616"+
            "\1\uffff\1\u061b\1\u061f\1\u0616\1\uffff\2\u0614\1\u061f\3\uffff"+
            "\2\u061f\1\uffff\6\u061f\1\uffff\1\u0618\24\uffff\1\u0613\2"+
            "\uffff\1\u061f\3\uffff\1\12\30\uffff\1\u061f\1\uffff\1\u061f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "499:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_17==120) ) {s = 447;}

                        else if ( (LA58_17==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 448;}

                        else if ( (LA58_17==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 449;}

                        else if ( (LA58_17==126) && (synpred13_Objc())) {s = 450;}

                        else if ( (LA58_17==118) ) {s = 451;}

                        else if ( (LA58_17==159) && (synpred13_Objc())) {s = 452;}

                        else if ( (LA58_17==116) && (synpred13_Objc())) {s = 453;}

                        else if ( (LA58_17==ID) ) {s = 454;}

                        else if ( (LA58_17==STRING_LITERAL) && (synpred13_Objc())) {s = 455;}

                        else if ( (LA58_17==STRING_OBJC) && (synpred13_Objc())) {s = 456;}

                        else if ( (LA58_17==CHAR_LITERAL) && (synpred13_Objc())) {s = 457;}

                        else if ( (LA58_17==NUMBER_LITERAL) && (synpred13_Objc())) {s = 458;}

                        else if ( (LA58_17==BOOL_LITERAL) && (synpred13_Objc())) {s = 459;}

                        else if ( (LA58_17==169) && (synpred13_Objc())) {s = 460;}

                        else if ( (LA58_17==170) && (synpred13_Objc())) {s = 461;}

                        else if ( (LA58_17==166) && (synpred13_Objc())) {s = 462;}

                        else if ( (LA58_17==112) && (synpred13_Objc())) {s = 463;}

                        else if ( (LA58_17==202) && (synpred13_Objc())) {s = 464;}

                        else if ( (LA58_17==123||LA58_17==127) && (synpred13_Objc())) {s = 465;}

                        else if ( (LA58_17==119) && (synpred13_Objc())) {s = 466;}

                        else if ( (LA58_17==173||LA58_17==178||LA58_17==182||(LA58_17 >= 185 && LA58_17 <= 186)||LA58_17==188||LA58_17==190||(LA58_17 >= 193 && LA58_17 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_17);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_76 = input.LA(1);

                         
                        int index58_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_76==120) ) {s = 537;}

                        else if ( (LA58_76==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 538;}

                        else if ( (LA58_76==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 539;}

                        else if ( (LA58_76==126) && (synpred13_Objc())) {s = 540;}

                        else if ( (LA58_76==118) ) {s = 541;}

                        else if ( (LA58_76==159) && (synpred13_Objc())) {s = 542;}

                        else if ( (LA58_76==116) && (synpred13_Objc())) {s = 543;}

                        else if ( (LA58_76==ID) ) {s = 544;}

                        else if ( (LA58_76==STRING_LITERAL) && (synpred13_Objc())) {s = 545;}

                        else if ( (LA58_76==STRING_OBJC) && (synpred13_Objc())) {s = 546;}

                        else if ( (LA58_76==CHAR_LITERAL) && (synpred13_Objc())) {s = 547;}

                        else if ( (LA58_76==NUMBER_LITERAL) && (synpred13_Objc())) {s = 548;}

                        else if ( (LA58_76==BOOL_LITERAL) && (synpred13_Objc())) {s = 549;}

                        else if ( (LA58_76==169) && (synpred13_Objc())) {s = 550;}

                        else if ( (LA58_76==170) && (synpred13_Objc())) {s = 551;}

                        else if ( (LA58_76==166) && (synpred13_Objc())) {s = 552;}

                        else if ( (LA58_76==112) && (synpred13_Objc())) {s = 553;}

                        else if ( (LA58_76==202) && (synpred13_Objc())) {s = 554;}

                        else if ( (LA58_76==123||LA58_76==127) && (synpred13_Objc())) {s = 555;}

                        else if ( (LA58_76==119) && (synpred13_Objc())) {s = 556;}

                        else if ( (LA58_76==173||LA58_76==178||LA58_76==182||(LA58_76 >= 185 && LA58_76 <= 186)||LA58_76==188||LA58_76==190||(LA58_76 >= 193 && LA58_76 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_76);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_135 = input.LA(1);

                         
                        int index58_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_135==120) ) {s = 568;}

                        else if ( (LA58_135==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 569;}

                        else if ( (LA58_135==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 570;}

                        else if ( (LA58_135==126) && (synpred13_Objc())) {s = 571;}

                        else if ( (LA58_135==118) ) {s = 572;}

                        else if ( (LA58_135==159) && (synpred13_Objc())) {s = 573;}

                        else if ( (LA58_135==116) && (synpred13_Objc())) {s = 574;}

                        else if ( (LA58_135==ID) ) {s = 575;}

                        else if ( (LA58_135==STRING_LITERAL) && (synpred13_Objc())) {s = 576;}

                        else if ( (LA58_135==STRING_OBJC) && (synpred13_Objc())) {s = 577;}

                        else if ( (LA58_135==CHAR_LITERAL) && (synpred13_Objc())) {s = 578;}

                        else if ( (LA58_135==NUMBER_LITERAL) && (synpred13_Objc())) {s = 579;}

                        else if ( (LA58_135==BOOL_LITERAL) && (synpred13_Objc())) {s = 580;}

                        else if ( (LA58_135==169) && (synpred13_Objc())) {s = 581;}

                        else if ( (LA58_135==170) && (synpred13_Objc())) {s = 582;}

                        else if ( (LA58_135==166) && (synpred13_Objc())) {s = 583;}

                        else if ( (LA58_135==112) && (synpred13_Objc())) {s = 584;}

                        else if ( (LA58_135==202) && (synpred13_Objc())) {s = 585;}

                        else if ( (LA58_135==123||LA58_135==127) && (synpred13_Objc())) {s = 586;}

                        else if ( (LA58_135==119) && (synpred13_Objc())) {s = 587;}

                        else if ( (LA58_135==173||LA58_135==178||LA58_135==182||(LA58_135 >= 185 && LA58_135 <= 186)||LA58_135==188||LA58_135==190||(LA58_135 >= 193 && LA58_135 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_135);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_194 = input.LA(1);

                         
                        int index58_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_194==120) ) {s = 599;}

                        else if ( (LA58_194==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 600;}

                        else if ( (LA58_194==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 601;}

                        else if ( (LA58_194==126) && (synpred13_Objc())) {s = 602;}

                        else if ( (LA58_194==118) ) {s = 603;}

                        else if ( (LA58_194==159) && (synpred13_Objc())) {s = 604;}

                        else if ( (LA58_194==116) && (synpred13_Objc())) {s = 605;}

                        else if ( (LA58_194==ID) ) {s = 606;}

                        else if ( (LA58_194==STRING_LITERAL) && (synpred13_Objc())) {s = 607;}

                        else if ( (LA58_194==STRING_OBJC) && (synpred13_Objc())) {s = 608;}

                        else if ( (LA58_194==CHAR_LITERAL) && (synpred13_Objc())) {s = 609;}

                        else if ( (LA58_194==NUMBER_LITERAL) && (synpred13_Objc())) {s = 610;}

                        else if ( (LA58_194==BOOL_LITERAL) && (synpred13_Objc())) {s = 611;}

                        else if ( (LA58_194==169) && (synpred13_Objc())) {s = 612;}

                        else if ( (LA58_194==170) && (synpred13_Objc())) {s = 613;}

                        else if ( (LA58_194==166) && (synpred13_Objc())) {s = 614;}

                        else if ( (LA58_194==112) && (synpred13_Objc())) {s = 615;}

                        else if ( (LA58_194==202) && (synpred13_Objc())) {s = 616;}

                        else if ( (LA58_194==123||LA58_194==127) && (synpred13_Objc())) {s = 617;}

                        else if ( (LA58_194==119) && (synpred13_Objc())) {s = 618;}

                        else if ( (LA58_194==173||LA58_194==178||LA58_194==182||(LA58_194 >= 185 && LA58_194 <= 186)||LA58_194==188||LA58_194==190||(LA58_194 >= 193 && LA58_194 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_194);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_253 = input.LA(1);

                         
                        int index58_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_253==120) ) {s = 630;}

                        else if ( (LA58_253==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 631;}

                        else if ( (LA58_253==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 632;}

                        else if ( (LA58_253==126) && (synpred13_Objc())) {s = 633;}

                        else if ( (LA58_253==118) ) {s = 634;}

                        else if ( (LA58_253==159) && (synpred13_Objc())) {s = 635;}

                        else if ( (LA58_253==116) && (synpred13_Objc())) {s = 636;}

                        else if ( (LA58_253==ID) ) {s = 637;}

                        else if ( (LA58_253==STRING_LITERAL) && (synpred13_Objc())) {s = 638;}

                        else if ( (LA58_253==STRING_OBJC) && (synpred13_Objc())) {s = 639;}

                        else if ( (LA58_253==CHAR_LITERAL) && (synpred13_Objc())) {s = 640;}

                        else if ( (LA58_253==NUMBER_LITERAL) && (synpred13_Objc())) {s = 641;}

                        else if ( (LA58_253==BOOL_LITERAL) && (synpred13_Objc())) {s = 642;}

                        else if ( (LA58_253==169) && (synpred13_Objc())) {s = 643;}

                        else if ( (LA58_253==170) && (synpred13_Objc())) {s = 644;}

                        else if ( (LA58_253==166) && (synpred13_Objc())) {s = 645;}

                        else if ( (LA58_253==112) && (synpred13_Objc())) {s = 646;}

                        else if ( (LA58_253==202) && (synpred13_Objc())) {s = 647;}

                        else if ( (LA58_253==123||LA58_253==127) && (synpred13_Objc())) {s = 648;}

                        else if ( (LA58_253==119) && (synpred13_Objc())) {s = 649;}

                        else if ( (LA58_253==173||LA58_253==178||LA58_253==182||(LA58_253 >= 185 && LA58_253 <= 186)||LA58_253==188||LA58_253==190||(LA58_253 >= 193 && LA58_253 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_253);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA58_312 = input.LA(1);

                         
                        int index58_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_312==120) ) {s = 661;}

                        else if ( (LA58_312==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 662;}

                        else if ( (LA58_312==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 663;}

                        else if ( (LA58_312==126) && (synpred13_Objc())) {s = 664;}

                        else if ( (LA58_312==118) ) {s = 665;}

                        else if ( (LA58_312==159) && (synpred13_Objc())) {s = 666;}

                        else if ( (LA58_312==116) && (synpred13_Objc())) {s = 667;}

                        else if ( (LA58_312==ID) ) {s = 668;}

                        else if ( (LA58_312==STRING_LITERAL) && (synpred13_Objc())) {s = 669;}

                        else if ( (LA58_312==STRING_OBJC) && (synpred13_Objc())) {s = 670;}

                        else if ( (LA58_312==CHAR_LITERAL) && (synpred13_Objc())) {s = 671;}

                        else if ( (LA58_312==NUMBER_LITERAL) && (synpred13_Objc())) {s = 672;}

                        else if ( (LA58_312==BOOL_LITERAL) && (synpred13_Objc())) {s = 673;}

                        else if ( (LA58_312==169) && (synpred13_Objc())) {s = 674;}

                        else if ( (LA58_312==170) && (synpred13_Objc())) {s = 675;}

                        else if ( (LA58_312==166) && (synpred13_Objc())) {s = 676;}

                        else if ( (LA58_312==112) && (synpred13_Objc())) {s = 677;}

                        else if ( (LA58_312==202) && (synpred13_Objc())) {s = 678;}

                        else if ( (LA58_312==123||LA58_312==127) && (synpred13_Objc())) {s = 679;}

                        else if ( (LA58_312==119) && (synpred13_Objc())) {s = 680;}

                        else if ( (LA58_312==173||LA58_312==178||LA58_312==182||(LA58_312 >= 185 && LA58_312 <= 186)||LA58_312==188||LA58_312==190||(LA58_312 >= 193 && LA58_312 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_312);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA58_372 = input.LA(1);

                         
                        int index58_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_372==120) ) {s = 709;}

                        else if ( (LA58_372==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 710;}

                        else if ( (LA58_372==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 711;}

                        else if ( (LA58_372==126) && (synpred13_Objc())) {s = 712;}

                        else if ( (LA58_372==118) ) {s = 713;}

                        else if ( (LA58_372==159) && (synpred13_Objc())) {s = 714;}

                        else if ( (LA58_372==116) && (synpred13_Objc())) {s = 715;}

                        else if ( (LA58_372==ID) ) {s = 716;}

                        else if ( (LA58_372==STRING_LITERAL) && (synpred13_Objc())) {s = 717;}

                        else if ( (LA58_372==STRING_OBJC) && (synpred13_Objc())) {s = 718;}

                        else if ( (LA58_372==CHAR_LITERAL) && (synpred13_Objc())) {s = 719;}

                        else if ( (LA58_372==NUMBER_LITERAL) && (synpred13_Objc())) {s = 720;}

                        else if ( (LA58_372==BOOL_LITERAL) && (synpred13_Objc())) {s = 721;}

                        else if ( (LA58_372==169) && (synpred13_Objc())) {s = 722;}

                        else if ( (LA58_372==170) && (synpred13_Objc())) {s = 723;}

                        else if ( (LA58_372==166) && (synpred13_Objc())) {s = 724;}

                        else if ( (LA58_372==112) && (synpred13_Objc())) {s = 725;}

                        else if ( (LA58_372==202) && (synpred13_Objc())) {s = 726;}

                        else if ( (LA58_372==123||LA58_372==127) && (synpred13_Objc())) {s = 727;}

                        else if ( (LA58_372==119) && (synpred13_Objc())) {s = 728;}

                        else if ( (LA58_372==173||LA58_372==178||LA58_372==182||(LA58_372 >= 185 && LA58_372 <= 186)||LA58_372==188||LA58_372==190||(LA58_372 >= 193 && LA58_372 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_372);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA58_451 = input.LA(1);

                         
                        int index58_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_451==120) ) {s = 962;}

                        else if ( (LA58_451==182) ) {s = 963;}

                        else if ( (LA58_451==118) ) {s = 964;}

                        else if ( (LA58_451==195) ) {s = 965;}

                        else if ( (LA58_451==173) ) {s = 966;}

                        else if ( (LA58_451==194) ) {s = 967;}

                        else if ( (LA58_451==185) ) {s = 968;}

                        else if ( (LA58_451==186) ) {s = 969;}

                        else if ( (LA58_451==188) ) {s = 970;}

                        else if ( (LA58_451==ID) ) {s = 971;}

                        else if ( (LA58_451==190) ) {s = 972;}

                        else if ( (LA58_451==193) ) {s = 973;}

                        else if ( (LA58_451==178) ) {s = 974;}

                        else if ( (LA58_451==126) && (synpred13_Objc())) {s = 975;}

                        else if ( (LA58_451==159) && (synpred13_Objc())) {s = 976;}

                        else if ( (LA58_451==116) && (synpred13_Objc())) {s = 977;}

                        else if ( (LA58_451==STRING_LITERAL) && (synpred13_Objc())) {s = 978;}

                        else if ( (LA58_451==STRING_OBJC) && (synpred13_Objc())) {s = 979;}

                        else if ( (LA58_451==CHAR_LITERAL) && (synpred13_Objc())) {s = 980;}

                        else if ( (LA58_451==NUMBER_LITERAL) && (synpred13_Objc())) {s = 981;}

                        else if ( (LA58_451==BOOL_LITERAL) && (synpred13_Objc())) {s = 982;}

                        else if ( (LA58_451==169) && (synpred13_Objc())) {s = 983;}

                        else if ( (LA58_451==170) && (synpred13_Objc())) {s = 984;}

                        else if ( (LA58_451==166) && (synpred13_Objc())) {s = 985;}

                        else if ( (LA58_451==112) && (synpred13_Objc())) {s = 986;}

                        else if ( (LA58_451==202) && (synpred13_Objc())) {s = 987;}

                        else if ( (LA58_451==123||LA58_451==127) && (synpred13_Objc())) {s = 988;}

                         
                        input.seek(index58_451);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA58_454 = input.LA(1);

                         
                        int index58_454 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_454==166) ) {s = 989;}

                        else if ( ((LA58_454 >= 129 && LA58_454 <= 130)) && (synpred13_Objc())) {s = 990;}

                        else if ( (LA58_454==118) && (synpred13_Objc())) {s = 991;}

                        else if ( (LA58_454==123||LA58_454==127) && (synpred13_Objc())) {s = 992;}

                        else if ( (LA58_454==120) ) {s = 993;}

                        else if ( (LA58_454==145) && (synpred13_Objc())) {s = 994;}

                        else if ( (LA58_454==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 995;}

                        else if ( (LA58_454==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 996;}

                        else if ( (LA58_454==125) && (synpred13_Objc())) {s = 997;}

                        else if ( (LA58_454==119) ) {s = 998;}

                        else if ( (LA58_454==116) ) {s = 999;}

                        else if ( (LA58_454==173) ) {s = 10;}

                        else if ( (LA58_454==113||LA58_454==115||LA58_454==122||LA58_454==126||LA58_454==131||(LA58_454 >= 135 && LA58_454 <= 136)||(LA58_454 >= 138 && LA58_454 <= 143)||LA58_454==169||LA58_454==198||LA58_454==200) && (synpred13_Objc())) {s = 1001;}

                         
                        input.seek(index58_454);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA58_478 = input.LA(1);

                         
                        int index58_478 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_478==120) ) {s = 1003;}

                        else if ( (LA58_478==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1004;}

                        else if ( (LA58_478==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1005;}

                        else if ( (LA58_478==126) && (synpred13_Objc())) {s = 1006;}

                        else if ( (LA58_478==118) ) {s = 1007;}

                        else if ( (LA58_478==159) && (synpred13_Objc())) {s = 1008;}

                        else if ( (LA58_478==116) && (synpred13_Objc())) {s = 1009;}

                        else if ( (LA58_478==ID) ) {s = 1010;}

                        else if ( (LA58_478==STRING_LITERAL) && (synpred13_Objc())) {s = 1011;}

                        else if ( (LA58_478==STRING_OBJC) && (synpred13_Objc())) {s = 1012;}

                        else if ( (LA58_478==CHAR_LITERAL) && (synpred13_Objc())) {s = 1013;}

                        else if ( (LA58_478==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1014;}

                        else if ( (LA58_478==BOOL_LITERAL) && (synpred13_Objc())) {s = 1015;}

                        else if ( (LA58_478==169) && (synpred13_Objc())) {s = 1016;}

                        else if ( (LA58_478==170) && (synpred13_Objc())) {s = 1017;}

                        else if ( (LA58_478==166) && (synpred13_Objc())) {s = 1018;}

                        else if ( (LA58_478==112) && (synpred13_Objc())) {s = 1019;}

                        else if ( (LA58_478==202) && (synpred13_Objc())) {s = 1020;}

                        else if ( (LA58_478==123||LA58_478==127) && (synpred13_Objc())) {s = 1021;}

                        else if ( (LA58_478==119) && (synpred13_Objc())) {s = 1022;}

                        else if ( (LA58_478==173||LA58_478==178||LA58_478==182||(LA58_478 >= 185 && LA58_478 <= 186)||LA58_478==188||LA58_478==190||(LA58_478 >= 193 && LA58_478 <= 195)) ) {s = 10;}

                         
                        input.seek(index58_478);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA58_541 = input.LA(1);

                         
                        int index58_541 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_541==120) ) {s = 1100;}

                        else if ( (LA58_541==182) ) {s = 1101;}

                        else if ( (LA58_541==118) ) {s = 1102;}

                        else if ( (LA58_541==195) ) {s = 1103;}

                        else if ( (LA58_541==173) ) {s = 1104;}

                        else if ( (LA58_541==194) ) {s = 1105;}

                        else if ( (LA58_541==185) ) {s = 1106;}

                        else if ( (LA58_541==186) ) {s = 1107;}

                        else if ( (LA58_541==188) ) {s = 1108;}

                        else if ( (LA58_541==ID) ) {s = 1109;}

                        else if ( (LA58_541==190) ) {s = 1110;}

                        else if ( (LA58_541==193) ) {s = 1111;}

                        else if ( (LA58_541==178) ) {s = 1112;}

                        else if ( (LA58_541==126) && (synpred13_Objc())) {s = 1113;}

                        else if ( (LA58_541==159) && (synpred13_Objc())) {s = 1114;}

                        else if ( (LA58_541==116) && (synpred13_Objc())) {s = 1115;}

                        else if ( (LA58_541==STRING_LITERAL) && (synpred13_Objc())) {s = 1116;}

                        else if ( (LA58_541==STRING_OBJC) && (synpred13_Objc())) {s = 1117;}

                        else if ( (LA58_541==CHAR_LITERAL) && (synpred13_Objc())) {s = 1118;}

                        else if ( (LA58_541==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1119;}

                        else if ( (LA58_541==BOOL_LITERAL) && (synpred13_Objc())) {s = 1120;}

                        else if ( (LA58_541==169) && (synpred13_Objc())) {s = 1121;}

                        else if ( (LA58_541==170) && (synpred13_Objc())) {s = 1122;}

                        else if ( (LA58_541==166) && (synpred13_Objc())) {s = 1123;}

                        else if ( (LA58_541==112) && (synpred13_Objc())) {s = 1124;}

                        else if ( (LA58_541==202) && (synpred13_Objc())) {s = 1125;}

                        else if ( (LA58_541==123||LA58_541==127) && (synpred13_Objc())) {s = 1126;}

                         
                        input.seek(index58_541);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA58_544 = input.LA(1);

                         
                        int index58_544 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_544==166) ) {s = 1127;}

                        else if ( ((LA58_544 >= 129 && LA58_544 <= 130)) && (synpred13_Objc())) {s = 1128;}

                        else if ( (LA58_544==118) && (synpred13_Objc())) {s = 1129;}

                        else if ( (LA58_544==123||LA58_544==127) && (synpred13_Objc())) {s = 1130;}

                        else if ( (LA58_544==120) ) {s = 1131;}

                        else if ( (LA58_544==145) && (synpred13_Objc())) {s = 1132;}

                        else if ( (LA58_544==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1133;}

                        else if ( (LA58_544==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1134;}

                        else if ( (LA58_544==125) && (synpred13_Objc())) {s = 1135;}

                        else if ( (LA58_544==119) ) {s = 1136;}

                        else if ( (LA58_544==116) ) {s = 1137;}

                        else if ( (LA58_544==173) ) {s = 10;}

                        else if ( (LA58_544==113||LA58_544==115||LA58_544==122||LA58_544==126||LA58_544==131||(LA58_544 >= 135 && LA58_544 <= 136)||(LA58_544 >= 138 && LA58_544 <= 143)||LA58_544==169||LA58_544==198||LA58_544==200) && (synpred13_Objc())) {s = 1139;}

                         
                        input.seek(index58_544);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA58_572 = input.LA(1);

                         
                        int index58_572 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_572==120) ) {s = 1207;}

                        else if ( (LA58_572==182) ) {s = 1208;}

                        else if ( (LA58_572==118) ) {s = 1209;}

                        else if ( (LA58_572==195) ) {s = 1210;}

                        else if ( (LA58_572==173) ) {s = 1211;}

                        else if ( (LA58_572==194) ) {s = 1212;}

                        else if ( (LA58_572==185) ) {s = 1213;}

                        else if ( (LA58_572==186) ) {s = 1214;}

                        else if ( (LA58_572==188) ) {s = 1215;}

                        else if ( (LA58_572==ID) ) {s = 1216;}

                        else if ( (LA58_572==190) ) {s = 1217;}

                        else if ( (LA58_572==193) ) {s = 1218;}

                        else if ( (LA58_572==178) ) {s = 1219;}

                        else if ( (LA58_572==126) && (synpred13_Objc())) {s = 1220;}

                        else if ( (LA58_572==159) && (synpred13_Objc())) {s = 1221;}

                        else if ( (LA58_572==116) && (synpred13_Objc())) {s = 1222;}

                        else if ( (LA58_572==STRING_LITERAL) && (synpred13_Objc())) {s = 1223;}

                        else if ( (LA58_572==STRING_OBJC) && (synpred13_Objc())) {s = 1224;}

                        else if ( (LA58_572==CHAR_LITERAL) && (synpred13_Objc())) {s = 1225;}

                        else if ( (LA58_572==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1226;}

                        else if ( (LA58_572==BOOL_LITERAL) && (synpred13_Objc())) {s = 1227;}

                        else if ( (LA58_572==169) && (synpred13_Objc())) {s = 1228;}

                        else if ( (LA58_572==170) && (synpred13_Objc())) {s = 1229;}

                        else if ( (LA58_572==166) && (synpred13_Objc())) {s = 1230;}

                        else if ( (LA58_572==112) && (synpred13_Objc())) {s = 1231;}

                        else if ( (LA58_572==202) && (synpred13_Objc())) {s = 1232;}

                        else if ( (LA58_572==123||LA58_572==127) && (synpred13_Objc())) {s = 1233;}

                         
                        input.seek(index58_572);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA58_575 = input.LA(1);

                         
                        int index58_575 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_575==166) ) {s = 1234;}

                        else if ( ((LA58_575 >= 129 && LA58_575 <= 130)) && (synpred13_Objc())) {s = 1235;}

                        else if ( (LA58_575==118) && (synpred13_Objc())) {s = 1236;}

                        else if ( (LA58_575==123||LA58_575==127) && (synpred13_Objc())) {s = 1237;}

                        else if ( (LA58_575==120) ) {s = 1238;}

                        else if ( (LA58_575==145) && (synpred13_Objc())) {s = 1239;}

                        else if ( (LA58_575==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1240;}

                        else if ( (LA58_575==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1241;}

                        else if ( (LA58_575==125) && (synpred13_Objc())) {s = 1242;}

                        else if ( (LA58_575==119) ) {s = 1243;}

                        else if ( (LA58_575==116) ) {s = 1244;}

                        else if ( (LA58_575==173) ) {s = 10;}

                        else if ( (LA58_575==113||LA58_575==115||LA58_575==122||LA58_575==126||LA58_575==131||(LA58_575 >= 135 && LA58_575 <= 136)||(LA58_575 >= 138 && LA58_575 <= 143)||LA58_575==169||LA58_575==198||LA58_575==200) && (synpred13_Objc())) {s = 1246;}

                         
                        input.seek(index58_575);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA58_603 = input.LA(1);

                         
                        int index58_603 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_603==120) ) {s = 1314;}

                        else if ( (LA58_603==182) ) {s = 1315;}

                        else if ( (LA58_603==118) ) {s = 1316;}

                        else if ( (LA58_603==195) ) {s = 1317;}

                        else if ( (LA58_603==173) ) {s = 1318;}

                        else if ( (LA58_603==194) ) {s = 1319;}

                        else if ( (LA58_603==185) ) {s = 1320;}

                        else if ( (LA58_603==186) ) {s = 1321;}

                        else if ( (LA58_603==188) ) {s = 1322;}

                        else if ( (LA58_603==ID) ) {s = 1323;}

                        else if ( (LA58_603==190) ) {s = 1324;}

                        else if ( (LA58_603==193) ) {s = 1325;}

                        else if ( (LA58_603==178) ) {s = 1326;}

                        else if ( (LA58_603==126) && (synpred13_Objc())) {s = 1327;}

                        else if ( (LA58_603==159) && (synpred13_Objc())) {s = 1328;}

                        else if ( (LA58_603==116) && (synpred13_Objc())) {s = 1329;}

                        else if ( (LA58_603==STRING_LITERAL) && (synpred13_Objc())) {s = 1330;}

                        else if ( (LA58_603==STRING_OBJC) && (synpred13_Objc())) {s = 1331;}

                        else if ( (LA58_603==CHAR_LITERAL) && (synpred13_Objc())) {s = 1332;}

                        else if ( (LA58_603==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1333;}

                        else if ( (LA58_603==BOOL_LITERAL) && (synpred13_Objc())) {s = 1334;}

                        else if ( (LA58_603==169) && (synpred13_Objc())) {s = 1335;}

                        else if ( (LA58_603==170) && (synpred13_Objc())) {s = 1336;}

                        else if ( (LA58_603==166) && (synpred13_Objc())) {s = 1337;}

                        else if ( (LA58_603==112) && (synpred13_Objc())) {s = 1338;}

                        else if ( (LA58_603==202) && (synpred13_Objc())) {s = 1339;}

                        else if ( (LA58_603==123||LA58_603==127) && (synpred13_Objc())) {s = 1340;}

                         
                        input.seek(index58_603);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA58_606 = input.LA(1);

                         
                        int index58_606 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_606==166) ) {s = 1341;}

                        else if ( ((LA58_606 >= 129 && LA58_606 <= 130)) && (synpred13_Objc())) {s = 1342;}

                        else if ( (LA58_606==118) && (synpred13_Objc())) {s = 1343;}

                        else if ( (LA58_606==123||LA58_606==127) && (synpred13_Objc())) {s = 1344;}

                        else if ( (LA58_606==120) ) {s = 1345;}

                        else if ( (LA58_606==145) && (synpred13_Objc())) {s = 1346;}

                        else if ( (LA58_606==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1347;}

                        else if ( (LA58_606==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1348;}

                        else if ( (LA58_606==125) && (synpred13_Objc())) {s = 1349;}

                        else if ( (LA58_606==119) ) {s = 1350;}

                        else if ( (LA58_606==116) ) {s = 1351;}

                        else if ( (LA58_606==173) ) {s = 10;}

                        else if ( (LA58_606==113||LA58_606==115||LA58_606==122||LA58_606==126||LA58_606==131||(LA58_606 >= 135 && LA58_606 <= 136)||(LA58_606 >= 138 && LA58_606 <= 143)||LA58_606==169||LA58_606==198||LA58_606==200) && (synpred13_Objc())) {s = 1353;}

                         
                        input.seek(index58_606);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA58_634 = input.LA(1);

                         
                        int index58_634 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_634==120) ) {s = 1421;}

                        else if ( (LA58_634==182) ) {s = 1422;}

                        else if ( (LA58_634==118) ) {s = 1423;}

                        else if ( (LA58_634==195) ) {s = 1424;}

                        else if ( (LA58_634==173) ) {s = 1425;}

                        else if ( (LA58_634==194) ) {s = 1426;}

                        else if ( (LA58_634==185) ) {s = 1427;}

                        else if ( (LA58_634==186) ) {s = 1428;}

                        else if ( (LA58_634==188) ) {s = 1429;}

                        else if ( (LA58_634==ID) ) {s = 1430;}

                        else if ( (LA58_634==190) ) {s = 1431;}

                        else if ( (LA58_634==193) ) {s = 1432;}

                        else if ( (LA58_634==178) ) {s = 1433;}

                        else if ( (LA58_634==126) && (synpred13_Objc())) {s = 1434;}

                        else if ( (LA58_634==159) && (synpred13_Objc())) {s = 1435;}

                        else if ( (LA58_634==116) && (synpred13_Objc())) {s = 1436;}

                        else if ( (LA58_634==STRING_LITERAL) && (synpred13_Objc())) {s = 1437;}

                        else if ( (LA58_634==STRING_OBJC) && (synpred13_Objc())) {s = 1438;}

                        else if ( (LA58_634==CHAR_LITERAL) && (synpred13_Objc())) {s = 1439;}

                        else if ( (LA58_634==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1440;}

                        else if ( (LA58_634==BOOL_LITERAL) && (synpred13_Objc())) {s = 1441;}

                        else if ( (LA58_634==169) && (synpred13_Objc())) {s = 1442;}

                        else if ( (LA58_634==170) && (synpred13_Objc())) {s = 1443;}

                        else if ( (LA58_634==166) && (synpred13_Objc())) {s = 1444;}

                        else if ( (LA58_634==112) && (synpred13_Objc())) {s = 1445;}

                        else if ( (LA58_634==202) && (synpred13_Objc())) {s = 1446;}

                        else if ( (LA58_634==123||LA58_634==127) && (synpred13_Objc())) {s = 1447;}

                         
                        input.seek(index58_634);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA58_637 = input.LA(1);

                         
                        int index58_637 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_637==166) ) {s = 1448;}

                        else if ( ((LA58_637 >= 129 && LA58_637 <= 130)) && (synpred13_Objc())) {s = 1449;}

                        else if ( (LA58_637==118) && (synpred13_Objc())) {s = 1450;}

                        else if ( (LA58_637==123||LA58_637==127) && (synpred13_Objc())) {s = 1451;}

                        else if ( (LA58_637==120) ) {s = 1452;}

                        else if ( (LA58_637==145) && (synpred13_Objc())) {s = 1453;}

                        else if ( (LA58_637==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1454;}

                        else if ( (LA58_637==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1455;}

                        else if ( (LA58_637==125) && (synpred13_Objc())) {s = 1456;}

                        else if ( (LA58_637==119) ) {s = 1457;}

                        else if ( (LA58_637==116) ) {s = 1458;}

                        else if ( (LA58_637==173) ) {s = 10;}

                        else if ( (LA58_637==113||LA58_637==115||LA58_637==122||LA58_637==126||LA58_637==131||(LA58_637 >= 135 && LA58_637 <= 136)||(LA58_637 >= 138 && LA58_637 <= 143)||LA58_637==169||LA58_637==198||LA58_637==200) && (synpred13_Objc())) {s = 1460;}

                         
                        input.seek(index58_637);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA58_665 = input.LA(1);

                         
                        int index58_665 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_665==120) ) {s = 1528;}

                        else if ( (LA58_665==182) ) {s = 1529;}

                        else if ( (LA58_665==118) ) {s = 1530;}

                        else if ( (LA58_665==195) ) {s = 1531;}

                        else if ( (LA58_665==173) ) {s = 1532;}

                        else if ( (LA58_665==194) ) {s = 1533;}

                        else if ( (LA58_665==185) ) {s = 1534;}

                        else if ( (LA58_665==186) ) {s = 1535;}

                        else if ( (LA58_665==188) ) {s = 1536;}

                        else if ( (LA58_665==ID) ) {s = 1537;}

                        else if ( (LA58_665==190) ) {s = 1538;}

                        else if ( (LA58_665==193) ) {s = 1539;}

                        else if ( (LA58_665==178) ) {s = 1540;}

                        else if ( (LA58_665==126) && (synpred13_Objc())) {s = 1541;}

                        else if ( (LA58_665==159) && (synpred13_Objc())) {s = 1542;}

                        else if ( (LA58_665==116) && (synpred13_Objc())) {s = 1543;}

                        else if ( (LA58_665==STRING_LITERAL) && (synpred13_Objc())) {s = 1544;}

                        else if ( (LA58_665==STRING_OBJC) && (synpred13_Objc())) {s = 1545;}

                        else if ( (LA58_665==CHAR_LITERAL) && (synpred13_Objc())) {s = 1546;}

                        else if ( (LA58_665==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1547;}

                        else if ( (LA58_665==BOOL_LITERAL) && (synpred13_Objc())) {s = 1548;}

                        else if ( (LA58_665==169) && (synpred13_Objc())) {s = 1549;}

                        else if ( (LA58_665==170) && (synpred13_Objc())) {s = 1550;}

                        else if ( (LA58_665==166) && (synpred13_Objc())) {s = 1551;}

                        else if ( (LA58_665==112) && (synpred13_Objc())) {s = 1552;}

                        else if ( (LA58_665==202) && (synpred13_Objc())) {s = 1553;}

                        else if ( (LA58_665==123||LA58_665==127) && (synpred13_Objc())) {s = 1554;}

                         
                        input.seek(index58_665);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA58_668 = input.LA(1);

                         
                        int index58_668 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA58_668==166) ) {s = 1555;}

                        else if ( ((LA58_668 >= 129 && LA58_668 <= 130)) && (synpred13_Objc())) {s = 1556;}

                        else if ( (LA58_668==118) && (synpred13_Objc())) {s = 1557;}

                        else if ( (LA58_668==123||LA58_668==127) && (synpred13_Objc())) {s = 1558;}

                        else if ( (LA58_668==120) ) {s = 1559;}

                        else if ( (LA58_668==145) && (synpred13_Objc())) {s = 1560;}

                        else if ( (LA58_668==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 1561;}

                        else if ( (LA58_668==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1562;}

                        else if ( (LA58_668==125) && (synpred13_Objc())) {s = 1563;}

                        else if ( (LA58_668==119) ) {s = 1564;}

                        else if ( (LA58_668==116) ) {s = 1565;}

                        else if ( (LA58_668==173) ) {s = 10;}

                        else if ( (LA58_668==113||LA58_668==115||LA58_668==122||LA58_668==126||LA58_668==131||(LA58_668 >= 135 && LA58_668 <= 136)||(LA58_668 >= 138 && LA58_668 <= 143)||LA58_668==169||LA58_668==198||LA58_668==200) && (synpred13_Objc())) {s = 1567;}

                         
                        input.seek(index58_668);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA58_691 = input.LA(1);

                         
                        int index58_691 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_691);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA58_692 = input.LA(1);

                         
                        int index58_692 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_692);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA58_693 = input.LA(1);

                         
                        int index58_693 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_693);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA58_694 = input.LA(1);

                         
                        int index58_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_694);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA58_695 = input.LA(1);

                         
                        int index58_695 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_695);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA58_696 = input.LA(1);

                         
                        int index58_696 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_696);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA58_697 = input.LA(1);

                         
                        int index58_697 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_697);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA58_698 = input.LA(1);

                         
                        int index58_698 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_698);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA58_699 = input.LA(1);

                         
                        int index58_699 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_699);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA58_700 = input.LA(1);

                         
                        int index58_700 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_700);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA58_701 = input.LA(1);

                         
                        int index58_701 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_701);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA58_702 = input.LA(1);

                         
                        int index58_702 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_702);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA58_703 = input.LA(1);

                         
                        int index58_703 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_703);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA58_704 = input.LA(1);

                         
                        int index58_704 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_704);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA58_705 = input.LA(1);

                         
                        int index58_705 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_705);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA58_706 = input.LA(1);

                         
                        int index58_706 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_706);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA58_707 = input.LA(1);

                         
                        int index58_707 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_707);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA58_708 = input.LA(1);

                         
                        int index58_708 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_708);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA58_709 = input.LA(1);

                         
                        int index58_709 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_709);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA58_713 = input.LA(1);

                         
                        int index58_713 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_713);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA58_716 = input.LA(1);

                         
                        int index58_716 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_716);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA58_739 = input.LA(1);

                         
                        int index58_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_739);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA58_740 = input.LA(1);

                         
                        int index58_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_740);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA58_741 = input.LA(1);

                         
                        int index58_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_741);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA58_742 = input.LA(1);

                         
                        int index58_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_742);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA58_743 = input.LA(1);

                         
                        int index58_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_743);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA58_744 = input.LA(1);

                         
                        int index58_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_744);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA58_745 = input.LA(1);

                         
                        int index58_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_745);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA58_746 = input.LA(1);

                         
                        int index58_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_746);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA58_747 = input.LA(1);

                         
                        int index58_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_747);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA58_748 = input.LA(1);

                         
                        int index58_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_748);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA58_749 = input.LA(1);

                         
                        int index58_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_749);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA58_750 = input.LA(1);

                         
                        int index58_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_750);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA58_751 = input.LA(1);

                         
                        int index58_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_751);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA58_752 = input.LA(1);

                         
                        int index58_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_752);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA58_753 = input.LA(1);

                         
                        int index58_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_753);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA58_754 = input.LA(1);

                         
                        int index58_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_754);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA58_755 = input.LA(1);

                         
                        int index58_755 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_755);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA58_756 = input.LA(1);

                         
                        int index58_756 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_756);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA58_757 = input.LA(1);

                         
                        int index58_757 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_757);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA58_758 = input.LA(1);

                         
                        int index58_758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_758);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA58_759 = input.LA(1);

                         
                        int index58_759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_759);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA58_760 = input.LA(1);

                         
                        int index58_760 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_760);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA58_761 = input.LA(1);

                         
                        int index58_761 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_761);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA58_762 = input.LA(1);

                         
                        int index58_762 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_762);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA58_763 = input.LA(1);

                         
                        int index58_763 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_763);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA58_764 = input.LA(1);

                         
                        int index58_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_764);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA58_765 = input.LA(1);

                         
                        int index58_765 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_765);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA58_766 = input.LA(1);

                         
                        int index58_766 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_766);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA58_767 = input.LA(1);

                         
                        int index58_767 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_767);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA58_768 = input.LA(1);

                         
                        int index58_768 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_768);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA58_769 = input.LA(1);

                         
                        int index58_769 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_769);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA58_770 = input.LA(1);

                         
                        int index58_770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_770);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA58_771 = input.LA(1);

                         
                        int index58_771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_771);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA58_772 = input.LA(1);

                         
                        int index58_772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_772);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA58_773 = input.LA(1);

                         
                        int index58_773 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_773);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA58_774 = input.LA(1);

                         
                        int index58_774 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_774);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA58_775 = input.LA(1);

                         
                        int index58_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_775);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA58_776 = input.LA(1);

                         
                        int index58_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_776);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA58_777 = input.LA(1);

                         
                        int index58_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_777);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA58_778 = input.LA(1);

                         
                        int index58_778 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_778);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA58_779 = input.LA(1);

                         
                        int index58_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_779);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA58_780 = input.LA(1);

                         
                        int index58_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_780);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA58_781 = input.LA(1);

                         
                        int index58_781 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_781);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA58_782 = input.LA(1);

                         
                        int index58_782 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_782);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA58_783 = input.LA(1);

                         
                        int index58_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_783);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA58_784 = input.LA(1);

                         
                        int index58_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_784);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA58_785 = input.LA(1);

                         
                        int index58_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_785);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA58_786 = input.LA(1);

                         
                        int index58_786 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_786);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA58_787 = input.LA(1);

                         
                        int index58_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_787);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA58_789 = input.LA(1);

                         
                        int index58_789 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_789);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA58_790 = input.LA(1);

                         
                        int index58_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_790);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA58_791 = input.LA(1);

                         
                        int index58_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_791);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA58_792 = input.LA(1);

                         
                        int index58_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_792);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA58_793 = input.LA(1);

                         
                        int index58_793 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_793);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA58_794 = input.LA(1);

                         
                        int index58_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_794);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA58_795 = input.LA(1);

                         
                        int index58_795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_795);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA58_797 = input.LA(1);

                         
                        int index58_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_797);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA58_798 = input.LA(1);

                         
                        int index58_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_798);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA58_799 = input.LA(1);

                         
                        int index58_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_799);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA58_800 = input.LA(1);

                         
                        int index58_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_800);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA58_801 = input.LA(1);

                         
                        int index58_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_801);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA58_802 = input.LA(1);

                         
                        int index58_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_802);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA58_804 = input.LA(1);

                         
                        int index58_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_804);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA58_805 = input.LA(1);

                         
                        int index58_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_805);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA58_806 = input.LA(1);

                         
                        int index58_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_806);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA58_807 = input.LA(1);

                         
                        int index58_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_807);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA58_808 = input.LA(1);

                         
                        int index58_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_808);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA58_809 = input.LA(1);

                         
                        int index58_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_809);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA58_811 = input.LA(1);

                         
                        int index58_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_811);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA58_812 = input.LA(1);

                         
                        int index58_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_812);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA58_813 = input.LA(1);

                         
                        int index58_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_813);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA58_814 = input.LA(1);

                         
                        int index58_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_814);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA58_815 = input.LA(1);

                         
                        int index58_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_815);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA58_816 = input.LA(1);

                         
                        int index58_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_816);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA58_818 = input.LA(1);

                         
                        int index58_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_818);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA58_819 = input.LA(1);

                         
                        int index58_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_819);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA58_820 = input.LA(1);

                         
                        int index58_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_820);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA58_821 = input.LA(1);

                         
                        int index58_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_821);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA58_822 = input.LA(1);

                         
                        int index58_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_822);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA58_823 = input.LA(1);

                         
                        int index58_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_823);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA58_825 = input.LA(1);

                         
                        int index58_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_825);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA58_826 = input.LA(1);

                         
                        int index58_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_826);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA58_827 = input.LA(1);

                         
                        int index58_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_827);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA58_828 = input.LA(1);

                         
                        int index58_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_828);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA58_829 = input.LA(1);

                         
                        int index58_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_829);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA58_830 = input.LA(1);

                         
                        int index58_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_830);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA58_831 = input.LA(1);

                         
                        int index58_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_831);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA58_832 = input.LA(1);

                         
                        int index58_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_832);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA58_833 = input.LA(1);

                         
                        int index58_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_833);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA58_834 = input.LA(1);

                         
                        int index58_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_834);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA58_835 = input.LA(1);

                         
                        int index58_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_835);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA58_836 = input.LA(1);

                         
                        int index58_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_836);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA58_837 = input.LA(1);

                         
                        int index58_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_837);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA58_838 = input.LA(1);

                         
                        int index58_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_838);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA58_839 = input.LA(1);

                         
                        int index58_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_839);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA58_840 = input.LA(1);

                         
                        int index58_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_840);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA58_841 = input.LA(1);

                         
                        int index58_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_841);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA58_842 = input.LA(1);

                         
                        int index58_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_842);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA58_843 = input.LA(1);

                         
                        int index58_843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_843);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA58_844 = input.LA(1);

                         
                        int index58_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_844);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA58_845 = input.LA(1);

                         
                        int index58_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_845);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA58_846 = input.LA(1);

                         
                        int index58_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_846);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA58_847 = input.LA(1);

                         
                        int index58_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_847);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA58_848 = input.LA(1);

                         
                        int index58_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_848);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA58_849 = input.LA(1);

                         
                        int index58_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_849);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA58_850 = input.LA(1);

                         
                        int index58_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_850);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA58_851 = input.LA(1);

                         
                        int index58_851 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_851);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA58_852 = input.LA(1);

                         
                        int index58_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_852);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA58_853 = input.LA(1);

                         
                        int index58_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_853);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA58_854 = input.LA(1);

                         
                        int index58_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_854);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA58_855 = input.LA(1);

                         
                        int index58_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_855);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA58_856 = input.LA(1);

                         
                        int index58_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_856);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA58_857 = input.LA(1);

                         
                        int index58_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_857);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA58_858 = input.LA(1);

                         
                        int index58_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_858);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA58_859 = input.LA(1);

                         
                        int index58_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_859);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA58_860 = input.LA(1);

                         
                        int index58_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_860);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA58_861 = input.LA(1);

                         
                        int index58_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_861);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA58_862 = input.LA(1);

                         
                        int index58_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_862);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA58_863 = input.LA(1);

                         
                        int index58_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_863);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA58_864 = input.LA(1);

                         
                        int index58_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_864);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA58_865 = input.LA(1);

                         
                        int index58_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_865);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA58_866 = input.LA(1);

                         
                        int index58_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_866);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA58_867 = input.LA(1);

                         
                        int index58_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_867);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA58_868 = input.LA(1);

                         
                        int index58_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_868);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA58_869 = input.LA(1);

                         
                        int index58_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_869);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA58_870 = input.LA(1);

                         
                        int index58_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_870);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA58_871 = input.LA(1);

                         
                        int index58_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_871);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA58_872 = input.LA(1);

                         
                        int index58_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_872);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA58_873 = input.LA(1);

                         
                        int index58_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_873);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA58_874 = input.LA(1);

                         
                        int index58_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_874);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA58_875 = input.LA(1);

                         
                        int index58_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_875);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA58_876 = input.LA(1);

                         
                        int index58_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_876);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA58_877 = input.LA(1);

                         
                        int index58_877 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_877);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA58_878 = input.LA(1);

                         
                        int index58_878 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_878);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA58_879 = input.LA(1);

                         
                        int index58_879 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_879);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA58_880 = input.LA(1);

                         
                        int index58_880 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_880);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA58_881 = input.LA(1);

                         
                        int index58_881 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_881);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA58_882 = input.LA(1);

                         
                        int index58_882 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_882);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA58_883 = input.LA(1);

                         
                        int index58_883 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_883);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA58_884 = input.LA(1);

                         
                        int index58_884 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_884);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA58_885 = input.LA(1);

                         
                        int index58_885 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_885);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA58_886 = input.LA(1);

                         
                        int index58_886 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_886);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA58_887 = input.LA(1);

                         
                        int index58_887 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_887);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA58_888 = input.LA(1);

                         
                        int index58_888 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_888);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA58_889 = input.LA(1);

                         
                        int index58_889 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_889);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA58_890 = input.LA(1);

                         
                        int index58_890 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_890);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA58_891 = input.LA(1);

                         
                        int index58_891 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_891);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA58_892 = input.LA(1);

                         
                        int index58_892 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_892);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA58_893 = input.LA(1);

                         
                        int index58_893 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_893);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA58_894 = input.LA(1);

                         
                        int index58_894 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_894);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA58_895 = input.LA(1);

                         
                        int index58_895 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_895);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA58_896 = input.LA(1);

                         
                        int index58_896 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_896);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA58_961 = input.LA(1);

                         
                        int index58_961 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_961);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA58_962 = input.LA(1);

                         
                        int index58_962 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_962);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA58_963 = input.LA(1);

                         
                        int index58_963 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_963);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA58_964 = input.LA(1);

                         
                        int index58_964 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_964);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA58_965 = input.LA(1);

                         
                        int index58_965 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_965);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA58_966 = input.LA(1);

                         
                        int index58_966 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_966);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA58_967 = input.LA(1);

                         
                        int index58_967 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_967);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA58_968 = input.LA(1);

                         
                        int index58_968 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_968);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA58_969 = input.LA(1);

                         
                        int index58_969 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_969);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA58_970 = input.LA(1);

                         
                        int index58_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_970);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA58_971 = input.LA(1);

                         
                        int index58_971 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_971);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA58_972 = input.LA(1);

                         
                        int index58_972 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_972);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA58_973 = input.LA(1);

                         
                        int index58_973 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_973);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA58_974 = input.LA(1);

                         
                        int index58_974 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_974);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA58_989 = input.LA(1);

                         
                        int index58_989 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_989);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA58_993 = input.LA(1);

                         
                        int index58_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_993);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA58_998 = input.LA(1);

                         
                        int index58_998 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_998);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA58_999 = input.LA(1);

                         
                        int index58_999 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_999);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA58_1002 = input.LA(1);

                         
                        int index58_1002 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1002);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA58_1003 = input.LA(1);

                         
                        int index58_1003 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1003);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA58_1007 = input.LA(1);

                         
                        int index58_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA58_1010 = input.LA(1);

                         
                        int index58_1010 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1010);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA58_1033 = input.LA(1);

                         
                        int index58_1033 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1033);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA58_1034 = input.LA(1);

                         
                        int index58_1034 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1034);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA58_1099 = input.LA(1);

                         
                        int index58_1099 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1099);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA58_1100 = input.LA(1);

                         
                        int index58_1100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1100);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA58_1101 = input.LA(1);

                         
                        int index58_1101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1101);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA58_1102 = input.LA(1);

                         
                        int index58_1102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1102);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA58_1103 = input.LA(1);

                         
                        int index58_1103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1103);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA58_1104 = input.LA(1);

                         
                        int index58_1104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1104);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA58_1105 = input.LA(1);

                         
                        int index58_1105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1105);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA58_1106 = input.LA(1);

                         
                        int index58_1106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1106);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA58_1107 = input.LA(1);

                         
                        int index58_1107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1107);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA58_1108 = input.LA(1);

                         
                        int index58_1108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1108);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA58_1109 = input.LA(1);

                         
                        int index58_1109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1109);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA58_1110 = input.LA(1);

                         
                        int index58_1110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1110);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA58_1111 = input.LA(1);

                         
                        int index58_1111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1111);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA58_1112 = input.LA(1);

                         
                        int index58_1112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1112);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA58_1127 = input.LA(1);

                         
                        int index58_1127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1127);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA58_1131 = input.LA(1);

                         
                        int index58_1131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1131);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA58_1136 = input.LA(1);

                         
                        int index58_1136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1136);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA58_1137 = input.LA(1);

                         
                        int index58_1137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1137);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA58_1140 = input.LA(1);

                         
                        int index58_1140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1140);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA58_1141 = input.LA(1);

                         
                        int index58_1141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1141);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA58_1206 = input.LA(1);

                         
                        int index58_1206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1206);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA58_1207 = input.LA(1);

                         
                        int index58_1207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1207);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA58_1208 = input.LA(1);

                         
                        int index58_1208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1208);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA58_1209 = input.LA(1);

                         
                        int index58_1209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1209);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA58_1210 = input.LA(1);

                         
                        int index58_1210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1210);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA58_1211 = input.LA(1);

                         
                        int index58_1211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1211);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA58_1212 = input.LA(1);

                         
                        int index58_1212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1212);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA58_1213 = input.LA(1);

                         
                        int index58_1213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1213);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA58_1214 = input.LA(1);

                         
                        int index58_1214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1214);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA58_1215 = input.LA(1);

                         
                        int index58_1215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1215);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA58_1216 = input.LA(1);

                         
                        int index58_1216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1216);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA58_1217 = input.LA(1);

                         
                        int index58_1217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1217);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA58_1218 = input.LA(1);

                         
                        int index58_1218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1218);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA58_1219 = input.LA(1);

                         
                        int index58_1219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1219);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA58_1234 = input.LA(1);

                         
                        int index58_1234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1234);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA58_1238 = input.LA(1);

                         
                        int index58_1238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1238);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA58_1243 = input.LA(1);

                         
                        int index58_1243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1243);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA58_1244 = input.LA(1);

                         
                        int index58_1244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1244);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA58_1247 = input.LA(1);

                         
                        int index58_1247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1247);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA58_1248 = input.LA(1);

                         
                        int index58_1248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1248);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA58_1313 = input.LA(1);

                         
                        int index58_1313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1313);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA58_1314 = input.LA(1);

                         
                        int index58_1314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1314);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA58_1315 = input.LA(1);

                         
                        int index58_1315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1315);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA58_1316 = input.LA(1);

                         
                        int index58_1316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1316);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA58_1317 = input.LA(1);

                         
                        int index58_1317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1317);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA58_1318 = input.LA(1);

                         
                        int index58_1318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1318);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA58_1319 = input.LA(1);

                         
                        int index58_1319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1319);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA58_1320 = input.LA(1);

                         
                        int index58_1320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1320);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA58_1321 = input.LA(1);

                         
                        int index58_1321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1321);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA58_1322 = input.LA(1);

                         
                        int index58_1322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1322);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA58_1323 = input.LA(1);

                         
                        int index58_1323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1323);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA58_1324 = input.LA(1);

                         
                        int index58_1324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1324);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA58_1325 = input.LA(1);

                         
                        int index58_1325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1325);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA58_1326 = input.LA(1);

                         
                        int index58_1326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1326);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA58_1341 = input.LA(1);

                         
                        int index58_1341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1341);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA58_1345 = input.LA(1);

                         
                        int index58_1345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1345);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA58_1350 = input.LA(1);

                         
                        int index58_1350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1350);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA58_1351 = input.LA(1);

                         
                        int index58_1351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1351);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA58_1354 = input.LA(1);

                         
                        int index58_1354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1354);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA58_1355 = input.LA(1);

                         
                        int index58_1355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1355);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA58_1420 = input.LA(1);

                         
                        int index58_1420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1420);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA58_1421 = input.LA(1);

                         
                        int index58_1421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1421);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA58_1422 = input.LA(1);

                         
                        int index58_1422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1422);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA58_1423 = input.LA(1);

                         
                        int index58_1423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1423);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA58_1424 = input.LA(1);

                         
                        int index58_1424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1424);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA58_1425 = input.LA(1);

                         
                        int index58_1425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1425);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA58_1426 = input.LA(1);

                         
                        int index58_1426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1426);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA58_1427 = input.LA(1);

                         
                        int index58_1427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1427);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA58_1428 = input.LA(1);

                         
                        int index58_1428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1428);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA58_1429 = input.LA(1);

                         
                        int index58_1429 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1429);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA58_1430 = input.LA(1);

                         
                        int index58_1430 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1430);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA58_1431 = input.LA(1);

                         
                        int index58_1431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1431);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA58_1432 = input.LA(1);

                         
                        int index58_1432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1432);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA58_1433 = input.LA(1);

                         
                        int index58_1433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1433);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA58_1448 = input.LA(1);

                         
                        int index58_1448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1448);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA58_1452 = input.LA(1);

                         
                        int index58_1452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1452);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA58_1457 = input.LA(1);

                         
                        int index58_1457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1457);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA58_1458 = input.LA(1);

                         
                        int index58_1458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1458);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA58_1461 = input.LA(1);

                         
                        int index58_1461 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1461);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA58_1462 = input.LA(1);

                         
                        int index58_1462 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1462);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA58_1527 = input.LA(1);

                         
                        int index58_1527 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1527);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA58_1528 = input.LA(1);

                         
                        int index58_1528 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1528);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA58_1529 = input.LA(1);

                         
                        int index58_1529 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1529);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA58_1530 = input.LA(1);

                         
                        int index58_1530 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1530);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA58_1531 = input.LA(1);

                         
                        int index58_1531 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1531);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA58_1532 = input.LA(1);

                         
                        int index58_1532 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1532);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA58_1533 = input.LA(1);

                         
                        int index58_1533 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1533);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA58_1534 = input.LA(1);

                         
                        int index58_1534 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1534);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA58_1535 = input.LA(1);

                         
                        int index58_1535 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1535);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA58_1536 = input.LA(1);

                         
                        int index58_1536 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1536);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA58_1537 = input.LA(1);

                         
                        int index58_1537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1537);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA58_1538 = input.LA(1);

                         
                        int index58_1538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1538);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA58_1539 = input.LA(1);

                         
                        int index58_1539 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1539);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA58_1540 = input.LA(1);

                         
                        int index58_1540 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1540);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA58_1555 = input.LA(1);

                         
                        int index58_1555 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1555);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA58_1559 = input.LA(1);

                         
                        int index58_1559 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1559);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA58_1564 = input.LA(1);

                         
                        int index58_1564 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1564);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA58_1565 = input.LA(1);

                         
                        int index58_1565 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index58_1565);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA57_eotS =
        "\74\uffff";
    static final String DFA57_eofS =
        "\1\1\73\uffff";
    static final String DFA57_minS =
        "\1\27\73\uffff";
    static final String DFA57_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA57_specialS =
        "\74\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 502:30: ( access_wrapper name )*";
        }
    }
    static final String DFA60_eotS =
        "\u013e\uffff";
    static final String DFA60_eofS =
        "\2\uffff\1\13\6\uffff\1\160\u0134\uffff";
    static final String DFA60_minS =
        "\1\13\1\57\1\27\6\uffff\1\27\1\13\72\uffff\1\13\72\uffff\2\13\1"+
        "\166\10\57\1\u00c5\1\57\4\13\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA60_maxS =
        "\1\170\1\57\1\u00c9\6\uffff\1\u00c9\1\u00ca\72\uffff\1\u00ca\72"+
        "\uffff\1\u00aa\1\u00ca\1\166\1\57\1\u00c8\1\57\5\u00c8\1\u00c5\1"+
        "\u00c3\1\u00ca\3\u00aa\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff\5\0"+
        "\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA60_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\72\uffff\72\2\122"+
        "\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\107\uffff";
    static final String DFA60_specialS =
        "\1\0\10\uffff\1\1\172\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\6\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\2\uffff\1\111\1\112\1\113\1\114\1\115\1\116\2\uffff\1"+
        "\117\1\120\1\121\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\1\130"+
        "\2\uffff\1\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
        "\1\141\1\142\2\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1"+
        "\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
        "\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
        "\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087"+
        "\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
        "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097"+
        "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8}>";
    static final String[] DFA60_transitionS = {
            "\1\10\5\uffff\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\1\5"+
            "\32\uffff\1\1\3\uffff\1\3",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\35\uffff\1"+
            "\13\1\uffff\2\13\1\uffff\3\13\1\uffff\2\13\1\uffff\3\13\1\uffff"+
            "\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\10\13\4\uffff\1\13\2"+
            "\uffff\4\13\2\uffff\1\12\3\13\1\uffff\15\13\1\uffff\16\13\1"+
            "\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\27\uffff\1\115\21\uffff\1\152\21\uffff\1\151\35\uffff"+
            "\1\171\1\uffff\1\171\1\110\1\uffff\1\107\1\112\1\116\1\uffff"+
            "\1\117\1\177\1\uffff\1\174\1\117\1\177\1\uffff\2\106\1\171\1"+
            "\uffff\1\176\1\113\2\171\1\uffff\6\171\1\uffff\1\111\1\154\1"+
            "\162\1\173\1\170\1\155\1\161\1\164\4\uffff\1\163\2\uffff\1\132"+
            "\1\172\1\134\1\133\2\uffff\1\105\1\153\1\175\1\171\1\uffff\1"+
            "\145\1\156\1\125\1\146\1\157\1\136\1\140\1\122\1\165\1\143\1"+
            "\147\1\120\1\137\1\uffff\1\127\1\130\1\142\1\131\1\135\1\121"+
            "\1\141\1\167\1\123\1\126\1\124\1\144\1\150\1\171\1\uffff\1\171"+
            "\1\114",
            "\1\u008a\5\uffff\1\u0088\35\uffff\1\u0084\24\uffff\1\u0089"+
            "\23\uffff\1\u0086\1\u0087\26\uffff\1\u008e\3\uffff\1\u0083\1"+
            "\uffff\1\u0081\1\uffff\1\u0085\2\uffff\1\u0090\2\uffff\1\u0080"+
            "\1\u0090\37\uffff\1\u0082\6\uffff\1\u008d\2\uffff\1\u008b\1"+
            "\u008c\37\uffff\1\u008f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\5\uffff\1\u0099\35\uffff\1\u0095\24\uffff\1\u009a"+
            "\23\uffff\1\u0097\1\u0098\26\uffff\1\u009f\3\uffff\1\u0094\1"+
            "\uffff\1\u0092\1\uffff\1\u0096\2\uffff\1\u00a1\2\uffff\1\u0091"+
            "\1\u00a1\37\uffff\1\u0093\6\uffff\1\u009e\2\uffff\1\u009c\1"+
            "\u009d\37\uffff\1\u00a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ab\5\uffff\1\u00a9\35\uffff\1\u00a5\24\uffff\1\u00aa"+
            "\23\uffff\1\u00a7\1\u00a8\32\uffff\1\u00a4\1\uffff\1\u00a2\1"+
            "\uffff\1\u00a6\46\uffff\1\u00a3\6\uffff\1\u00ae\2\uffff\1\u00ac"+
            "\1\u00ad",
            "\1\u00c3\5\uffff\1\u00c1\35\uffff\1\u00b7\24\uffff\1\u00c2"+
            "\23\uffff\1\u00bf\1\u00c0\26\uffff\1\u00c7\3\uffff\1\u00bd\1"+
            "\uffff\1\u00b0\1\uffff\1\u00be\2\uffff\1\u00c9\2\uffff\1\u00bb"+
            "\1\u00c9\37\uffff\1\u00bc\6\uffff\1\u00c6\2\uffff\1\u00c4\1"+
            "\u00c5\2\uffff\1\u00b2\4\uffff\1\u00ba\3\uffff\1\u00af\2\uffff"+
            "\1\u00b4\1\u00b5\1\uffff\1\u00b6\1\uffff\1\u00b8\2\uffff\1\u00b9"+
            "\1\u00b3\1\u00b1\6\uffff\1\u00c8",
            "\1\u00ca",
            "\1\u00cb",
            "\1\13\101\uffff\1\u00d0\1\uffff\2\u00d0\1\uffff\1\u00ce\1\uffff"+
            "\1\u00d0\1\uffff\1\u00d0\1\u00cf\2\uffff\1\u00d0\1\u00cf\1\uffff"+
            "\2\u00cd\1\u00d0\3\uffff\2\u00d0\1\uffff\6\u00d0\1\uffff\1\u00d1"+
            "\24\uffff\1\u00cc\1\uffff\1\u00d2\1\u00d0\34\uffff\1\u00d0\1"+
            "\uffff\1\u00d0",
            "\1\u00d4",
            "\1\13\101\uffff\1\u00d8\1\uffff\2\u00d8\1\uffff\1\u00d6\1\uffff"+
            "\1\u00d8\1\uffff\1\u00d8\1\u00d7\2\uffff\1\u00d8\1\u00d7\1\uffff"+
            "\2\u00d5\1\u00d8\3\uffff\2\u00d8\1\uffff\6\u00d8\1\uffff\1\u00d9"+
            "\26\uffff\1\u00da\1\u00d8\34\uffff\1\u00d8\1\uffff\1\u00d8",
            "\1\13\101\uffff\1\u00df\1\uffff\2\u00df\1\uffff\1\u00dd\1\uffff"+
            "\1\u00df\1\uffff\1\u00df\1\u00de\2\uffff\1\u00df\1\u00de\1\uffff"+
            "\2\u00dc\1\u00df\3\uffff\2\u00df\1\uffff\6\u00df\1\uffff\1\u00e0"+
            "\26\uffff\1\u00e1\1\u00df\34\uffff\1\u00df\1\uffff\1\u00df",
            "\1\13\101\uffff\1\u00e6\1\uffff\2\u00e6\1\uffff\1\u00e4\1\uffff"+
            "\1\u00e6\1\uffff\1\u00e6\1\u00e5\2\uffff\1\u00e6\1\u00e5\1\uffff"+
            "\2\u00e3\1\u00e6\3\uffff\2\u00e6\1\uffff\6\u00e6\1\uffff\1\u00e7"+
            "\26\uffff\1\u00e8\1\u00e6\34\uffff\1\u00e6\1\uffff\1\u00e6",
            "\1\13\101\uffff\1\u00ed\1\uffff\2\u00ed\1\uffff\1\u00eb\1\uffff"+
            "\1\u00ed\1\uffff\1\u00ed\1\u00ec\2\uffff\1\u00ed\1\u00ec\1\uffff"+
            "\2\u00ea\1\u00ed\3\uffff\2\u00ed\1\uffff\6\u00ed\1\uffff\1\u00ee"+
            "\26\uffff\1\u00ef\1\u00ed\34\uffff\1\u00ed\1\uffff\1\u00ed",
            "\1\13\101\uffff\1\u00f4\1\uffff\2\u00f4\1\uffff\1\u00f2\1\uffff"+
            "\1\u00f4\1\uffff\1\u00f4\1\u00f3\2\uffff\1\u00f4\1\u00f3\1\uffff"+
            "\2\u00f1\1\u00f4\3\uffff\2\u00f4\1\uffff\6\u00f4\1\uffff\1\u00f5"+
            "\26\uffff\1\u00f6\1\u00f4\34\uffff\1\u00f4\1\uffff\1\u00f4",
            "\1\u00f8",
            "\1\u0101\106\uffff\1\u00fa\1\u0105\65\uffff\1\u00fc\4\uffff"+
            "\1\u0104\3\uffff\1\u00f9\2\uffff\1\u00fe\1\u00ff\1\uffff\1\u0100"+
            "\1\uffff\1\u0102\2\uffff\1\u0103\1\u00fd\1\u00fb",
            "\1\u0110\5\uffff\1\u010e\35\uffff\1\u010a\24\uffff\1\u010f"+
            "\23\uffff\1\u010c\1\u010d\26\uffff\1\u0114\3\uffff\1\u0109\1"+
            "\uffff\1\u0107\1\uffff\1\u010b\2\uffff\1\u0116\2\uffff\1\u0106"+
            "\1\u0116\37\uffff\1\u0108\6\uffff\1\u0113\2\uffff\1\u0111\1"+
            "\u0112\37\uffff\1\u0115",
            "\1\u0120\5\uffff\1\u011e\35\uffff\1\u011a\24\uffff\1\u011f"+
            "\23\uffff\1\u011c\1\u011d\32\uffff\1\u0119\1\uffff\1\u0117\1"+
            "\uffff\1\u011b\46\uffff\1\u0118\6\uffff\1\u0123\2\uffff\1\u0121"+
            "\1\u0122",
            "\1\u012d\5\uffff\1\u012b\35\uffff\1\u0127\24\uffff\1\u012c"+
            "\23\uffff\1\u0129\1\u012a\32\uffff\1\u0126\1\uffff\1\u0124\1"+
            "\uffff\1\u0128\46\uffff\1\u0125\6\uffff\1\u0130\2\uffff\1\u012e"+
            "\1\u012f",
            "\1\u013a\5\uffff\1\u0138\35\uffff\1\u0134\24\uffff\1\u0139"+
            "\23\uffff\1\u0136\1\u0137\32\uffff\1\u0133\1\uffff\1\u0131\1"+
            "\uffff\1\u0135\46\uffff\1\u0132\6\uffff\1\u013d\2\uffff\1\u013b"+
            "\1\u013c",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "505:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_0 = input.LA(1);

                         
                        int index60_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA60_0==116) ) {s = 1;}

                        else if ( (LA60_0==ID) ) {s = 2;}

                        else if ( (LA60_0==120) && (synpred15_Objc())) {s = 3;}

                        else if ( (LA60_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA60_0==STRING_OBJC) ) {s = 5;}

                        else if ( (LA60_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA60_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA60_0==BOOL_LITERAL) ) {s = 8;}

                         
                        input.seek(index60_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_9 = input.LA(1);

                         
                        int index60_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA60_9==166) ) {s = 69;}

                        else if ( ((LA60_9 >= 129 && LA60_9 <= 130)) && (synpred15_Objc())) {s = 70;}

                        else if ( (LA60_9==118) && (synpred15_Objc())) {s = 71;}

                        else if ( (LA60_9==116) && (synpred15_Objc())) {s = 72;}

                        else if ( (LA60_9==145) && (synpred15_Objc())) {s = 73;}

                        else if ( (LA60_9==119) && (synpred15_Objc())) {s = 74;}

                        else if ( (LA60_9==134) && (synpred15_Objc())) {s = 75;}

                        else if ( (LA60_9==201) && (synpred15_Objc())) {s = 76;}

                        else if ( (LA60_9==ID) && (synpred15_Objc())) {s = 77;}

                        else if ( (LA60_9==120) && (synpred15_Objc())) {s = 78;}

                        else if ( (LA60_9==122||LA60_9==126) && (synpred15_Objc())) {s = 79;}

                        else if ( (LA60_9==182) && (synpred15_Objc())) {s = 80;}

                        else if ( (LA60_9==190) && (synpred15_Objc())) {s = 81;}

                        else if ( (LA60_9==178) && (synpred15_Objc())) {s = 82;}

                        else if ( (LA60_9==193) && (synpred15_Objc())) {s = 83;}

                        else if ( (LA60_9==195) && (synpred15_Objc())) {s = 84;}

                        else if ( (LA60_9==173) && (synpred15_Objc())) {s = 85;}

                        else if ( (LA60_9==194) && (synpred15_Objc())) {s = 86;}

                        else if ( (LA60_9==185) && (synpred15_Objc())) {s = 87;}

                        else if ( (LA60_9==186) && (synpred15_Objc())) {s = 88;}

                        else if ( (LA60_9==188) && (synpred15_Objc())) {s = 89;}

                        else if ( (LA60_9==160) && (synpred15_Objc())) {s = 90;}

                        else if ( (LA60_9==163) && (synpred15_Objc())) {s = 91;}

                        else if ( (LA60_9==162) && (synpred15_Objc())) {s = 92;}

                        else if ( (LA60_9==189) && (synpred15_Objc())) {s = 93;}

                        else if ( (LA60_9==176) && (synpred15_Objc())) {s = 94;}

                        else if ( (LA60_9==183) && (synpred15_Objc())) {s = 95;}

                        else if ( (LA60_9==177) && (synpred15_Objc())) {s = 96;}

                        else if ( (LA60_9==191) && (synpred15_Objc())) {s = 97;}

                        else if ( (LA60_9==187) && (synpred15_Objc())) {s = 98;}

                        else if ( (LA60_9==180) && (synpred15_Objc())) {s = 99;}

                        else if ( (LA60_9==196) && (synpred15_Objc())) {s = 100;}

                        else if ( (LA60_9==171) && (synpred15_Objc())) {s = 101;}

                        else if ( (LA60_9==174) && (synpred15_Objc())) {s = 102;}

                        else if ( (LA60_9==181) && (synpred15_Objc())) {s = 103;}

                        else if ( (LA60_9==197) && (synpred15_Objc())) {s = 104;}

                        else if ( (LA60_9==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 105;}

                        else if ( (LA60_9==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 106;}

                        else if ( (LA60_9==167) && (synpred15_Objc())) {s = 107;}

                        else if ( (LA60_9==146) && (synpred15_Objc())) {s = 108;}

                        else if ( (LA60_9==150) && (synpred15_Objc())) {s = 109;}

                        else if ( (LA60_9==172) && (synpred15_Objc())) {s = 110;}

                        else if ( (LA60_9==175) && (synpred15_Objc())) {s = 111;}

                        else if ( (LA60_9==EOF) && (synpred15_Objc())) {s = 112;}

                        else if ( (LA60_9==151) && (synpred15_Objc())) {s = 113;}

                        else if ( (LA60_9==147) && (synpred15_Objc())) {s = 114;}

                        else if ( (LA60_9==157) && (synpred15_Objc())) {s = 115;}

                        else if ( (LA60_9==152) && (synpred15_Objc())) {s = 116;}

                        else if ( (LA60_9==179) && (synpred15_Objc())) {s = 117;}

                        else if ( (LA60_9==DEFINE_LITERAL) && (synpred15_Objc())) {s = 118;}

                        else if ( (LA60_9==192) && (synpred15_Objc())) {s = 119;}

                        else if ( (LA60_9==149) && (synpred15_Objc())) {s = 120;}

                        else if ( (LA60_9==113||LA60_9==115||LA60_9==131||(LA60_9 >= 135 && LA60_9 <= 136)||(LA60_9 >= 138 && LA60_9 <= 143)||LA60_9==169||LA60_9==198||LA60_9==200) && (synpred15_Objc())) {s = 121;}

                        else if ( (LA60_9==161) && (synpred15_Objc())) {s = 122;}

                        else if ( (LA60_9==148) && (synpred15_Objc())) {s = 123;}

                        else if ( (LA60_9==125) && (synpred15_Objc())) {s = 124;}

                        else if ( (LA60_9==168) && (synpred15_Objc())) {s = 125;}

                        else if ( (LA60_9==133) && (synpred15_Objc())) {s = 126;}

                        else if ( (LA60_9==123||LA60_9==127) && (synpred15_Objc())) {s = 127;}

                         
                        input.seek(index60_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_132 = input.LA(1);

                         
                        int index60_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA60_132==166) ) {s = 204;}

                        else if ( ((LA60_132 >= 129 && LA60_132 <= 130)) ) {s = 205;}

                        else if ( (LA60_132==118) ) {s = 206;}

                        else if ( (LA60_132==123||LA60_132==127) ) {s = 207;}

                        else if ( (LA60_132==113||(LA60_132 >= 115 && LA60_132 <= 116)||LA60_132==120||LA60_132==122||LA60_132==126||LA60_132==131||(LA60_132 >= 135 && LA60_132 <= 136)||(LA60_132 >= 138 && LA60_132 <= 143)||LA60_132==169||LA60_132==198||LA60_132==200) ) {s = 208;}

                        else if ( (LA60_132==145) ) {s = 209;}

                        else if ( (LA60_132==168) && (synpred14_Objc())) {s = 210;}

                        else if ( (LA60_132==ID) ) {s = 11;}

                         
                        input.seek(index60_132);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA60_134 = input.LA(1);

                         
                        int index60_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA60_134 >= 129 && LA60_134 <= 130)) ) {s = 213;}

                        else if ( (LA60_134==118) ) {s = 214;}

                        else if ( (LA60_134==123||LA60_134==127) ) {s = 215;}

                        else if ( (LA60_134==113||(LA60_134 >= 115 && LA60_134 <= 116)||LA60_134==120||LA60_134==122||LA60_134==126||LA60_134==131||(LA60_134 >= 135 && LA60_134 <= 136)||(LA60_134 >= 138 && LA60_134 <= 143)||LA60_134==169||LA60_134==198||LA60_134==200) ) {s = 216;}

                        else if ( (LA60_134==145) ) {s = 217;}

                        else if ( (LA60_134==168) && (synpred14_Objc())) {s = 218;}

                        else if ( (LA60_134==ID) ) {s = 11;}

                         
                        input.seek(index60_134);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA60_135 = input.LA(1);

                         
                        int index60_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA60_135 >= 129 && LA60_135 <= 130)) ) {s = 220;}

                        else if ( (LA60_135==118) ) {s = 221;}

                        else if ( (LA60_135==123||LA60_135==127) ) {s = 222;}

                        else if ( (LA60_135==113||(LA60_135 >= 115 && LA60_135 <= 116)||LA60_135==120||LA60_135==122||LA60_135==126||LA60_135==131||(LA60_135 >= 135 && LA60_135 <= 136)||(LA60_135 >= 138 && LA60_135 <= 143)||LA60_135==169||LA60_135==198||LA60_135==200) ) {s = 223;}

                        else if ( (LA60_135==145) ) {s = 224;}

                        else if ( (LA60_135==168) && (synpred14_Objc())) {s = 225;}

                        else if ( (LA60_135==ID) ) {s = 11;}

                         
                        input.seek(index60_135);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA60_136 = input.LA(1);

                         
                        int index60_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA60_136 >= 129 && LA60_136 <= 130)) ) {s = 227;}

                        else if ( (LA60_136==118) ) {s = 228;}

                        else if ( (LA60_136==123||LA60_136==127) ) {s = 229;}

                        else if ( (LA60_136==113||(LA60_136 >= 115 && LA60_136 <= 116)||LA60_136==120||LA60_136==122||LA60_136==126||LA60_136==131||(LA60_136 >= 135 && LA60_136 <= 136)||(LA60_136 >= 138 && LA60_136 <= 143)||LA60_136==169||LA60_136==198||LA60_136==200) ) {s = 230;}

                        else if ( (LA60_136==145) ) {s = 231;}

                        else if ( (LA60_136==168) && (synpred14_Objc())) {s = 232;}

                        else if ( (LA60_136==ID) ) {s = 11;}

                         
                        input.seek(index60_136);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA60_137 = input.LA(1);

                         
                        int index60_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA60_137 >= 129 && LA60_137 <= 130)) ) {s = 234;}

                        else if ( (LA60_137==118) ) {s = 235;}

                        else if ( (LA60_137==123||LA60_137==127) ) {s = 236;}

                        else if ( (LA60_137==113||(LA60_137 >= 115 && LA60_137 <= 116)||LA60_137==120||LA60_137==122||LA60_137==126||LA60_137==131||(LA60_137 >= 135 && LA60_137 <= 136)||(LA60_137 >= 138 && LA60_137 <= 143)||LA60_137==169||LA60_137==198||LA60_137==200) ) {s = 237;}

                        else if ( (LA60_137==145) ) {s = 238;}

                        else if ( (LA60_137==168) && (synpred14_Objc())) {s = 239;}

                        else if ( (LA60_137==ID) ) {s = 11;}

                         
                        input.seek(index60_137);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA60_138 = input.LA(1);

                         
                        int index60_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA60_138 >= 129 && LA60_138 <= 130)) ) {s = 241;}

                        else if ( (LA60_138==118) ) {s = 242;}

                        else if ( (LA60_138==123||LA60_138==127) ) {s = 243;}

                        else if ( (LA60_138==113||(LA60_138 >= 115 && LA60_138 <= 116)||LA60_138==120||LA60_138==122||LA60_138==126||LA60_138==131||(LA60_138 >= 135 && LA60_138 <= 136)||(LA60_138 >= 138 && LA60_138 <= 143)||LA60_138==169||LA60_138==198||LA60_138==200) ) {s = 244;}

                        else if ( (LA60_138==145) ) {s = 245;}

                        else if ( (LA60_138==168) && (synpred14_Objc())) {s = 246;}

                        else if ( (LA60_138==ID) ) {s = 11;}

                         
                        input.seek(index60_138);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA60_145 = input.LA(1);

                         
                        int index60_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_145);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA60_146 = input.LA(1);

                         
                        int index60_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_146);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA60_147 = input.LA(1);

                         
                        int index60_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_147);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA60_148 = input.LA(1);

                         
                        int index60_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_148);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA60_149 = input.LA(1);

                         
                        int index60_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_149);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA60_150 = input.LA(1);

                         
                        int index60_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_150);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA60_151 = input.LA(1);

                         
                        int index60_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_151);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA60_152 = input.LA(1);

                         
                        int index60_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_152);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA60_153 = input.LA(1);

                         
                        int index60_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_153);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA60_154 = input.LA(1);

                         
                        int index60_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_154);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA60_155 = input.LA(1);

                         
                        int index60_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_155);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA60_156 = input.LA(1);

                         
                        int index60_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_156);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA60_157 = input.LA(1);

                         
                        int index60_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_157);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA60_158 = input.LA(1);

                         
                        int index60_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_158);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA60_159 = input.LA(1);

                         
                        int index60_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_159);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA60_160 = input.LA(1);

                         
                        int index60_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_160);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA60_161 = input.LA(1);

                         
                        int index60_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index60_161);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA60_162 = input.LA(1);

                         
                        int index60_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_162);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA60_163 = input.LA(1);

                         
                        int index60_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_163);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA60_164 = input.LA(1);

                         
                        int index60_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_164);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA60_165 = input.LA(1);

                         
                        int index60_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_165);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA60_166 = input.LA(1);

                         
                        int index60_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_166);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA60_167 = input.LA(1);

                         
                        int index60_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_167);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA60_168 = input.LA(1);

                         
                        int index60_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_168);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA60_169 = input.LA(1);

                         
                        int index60_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_169);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA60_170 = input.LA(1);

                         
                        int index60_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_170);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA60_171 = input.LA(1);

                         
                        int index60_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_171);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA60_172 = input.LA(1);

                         
                        int index60_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_172);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA60_173 = input.LA(1);

                         
                        int index60_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_173);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA60_174 = input.LA(1);

                         
                        int index60_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_174);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA60_175 = input.LA(1);

                         
                        int index60_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_175);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA60_176 = input.LA(1);

                         
                        int index60_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_176);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA60_177 = input.LA(1);

                         
                        int index60_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_177);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA60_178 = input.LA(1);

                         
                        int index60_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_178);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA60_179 = input.LA(1);

                         
                        int index60_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_179);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA60_180 = input.LA(1);

                         
                        int index60_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_180);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA60_181 = input.LA(1);

                         
                        int index60_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_181);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA60_182 = input.LA(1);

                         
                        int index60_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_182);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA60_183 = input.LA(1);

                         
                        int index60_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_183);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA60_184 = input.LA(1);

                         
                        int index60_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_184);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA60_185 = input.LA(1);

                         
                        int index60_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_185);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA60_186 = input.LA(1);

                         
                        int index60_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_186);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA60_187 = input.LA(1);

                         
                        int index60_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_187);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA60_188 = input.LA(1);

                         
                        int index60_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_188);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA60_189 = input.LA(1);

                         
                        int index60_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_189);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA60_190 = input.LA(1);

                         
                        int index60_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_190);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA60_191 = input.LA(1);

                         
                        int index60_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_191);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA60_192 = input.LA(1);

                         
                        int index60_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_192);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA60_193 = input.LA(1);

                         
                        int index60_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_193);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA60_194 = input.LA(1);

                         
                        int index60_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_194);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA60_195 = input.LA(1);

                         
                        int index60_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_195);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA60_196 = input.LA(1);

                         
                        int index60_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_196);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA60_197 = input.LA(1);

                         
                        int index60_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_197);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA60_198 = input.LA(1);

                         
                        int index60_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_198);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA60_199 = input.LA(1);

                         
                        int index60_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_199);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA60_200 = input.LA(1);

                         
                        int index60_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_200);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA60_201 = input.LA(1);

                         
                        int index60_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_201);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA60_202 = input.LA(1);

                         
                        int index60_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_202);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA60_203 = input.LA(1);

                         
                        int index60_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_203);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA60_204 = input.LA(1);

                         
                        int index60_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_204);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA60_205 = input.LA(1);

                         
                        int index60_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_205);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA60_206 = input.LA(1);

                         
                        int index60_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA60_207 = input.LA(1);

                         
                        int index60_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_207);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA60_208 = input.LA(1);

                         
                        int index60_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_208);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA60_209 = input.LA(1);

                         
                        int index60_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_209);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA60_212 = input.LA(1);

                         
                        int index60_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_212);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA60_213 = input.LA(1);

                         
                        int index60_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_213);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA60_214 = input.LA(1);

                         
                        int index60_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_214);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA60_215 = input.LA(1);

                         
                        int index60_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_215);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA60_216 = input.LA(1);

                         
                        int index60_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_216);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA60_217 = input.LA(1);

                         
                        int index60_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_217);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA60_220 = input.LA(1);

                         
                        int index60_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_220);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA60_221 = input.LA(1);

                         
                        int index60_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_221);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA60_222 = input.LA(1);

                         
                        int index60_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_222);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA60_223 = input.LA(1);

                         
                        int index60_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_223);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA60_224 = input.LA(1);

                         
                        int index60_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_224);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA60_227 = input.LA(1);

                         
                        int index60_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_227);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA60_228 = input.LA(1);

                         
                        int index60_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_228);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA60_229 = input.LA(1);

                         
                        int index60_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_229);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA60_230 = input.LA(1);

                         
                        int index60_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_230);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA60_231 = input.LA(1);

                         
                        int index60_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_231);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA60_234 = input.LA(1);

                         
                        int index60_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_234);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA60_235 = input.LA(1);

                         
                        int index60_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_235);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA60_236 = input.LA(1);

                         
                        int index60_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_236);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA60_237 = input.LA(1);

                         
                        int index60_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_237);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA60_238 = input.LA(1);

                         
                        int index60_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_238);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA60_241 = input.LA(1);

                         
                        int index60_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_241);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA60_242 = input.LA(1);

                         
                        int index60_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_242);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA60_243 = input.LA(1);

                         
                        int index60_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_243);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA60_244 = input.LA(1);

                         
                        int index60_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_244);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA60_245 = input.LA(1);

                         
                        int index60_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_245);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA60_248 = input.LA(1);

                         
                        int index60_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_248);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA60_249 = input.LA(1);

                         
                        int index60_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_249);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA60_250 = input.LA(1);

                         
                        int index60_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_250);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA60_251 = input.LA(1);

                         
                        int index60_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_251);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA60_252 = input.LA(1);

                         
                        int index60_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_252);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA60_253 = input.LA(1);

                         
                        int index60_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_253);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA60_254 = input.LA(1);

                         
                        int index60_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_254);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA60_255 = input.LA(1);

                         
                        int index60_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_255);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA60_256 = input.LA(1);

                         
                        int index60_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_256);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA60_257 = input.LA(1);

                         
                        int index60_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_257);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA60_258 = input.LA(1);

                         
                        int index60_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_258);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA60_259 = input.LA(1);

                         
                        int index60_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_259);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA60_260 = input.LA(1);

                         
                        int index60_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_260);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA60_261 = input.LA(1);

                         
                        int index60_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_261);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA60_262 = input.LA(1);

                         
                        int index60_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_262);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA60_263 = input.LA(1);

                         
                        int index60_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_263);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA60_264 = input.LA(1);

                         
                        int index60_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_264);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA60_265 = input.LA(1);

                         
                        int index60_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_265);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA60_266 = input.LA(1);

                         
                        int index60_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_266);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA60_267 = input.LA(1);

                         
                        int index60_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_267);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA60_268 = input.LA(1);

                         
                        int index60_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_268);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA60_269 = input.LA(1);

                         
                        int index60_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_269);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA60_270 = input.LA(1);

                         
                        int index60_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_270);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA60_271 = input.LA(1);

                         
                        int index60_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_271);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA60_272 = input.LA(1);

                         
                        int index60_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_272);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA60_273 = input.LA(1);

                         
                        int index60_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_273);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA60_274 = input.LA(1);

                         
                        int index60_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_274);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA60_275 = input.LA(1);

                         
                        int index60_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_275);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA60_276 = input.LA(1);

                         
                        int index60_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA60_277 = input.LA(1);

                         
                        int index60_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_277);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA60_278 = input.LA(1);

                         
                        int index60_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_278);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA60_279 = input.LA(1);

                         
                        int index60_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_279);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA60_280 = input.LA(1);

                         
                        int index60_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_280);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA60_281 = input.LA(1);

                         
                        int index60_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_281);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA60_282 = input.LA(1);

                         
                        int index60_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_282);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA60_283 = input.LA(1);

                         
                        int index60_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_283);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA60_284 = input.LA(1);

                         
                        int index60_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_284);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA60_285 = input.LA(1);

                         
                        int index60_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_285);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA60_286 = input.LA(1);

                         
                        int index60_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_286);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA60_287 = input.LA(1);

                         
                        int index60_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_287);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA60_288 = input.LA(1);

                         
                        int index60_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_288);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA60_289 = input.LA(1);

                         
                        int index60_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_289);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA60_290 = input.LA(1);

                         
                        int index60_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_290);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA60_291 = input.LA(1);

                         
                        int index60_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_291);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA60_292 = input.LA(1);

                         
                        int index60_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_292);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA60_293 = input.LA(1);

                         
                        int index60_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_293);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA60_294 = input.LA(1);

                         
                        int index60_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_294);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA60_295 = input.LA(1);

                         
                        int index60_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_295);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA60_296 = input.LA(1);

                         
                        int index60_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_296);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA60_297 = input.LA(1);

                         
                        int index60_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_297);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA60_298 = input.LA(1);

                         
                        int index60_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_298);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA60_299 = input.LA(1);

                         
                        int index60_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_299);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA60_300 = input.LA(1);

                         
                        int index60_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_300);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA60_301 = input.LA(1);

                         
                        int index60_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_301);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA60_302 = input.LA(1);

                         
                        int index60_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_302);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA60_303 = input.LA(1);

                         
                        int index60_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_303);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA60_304 = input.LA(1);

                         
                        int index60_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_304);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA60_305 = input.LA(1);

                         
                        int index60_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_305);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA60_306 = input.LA(1);

                         
                        int index60_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_306);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA60_307 = input.LA(1);

                         
                        int index60_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_307);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA60_308 = input.LA(1);

                         
                        int index60_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_308);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA60_309 = input.LA(1);

                         
                        int index60_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_309);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA60_310 = input.LA(1);

                         
                        int index60_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_310);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA60_311 = input.LA(1);

                         
                        int index60_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_311);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA60_312 = input.LA(1);

                         
                        int index60_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_312);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA60_313 = input.LA(1);

                         
                        int index60_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_313);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA60_314 = input.LA(1);

                         
                        int index60_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_314);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA60_315 = input.LA(1);

                         
                        int index60_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_315);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA60_316 = input.LA(1);

                         
                        int index60_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_316);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA60_317 = input.LA(1);

                         
                        int index60_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index60_317);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA147_eotS =
        "\175\uffff";
    static final String DFA147_eofS =
        "\2\uffff\1\25\5\uffff\1\140\164\uffff";
    static final String DFA147_minS =
        "\1\27\1\57\1\13\1\uffff\2\13\2\uffff\1\27\46\uffff\1\0\2\uffff\20"+
        "\0\13\uffff\1\0\14\uffff\3\0\21\uffff\1\0\4\uffff\1\0\4\uffff\1"+
        "\0\2\uffff\1\0\1\uffff";
    static final String DFA147_maxS =
        "\1\27\1\57\1\u00ca\1\uffff\1\u00ca\1\u00aa\2\uffff\1\u00c8\46\uffff"+
        "\1\0\2\uffff\20\0\13\uffff\1\0\14\uffff\3\0\21\uffff\1\0\4\uffff"+
        "\1\0\4\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA147_acceptS =
        "\3\uffff\1\1\2\uffff\2\2\1\uffff\14\2\1\3\32\uffff\2\1\20\uffff"+
        "\1\1\12\2\1\uffff\14\2\3\uffff\21\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
        "\2\2\1\uffff\1\2";
    static final String DFA147_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\2\uffff\1\3\46\uffff\1\4\2\uffff\1"+
        "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
        "\1\23\1\24\13\uffff\1\25\14\uffff\1\26\1\27\1\30\21\uffff\1\31\4"+
        "\uffff\1\32\4\uffff\1\33\2\uffff\1\34\1\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1",
            "\1\2",
            "\1\16\5\uffff\1\14\5\uffff\1\25\27\uffff\1\10\21\uffff\1\25"+
            "\2\uffff\1\15\16\uffff\1\25\4\uffff\1\12\1\13\26\uffff\1\22"+
            "\3\uffff\1\7\1\uffff\1\4\1\uffff\1\11\1\uffff\1\25\1\24\2\uffff"+
            "\1\5\1\24\1\uffff\2\3\3\uffff\1\25\14\uffff\3\25\1\uffff\2\25"+
            "\4\uffff\1\25\1\uffff\1\6\1\uffff\1\25\4\uffff\1\21\2\uffff"+
            "\1\17\1\20\2\uffff\1\25\4\uffff\2\25\2\uffff\1\25\2\uffff\2"+
            "\25\1\uffff\3\25\1\uffff\4\25\6\uffff\1\23",
            "",
            "\1\73\5\uffff\1\71\35\uffff\1\66\21\uffff\1\61\2\uffff\1\72"+
            "\16\uffff\1\60\4\uffff\1\67\1\70\26\uffff\1\77\3\uffff\1\65"+
            "\1\uffff\1\63\1\102\1\57\2\uffff\1\101\2\uffff\1\62\1\101\37"+
            "\uffff\1\64\6\uffff\1\76\2\uffff\1\74\1\75\2\uffff\1\105\4\uffff"+
            "\1\114\3\uffff\1\103\2\uffff\1\107\1\110\1\uffff\1\111\1\uffff"+
            "\1\112\2\uffff\1\113\1\106\1\104\6\uffff\1\100",
            "\1\126\5\uffff\1\124\35\uffff\1\120\24\uffff\1\125\23\uffff"+
            "\1\122\1\123\32\uffff\1\117\1\uffff\1\115\1\uffff\1\121\46\uffff"+
            "\1\116\6\uffff\1\131\2\uffff\1\127\1\130",
            "",
            "",
            "\1\151\27\uffff\1\163\21\uffff\1\165\21\uffff\1\164\35\uffff"+
            "\1\174\1\uffff\1\174\1\173\1\uffff\1\134\1\uffff\1\170\1\uffff"+
            "\1\136\1\135\2\uffff\1\136\1\135\1\uffff\2\133\1\174\2\uffff"+
            "\1\166\2\174\1\uffff\6\174\1\uffff\1\137\1\uffff\1\142\1\172"+
            "\1\167\1\uffff\1\141\1\147\4\uffff\1\143\3\uffff\1\171\4\uffff"+
            "\1\132\2\uffff\1\174\3\uffff\1\156\4\uffff\1\146\1\150\2\uffff"+
            "\1\154\2\uffff\1\160\1\161\1\uffff\1\162\1\153\1\144\1\uffff"+
            "\1\152\1\145\1\157\1\155\2\uffff\1\174\1\uffff\1\174",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "923:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_2 = input.LA(1);

                         
                        int index147_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA147_2 >= 129 && LA147_2 <= 130)) && (synpred29_Objc())) {s = 3;}

                        else if ( (LA147_2==118) ) {s = 4;}

                        else if ( (LA147_2==126) ) {s = 5;}

                        else if ( (LA147_2==159) && (synpred30_Objc())) {s = 6;}

                        else if ( (LA147_2==116) && (synpred30_Objc())) {s = 7;}

                        else if ( (LA147_2==ID) ) {s = 8;}

                        else if ( (LA147_2==120) && (synpred30_Objc())) {s = 9;}

                        else if ( (LA147_2==STRING_LITERAL) && (synpred30_Objc())) {s = 10;}

                        else if ( (LA147_2==STRING_OBJC) && (synpred30_Objc())) {s = 11;}

                        else if ( (LA147_2==CHAR_LITERAL) && (synpred30_Objc())) {s = 12;}

                        else if ( (LA147_2==NUMBER_LITERAL) && (synpred30_Objc())) {s = 13;}

                        else if ( (LA147_2==BOOL_LITERAL) && (synpred30_Objc())) {s = 14;}

                        else if ( (LA147_2==169) && (synpred30_Objc())) {s = 15;}

                        else if ( (LA147_2==170) && (synpred30_Objc())) {s = 16;}

                        else if ( (LA147_2==166) && (synpred30_Objc())) {s = 17;}

                        else if ( (LA147_2==112) && (synpred30_Objc())) {s = 18;}

                        else if ( (LA147_2==202) && (synpred30_Objc())) {s = 19;}

                        else if ( (LA147_2==123||LA147_2==127) && (synpred30_Objc())) {s = 20;}

                        else if ( (LA147_2==EOF||LA147_2==DEFINE_LITERAL||LA147_2==MULTI_COMMENT_LIT||LA147_2==SINGLE_COMMENT_LIT||LA147_2==122||LA147_2==134||(LA147_2 >= 147 && LA147_2 <= 149)||(LA147_2 >= 151 && LA147_2 <= 152)||LA147_2==157||LA147_2==161||LA147_2==173||(LA147_2 >= 178 && LA147_2 <= 179)||LA147_2==182||(LA147_2 >= 185 && LA147_2 <= 186)||(LA147_2 >= 188 && LA147_2 <= 190)||(LA147_2 >= 192 && LA147_2 <= 195)) ) {s = 21;}

                         
                        input.seek(index147_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_4 = input.LA(1);

                         
                        int index147_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA147_4==120) ) {s = 47;}

                        else if ( (LA147_4==SINGLE_COMMENT_LIT) && (synpred29_Objc())) {s = 48;}

                        else if ( (LA147_4==MULTI_COMMENT_LIT) && (synpred29_Objc())) {s = 49;}

                        else if ( (LA147_4==126) ) {s = 50;}

                        else if ( (LA147_4==118) ) {s = 51;}

                        else if ( (LA147_4==159) ) {s = 52;}

                        else if ( (LA147_4==116) ) {s = 53;}

                        else if ( (LA147_4==ID) ) {s = 54;}

                        else if ( (LA147_4==STRING_LITERAL) ) {s = 55;}

                        else if ( (LA147_4==STRING_OBJC) ) {s = 56;}

                        else if ( (LA147_4==CHAR_LITERAL) ) {s = 57;}

                        else if ( (LA147_4==NUMBER_LITERAL) ) {s = 58;}

                        else if ( (LA147_4==BOOL_LITERAL) ) {s = 59;}

                        else if ( (LA147_4==169) ) {s = 60;}

                        else if ( (LA147_4==170) ) {s = 61;}

                        else if ( (LA147_4==166) ) {s = 62;}

                        else if ( (LA147_4==112) ) {s = 63;}

                        else if ( (LA147_4==202) ) {s = 64;}

                        else if ( (LA147_4==123||LA147_4==127) ) {s = 65;}

                        else if ( (LA147_4==119) && (synpred29_Objc())) {s = 66;}

                        else if ( (LA147_4==182) && (synpred30_Objc())) {s = 67;}

                        else if ( (LA147_4==195) && (synpred30_Objc())) {s = 68;}

                        else if ( (LA147_4==173) && (synpred30_Objc())) {s = 69;}

                        else if ( (LA147_4==194) && (synpred30_Objc())) {s = 70;}

                        else if ( (LA147_4==185) && (synpred30_Objc())) {s = 71;}

                        else if ( (LA147_4==186) && (synpred30_Objc())) {s = 72;}

                        else if ( (LA147_4==188) && (synpred30_Objc())) {s = 73;}

                        else if ( (LA147_4==190) && (synpred30_Objc())) {s = 74;}

                        else if ( (LA147_4==193) && (synpred30_Objc())) {s = 75;}

                        else if ( (LA147_4==178) && (synpred30_Objc())) {s = 76;}

                         
                        input.seek(index147_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA147_5 = input.LA(1);

                         
                        int index147_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA147_5==118) ) {s = 77;}

                        else if ( (LA147_5==159) && (synpred30_Objc())) {s = 78;}

                        else if ( (LA147_5==116) && (synpred30_Objc())) {s = 79;}

                        else if ( (LA147_5==ID) && (synpred30_Objc())) {s = 80;}

                        else if ( (LA147_5==120) && (synpred30_Objc())) {s = 81;}

                        else if ( (LA147_5==STRING_LITERAL) && (synpred30_Objc())) {s = 82;}

                        else if ( (LA147_5==STRING_OBJC) && (synpred30_Objc())) {s = 83;}

                        else if ( (LA147_5==CHAR_LITERAL) && (synpred30_Objc())) {s = 84;}

                        else if ( (LA147_5==NUMBER_LITERAL) && (synpred30_Objc())) {s = 85;}

                        else if ( (LA147_5==BOOL_LITERAL) && (synpred30_Objc())) {s = 86;}

                        else if ( (LA147_5==169) && (synpred30_Objc())) {s = 87;}

                        else if ( (LA147_5==170) && (synpred30_Objc())) {s = 88;}

                        else if ( (LA147_5==166) && (synpred30_Objc())) {s = 89;}

                         
                        input.seek(index147_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA147_8 = input.LA(1);

                         
                        int index147_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA147_8==166) ) {s = 90;}

                        else if ( ((LA147_8 >= 129 && LA147_8 <= 130)) ) {s = 91;}

                        else if ( (LA147_8==118) ) {s = 92;}

                        else if ( (LA147_8==123||LA147_8==127) && (synpred30_Objc())) {s = 93;}

                        else if ( (LA147_8==122||LA147_8==126) && (synpred30_Objc())) {s = 94;}

                        else if ( (LA147_8==145) && (synpred30_Objc())) {s = 95;}

                        else if ( (LA147_8==EOF) && (synpred30_Objc())) {s = 96;}

                        else if ( (LA147_8==151) && (synpred30_Objc())) {s = 97;}

                        else if ( (LA147_8==147) && (synpred30_Objc())) {s = 98;}

                        else if ( (LA147_8==157) && (synpred30_Objc())) {s = 99;}

                        else if ( (LA147_8==190) && (synpred30_Objc())) {s = 100;}

                        else if ( (LA147_8==193) && (synpred30_Objc())) {s = 101;}

                        else if ( (LA147_8==178) && (synpred30_Objc())) {s = 102;}

                        else if ( (LA147_8==152) && (synpred30_Objc())) {s = 103;}

                        else if ( (LA147_8==179) && (synpred30_Objc())) {s = 104;}

                        else if ( (LA147_8==DEFINE_LITERAL) && (synpred30_Objc())) {s = 105;}

                        else if ( (LA147_8==192) && (synpred30_Objc())) {s = 106;}

                        else if ( (LA147_8==189) && (synpred30_Objc())) {s = 107;}

                        else if ( (LA147_8==182) && (synpred30_Objc())) {s = 108;}

                        else if ( (LA147_8==195) && (synpred30_Objc())) {s = 109;}

                        else if ( (LA147_8==173) ) {s = 110;}

                        else if ( (LA147_8==194) && (synpred30_Objc())) {s = 111;}

                        else if ( (LA147_8==185) && (synpred30_Objc())) {s = 112;}

                        else if ( (LA147_8==186) && (synpred30_Objc())) {s = 113;}

                        else if ( (LA147_8==188) && (synpred30_Objc())) {s = 114;}

                        else if ( (LA147_8==ID) ) {s = 115;}

                        else if ( (LA147_8==SINGLE_COMMENT_LIT) && (synpred30_Objc())) {s = 116;}

                        else if ( (LA147_8==MULTI_COMMENT_LIT) && (synpred30_Objc())) {s = 117;}

                        else if ( (LA147_8==134) && (synpred30_Objc())) {s = 118;}

                        else if ( (LA147_8==149) && (synpred30_Objc())) {s = 119;}

                        else if ( (LA147_8==120) ) {s = 120;}

                        else if ( (LA147_8==161) && (synpred30_Objc())) {s = 121;}

                        else if ( (LA147_8==148) && (synpred30_Objc())) {s = 122;}

                        else if ( (LA147_8==116) ) {s = 123;}

                        else if ( (LA147_8==113||LA147_8==115||LA147_8==131||(LA147_8 >= 135 && LA147_8 <= 136)||(LA147_8 >= 138 && LA147_8 <= 143)||LA147_8==169||LA147_8==198||LA147_8==200) && (synpred30_Objc())) {s = 124;}

                         
                        input.seek(index147_8);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA147_47 = input.LA(1);

                         
                        int index147_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_47);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA147_50 = input.LA(1);

                         
                        int index147_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_50);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA147_51 = input.LA(1);

                         
                        int index147_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_51);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA147_52 = input.LA(1);

                         
                        int index147_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_52);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA147_53 = input.LA(1);

                         
                        int index147_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_53);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA147_54 = input.LA(1);

                         
                        int index147_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_54);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA147_55 = input.LA(1);

                         
                        int index147_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_55);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA147_56 = input.LA(1);

                         
                        int index147_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_56);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA147_57 = input.LA(1);

                         
                        int index147_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_57);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA147_58 = input.LA(1);

                         
                        int index147_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_58);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA147_59 = input.LA(1);

                         
                        int index147_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_59);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA147_60 = input.LA(1);

                         
                        int index147_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_60);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA147_61 = input.LA(1);

                         
                        int index147_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_61);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA147_62 = input.LA(1);

                         
                        int index147_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_62);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA147_63 = input.LA(1);

                         
                        int index147_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_63);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA147_64 = input.LA(1);

                         
                        int index147_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_64);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA147_65 = input.LA(1);

                         
                        int index147_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 66;}

                        else if ( (synpred30_Objc()) ) {s = 124;}

                         
                        input.seek(index147_65);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA147_77 = input.LA(1);

                         
                        int index147_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_77);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA147_90 = input.LA(1);

                         
                        int index147_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_90);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA147_91 = input.LA(1);

                         
                        int index147_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_91);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA147_92 = input.LA(1);

                         
                        int index147_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_92);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA147_110 = input.LA(1);

                         
                        int index147_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_110);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA147_115 = input.LA(1);

                         
                        int index147_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_115);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA147_120 = input.LA(1);

                         
                        int index147_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_120);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA147_123 = input.LA(1);

                         
                        int index147_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index147_123);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code478 = new BitSet(new long[]{0x0000800000800002L,0x0040000000080002L,0x764C200021880040L,0x000000000000000FL});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_code_internal561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern663 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern666 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_extern669 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern671 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_implementation710 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_implementation713 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_category_in_implementation716 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_implementation_body_in_implementation721 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_149_in_implementation726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synthesize823 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_148_in_synthesize827 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_139_in_synthesize834 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synthesize836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synthesize840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_static_declaration_wrapper864 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call_predicate886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call_predicate893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call_predicate895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call935 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_in_block_call937 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_call940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call961 = new BitSet(new long[]{0x0000800000000000L,0x00C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_block_params_in_block_call963 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_synchronized_call1006 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synchronized_call1008 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1010 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1030 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_block_params1033 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_block_params1035 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_block_multiline1098 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1103 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_multiline1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_singleline1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_block_internal_macro1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1300 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_internal1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_goto_stmt1428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_goto_stmt1430 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_while_stmt1480 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_while_stmt1482 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1484 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1486 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_while_stmt1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_for_in_stmt1503 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1528 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1533 = new BitSet(new long[]{0x0000800000020802L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1560 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1562 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1579 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1581 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1599 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1601 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1609 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0100000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1613 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1617 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1622 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1625 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_for_stmt1640 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_for_stmt1642 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_return_stmt1680 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_switch_stmt1705 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_switch_stmt1707 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1709 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_switch_stmt1713 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1716 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_201_in_switch_stmt1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_case_stmt1779 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_case_stmt1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_default_stmt1806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_default_stmt1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_do_stmt1829 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_do_stmt1831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_do_stmt1833 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_do_stmt1835 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1837 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt1839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_if_stmt1864 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_if_stmt1866 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1868 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt1870 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_if_stmt1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_else_stmt1895 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_else_stmt1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_try_stmt_wrapper1919 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_catch_stmt1954 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1957 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1960 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt1963 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1965 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt1968 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_catch_stmt1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_finally_stmt1995 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_finally_stmt1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_throw_stmt2036 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_throw_stmt2040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_name_number2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2160 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2162 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2185 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2193 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2210 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_implementation_common2225 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2227 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2229 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2231 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2294 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2297 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2299 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_clasical_method_call_predicate2303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2318 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2321 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2323 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_classical_method_call2328 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2330 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_call2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2348 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params_push2351 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2353 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2377 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_params_push2384 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_125_in_method_params_push2389 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2392 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2413 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080002L});
    public static final BitSet FOLLOW_comments_in_method_param_push2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_method_msg2447 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_method_msg2449 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000020L});
    public static final BitSet FOLLOW_133_in_method_msg2454 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_method_msg2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_questionmark_if_stmt2486 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_questionmark_if_stmt2490 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_element_value_or_semicolon2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2561 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_array_init2564 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2566 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_197_in_element_value_or_array_init2583 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000620L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_element_value_or_array_init2588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2639 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2641 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_126_in_cast_unary_expression12656 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2686 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2708 = new BitSet(new long[]{0x0000000000000002L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2717 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_cast_unary_expression2733 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2749 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2769 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_expression2790 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2792 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2794 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_expression2796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2799 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression2801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2830 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_name_or_classical_function_call2833 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2835 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call2838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2860 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2862 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2864 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2867 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2872 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2898 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2901 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2903 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2908 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2910 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2923 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_simple_expression_value2952 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_simple_expression_value2957 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value2959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_simple_expression_value2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value2989 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value3000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value3052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value23084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_simple_expression_value23102 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23104 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_selector3312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_type_cast_name3350 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3352 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_type_cast_name3354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3449 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3506 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_lvalue3521 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3523 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3525 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3530 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3556 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_lvalue3585 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_lvalue3590 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_lvalue3592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_lvalue3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3610 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_break_stmt3638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_continue_stmt3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern_declaration3706 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3720 = new BitSet(new long[]{0x0000000000000000L,0x4400000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3737 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200002000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3739 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_declarations3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_optional_prefix3796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ns_inline3808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_property_prefix3820 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_property_prefix3822 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3824 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3827 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3829 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_property_prefix3834 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3836 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3839 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3841 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_property_prefix3843 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_typedef_declaration_wrapper3901 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3921 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3923 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_125_in_typedef_declaration3926 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3928 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_typedef_declaration3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3944 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate3946 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3948 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate3950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer3965 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer3967 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3969 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3971 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer3973 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3976 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_func_pointer3979 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3981 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_forward_class_declaration4073 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_forward_class_declaration4090 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_protocol_declaration4179 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4181 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200080L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4183 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4205 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_class_protocol_end4212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_template4224 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template4226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_template4228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implements_protocols4262 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4264 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_125_in_implements_protocols4267 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4269 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_implements_protocols4273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4295 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_template_internal4298 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4300 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_template_type4320 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_interface_declaration4384 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4386 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A2000A0L,0x0000000000000020L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4388 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L,0x0000000000000020L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4392 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4397 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_interface_declaration4402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_fields_body4419 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_body_item_in_fields_body4425 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_201_in_fields_body4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4445 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644201000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4448 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_field_modifiers4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4536 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_category4557 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_category4559 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_category4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_superclass_name4582 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4617 = new BitSet(new long[]{0x0000800000000002L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4641 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4643 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_125_in_field_declaration4647 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4649 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000020L});
    public static final BitSet FOLLOW_134_in_field_declaration4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4670 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_field_declaration4674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_declaration4680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4695 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classical_method_params4722 = new BitSet(new long[]{0x0000800000000000L,0x20C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4724 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params4728 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4730 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_params4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4759 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4807 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_classical_type_declaration4817 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4819 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_classical_type_declaration4838 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4840 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_classical_type_declaration4859 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4861 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4909 = new BitSet(new long[]{0x0000000000000002L,0x0110000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4911 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4920 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4929 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4938 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_type_declaration_plane4955 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane4958 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_type_declaration_plane4961 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane4964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane4967 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration_plane4969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_decl_protocol_predicate5001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_decl_protocol_predicate5003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_declaration_protocol5019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_declaration_protocol5021 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_type_declaration_protocol5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct_simple5047 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union_simple5069 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum_simple5095 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct5127 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct5129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct5132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union5172 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union5174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum5217 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum5219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum5222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_enum_wrapper5251 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5261 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_enum_wrapper5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element5283 = new BitSet(new long[]{0x0000000000000002L,0x3220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5286 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_enum_element5288 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_enum_element5292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_struct5346 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_struct_internal_in_struct5355 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000020EL});
    public static final BitSet FOLLOW_201_in_struct5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5417 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_120_in_type_dec5419 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_knownTypes5462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_knownTypes5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_knownTypes5474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_knownTypes5484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_array_size_in_field_name5505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_field_crap_in_field_name5509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_array_size5537 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000010L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_array_size5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_field_crap5558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5572 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_declaration_common5636 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5638 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_common5640 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5642 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_declaration_common5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5660 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_declaration_predicate5663 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5665 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate5667 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5710 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_prefix_in_method_param5730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_param5733 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_param5736 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_param5738 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param5740 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5839 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5841 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5859 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function5885 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function5887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_define_as_function5890 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_197_in_define_as_function5892 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function5895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_define_as_function5897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1294 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred4_Objc1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred5_Objc1309 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred5_Objc1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred6_Objc1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred6_Objc1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_synpred7_Objc1573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred8_Objc1590 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred8_Objc1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred9_Objc2178 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred9_Objc2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred10_Objc2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred11_Objc2778 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2780 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred11_Objc2782 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred11_Objc2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred11_Objc2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred12_Objc2823 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred12_Objc2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred13_Objc2885 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred13_Objc2888 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc2890 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_synpred13_Objc2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred14_Objc2943 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc2946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred14_Objc2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred15_Objc2978 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred15_Objc2984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred16_Objc3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred17_Objc3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred18_Objc3502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred19_Objc3515 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred19_Objc3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred20_Objc3576 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred20_Objc3579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred20_Objc3581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred21_Objc4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred22_Objc4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred23_Objc4797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred25_Objc4899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred26_Objc5118 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred26_Objc5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred26_Objc5123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred27_Objc5163 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred27_Objc5165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred27_Objc5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_synpred28_Objc5208 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred28_Objc5210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred28_Objc5213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred29_Objc5816 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred29_Objc5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred29_Objc5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5832 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred30_Objc5834 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synpred30_Objc5836 = new BitSet(new long[]{0x0000000000000002L});

}