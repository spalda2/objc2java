// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2018-03-22 18:07:53

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "StringBody", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'%'", "'&&'", "'&'", "'&='", "'('", "'(^'", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?:'", "'@'", "'@autoreleasepool'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'MH_EXPORT'", "'NO'", "'NS_INLINE'", "'YES'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'__block'", "'__weak'", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern \"C\"'", "'extern'", "'false'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'inout'", "'int'", "'long'", "'nullable'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'true'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__210=210;
    public static final int T__211=211;
    public static final int T__212=212;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BREAK_STMT=11;
    public static final int CASE_STMT=12;
    public static final int CATCH_STMT=13;
    public static final int CATEGORY=14;
    public static final int CHAR=15;
    public static final int CHAR_LITERAL=16;
    public static final int CLASS_NAME=17;
    public static final int CODE=18;
    public static final int CONTINUE_STMT=19;
    public static final int DEFAULT_STMT=20;
    public static final int DEFINE=21;
    public static final int DEFINE_LITERAL=22;
    public static final int DIGIT=23;
    public static final int DIRECTIVE=24;
    public static final int DO_STMT=25;
    public static final int ELSE_STMT=26;
    public static final int ENUM=27;
    public static final int ENUM_DEC=28;
    public static final int ENUM_FIELD=29;
    public static final int EXPR_COMPLEMENT=30;
    public static final int EXPR_NEGATE=31;
    public static final int EXPR_NOT=32;
    public static final int EXTERN=33;
    public static final int EscapeSequence=34;
    public static final int FIELD=35;
    public static final int FIELDS=36;
    public static final int FIELD_NAME=37;
    public static final int FINALLY_STMT=38;
    public static final int FORWARD_DECLARATION=39;
    public static final int FOR_IN_STMT=40;
    public static final int FOR_STMT=41;
    public static final int FUNC_POINTER=42;
    public static final int GOTO=43;
    public static final int GROUP_MODIFIER=44;
    public static final int HexDigit=45;
    public static final int ID=46;
    public static final int IF0_COMMENT=47;
    public static final int IF_STMT=48;
    public static final int IMPLEMENTATION=49;
    public static final int IMPLEMENTS_INTERFACES=50;
    public static final int IMPLEMENTS_INTERFACE_NAME=51;
    public static final int INTERFACE=52;
    public static final int INTERFACE_NAME=53;
    public static final int LETTER=54;
    public static final int METHOD=55;
    public static final int METHOD_CALL=56;
    public static final int METHOD_IMPL=57;
    public static final int METHOD_MSG=58;
    public static final int METHOD_NAME=59;
    public static final int METHOD_PARAM=60;
    public static final int METHOD_PARAMS=61;
    public static final int MODIFIER=62;
    public static final int MULTI_COMMENT=63;
    public static final int MULTI_COMMENT_LIT=64;
    public static final int NAME=65;
    public static final int NUMBER=66;
    public static final int NUMBER_LITERAL=67;
    public static final int OBJECT_ACCESS=68;
    public static final int OP=69;
    public static final int PARAMS=70;
    public static final int PARAM_NAME=71;
    public static final int PARAM_PREFIX=72;
    public static final int PREFIX=73;
    public static final int PREPROCESSOR_DECLARATION=74;
    public static final int PROPERTY=75;
    public static final int PROTOCOL=76;
    public static final int PROTOCOL_NAME=77;
    public static final int QUESTION_MARK_IF=78;
    public static final int RETURN_STMT=79;
    public static final int SIMPLE_EXPR=80;
    public static final int SINGLE_COMMENT=81;
    public static final int SINGLE_COMMENT_LIT=82;
    public static final int STATIC=83;
    public static final int STATIC_METHOD=84;
    public static final int STATIC_VARIABLE=85;
    public static final int STRING=86;
    public static final int STRING_LITERAL=87;
    public static final int STRING_OBJC=88;
    public static final int STRUCT=89;
    public static final int STRUCT_DEC=90;
    public static final int SUPERCLASS_NAME=91;
    public static final int SWITCH_STMT=92;
    public static final int SYNCHRONIZED=93;
    public static final int SYNTHETIZE=94;
    public static final int StringBody=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==119||LA1_0==136||LA1_0==152||(LA1_0 >= 156 && LA1_0 <= 157)||LA1_0==162||(LA1_0 >= 170 && LA1_0 <= 171)||(LA1_0 >= 180 && LA1_0 <= 181)||LA1_0==184||LA1_0==189||LA1_0==191||LA1_0==195||(LA1_0 >= 198 && LA1_0 <= 201)||(LA1_0 >= 203 && LA1_0 <= 205)||(LA1_0 >= 208 && LA1_0 <= 211)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code483);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal13=null;
        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper2 =null;

        ObjcParser.implementation_wrapper_return implementation_wrapper3 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration4 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper5 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper6 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper7 =null;

        ObjcParser.define_declaration_return define_declaration8 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper9 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper10 =null;

        ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous11 =null;

        ObjcParser.comments_return comments12 =null;


        Object char_literal13_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:3: ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' )
            int alt2=12;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )=> variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal514);
                    variable_declaration_wrapper2=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal519);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal524);
                    forward_class_declaration4=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal530);
                    protocol_declaration_wrapper5=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal537);
                    interface_declaration_wrapper6=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal544);
                    extern_declaration_wrapper7=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal550);
                    define_declaration8=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal556);
                    typedef_declaration_wrapper9=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal562);
                    static_declaration_wrapper10=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: type_declaration_struct_enum_union_anonymous
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568);
                    type_declaration_struct_enum_union_anonymous11=type_declaration_struct_enum_union_anonymous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_enum_union_anonymous11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal574);
                    comments12=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments12.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal13=(Token)match(input,136,FOLLOW_136_in_code_internal580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = 
                    (Object)adaptor.create(char_literal13)
                    ;
                    adaptor.addChild(root_0, char_literal13_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment14 =null;

        ObjcParser.multi_comment_return multi_comment15 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments592);
                    single_comment14=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment14.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments598);
                    multi_comment15=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment15.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT16=null;

        Object SINGLE_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT16=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT16);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT17=null;

        Object MULTI_COMMENT_LIT17_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT17=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT17);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:2: extern_wrapper : extern_c -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_c_return extern_c18 =null;


        RewriteRuleSubtreeStream stream_extern_c=new RewriteRuleSubtreeStream(adaptor,"rule extern_c");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:3: ( extern_c -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:6: extern_c
            {
            pushFollow(FOLLOW_extern_c_in_extern_wrapper664);
            extern_c18=extern_c();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_c.add(extern_c18.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:15: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:18: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_c_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_c"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:2: extern_c : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_c_return extern_c() throws RecognitionException {
        ObjcParser.extern_c_return retval = new ObjcParser.extern_c_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token set22=null;
        Token char_literal23=null;

        Object string_literal19_tree=null;
        Object string_literal20_tree=null;
        Object char_literal21_tree=null;
        Object set22_tree=null;
        Object char_literal23_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:5: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:7: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,191,FOLLOW_191_in_extern_c688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            string_literal20=(Token)match(input,114,FOLLOW_114_in_extern_c691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = 
            (Object)adaptor.create(string_literal20)
            ;
            adaptor.addChild(root_0, string_literal20_tree);
            }

            char_literal21=(Token)match(input,119,FOLLOW_119_in_extern_c694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            set22=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 120)||(input.LA(1) >= 122 && input.LA(1) <= 218) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set22)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal23=(Token)match(input,121,FOLLOW_121_in_extern_c701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_c"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation24 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper718);
            implementation24=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation24.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 162:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal25=null;
        Token string_literal29=null;
        ObjcParser.name_return name26 =null;

        ObjcParser.category_return category27 =null;

        ObjcParser.implementation_body_return implementation_body28 =null;


        Object string_literal25_tree=null;
        Object string_literal29_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal25=(Token)match(input,156,FOLLOW_156_in_implementation737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal25_tree = 
            (Object)adaptor.create(string_literal25)
            ;
            adaptor.addChild(root_0, string_literal25_tree);
            }

            pushFollow(FOLLOW_name_in_implementation740);
            name26=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name26.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==119) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==121) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation743);
                    category27=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category27.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==119||LA5_0==124||LA5_0==128||LA5_0==136||LA5_0==153||LA5_0==167||LA5_0==170||(LA5_0 >= 180 && LA5_0 <= 181)||LA5_0==184||LA5_0==189||LA5_0==195||(LA5_0 >= 198 && LA5_0 <= 201)||(LA5_0 >= 203 && LA5_0 <= 205)||(LA5_0 >= 208 && LA5_0 <= 211)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation748);
            	    implementation_body28=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body28.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal29=(Token)match(input,154,FOLLOW_154_in_implementation753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal29_tree = 
            (Object)adaptor.create(string_literal29)
            ;
            adaptor.addChild(root_0, string_literal29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal38=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper30 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper31 =null;

        ObjcParser.directives_return directives32 =null;

        ObjcParser.define_declaration_return define_declaration33 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper34 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper35 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper36 =null;

        ObjcParser.comments_return comments37 =null;


        Object char_literal38_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 131 && LA6_1 <= 132)) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==119) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==117||LA6_1==120||LA6_1==122||LA6_1==137||LA6_1==175) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 124:
            case 128:
                {
                alt6=2;
                }
                break;
            case 153:
            case 167:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 208:
                {
                alt6=5;
                }
                break;
            case 204:
                {
                alt6=6;
                }
                break;
            case 119:
            case 170:
            case 180:
            case 181:
            case 184:
            case 189:
            case 195:
            case 198:
            case 199:
            case 200:
            case 201:
            case 203:
            case 205:
            case 209:
            case 210:
            case 211:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 136:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body772);
                    classical_method_call_wrapper30=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body778);
                    implementation_method_wrapper31=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body784);
                    directives32=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body790);
                    define_declaration33=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body795);
                    typedef_declaration_wrapper34=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper34.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body800);
                    static_declaration_wrapper35=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper35.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body806);
                    variable_declaration_wrapper36=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper36.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body812);
                    comments37=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments37.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal38=(Token)match(input,136,FOLLOW_136_in_implementation_body817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal38_tree = 
                    (Object)adaptor.create(char_literal38)
                    ;
                    adaptor.addChild(root_0, char_literal38_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize39 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives828);
            synthesize39=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize39.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal40=null;
        Token string_literal41=null;
        Token ID42=null;
        Token char_literal43=null;
        Token char_literal45=null;
        ObjcParser.name_return name44 =null;


        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object ID42_tree=null;
        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==167) ) {
                alt7=1;
            }
            else if ( (LA7_0==153) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:5: '@synthesize'
                    {
                    string_literal40=(Token)match(input,167,FOLLOW_167_in_synthesize850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal40);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:21: '@dynamic'
                    {
                    string_literal41=(Token)match(input,153,FOLLOW_153_in_synthesize854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal41);


                    }
                    break;

            }


            ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID42);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==141) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:38: '=' name
                    {
                    char_literal43=(Token)match(input,141,FOLLOW_141_in_synthesize861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal43);


                    pushFollow(FOLLOW_name_in_synthesize863);
                    name44=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name44.getTree());

                    }
                    break;

            }


            char_literal45=(Token)match(input,136,FOLLOW_136_in_synthesize867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal45);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcParser.field_declaration_return field_declaration47 =null;


        Object string_literal46_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:4: 'static' field_declaration
            {
            string_literal46=(Token)match(input,204,FOLLOW_204_in_static_declaration_wrapper891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_204.add(string_literal46);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper893);
            field_declaration47=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration47.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 191:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:1: block_call_predicate : ( '^(' | '^' ID '(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal49=null;
        Token ID50=null;
        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal53=null;

        Object string_literal48_tree=null;
        Object char_literal49_tree=null;
        Object ID50_tree=null;
        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal53_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:3: ( '^(' | '^' ID '(' | ( '^' '{' ) )
            int alt9=3;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==179) ) {
                alt9=1;
            }
            else if ( (LA9_0==178) ) {
                int LA9_2 = input.LA(2);

                if ( (LA9_2==ID) ) {
                    alt9=2;
                }
                else if ( (LA9_2==213) ) {
                    alt9=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal48=(Token)match(input,179,FOLLOW_179_in_block_call_predicate913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = 
                    (Object)adaptor.create(string_literal48)
                    ;
                    adaptor.addChild(root_0, string_literal48_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:5: '^' ID '('
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal49=(Token)match(input,178,FOLLOW_178_in_block_call_predicate919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    ID50=(Token)match(input,ID,FOLLOW_ID_in_block_call_predicate921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID50_tree = 
                    (Object)adaptor.create(ID50)
                    ;
                    adaptor.addChild(root_0, ID50_tree);
                    }

                    char_literal51=(Token)match(input,119,FOLLOW_119_in_block_call_predicate923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal51_tree = 
                    (Object)adaptor.create(char_literal51)
                    ;
                    adaptor.addChild(root_0, char_literal51_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:6: '^' '{'
                    {
                    char_literal52=(Token)match(input,178,FOLLOW_178_in_block_call_predicate930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal52_tree = 
                    (Object)adaptor.create(char_literal52)
                    ;
                    adaptor.addChild(root_0, char_literal52_tree);
                    }

                    char_literal53=(Token)match(input,213,FOLLOW_213_in_block_call_predicate932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal53_tree = 
                    (Object)adaptor.create(char_literal53)
                    ;
                    adaptor.addChild(root_0, char_literal53_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_type_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_type_decl_predicate : type_dec ( '(^' ')' ) ;
    public final ObjcParser.block_type_decl_predicate_return block_type_decl_predicate() throws RecognitionException {
        ObjcParser.block_type_decl_predicate_return retval = new ObjcParser.block_type_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal55=null;
        Token char_literal56=null;
        ObjcParser.type_dec_return type_dec54 =null;


        Object string_literal55_tree=null;
        Object char_literal56_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( type_dec ( '(^' ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:7: type_dec ( '(^' ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_type_decl_predicate948);
            type_dec54=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec54.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:16: ( '(^' ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:17: '(^' ')'
            {
            string_literal55=(Token)match(input,120,FOLLOW_120_in_block_type_decl_predicate951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal55_tree = 
            (Object)adaptor.create(string_literal55)
            ;
            adaptor.addChild(root_0, string_literal55_tree);
            }

            char_literal56=(Token)match(input,121,FOLLOW_121_in_block_type_decl_predicate952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = 
            (Object)adaptor.create(char_literal56)
            ;
            adaptor.addChild(root_0, char_literal56_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl_predicate"


    public static class block_type_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:1: block_type_decl : type_dec ( '(^' ')' '(' ( block_params )? ')' ) ;
    public final ObjcParser.block_type_decl_return block_type_decl() throws RecognitionException {
        ObjcParser.block_type_decl_return retval = new ObjcParser.block_type_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal58=null;
        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal62=null;
        ObjcParser.type_dec_return type_dec57 =null;

        ObjcParser.block_params_return block_params61 =null;


        Object string_literal58_tree=null;
        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal62_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:5: ( type_dec ( '(^' ')' '(' ( block_params )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:7: type_dec ( '(^' ')' '(' ( block_params )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_type_decl972);
            type_dec57=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec57.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:16: ( '(^' ')' '(' ( block_params )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:17: '(^' ')' '(' ( block_params )? ')'
            {
            string_literal58=(Token)match(input,120,FOLLOW_120_in_block_type_decl975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal58_tree = 
            (Object)adaptor.create(string_literal58)
            ;
            adaptor.addChild(root_0, string_literal58_tree);
            }

            char_literal59=(Token)match(input,121,FOLLOW_121_in_block_type_decl976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal59_tree = 
            (Object)adaptor.create(char_literal59)
            ;
            adaptor.addChild(root_0, char_literal59_tree);
            }

            char_literal60=(Token)match(input,119,FOLLOW_119_in_block_type_decl977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal60_tree = 
            (Object)adaptor.create(char_literal60)
            ;
            adaptor.addChild(root_0, char_literal60_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:28: ( block_params )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID||LA10_0==119||LA10_0==170||(LA10_0 >= 180 && LA10_0 <= 181)||LA10_0==184||LA10_0==189||LA10_0==195||(LA10_0 >= 198 && LA10_0 <= 201)||LA10_0==203||LA10_0==205||(LA10_0 >= 209 && LA10_0 <= 211)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:28: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_type_decl979);
                    block_params61=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params61.getTree());

                    }
                    break;

            }


            char_literal62=(Token)match(input,121,FOLLOW_121_in_block_type_decl982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal62_tree = 
            (Object)adaptor.create(char_literal62)
            ;
            adaptor.addChild(root_0, char_literal62_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl"


    public static class block_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:1: block_decl_predicate : type_dec ( '(^' ID ')' ) ;
    public final ObjcParser.block_decl_predicate_return block_decl_predicate() throws RecognitionException {
        ObjcParser.block_decl_predicate_return retval = new ObjcParser.block_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal64=null;
        Token ID65=null;
        Token char_literal66=null;
        ObjcParser.type_dec_return type_dec63 =null;


        Object string_literal64_tree=null;
        Object ID65_tree=null;
        Object char_literal66_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:5: ( type_dec ( '(^' ID ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:7: type_dec ( '(^' ID ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_decl_predicate1004);
            type_dec63=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec63.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:16: ( '(^' ID ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:17: '(^' ID ')'
            {
            string_literal64=(Token)match(input,120,FOLLOW_120_in_block_decl_predicate1007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal64_tree = 
            (Object)adaptor.create(string_literal64)
            ;
            adaptor.addChild(root_0, string_literal64_tree);
            }

            ID65=(Token)match(input,ID,FOLLOW_ID_in_block_decl_predicate1009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID65_tree = 
            (Object)adaptor.create(ID65)
            ;
            adaptor.addChild(root_0, ID65_tree);
            }

            char_literal66=(Token)match(input,121,FOLLOW_121_in_block_decl_predicate1011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = 
            (Object)adaptor.create(char_literal66)
            ;
            adaptor.addChild(root_0, char_literal66_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl_predicate"


    public static class block_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:212:1: block_decl : type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) ) ;
    public final ObjcParser.block_decl_return block_decl() throws RecognitionException {
        ObjcParser.block_decl_return retval = new ObjcParser.block_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal68=null;
        Token char_literal70=null;
        Token char_literal71=null;
        Token char_literal73=null;
        Token char_literal74=null;
        Token char_literal76=null;
        ObjcParser.type_dec_wrapper_return type_dec_wrapper67 =null;

        ObjcParser.field_name_return field_name69 =null;

        ObjcParser.block_params_return block_params72 =null;

        ObjcParser.block_call_return block_call75 =null;


        Object string_literal68_tree=null;
        Object char_literal70_tree=null;
        Object char_literal71_tree=null;
        Object char_literal73_tree=null;
        Object char_literal74_tree=null;
        Object char_literal76_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:5: ( type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:7: type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_wrapper_in_block_decl1029);
            type_dec_wrapper67=type_dec_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_wrapper67.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:24: ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:25: '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' )
            {
            string_literal68=(Token)match(input,120,FOLLOW_120_in_block_decl1032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal68_tree = 
            (Object)adaptor.create(string_literal68)
            ;
            adaptor.addChild(root_0, string_literal68_tree);
            }

            pushFollow(FOLLOW_field_name_in_block_decl1034);
            field_name69=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name69.getTree());

            char_literal70=(Token)match(input,121,FOLLOW_121_in_block_decl1036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            char_literal71=(Token)match(input,119,FOLLOW_119_in_block_decl1037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = 
            (Object)adaptor.create(char_literal71)
            ;
            adaptor.addChild(root_0, char_literal71_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:48: ( block_params )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ID||LA11_0==119||LA11_0==170||(LA11_0 >= 180 && LA11_0 <= 181)||LA11_0==184||LA11_0==189||LA11_0==195||(LA11_0 >= 198 && LA11_0 <= 201)||LA11_0==203||LA11_0==205||(LA11_0 >= 209 && LA11_0 <= 211)) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:48: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_decl1039);
                    block_params72=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params72.getTree());

                    }
                    break;

            }


            char_literal73=(Token)match(input,121,FOLLOW_121_in_block_decl1042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = 
            (Object)adaptor.create(char_literal73)
            ;
            adaptor.addChild(root_0, char_literal73_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:66: ( ( '=' block_call ) | ';' )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==141) ) {
                alt12=1;
            }
            else if ( (LA12_0==136) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:67: ( '=' block_call )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:67: ( '=' block_call )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:68: '=' block_call
                    {
                    char_literal74=(Token)match(input,141,FOLLOW_141_in_block_decl1046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal74_tree = 
                    (Object)adaptor.create(char_literal74)
                    ;
                    adaptor.addChild(root_0, char_literal74_tree);
                    }

                    pushFollow(FOLLOW_block_call_in_block_decl1048);
                    block_call75=block_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call75.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:86: ';'
                    {
                    char_literal76=(Token)match(input,136,FOLLOW_136_in_block_decl1053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal76_tree = 
                    (Object)adaptor.create(char_literal76)
                    ;
                    adaptor.addChild(root_0, char_literal76_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call77 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper1074);
            block_call77=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call77.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal78=null;
        Token char_literal79=null;
        Token char_literal81=null;
        Token string_literal82=null;
        Token char_literal84=null;
        Token char_literal86=null;
        Token ID87=null;
        Token char_literal88=null;
        Token char_literal90=null;
        ObjcParser.block_internal_return block_internal80 =null;

        ObjcParser.block_params_return block_params83 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper85 =null;

        ObjcParser.block_params_return block_params89 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper91 =null;


        Object char_literal78_tree=null;
        Object char_literal79_tree=null;
        Object char_literal81_tree=null;
        Object string_literal82_tree=null;
        Object char_literal84_tree=null;
        Object char_literal86_tree=null;
        Object ID87_tree=null;
        Object char_literal88_tree=null;
        Object char_literal90_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt16=3;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==178) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==213) ) {
                    alt16=1;
                }
                else if ( (LA16_1==ID) ) {
                    alt16=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA16_0==179) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal78=(Token)match(input,178,FOLLOW_178_in_block_call1096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(char_literal78);


                    char_literal79=(Token)match(input,213,FOLLOW_213_in_block_call1098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_213.add(char_literal79);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: ( block_internal )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==ID||LA13_0==MULTI_COMMENT_LIT||LA13_0==SINGLE_COMMENT_LIT||LA13_0==117||LA13_0==119||LA13_0==122||LA13_0==136||LA13_0==150||LA13_0==166||(LA13_0 >= 168 && LA13_0 <= 170)||LA13_0==175||(LA13_0 >= 180 && LA13_0 <= 182)||(LA13_0 >= 184 && LA13_0 <= 185)||(LA13_0 >= 187 && LA13_0 <= 190)||(LA13_0 >= 193 && LA13_0 <= 196)||(LA13_0 >= 198 && LA13_0 <= 206)||(LA13_0 >= 209 && LA13_0 <= 213)) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call1100);
                    	    block_internal80=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal80.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    char_literal81=(Token)match(input,217,FOLLOW_217_in_block_call1103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_217.add(char_literal81);


                    }


                    // AST REWRITE
                    // elements: block_internal, 213, 217
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_213.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_217.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:6: '^(' ( block_params )? ')'
                    {
                    string_literal82=(Token)match(input,179,FOLLOW_179_in_block_call1124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = 
                    (Object)adaptor.create(string_literal82)
                    ;
                    adaptor.addChild(root_0, string_literal82_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: ( block_params )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==ID||LA14_0==119||LA14_0==170||(LA14_0 >= 180 && LA14_0 <= 181)||LA14_0==184||LA14_0==189||LA14_0==195||(LA14_0 >= 198 && LA14_0 <= 201)||LA14_0==203||LA14_0==205||(LA14_0 >= 209 && LA14_0 <= 211)) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1126);
                            block_params83=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params83.getTree());

                            }
                            break;

                    }


                    char_literal84=(Token)match(input,121,FOLLOW_121_in_block_call1129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = 
                    (Object)adaptor.create(char_literal84)
                    ;
                    adaptor.addChild(root_0, char_literal84_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1132);
                    block_multiline_wrapper85=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper85.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:6: '^' ID '(' ( block_params )? ')'
                    {
                    char_literal86=(Token)match(input,178,FOLLOW_178_in_block_call1140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal86_tree = 
                    (Object)adaptor.create(char_literal86)
                    ;
                    adaptor.addChild(root_0, char_literal86_tree);
                    }

                    ID87=(Token)match(input,ID,FOLLOW_ID_in_block_call1142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID87_tree = 
                    (Object)adaptor.create(ID87)
                    ;
                    adaptor.addChild(root_0, ID87_tree);
                    }

                    char_literal88=(Token)match(input,119,FOLLOW_119_in_block_call1144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal88_tree = 
                    (Object)adaptor.create(char_literal88)
                    ;
                    adaptor.addChild(root_0, char_literal88_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: ( block_params )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==ID||LA15_0==119||LA15_0==170||(LA15_0 >= 180 && LA15_0 <= 181)||LA15_0==184||LA15_0==189||LA15_0==195||(LA15_0 >= 198 && LA15_0 <= 201)||LA15_0==203||LA15_0==205||(LA15_0 >= 209 && LA15_0 <= 211)) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1146);
                            block_params89=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params89.getTree());

                            }
                            break;

                    }


                    char_literal90=(Token)match(input,121,FOLLOW_121_in_block_call1149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal90_tree = 
                    (Object)adaptor.create(char_literal90)
                    ;
                    adaptor.addChild(root_0, char_literal90_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1152);
                    block_multiline_wrapper91=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper91.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call92 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper1166);
            synchronized_call92=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call92.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal93=null;
        Token char_literal94=null;
        Token char_literal96=null;
        ObjcParser.element_value_return element_value95 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper97 =null;


        Object string_literal93_tree=null;
        Object char_literal94_tree=null;
        Object char_literal96_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal93=(Token)match(input,166,FOLLOW_166_in_synchronized_call1189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal93_tree = 
            (Object)adaptor.create(string_literal93)
            ;
            adaptor.addChild(root_0, string_literal93_tree);
            }

            char_literal94=(Token)match(input,119,FOLLOW_119_in_synchronized_call1191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal94_tree = 
            (Object)adaptor.create(char_literal94)
            ;
            adaptor.addChild(root_0, char_literal94_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1193);
            element_value95=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value95.getTree());

            char_literal96=(Token)match(input,121,FOLLOW_121_in_synchronized_call1195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal96_tree = 
            (Object)adaptor.create(char_literal96)
            ;
            adaptor.addChild(root_0, char_literal96_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1197);
            block_multiline_wrapper97=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper97.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal99=null;
        ObjcParser.classical_param_return classical_param98 =null;

        ObjcParser.classical_param_return classical_param100 =null;


        Object char_literal99_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1213);
            classical_param98=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param98.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:22: ( ',' classical_param )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==127) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:23: ',' classical_param
            	    {
            	    char_literal99=(Token)match(input,127,FOLLOW_127_in_block_params1216); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal99);


            	    pushFollow(FOLLOW_classical_param_in_block_params1218);
            	    classical_param100=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param100.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline101 =null;

        ObjcParser.block_singleline_return block_singleline102 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==213) ) {
                alt18=1;
            }
            else if ( (LA18_0==ID||LA18_0==MULTI_COMMENT_LIT||LA18_0==SINGLE_COMMENT_LIT||LA18_0==117||LA18_0==119||LA18_0==122||LA18_0==136||LA18_0==166||LA18_0==175||LA18_0==182||LA18_0==185||(LA18_0 >= 187 && LA18_0 <= 188)||LA18_0==190||(LA18_0 >= 193 && LA18_0 <= 194)||LA18_0==196||LA18_0==202||LA18_0==206||LA18_0==212) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1247);
                    block_multiline101=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline101.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1259);
                    block_singleline102=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline102.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 241:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal103=null;
        Token char_literal105=null;
        ObjcParser.block_internal_macro_return block_internal_macro104 =null;


        Object char_literal103_tree=null;
        Object char_literal105_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal103=(Token)match(input,213,FOLLOW_213_in_block_multiline1281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal103_tree = 
            (Object)adaptor.create(char_literal103)
            ;
            adaptor.addChild(root_0, char_literal103_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: ( block_internal_macro )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==ID||LA19_0==MULTI_COMMENT_LIT||LA19_0==SINGLE_COMMENT_LIT||LA19_0==117||LA19_0==119||LA19_0==122||LA19_0==136||LA19_0==150||LA19_0==166||(LA19_0 >= 168 && LA19_0 <= 170)||(LA19_0 >= 175 && LA19_0 <= 176)||(LA19_0 >= 180 && LA19_0 <= 182)||(LA19_0 >= 184 && LA19_0 <= 185)||(LA19_0 >= 187 && LA19_0 <= 190)||(LA19_0 >= 193 && LA19_0 <= 196)||(LA19_0 >= 198 && LA19_0 <= 206)||(LA19_0 >= 209 && LA19_0 <= 213)) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1286);
            	    block_internal_macro104=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro104.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            char_literal105=(Token)match(input,217,FOLLOW_217_in_block_multiline1293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal105_tree = 
            (Object)adaptor.create(char_literal105)
            ;
            adaptor.addChild(root_0, char_literal105_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline106 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1305);
            block_multiline106=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline106.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline107 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1326);
            block_singleline107=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline107.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | externC_stmt | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal118=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper108 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper109 =null;

        ObjcParser.externC_stmt_return externC_stmt110 =null;

        ObjcParser.do_stmt_return do_stmt111 =null;

        ObjcParser.if_stmt_return if_stmt112 =null;

        ObjcParser.else_stmt_return else_stmt113 =null;

        ObjcParser.switch_stmt_return switch_stmt114 =null;

        ObjcParser.return_stmt_return return_stmt115 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper116 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcParser.break_stmt_return break_stmt119 =null;

        ObjcParser.continue_stmt_return continue_stmt120 =null;

        ObjcParser.goto_stmt_return goto_stmt121 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper122 =null;

        ObjcParser.method_msg_return method_msg123 =null;

        ObjcParser.access_wrapper_return access_wrapper124 =null;

        ObjcParser.name_return name125 =null;

        ObjcParser.op_assign_return op_assign126 =null;

        ObjcParser.element_value_return element_value127 =null;

        ObjcParser.comments_return comments128 =null;


        Object char_literal118_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | externC_stmt | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt22=17;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA22_1 = input.LA(2);

                if ( ((LA22_1 >= 131 && LA22_1 <= 132)) ) {
                    int LA22_21 = input.LA(3);

                    if ( (LA22_21==ID) ) {
                        int LA22_25 = input.LA(4);

                        if ( (LA22_25==119) && (synpred3_Objc())) {
                            alt22=1;
                        }
                        else if ( ((LA22_25 >= 131 && LA22_25 <= 132)) ) {
                            int LA22_29 = input.LA(5);

                            if ( (synpred3_Objc()) ) {
                                alt22=1;
                            }
                            else if ( (true) ) {
                                alt22=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 22, 29, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA22_25==118||LA22_25==123||LA22_25==126||LA22_25==130||LA22_25==134||LA22_25==139||LA22_25==141||LA22_25==146||LA22_25==175||LA22_25==215) ) {
                            alt22=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 22, 25, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA22_21==117||LA22_21==122) ) {
                        alt22=15;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 22, 21, input);

                        throw nvae;

                    }
                }
                else if ( (LA22_1==119) && (synpred3_Objc())) {
                    alt22=1;
                }
                else if ( (LA22_1==118||LA22_1==123||LA22_1==126||LA22_1==130||LA22_1==134||LA22_1==139||LA22_1==141||LA22_1==146||LA22_1==175||LA22_1==215) ) {
                    alt22=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                alt22=2;
                }
                break;
            case 190:
                {
                alt22=3;
                }
                break;
            case 187:
                {
                alt22=4;
                }
                break;
            case 196:
                {
                alt22=5;
                }
                break;
            case 188:
                {
                alt22=6;
                }
                break;
            case 206:
                {
                alt22=7;
                }
                break;
            case 202:
                {
                alt22=8;
                }
                break;
            case 193:
                {
                alt22=9;
                }
                break;
            case 212:
                {
                alt22=10;
                }
                break;
            case 136:
                {
                alt22=11;
                }
                break;
            case 182:
                {
                alt22=12;
                }
                break;
            case 185:
                {
                alt22=13;
                }
                break;
            case 194:
                {
                alt22=14;
                }
                break;
            case 117:
            case 119:
            case 122:
                {
                alt22=15;
                }
                break;
            case 175:
                {
                alt22=16;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt22=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }

            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1353);
                    classical_method_call_wrapper108=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper108.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1358);
                    synchronized_call_wrapper109=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper109.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:4: externC_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_externC_stmt_in_block_singleline1363);
                    externC_stmt110=externC_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, externC_stmt110.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1368);
                    do_stmt111=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt111.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1373);
                    if_stmt112=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt112.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1378);
                    else_stmt113=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1383);
                    switch_stmt114=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt114.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1388);
                    return_stmt115=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1393);
                    for_stmt_wrapper116=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper116.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1398);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal118=(Token)match(input,136,FOLLOW_136_in_block_singleline1403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal118_tree = 
                    (Object)adaptor.create(char_literal118)
                    ;
                    adaptor.addChild(root_0, char_literal118_tree);
                    }

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1409);
                    break_stmt119=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt119.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1415);
                    continue_stmt120=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt120.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1420);
                    goto_stmt121=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt121.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1426);
                    variable_assignment_wrapper122=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper122.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1431);
                    method_msg123=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg123.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:15: ( ( access_wrapper name )* op_assign element_value )?
                    int alt21=2;
                    alt21 = dfa21.predict(input);
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:16: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:16: ( access_wrapper name )*
                            loop20:
                            do {
                                int alt20=2;
                                int LA20_0 = input.LA(1);

                                if ( ((LA20_0 >= 131 && LA20_0 <= 132)) ) {
                                    alt20=1;
                                }


                                switch (alt20) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:17: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_singleline1435);
                            	    access_wrapper124=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper124.getTree());

                            	    pushFollow(FOLLOW_name_in_block_singleline1437);
                            	    name125=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name125.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop20;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_singleline1441);
                            op_assign126=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign126.getTree());

                            pushFollow(FOLLOW_element_value_in_block_singleline1443);
                            element_value127=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value127.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1451);
                    comments128=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal129=null;
        ObjcParser.block_internal_return block_internal130 =null;


        Object char_literal129_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:3: ( '\\\\' | block_internal )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==176) ) {
                alt23=1;
            }
            else if ( (LA23_0==ID||LA23_0==MULTI_COMMENT_LIT||LA23_0==SINGLE_COMMENT_LIT||LA23_0==117||LA23_0==119||LA23_0==122||LA23_0==136||LA23_0==150||LA23_0==166||(LA23_0 >= 168 && LA23_0 <= 170)||LA23_0==175||(LA23_0 >= 180 && LA23_0 <= 182)||(LA23_0 >= 184 && LA23_0 <= 185)||(LA23_0 >= 187 && LA23_0 <= 190)||(LA23_0 >= 193 && LA23_0 <= 196)||(LA23_0 >= 198 && LA23_0 <= 206)||(LA23_0 >= 209 && LA23_0 <= 213)) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal129=(Token)match(input,176,FOLLOW_176_in_block_internal_macro1463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal129_tree = 
                    (Object)adaptor.create(char_literal129)
                    ;
                    adaptor.addChild(root_0, char_literal129_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1469);
                    block_internal130=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal130.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal148=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper131 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper132 =null;

        ObjcParser.increment_decrement_return increment_decrement133 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper134 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper135 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper136 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper137 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper138 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper139 =null;

        ObjcParser.do_stmt_return do_stmt140 =null;

        ObjcParser.externC_stmt_return externC_stmt141 =null;

        ObjcParser.if_stmt_return if_stmt142 =null;

        ObjcParser.else_stmt_return else_stmt143 =null;

        ObjcParser.switch_stmt_return switch_stmt144 =null;

        ObjcParser.return_stmt_return return_stmt145 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper146 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper147 =null;

        ObjcParser.break_stmt_return break_stmt149 =null;

        ObjcParser.continue_stmt_return continue_stmt150 =null;

        ObjcParser.goto_stmt_return goto_stmt151 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper152 =null;

        ObjcParser.method_msg_return method_msg153 =null;

        ObjcParser.access_wrapper_return access_wrapper154 =null;

        ObjcParser.name_return name155 =null;

        ObjcParser.op_assign_return op_assign156 =null;

        ObjcParser.element_value_return element_value157 =null;

        ObjcParser.autorelease_stmt_return autorelease_stmt158 =null;

        ObjcParser.comments_return comments159 =null;


        Object char_literal148_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments )
            int alt26=24;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1489);
                    classical_method_call_wrapper131=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper131.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1502);
                    object_access_simple_wrapper132=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper132.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1504);
                    increment_decrement133=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement133.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1518);
                    variable_assignment_wrapper134=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper134.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1524);
                    variable_declaration_wrapper135=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper135.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1530);
                    synchronized_call_wrapper136=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper136.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1536);
                    try_stmt_wrapper137=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper137.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1541);
                    throw_stmt_wrapper138=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper138.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1546);
                    static_declaration_wrapper139=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper139.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1551);
                    do_stmt140=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt140.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:5: externC_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_externC_stmt_in_block_internal1557);
                    externC_stmt141=externC_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, externC_stmt141.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1562);
                    if_stmt142=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt142.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1567);
                    else_stmt143=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt143.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1572);
                    switch_stmt144=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt144.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1577);
                    return_stmt145=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt145.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1582);
                    for_stmt_wrapper146=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper146.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1587);
                    while_stmt_wrapper147=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper147.getTree());

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal148=(Token)match(input,136,FOLLOW_136_in_block_internal1592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal148_tree = 
                    (Object)adaptor.create(char_literal148)
                    ;
                    adaptor.addChild(root_0, char_literal148_tree);
                    }

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1597);
                    break_stmt149=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt149.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1602);
                    continue_stmt150=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt150.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1607);
                    goto_stmt151=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt151.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1612);
                    block_multiline_wrapper152=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper152.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:5: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1618);
                    method_msg153=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg153.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:16: ( ( access_wrapper name )* op_assign element_value )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==118||LA25_0==123||LA25_0==126||(LA25_0 >= 130 && LA25_0 <= 132)||LA25_0==134||LA25_0==139||LA25_0==141||LA25_0==146||LA25_0==215) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:17: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:17: ( access_wrapper name )*
                            loop24:
                            do {
                                int alt24=2;
                                int LA24_0 = input.LA(1);

                                if ( ((LA24_0 >= 131 && LA24_0 <= 132)) ) {
                                    alt24=1;
                                }


                                switch (alt24) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:18: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_internal1622);
                            	    access_wrapper154=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper154.getTree());

                            	    pushFollow(FOLLOW_name_in_block_internal1624);
                            	    name155=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name155.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop24;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_internal1628);
                            op_assign156=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign156.getTree());

                            pushFollow(FOLLOW_element_value_in_block_internal1630);
                            element_value157=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value157.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:5: autorelease_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_autorelease_stmt_in_block_internal1638);
                    autorelease_stmt158=autorelease_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, autorelease_stmt158.getTree());

                    }
                    break;
                case 24 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1644);
                    comments159=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments159.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token char_literal161=null;
        Token ID162=null;
        Token char_literal163=null;

        Object string_literal160_tree=null;
        Object char_literal161_tree=null;
        Object ID162_tree=null;
        Object char_literal163_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:5: 'goto' ':' ID ';'
            {
            string_literal160=(Token)match(input,194,FOLLOW_194_in_goto_stmt1656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_194.add(string_literal160);


            char_literal161=(Token)match(input,135,FOLLOW_135_in_goto_stmt1658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal161);


            ID162=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID162);


            char_literal163=(Token)match(input,136,FOLLOW_136_in_goto_stmt1662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal163);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt164 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1685);
            while_stmt164=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt164.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal165=null;
        Token char_literal166=null;
        Token char_literal168=null;
        ObjcParser.element_value_return element_value167 =null;

        ObjcParser.block_return block169 =null;


        Object string_literal165_tree=null;
        Object char_literal166_tree=null;
        Object char_literal168_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal165=(Token)match(input,212,FOLLOW_212_in_while_stmt1708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal165_tree = 
            (Object)adaptor.create(string_literal165)
            ;
            adaptor.addChild(root_0, string_literal165_tree);
            }

            char_literal166=(Token)match(input,119,FOLLOW_119_in_while_stmt1710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal166_tree = 
            (Object)adaptor.create(char_literal166)
            ;
            adaptor.addChild(root_0, char_literal166_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1712);
            element_value167=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value167.getTree());

            char_literal168=(Token)match(input,121,FOLLOW_121_in_while_stmt1714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal168_tree = 
            (Object)adaptor.create(char_literal168)
            ;
            adaptor.addChild(root_0, char_literal168_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1716);
            block169=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block169.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal170=null;
        ObjcParser.element_value_return element_value171 =null;


        Object string_literal170_tree=null;
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:5: 'in' element_value
            {
            string_literal170=(Token)match(input,197,FOLLOW_197_in_for_in_stmt1731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(string_literal170);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1733);
            element_value171=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value171.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal172=null;
        Token char_literal174=null;
        ObjcParser.element_value_return element_value173 =null;

        ObjcParser.element_value_return element_value175 =null;


        Object char_literal172_tree=null;
        Object char_literal174_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal172=(Token)match(input,136,FOLLOW_136_in_for_classic_stmt1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal172_tree = 
            (Object)adaptor.create(char_literal172)
            ;
            adaptor.addChild(root_0, char_literal172_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:9: ( element_value )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==CHAR_LITERAL||LA27_0==ID||LA27_0==NUMBER_LITERAL||LA27_0==STRING_LITERAL||LA27_0==112||LA27_0==117||LA27_0==119||LA27_0==122||LA27_0==125||(LA27_0 >= 128 && LA27_0 <= 129)||LA27_0==149||LA27_0==162||LA27_0==165||LA27_0==172||(LA27_0 >= 174 && LA27_0 <= 175)||(LA27_0 >= 178 && LA27_0 <= 179)||LA27_0==192||LA27_0==207||LA27_0==218) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1758);
                    element_value173=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value173.getTree());

                    }
                    break;

            }


            char_literal174=(Token)match(input,136,FOLLOW_136_in_for_classic_stmt1761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal174_tree = 
            (Object)adaptor.create(char_literal174)
            ;
            adaptor.addChild(root_0, char_literal174_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:28: ( element_value )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CHAR_LITERAL||LA28_0==ID||LA28_0==NUMBER_LITERAL||LA28_0==STRING_LITERAL||LA28_0==112||LA28_0==117||LA28_0==119||LA28_0==122||LA28_0==125||(LA28_0 >= 128 && LA28_0 <= 129)||LA28_0==149||LA28_0==162||LA28_0==165||LA28_0==172||(LA28_0 >= 174 && LA28_0 <= 175)||(LA28_0 >= 178 && LA28_0 <= 179)||LA28_0==192||LA28_0==207||LA28_0==218) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1763);
                    element_value175=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value175.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal178=null;
        Token char_literal182=null;
        Token char_literal185=null;
        Token char_literal189=null;
        Token char_literal196=null;
        ObjcParser.name_return name176 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt177 =null;

        ObjcParser.block_return block179 =null;

        ObjcParser.name_return name180 =null;

        ObjcParser.for_in_stmt_return for_in_stmt181 =null;

        ObjcParser.block_return block183 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt184 =null;

        ObjcParser.block_return block186 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper187 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt188 =null;

        ObjcParser.block_return block190 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple191 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper192 =null;

        ObjcParser.element_value_return element_value193 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt194 =null;

        ObjcParser.for_in_stmt_return for_in_stmt195 =null;

        ObjcParser.block_return block197 =null;


        Object char_literal178_tree=null;
        Object char_literal182_tree=null;
        Object char_literal185_tree=null;
        Object char_literal189_tree=null;
        Object char_literal196_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt30=5;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1786);
                    name176=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name176.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1788);
                    for_classic_stmt177=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt177.getTree());

                    char_literal178=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal178_tree = 
                    (Object)adaptor.create(char_literal178)
                    ;
                    adaptor.addChild(root_0, char_literal178_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1792);
                    block179=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block179.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1805);
                    name180=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name180.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1807);
                    for_in_stmt181=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt181.getTree());

                    char_literal182=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal182_tree = 
                    (Object)adaptor.create(char_literal182)
                    ;
                    adaptor.addChild(root_0, char_literal182_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1811);
                    block183=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block183.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: ( ';' )=> for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1822);
                    for_classic_stmt184=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt184.getTree());

                    char_literal185=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal185_tree = 
                    (Object)adaptor.create(char_literal185)
                    ;
                    adaptor.addChild(root_0, char_literal185_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1826);
                    block186=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block186.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1840);
                    variable_assignment_wrapper187=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper187.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1842);
                    for_classic_stmt188=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt188.getTree());

                    char_literal189=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal189_tree = 
                    (Object)adaptor.create(char_literal189)
                    ;
                    adaptor.addChild(root_0, char_literal189_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1846);
                    block190=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block190.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1852);
                    field_declaration_simple191=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple191.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==118||LA29_0==123||LA29_0==126||LA29_0==130||LA29_0==134||LA29_0==139||LA29_0==141||LA29_0==146||LA29_0==215) ) {
                        alt29=1;
                    }
                    else if ( (LA29_0==197) ) {
                        alt29=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }
                    switch (alt29) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1856);
                            op_assign_wrapper192=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper192.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1858);
                            element_value193=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value193.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1860);
                            for_classic_stmt194=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt194.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1865);
                            for_in_stmt195=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt195.getTree());

                            }
                            break;

                    }


                    char_literal196=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal196_tree = 
                    (Object)adaptor.create(char_literal196)
                    ;
                    adaptor.addChild(root_0, char_literal196_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1870);
                    block197=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block197.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token char_literal199=null;
        ObjcParser.for_stmt_body_return for_stmt_body200 =null;


        Object string_literal198_tree=null;
        Object char_literal199_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,193,FOLLOW_193_in_for_stmt1883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);
            }

            char_literal199=(Token)match(input,119,FOLLOW_119_in_for_stmt1885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal199_tree = 
            (Object)adaptor.create(char_literal199)
            ;
            adaptor.addChild(root_0, char_literal199_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1887);
            for_stmt_body200=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body200.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt201 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1900);
            for_stmt201=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt201.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal202=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon203 =null;


        Object string_literal202_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:5: 'return' element_value_or_semicolon
            {
            string_literal202=(Token)match(input,202,FOLLOW_202_in_return_stmt1923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_202.add(string_literal202);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1925);
            element_value_or_semicolon203=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon203.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal204=null;
        Token char_literal205=null;
        Token char_literal207=null;
        Token char_literal208=null;
        Token char_literal210=null;
        ObjcParser.element_value_return element_value206 =null;

        ObjcParser.switch_body_return switch_body209 =null;


        Object string_literal204_tree=null;
        Object char_literal205_tree=null;
        Object char_literal207_tree=null;
        Object char_literal208_tree=null;
        Object char_literal210_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal204=(Token)match(input,206,FOLLOW_206_in_switch_stmt1948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal204);


            char_literal205=(Token)match(input,119,FOLLOW_119_in_switch_stmt1950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal205);


            pushFollow(FOLLOW_element_value_in_switch_stmt1952);
            element_value206=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value206.getTree());

            char_literal207=(Token)match(input,121,FOLLOW_121_in_switch_stmt1954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal207);


            char_literal208=(Token)match(input,213,FOLLOW_213_in_switch_stmt1956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_213.add(char_literal208);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: ( switch_body )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ID||LA31_0==MULTI_COMMENT_LIT||LA31_0==SINGLE_COMMENT_LIT||LA31_0==117||LA31_0==119||LA31_0==122||LA31_0==136||LA31_0==166||LA31_0==175||(LA31_0 >= 182 && LA31_0 <= 183)||(LA31_0 >= 185 && LA31_0 <= 188)||LA31_0==190||(LA31_0 >= 193 && LA31_0 <= 194)||LA31_0==196||LA31_0==202||LA31_0==206||(LA31_0 >= 212 && LA31_0 <= 213)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1959);
            	    switch_body209=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body209.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }


            char_literal210=(Token)match(input,217,FOLLOW_217_in_switch_stmt1963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_217.add(char_literal210);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt211 =null;

        ObjcParser.default_stmt_return default_stmt212 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper213 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper214 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt32=4;
            switch ( input.LA(1) ) {
            case 183:
                {
                alt32=1;
                }
                break;
            case 186:
                {
                alt32=2;
                }
                break;
            case 213:
                {
                alt32=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 117:
            case 119:
            case 122:
            case 136:
            case 166:
            case 175:
            case 182:
            case 185:
            case 187:
            case 188:
            case 190:
            case 193:
            case 194:
            case 196:
            case 202:
            case 206:
            case 212:
                {
                alt32=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }

            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1989);
                    case_stmt211=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt211.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1995);
                    default_stmt212=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt212.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body2001);
                    block_multiline_wrapper213=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper213.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body2007);
                    block_singleline_wrapper214=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper214.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class autorelease_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autorelease_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:1: autorelease_stmt : '@autoreleasepool' block ;
    public final ObjcParser.autorelease_stmt_return autorelease_stmt() throws RecognitionException {
        ObjcParser.autorelease_stmt_return retval = new ObjcParser.autorelease_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal215=null;
        ObjcParser.block_return block216 =null;


        Object string_literal215_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:3: ( '@autoreleasepool' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:5: '@autoreleasepool' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal215=(Token)match(input,150,FOLLOW_150_in_autorelease_stmt2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal215_tree = 
            (Object)adaptor.create(string_literal215)
            ;
            adaptor.addChild(root_0, string_literal215_tree);
            }

            pushFollow(FOLLOW_block_in_autorelease_stmt2024);
            block216=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block216.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autorelease_stmt"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal217=null;
        Token char_literal219=null;
        ObjcParser.name_number_return name_number218 =null;


        Object string_literal217_tree=null;
        Object char_literal219_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:5: 'case' name_number ':'
            {
            string_literal217=(Token)match(input,183,FOLLOW_183_in_case_stmt2039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal217);


            pushFollow(FOLLOW_name_number_in_case_stmt2041);
            name_number218=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number218.getTree());

            char_literal219=(Token)match(input,135,FOLLOW_135_in_case_stmt2043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal219);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal220=null;
        Token char_literal221=null;

        Object string_literal220_tree=null;
        Object char_literal221_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:5: 'default' ':'
            {
            string_literal220=(Token)match(input,186,FOLLOW_186_in_default_stmt2066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal220);


            char_literal221=(Token)match(input,135,FOLLOW_135_in_default_stmt2068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal221);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal222=null;
        Token string_literal224=null;
        Token char_literal225=null;
        Token char_literal227=null;
        ObjcParser.block_return block223 =null;

        ObjcParser.element_value_return element_value226 =null;


        Object string_literal222_tree=null;
        Object string_literal224_tree=null;
        Object char_literal225_tree=null;
        Object char_literal227_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal222=(Token)match(input,187,FOLLOW_187_in_do_stmt2089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal222);


            pushFollow(FOLLOW_block_in_do_stmt2091);
            block223=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block223.getTree());

            string_literal224=(Token)match(input,212,FOLLOW_212_in_do_stmt2093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_212.add(string_literal224);


            char_literal225=(Token)match(input,119,FOLLOW_119_in_do_stmt2095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal225);


            pushFollow(FOLLOW_element_value_in_do_stmt2097);
            element_value226=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value226.getTree());

            char_literal227=(Token)match(input,121,FOLLOW_121_in_do_stmt2099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal227);


            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal228=null;
        Token char_literal229=null;
        Token char_literal231=null;
        ObjcParser.element_value_return element_value230 =null;

        ObjcParser.block_return block232 =null;


        Object string_literal228_tree=null;
        Object char_literal229_tree=null;
        Object char_literal231_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:5: 'if' '(' element_value ')' block
            {
            string_literal228=(Token)match(input,196,FOLLOW_196_in_if_stmt2124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal228);


            char_literal229=(Token)match(input,119,FOLLOW_119_in_if_stmt2126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal229);


            pushFollow(FOLLOW_element_value_in_if_stmt2128);
            element_value230=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value230.getTree());

            char_literal231=(Token)match(input,121,FOLLOW_121_in_if_stmt2130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal231);


            pushFollow(FOLLOW_block_in_if_stmt2132);
            block232=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block232.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal233=null;
        ObjcParser.block_return block234 =null;


        Object string_literal233_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: 'else' block
            {
            string_literal233=(Token)match(input,188,FOLLOW_188_in_else_stmt2155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal233);


            pushFollow(FOLLOW_block_in_else_stmt2157);
            block234=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block234.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal235=null;
        ObjcParser.block_return block236 =null;

        ObjcParser.catch_stmt_return catch_stmt237 =null;

        ObjcParser.finally_stmt_return finally_stmt238 =null;


        Object string_literal235_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal235=(Token)match(input,169,FOLLOW_169_in_try_stmt_wrapper2179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal235);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper2182);
            block236=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block236.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:19: ( catch_stmt )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==151) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper2185);
            	    catch_stmt237=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt237.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:31: ( finally_stmt )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==155) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper2188);
                    finally_stmt238=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt238.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: catch_stmt, block, finally_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal239=null;
        Token char_literal240=null;
        Token char_literal242=null;
        Token char_literal244=null;
        ObjcParser.name_return name241 =null;

        ObjcParser.name_return name243 =null;

        ObjcParser.block_return block245 =null;


        Object string_literal239_tree=null;
        Object char_literal240_tree=null;
        Object char_literal242_tree=null;
        Object char_literal244_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:4: '@catch' '(' name '*' name ')' block
            {
            string_literal239=(Token)match(input,151,FOLLOW_151_in_catch_stmt2214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal239);


            char_literal240=(Token)match(input,119,FOLLOW_119_in_catch_stmt2217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal240);


            pushFollow(FOLLOW_name_in_catch_stmt2220);
            name241=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name241.getTree());

            char_literal242=(Token)match(input,122,FOLLOW_122_in_catch_stmt2223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal242);


            pushFollow(FOLLOW_name_in_catch_stmt2225);
            name243=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name243.getTree());

            char_literal244=(Token)match(input,121,FOLLOW_121_in_catch_stmt2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal244);


            pushFollow(FOLLOW_block_in_catch_stmt2231);
            block245=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block245.getTree());

            // AST REWRITE
            // elements: name, block, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal246=null;
        ObjcParser.block_return block247 =null;


        Object string_literal246_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:4: '@finally' block
            {
            string_literal246=(Token)match(input,155,FOLLOW_155_in_finally_stmt2255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal246);


            pushFollow(FOLLOW_block_in_finally_stmt2258);
            block247=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block247.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt248 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2277);
            throw_stmt248=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt248.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal249=null;
        Token char_literal251=null;
        ObjcParser.element_value_return element_value250 =null;


        Object string_literal249_tree=null;
        Object char_literal251_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal249=(Token)match(input,168,FOLLOW_168_in_throw_stmt2296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal249_tree = 
            (Object)adaptor.create(string_literal249)
            ;
            adaptor.addChild(root_0, string_literal249_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2298);
            element_value250=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value250.getTree());

            char_literal251=(Token)match(input,136,FOLLOW_136_in_throw_stmt2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal251_tree = 
            (Object)adaptor.create(char_literal251)
            ;
            adaptor.addChild(root_0, char_literal251_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class externC_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "externC_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:1: externC_stmt : 'extern \"C\"' block ;
    public final ObjcParser.externC_stmt_return externC_stmt() throws RecognitionException {
        ObjcParser.externC_stmt_return retval = new ObjcParser.externC_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal252=null;
        ObjcParser.block_return block253 =null;


        Object string_literal252_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:3: ( 'extern \"C\"' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: 'extern \"C\"' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal252=(Token)match(input,190,FOLLOW_190_in_externC_stmt2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal252_tree = 
            (Object)adaptor.create(string_literal252)
            ;
            adaptor.addChild(root_0, string_literal252_tree);
            }

            pushFollow(FOLLOW_block_in_externC_stmt2314);
            block253=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block253.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "externC_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID254=null;

        Object ID254_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:4: ID
            {
            ID254=(Token)match(input,ID,FOLLOW_ID_in_name2328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID254);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID255=null;
        Token char_literal256=null;
        Token NUMBER_LITERAL257=null;

        Object ID255_tree=null;
        Object char_literal256_tree=null;
        Object NUMBER_LITERAL257_tree=null;
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ID) ) {
                alt36=1;
            }
            else if ( (LA36_0==NUMBER_LITERAL||LA36_0==128) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:5: ID
                    {
                    ID255=(Token)match(input,ID,FOLLOW_ID_in_name_number2348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID255);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 415:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: ( '-' )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==128) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: '-'
                            {
                            char_literal256=(Token)match(input,128,FOLLOW_128_in_name_number2362); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_128.add(char_literal256);


                            }
                            break;

                    }


                    NUMBER_LITERAL257=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL257);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL, 128
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 416:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:37: ( '-' )?
                        if ( stream_128.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_128.nextNode()
                            );

                        }
                        stream_128.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper258 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2391);
            field_declaration_wrapper258=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper258.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment259 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2414);
            variable_assignment259=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment259.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper260 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper261 =null;

        ObjcParser.element_value_return element_value262 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2437);
            object_access_wrapper260=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper260.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2439);
            op_assign_wrapper261=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper261.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2441);
            element_value262=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value262.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper263 =null;

        ObjcParser.increment_decrement_return increment_decrement264 =null;

        ObjcParser.increment_decrement_return increment_decrement265 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper266 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==119) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==117) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==ID) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==122) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==125||LA37_0==129) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2462);
                    object_access_wrapper263=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper263.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2464);
                    increment_decrement264=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement264.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2470);
                    increment_decrement265=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement265.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2472);
                    object_access_wrapper266=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper267 =null;

        ObjcParser.method_implementation_common_return method_implementation_common268 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2487);
            method_modifier_wrapper267=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper267.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2489);
            method_implementation_common268=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common268.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal269=null;
        Token char_literal271=null;
        ObjcParser.type_declaration_return type_declaration270 =null;

        ObjcParser.method_name_return method_name272 =null;

        ObjcParser.method_params_return method_params273 =null;


        Object char_literal269_tree=null;
        Object char_literal271_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:6: '(' type_declaration ')' method_name
            {
            char_literal269=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal269_tree = 
            (Object)adaptor.create(char_literal269)
            ;
            adaptor.addChild(root_0, char_literal269_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2504);
            type_declaration270=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration270.getTree());

            char_literal271=(Token)match(input,121,FOLLOW_121_in_method_implementation_common2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal271_tree = 
            (Object)adaptor.create(char_literal271)
            ;
            adaptor.addChild(root_0, char_literal271_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2508);
            method_name272=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name272.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:44: ( method_params )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ID||LA38_0==135) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2511);
                    method_params273=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params273.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation274 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper275 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2523);
            method_implementation274=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation274.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2527);
            block_multiline_wrapper275=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper275.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call276 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2550);
            classical_method_call276=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call276.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal280=null;
        ObjcParser.name_return name277 =null;

        ObjcParser.access_wrapper_return access_wrapper278 =null;

        ObjcParser.name_return name279 =null;


        Object char_literal280_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2571);
            name277=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name277.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:10: ( access_wrapper name )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( ((LA39_0 >= 131 && LA39_0 <= 132)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2574);
            	    access_wrapper278=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper278.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2576);
            	    name279=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name279.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            char_literal280=(Token)match(input,119,FOLLOW_119_in_clasical_method_call_predicate2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal280_tree = 
            (Object)adaptor.create(char_literal280)
            ;
            adaptor.addChild(root_0, char_literal280_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal284=null;
        Token char_literal286=null;
        ObjcParser.name_return name281 =null;

        ObjcParser.access_wrapper_return access_wrapper282 =null;

        ObjcParser.name_return name283 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push285 =null;


        Object char_literal284_tree=null;
        Object char_literal286_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2595);
            name281=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name281.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:10: ( access_wrapper name )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( ((LA40_0 >= 131 && LA40_0 <= 132)) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2598);
            	    access_wrapper282=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper282.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2600);
            	    name283=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name283.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal284=(Token)match(input,119,FOLLOW_119_in_classical_method_call2605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal284_tree = 
            (Object)adaptor.create(char_literal284)
            ;
            adaptor.addChild(root_0, char_literal284_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:38: ( classical_method_params_push )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==CHAR_LITERAL||LA41_0==ID||LA41_0==MULTI_COMMENT_LIT||LA41_0==NUMBER_LITERAL||LA41_0==SINGLE_COMMENT_LIT||LA41_0==STRING_LITERAL||LA41_0==112||LA41_0==117||LA41_0==119||LA41_0==122||LA41_0==125||(LA41_0 >= 128 && LA41_0 <= 129)||LA41_0==149||LA41_0==162||LA41_0==165||LA41_0==172||(LA41_0 >= 174 && LA41_0 <= 175)||(LA41_0 >= 178 && LA41_0 <= 179)||LA41_0==192||LA41_0==207||LA41_0==218) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2607);
                    classical_method_params_push285=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push285.getTree());

                    }
                    break;

            }


            char_literal286=(Token)match(input,121,FOLLOW_121_in_classical_method_call2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal286_tree = 
            (Object)adaptor.create(char_literal286)
            ;
            adaptor.addChild(root_0, char_literal286_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal288=null;
        ObjcParser.method_param_push_return method_param_push287 =null;

        ObjcParser.method_param_push_return method_param_push289 =null;


        Object char_literal288_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2625);
            method_param_push287=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push287.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:24: ( ',' method_param_push )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==127) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:25: ',' method_param_push
            	    {
            	    char_literal288=(Token)match(input,127,FOLLOW_127_in_classical_method_params_push2628); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal288);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2630);
            	    method_param_push289=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push289.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal292=null;
        Token char_literal293=null;
        ObjcParser.method_param_push_return method_param_push290 =null;

        ObjcParser.prefix_return prefix291 =null;

        ObjcParser.method_param_push_return method_param_push294 =null;


        Object char_literal292_tree=null;
        Object char_literal293_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2654);
            method_param_push290=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push290.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==ID||LA44_0==127) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:23: ( ( prefix ':' ) | ',' )
            	    int alt43=2;
            	    int LA43_0 = input.LA(1);

            	    if ( (LA43_0==ID) ) {
            	        alt43=1;
            	    }
            	    else if ( (LA43_0==127) ) {
            	        alt43=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 43, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt43) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2659);
            	            prefix291=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix291.getTree());

            	            char_literal292=(Token)match(input,135,FOLLOW_135_in_method_params_push2661); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_135.add(char_literal292);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:39: ','
            	            {
            	            char_literal293=(Token)match(input,127,FOLLOW_127_in_method_params_push2666); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_127.add(char_literal293);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2669);
            	    method_param_push294=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push294.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments295 =null;

        ObjcParser.element_value_return element_value296 =null;

        ObjcParser.comments_return comments297 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: ( comments )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==MULTI_COMMENT_LIT||LA45_0==SINGLE_COMMENT_LIT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2690);
                    comments295=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments295.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2693);
            element_value296=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value296.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:29: ( comments )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==MULTI_COMMENT_LIT||LA46_0==SINGLE_COMMENT_LIT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2695);
                    comments297=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments297.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: element_value, comments, comments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal298=null;
        Token char_literal301=null;
        Token char_literal303=null;
        ObjcParser.element_value_return element_value299 =null;

        ObjcParser.method_name_return method_name300 =null;

        ObjcParser.method_params_push_return method_params_push302 =null;


        Object char_literal298_tree=null;
        Object char_literal301_tree=null;
        Object char_literal303_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal298=(Token)match(input,175,FOLLOW_175_in_method_msg2724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(char_literal298);


            pushFollow(FOLLOW_element_value_in_method_msg2726);
            element_value299=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value299.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2728);
            method_name300=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name300.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:35: ( ':' method_params_push )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==135) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:36: ':' method_params_push
                    {
                    char_literal301=(Token)match(input,135,FOLLOW_135_in_method_msg2731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal301);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2733);
                    method_params_push302=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push302.getTree());

                    }
                    break;

            }


            char_literal303=(Token)match(input,177,FOLLOW_177_in_method_msg2737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(char_literal303);


            // AST REWRITE
            // elements: method_params_push, element_value, method_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:1: questionmark_if_stmt : ( ( '?:' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) | ( '?' element_value ( comments )? ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) );
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal304=null;
        Token char_literal307=null;
        Token char_literal310=null;
        ObjcParser.comments_return comments305 =null;

        ObjcParser.element_value_return element_value306 =null;

        ObjcParser.element_value_return element_value308 =null;

        ObjcParser.comments_return comments309 =null;

        ObjcParser.comments_return comments311 =null;

        ObjcParser.element_value_return element_value312 =null;


        Object string_literal304_tree=null;
        Object char_literal307_tree=null;
        Object char_literal310_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:3: ( ( '?:' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) | ( '?' element_value ( comments )? ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==148) ) {
                alt51=1;
            }
            else if ( (LA51_0==147) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '?:' ( comments )? element_value )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '?:' ( comments )? element_value )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:6: '?:' ( comments )? element_value
                    {
                    string_literal304=(Token)match(input,148,FOLLOW_148_in_questionmark_if_stmt2763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal304);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:11: ( comments )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==MULTI_COMMENT_LIT||LA48_0==SINGLE_COMMENT_LIT) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:11: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2765);
                            comments305=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments305.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2768);
                    element_value306=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value306.getTree());

                    }


                    // AST REWRITE
                    // elements: element_value, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 475:36: -> ^( QUESTION_MARK_IF element_value element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:39: ^( QUESTION_MARK_IF element_value element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                        , root_1);

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( '?' element_value ( comments )? ':' ( comments )? element_value )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( '?' element_value ( comments )? ':' ( comments )? element_value )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:6: '?' element_value ( comments )? ':' ( comments )? element_value
                    {
                    char_literal307=(Token)match(input,147,FOLLOW_147_in_questionmark_if_stmt2786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(char_literal307);


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2788);
                    element_value308=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value308.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:24: ( comments )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==MULTI_COMMENT_LIT||LA49_0==SINGLE_COMMENT_LIT) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:24: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2790);
                            comments309=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments309.getTree());

                            }
                            break;

                    }


                    char_literal310=(Token)match(input,135,FOLLOW_135_in_questionmark_if_stmt2793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal310);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:38: ( comments )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==MULTI_COMMENT_LIT||LA50_0==SINGLE_COMMENT_LIT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:38: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2795);
                            comments311=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments311.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2798);
                    element_value312=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value312.getTree());

                    }


                    // AST REWRITE
                    // elements: element_value, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 476:63: -> ^( QUESTION_MARK_IF element_value element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:66: ^( QUESTION_MARK_IF element_value element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                        , root_1);

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression313 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:7: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2826);
            simple_expression313=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression313.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:25: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:28: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal314=null;
        ObjcParser.element_value_return element_value315 =null;


        Object char_literal314_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: ( ';' | element_value )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==136) ) {
                alt52=1;
            }
            else if ( (LA52_0==CHAR_LITERAL||LA52_0==ID||LA52_0==NUMBER_LITERAL||LA52_0==STRING_LITERAL||LA52_0==112||LA52_0==117||LA52_0==119||LA52_0==122||LA52_0==125||(LA52_0 >= 128 && LA52_0 <= 129)||LA52_0==149||LA52_0==162||LA52_0==165||LA52_0==172||(LA52_0 >= 174 && LA52_0 <= 175)||(LA52_0 >= 178 && LA52_0 <= 179)||LA52_0==192||LA52_0==207||LA52_0==218) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:6: ';'
                    {
                    char_literal314=(Token)match(input,136,FOLLOW_136_in_element_value_or_semicolon2853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal314_tree = 
                    (Object)adaptor.create(char_literal314)
                    ;
                    adaptor.addChild(root_0, char_literal314_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2857);
                    element_value315=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value315.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:1: array_init : ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal318=null;
        ObjcParser.comments_return comments316 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init317 =null;

        ObjcParser.comments_return comments319 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init320 =null;


        Object char_literal318_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:3: ( ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( comments )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==SINGLE_COMMENT_LIT) ) {
                alt53=1;
            }
            else if ( (LA53_0==MULTI_COMMENT_LIT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_array_init2874);
                    comments316=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments316.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2877);
            element_value_or_array_init317=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init317.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:43: ( ',' ( comments )? element_value_or_array_init )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==127) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:44: ',' ( comments )? element_value_or_array_init
            	    {
            	    char_literal318=(Token)match(input,127,FOLLOW_127_in_array_init2880); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal318_tree = 
            	    (Object)adaptor.create(char_literal318)
            	    ;
            	    adaptor.addChild(root_0, char_literal318_tree);
            	    }

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:48: ( comments )?
            	    int alt54=2;
            	    int LA54_0 = input.LA(1);

            	    if ( (LA54_0==SINGLE_COMMENT_LIT) ) {
            	        alt54=1;
            	    }
            	    else if ( (LA54_0==MULTI_COMMENT_LIT) ) {
            	        alt54=1;
            	    }
            	    switch (alt54) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:48: comments
            	            {
            	            pushFollow(FOLLOW_comments_in_array_init2882);
            	            comments319=comments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments319.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2885);
            	    element_value_or_array_init320=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init320.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:1: element_value_or_array_init : ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal321=null;
        Token char_literal323=null;
        ObjcParser.array_init_return array_init322 =null;

        ObjcParser.comments_return comments324 =null;

        ObjcParser.comments_return comments325 =null;

        ObjcParser.element_value_return element_value326 =null;


        Object char_literal321_tree=null;
        Object char_literal323_tree=null;
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:3: ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==213) ) {
                alt59=1;
            }
            else if ( (LA59_0==CHAR_LITERAL||LA59_0==ID||LA59_0==MULTI_COMMENT_LIT||LA59_0==NUMBER_LITERAL||LA59_0==SINGLE_COMMENT_LIT||LA59_0==STRING_LITERAL||LA59_0==112||LA59_0==117||LA59_0==119||LA59_0==122||LA59_0==125||(LA59_0 >= 128 && LA59_0 <= 129)||LA59_0==149||LA59_0==162||LA59_0==165||LA59_0==172||(LA59_0 >= 174 && LA59_0 <= 175)||(LA59_0 >= 178 && LA59_0 <= 179)||LA59_0==192||LA59_0==207||LA59_0==218) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:5: '{' ( array_init )? '}' ( comments )?
                    {
                    char_literal321=(Token)match(input,213,FOLLOW_213_in_element_value_or_array_init2902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_213.add(char_literal321);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:9: ( array_init )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==CHAR_LITERAL||LA56_0==ID||LA56_0==MULTI_COMMENT_LIT||LA56_0==NUMBER_LITERAL||LA56_0==SINGLE_COMMENT_LIT||LA56_0==STRING_LITERAL||LA56_0==112||LA56_0==117||LA56_0==119||LA56_0==122||LA56_0==125||(LA56_0 >= 128 && LA56_0 <= 129)||LA56_0==149||LA56_0==162||LA56_0==165||LA56_0==172||(LA56_0 >= 174 && LA56_0 <= 175)||(LA56_0 >= 178 && LA56_0 <= 179)||LA56_0==192||LA56_0==207||LA56_0==213||LA56_0==218) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2904);
                            array_init322=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init322.getTree());

                            }
                            break;

                    }


                    char_literal323=(Token)match(input,217,FOLLOW_217_in_element_value_or_array_init2907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_217.add(char_literal323);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:25: ( comments )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==MULTI_COMMENT_LIT||LA57_0==SINGLE_COMMENT_LIT) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:25: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2909);
                            comments324=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments324.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: array_init, comments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 493:35: -> ^( ARRAY_INIT ( comments )? ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:38: ^( ARRAY_INIT ( comments )? ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:51: ( comments )?
                        if ( stream_comments.hasNext() ) {
                            adaptor.addChild(root_1, stream_comments.nextTree());

                        }
                        stream_comments.reset();

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:61: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: ( comments )? element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: ( comments )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==MULTI_COMMENT_LIT||LA58_0==SINGLE_COMMENT_LIT) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2928);
                            comments325=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments325.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2931);
                    element_value326=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value326.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set327=null;

        Object set327_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set327=(Token)input.LT(1);

            if ( input.LA(1)==125||input.LA(1)==129 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set327)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1328 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt329 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2966);
            cast_unary_expression1328=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1328.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop60:
            do {
                int alt60=2;
                alt60 = dfa60.predict(input);
                switch (alt60) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2968);
            	    op2_unary_expression_or_questionmark_if_stmt329=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt329.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal330=null;
        ObjcParser.cast_expression_return cast_expression331 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression332 =null;


        Object char_literal330_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==128) ) {
                alt61=1;
            }
            else if ( (LA61_0==CHAR_LITERAL||LA61_0==ID||LA61_0==NUMBER_LITERAL||LA61_0==STRING_LITERAL||LA61_0==112||LA61_0==117||LA61_0==119||LA61_0==122||LA61_0==125||LA61_0==129||LA61_0==149||LA61_0==162||LA61_0==165||LA61_0==172||(LA61_0 >= 174 && LA61_0 <= 175)||(LA61_0 >= 178 && LA61_0 <= 179)||LA61_0==192||LA61_0==207||LA61_0==218) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: '-' cast_expression
                    {
                    char_literal330=(Token)match(input,128,FOLLOW_128_in_cast_unary_expression12983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal330);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12985);
                    cast_expression331=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression331.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12999);
                    cast_unary_expression332=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper333 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1334 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt335 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==113||(LA62_0 >= 115 && LA62_0 <= 117)||LA62_0==122||LA62_0==124||LA62_0==128||LA62_0==133||(LA62_0 >= 137 && LA62_0 <= 138)||(LA62_0 >= 140 && LA62_0 <= 145)||LA62_0==178||LA62_0==214||LA62_0==216) ) {
                alt62=1;
            }
            else if ( ((LA62_0 >= 147 && LA62_0 <= 148)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt3013);
                    op2_wrapper333=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper333.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt3015);
                    cast_unary_expression1334=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1334.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt3022);
                    questionmark_if_stmt335=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt335.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:515:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal338=null;
        Token char_literal340=null;
        ObjcParser.cast_expression_return cast_expression336 =null;

        ObjcParser.increment_decrement_return increment_decrement337 =null;

        ObjcParser.cast_expression_return cast_expression339 =null;

        ObjcParser.cast_expression_return cast_expression341 =null;

        ObjcParser.increment_decrement_return increment_decrement342 =null;

        ObjcParser.cast_expression_return cast_expression343 =null;


        Object char_literal338_tree=null;
        Object char_literal340_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt64=4;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case 117:
            case 119:
            case 122:
            case 149:
            case 162:
            case 165:
            case 172:
            case 174:
            case 175:
            case 178:
            case 179:
            case 192:
            case 207:
                {
                alt64=1;
                }
                break;
            case 112:
                {
                alt64=2;
                }
                break;
            case 218:
                {
                alt64=3;
                }
                break;
            case 125:
            case 129:
                {
                alt64=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3035);
                    cast_expression336=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression336.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:21: ( increment_decrement )?
                    int alt63=2;
                    alt63 = dfa63.predict(input);
                    switch (alt63) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression3037);
                            increment_decrement337=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement337.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: '!' cast_expression
                    {
                    char_literal338=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression3044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal338);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3046);
                    cast_expression339=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression339.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 517:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: '~' cast_expression
                    {
                    char_literal340=(Token)match(input,218,FOLLOW_218_in_cast_unary_expression3060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_218.add(char_literal340);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3062);
                    cast_expression341=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression341.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 518:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression3076);
                    increment_decrement342=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement342.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3078);
                    cast_expression343=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression343.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal347=null;
        Token char_literal350=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper344 =null;

        ObjcParser.increment_decrement_return increment_decrement345 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access346 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper348 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access349 =null;

        ObjcParser.access_wrapper_return access_wrapper351 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call352 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access353 =null;


        Object char_literal347_tree=null;
        Object char_literal350_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:3: ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt67=3;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:5: ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression3096);
                    type_cast_wrapper344=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper344.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:45: ( increment_decrement )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==125||LA65_0==129) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:45: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_expression3098);
                            increment_decrement345=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement345.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3101);
                    simple_expression_value_access346=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access346.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal347=(Token)match(input,119,FOLLOW_119_in_cast_expression3120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal347_tree = 
                    (Object)adaptor.create(char_literal347)
                    ;
                    adaptor.addChild(root_0, char_literal347_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression3122);
                    type_cast_wrapper348=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper348.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3124);
                    simple_expression_value_access349=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access349.getTree());

                    char_literal350=(Token)match(input,121,FOLLOW_121_in_cast_expression3126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal350_tree = 
                    (Object)adaptor.create(char_literal350)
                    ;
                    adaptor.addChild(root_0, char_literal350_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt66=0;
                    loop66:
                    do {
                        int alt66=2;
                        alt66 = dfa66.predict(input);
                        switch (alt66) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression3129);
                    	    access_wrapper351=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper351.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression3131);
                    	    simple_name_or_classical_function_call352=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call352.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt66 >= 1 ) break loop66;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(66, input);
                                throw eee;
                        }
                        cnt66++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3139);
                    simple_expression_value_access353=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access353.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal355=null;
        Token char_literal357=null;
        ObjcParser.name_return name354 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push356 =null;

        ObjcParser.name_return name358 =null;


        Object char_literal355_tree=null;
        Object char_literal357_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3160);
                    name354=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name354.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal355=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call3163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal355_tree = 
                    (Object)adaptor.create(char_literal355)
                    ;
                    adaptor.addChild(root_0, char_literal355_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:29: ( classical_method_params_push )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==CHAR_LITERAL||LA68_0==ID||LA68_0==MULTI_COMMENT_LIT||LA68_0==NUMBER_LITERAL||LA68_0==SINGLE_COMMENT_LIT||LA68_0==STRING_LITERAL||LA68_0==112||LA68_0==117||LA68_0==119||LA68_0==122||LA68_0==125||(LA68_0 >= 128 && LA68_0 <= 129)||LA68_0==149||LA68_0==162||LA68_0==165||LA68_0==172||(LA68_0 >= 174 && LA68_0 <= 175)||(LA68_0 >= 178 && LA68_0 <= 179)||LA68_0==192||LA68_0==207||LA68_0==218) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3165);
                            classical_method_params_push356=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push356.getTree());

                            }
                            break;

                    }


                    char_literal357=(Token)match(input,121,FOLLOW_121_in_simple_name_or_classical_function_call3168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal357_tree = 
                    (Object)adaptor.create(char_literal357)
                    ;
                    adaptor.addChild(root_0, char_literal357_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3175);
                    name358=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name358.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:1: simple_expression_value_access : ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | simple_expression_value_access2 );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal361=null;
        Token char_literal363=null;
        Token char_literal365=null;
        Token char_literal366=null;
        Token string_literal367=null;
        Token char_literal368=null;
        Token char_literal370=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper359 =null;

        ObjcParser.selector_wrapper_return selector_wrapper360 =null;

        ObjcParser.name_return name362 =null;

        ObjcParser.name_return name364 =null;

        ObjcParser.name_return name369 =null;

        ObjcParser.simple_expression_value_access2_return simple_expression_value_access2371 =null;


        Object char_literal361_tree=null;
        Object char_literal363_tree=null;
        Object char_literal365_tree=null;
        Object char_literal366_tree=null;
        Object string_literal367_tree=null;
        Object char_literal368_tree=null;
        Object char_literal370_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:3: ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | simple_expression_value_access2 )
            int alt72=4;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==178) && (synpred15_Objc())) {
                alt72=1;
            }
            else if ( (LA72_0==179) && (synpred15_Objc())) {
                alt72=1;
            }
            else if ( (LA72_0==165) ) {
                alt72=2;
            }
            else if ( (LA72_0==162) ) {
                alt72=3;
            }
            else if ( (LA72_0==CHAR_LITERAL||LA72_0==ID||LA72_0==NUMBER_LITERAL||LA72_0==STRING_LITERAL||LA72_0==117||LA72_0==119||LA72_0==122||LA72_0==149||LA72_0==172||(LA72_0 >= 174 && LA72_0 <= 175)||LA72_0==192||LA72_0==207) ) {
                alt72=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value_access3196);
                    block_call_wrapper359=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper359.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access3202);
                    selector_wrapper360=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper360.getTree());

                    char_literal361=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access3204); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal361_tree = 
                    (Object)adaptor.create(char_literal361)
                    ;
                    adaptor.addChild(root_0, char_literal361_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access3206);
                    name362=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name362.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:31: ( ':' ( name ':' )* )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==135) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:32: ':' ( name ':' )*
                            {
                            char_literal363=(Token)match(input,135,FOLLOW_135_in_simple_expression_value_access3209); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal363_tree = 
                            (Object)adaptor.create(char_literal363)
                            ;
                            adaptor.addChild(root_0, char_literal363_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:36: ( name ':' )*
                            loop70:
                            do {
                                int alt70=2;
                                int LA70_0 = input.LA(1);

                                if ( (LA70_0==ID) ) {
                                    alt70=1;
                                }


                                switch (alt70) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access3212);
                            	    name364=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name364.getTree());

                            	    char_literal365=(Token)match(input,135,FOLLOW_135_in_simple_expression_value_access3214); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal365_tree = 
                            	    (Object)adaptor.create(char_literal365)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal365_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop70;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal366=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access3220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal366_tree = 
                    (Object)adaptor.create(char_literal366)
                    ;
                    adaptor.addChild(root_0, char_literal366_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:5: '@protocol' '(' name ')'
                    {
                    string_literal367=(Token)match(input,162,FOLLOW_162_in_simple_expression_value_access3226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal367);


                    char_literal368=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access3228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal368);


                    pushFollow(FOLLOW_name_in_simple_expression_value_access3230);
                    name369=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name369.getTree());

                    char_literal370=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access3232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal370);


                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 536:30: -> ^( DIRECTIVE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:34: ^( DIRECTIVE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:5: simple_expression_value_access2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access2_in_simple_expression_value_access3247);
                    simple_expression_value_access2371=simple_expression_value_access2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access2371.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_access2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:1: simple_expression_value_access2 : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? );
    public final ObjcParser.simple_expression_value_access2_return simple_expression_value_access2() throws RecognitionException {
        ObjcParser.simple_expression_value_access2_return retval = new ObjcParser.simple_expression_value_access2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal375=null;
        Token char_literal377=null;
        Token set381=null;
        ObjcParser.simple_expression_value_return simple_expression_value372 =null;

        ObjcParser.access_wrapper_return access_wrapper373 =null;

        ObjcParser.name_return name374 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push376 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2378 =null;

        ObjcParser.access_wrapper_return access_wrapper379 =null;

        ObjcParser.simple_expression_value_return simple_expression_value380 =null;

        ObjcParser.simple_expression_value_return simple_expression_value382 =null;


        Object char_literal375_tree=null;
        Object char_literal377_tree=null;
        Object set381_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:3: ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? )
            int alt77=2;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23274);
                    simple_expression_value372=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value372.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:84: ( access_wrapper name )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( ((LA73_0 >= 131 && LA73_0 <= 132)) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access23277);
                    	    access_wrapper373=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper373.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access23279);
                    	    name374=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name374.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal375=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access23284); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal375_tree = 
                    (Object)adaptor.create(char_literal375)
                    ;
                    adaptor.addChild(root_0, char_literal375_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:112: ( classical_method_params_push )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==CHAR_LITERAL||LA74_0==ID||LA74_0==MULTI_COMMENT_LIT||LA74_0==NUMBER_LITERAL||LA74_0==SINGLE_COMMENT_LIT||LA74_0==STRING_LITERAL||LA74_0==112||LA74_0==117||LA74_0==119||LA74_0==122||LA74_0==125||(LA74_0 >= 128 && LA74_0 <= 129)||LA74_0==149||LA74_0==162||LA74_0==165||LA74_0==172||(LA74_0 >= 174 && LA74_0 <= 175)||(LA74_0 >= 178 && LA74_0 <= 179)||LA74_0==192||LA74_0==207||LA74_0==218) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access23286);
                            classical_method_params_push376=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push376.getTree());

                            }
                            break;

                    }


                    char_literal377=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access23289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal377_tree = 
                    (Object)adaptor.create(char_literal377)
                    ;
                    adaptor.addChild(root_0, char_literal377_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access23296);
                    simple_expression_value2378=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2378.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:30: ( access_wrapper simple_expression_value )*
                    loop75:
                    do {
                        int alt75=2;
                        alt75 = dfa75.predict(input);
                        switch (alt75) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:31: access_wrapper simple_expression_value
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access23299);
                    	    access_wrapper379=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper379.getTree());

                    	    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23301);
                    	    simple_expression_value380=simple_expression_value();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value380.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:72: ( ( '+=' | '-=' ) simple_expression_value )?
                    int alt76=2;
                    alt76 = dfa76.predict(input);
                    switch (alt76) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:73: ( '+=' | '-=' ) simple_expression_value
                            {
                            set381=(Token)input.LT(1);

                            if ( input.LA(1)==126||input.LA(1)==130 ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set381)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23312);
                            simple_expression_value382=simple_expression_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value382.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access2"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal383=null;
        Token char_literal385=null;
        Token char_literal387=null;
        Token set388=null;
        Token CHAR_LITERAL392=null;
        Token NUMBER_LITERAL393=null;
        ObjcParser.name_return name384 =null;

        ObjcParser.element_value_return element_value386 =null;

        ObjcParser.name_return name389 =null;

        ObjcParser.string_return string390 =null;

        ObjcParser.string_objc_return string_objc391 =null;

        ObjcParser.bool_return bool394 =null;

        ObjcParser.name_return name395 =null;


        Object char_literal383_tree=null;
        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object set388_tree=null;
        Object CHAR_LITERAL392_tree=null;
        Object NUMBER_LITERAL393_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_bool=new RewriteRuleSubtreeStream(adaptor,"rule bool");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name )
            int alt79=8;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:23: ( '&' )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==117) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:23: '&'
                            {
                            char_literal383=(Token)match(input,117,FOLLOW_117_in_simple_expression_value3339); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal383);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3342);
                    name384=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name384.getTree());

                    char_literal385=(Token)match(input,175,FOLLOW_175_in_simple_expression_value3344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(char_literal385);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value3346);
                    element_value386=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value386.getTree());

                    char_literal387=(Token)match(input,177,FOLLOW_177_in_simple_expression_value3348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(char_literal387);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 546:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set388=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==122 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set388)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3382);
                    name389=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name389.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:4: string
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_in_simple_expression_value3387);
                    string390=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string390.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:4: string_objc
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_objc_in_simple_expression_value3392);
                    string_objc391=string_objc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_objc391.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL392=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL392);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 550:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL393=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL393);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:4: bool
                    {
                    pushFollow(FOLLOW_bool_in_simple_expression_value3423);
                    bool394=bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bool.add(bool394.getTree());

                    // AST REWRITE
                    // elements: bool
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 552:9: -> ^( BOOL bool )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:12: ^( BOOL bool )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, stream_bool.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:553:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3437);
                    name395=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name395.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:1: simple_expression_value2 : ( simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal398=null;
        Token char_literal400=null;
        ObjcParser.simple_expression_value_return simple_expression_value396 =null;

        ObjcParser.method_msg_return method_msg397 =null;

        ObjcParser.element_value_return element_value399 =null;


        Object char_literal398_tree=null;
        Object char_literal400_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:3: ( simple_expression_value | method_msg | '(' element_value ')' )
            int alt80=3;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case 117:
            case 122:
            case 149:
            case 172:
            case 174:
            case 192:
            case 207:
                {
                alt80=1;
                }
                break;
            case 175:
                {
                alt80=2;
                }
                break;
            case 119:
                {
                alt80=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }

            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23450);
                    simple_expression_value396=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value396.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23456);
                    method_msg397=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg397.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal398=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal398_tree = 
                    (Object)adaptor.create(char_literal398)
                    ;
                    adaptor.addChild(root_0, char_literal398_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23464);
                    element_value399=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value399.getTree());

                    char_literal400=(Token)match(input,121,FOLLOW_121_in_simple_expression_value23466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal400_tree = 
                    (Object)adaptor.create(char_literal400)
                    ;
                    adaptor.addChild(root_0, char_literal400_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2401 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3480);
            op2401=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2401.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 563:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set402=null;

        Object set402_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set402=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 117)||input.LA(1)==122||input.LA(1)==124||input.LA(1)==128||input.LA(1)==133||(input.LA(1) >= 137 && input.LA(1) <= 138)||(input.LA(1) >= 140 && input.LA(1) <= 145)||input.LA(1)==178||input.LA(1)==214||input.LA(1)==216 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set402)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign403 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3585);
            op_assign403=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign403.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set404=null;

        Object set404_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set404=(Token)input.LT(1);

            if ( input.LA(1)==118||input.LA(1)==123||input.LA(1)==126||input.LA(1)==130||input.LA(1)==134||input.LA(1)==139||input.LA(1)==141||input.LA(1)==146||input.LA(1)==215 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set404)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector405 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3653);
            selector405=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector405.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal406=null;

        Object string_literal406_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal406=(Token)match(input,165,FOLLOW_165_in_selector3676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = 
            (Object)adaptor.create(string_literal406)
            ;
            adaptor.addChild(root_0, string_literal406_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name407 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3691);
            type_cast_name407=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name407.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal408=null;
        Token char_literal410=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration409 =null;


        Object char_literal408_tree=null;
        Object char_literal410_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal408=(Token)match(input,119,FOLLOW_119_in_type_cast_name3714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal408_tree = 
            (Object)adaptor.create(char_literal408)
            ;
            adaptor.addChild(root_0, char_literal408_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3716);
            type_cast_declaration409=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration409.getTree());

            char_literal410=(Token)match(input,121,FOLLOW_121_in_type_cast_name3718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal410_tree = 
            (Object)adaptor.create(char_literal410)
            ;
            adaptor.addChild(root_0, char_literal410_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol411 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration412 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3736);
                    type_declaration_protocol411=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol411.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3742);
                    classical_type_declaration412=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration412.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set413=null;

        Object set413_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set413=(Token)input.LT(1);

            if ( (input.LA(1) >= 131 && input.LA(1) <= 132) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set413)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access414 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:603:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:603:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3770);
            access414=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access414.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:603:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple415 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3789);
            object_access_simple415=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple415.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 607:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:610:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name416 =null;

        ObjcParser.access_wrapper_return access_wrapper417 =null;

        ObjcParser.name_return name418 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3810);
            name416=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name416.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:10: ( access_wrapper name )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0 >= 131 && LA82_0 <= 132)) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3813);
            	    access_wrapper417=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper417.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3815);
            	    name418=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name418.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access419 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3832);
            object_access419=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access419.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue420 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:4: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:6: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3854);
            cast_lvalue420=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue420.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:622:1: cast_lvalue : ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal423=null;
        Token char_literal426=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper421 =null;

        ObjcParser.lvalue_access_return lvalue_access422 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper424 =null;

        ObjcParser.lvalue_access_return lvalue_access425 =null;

        ObjcParser.access_wrapper_return access_wrapper427 =null;

        ObjcParser.name_return name428 =null;

        ObjcParser.lvalue_access_return lvalue_access429 =null;


        Object char_literal423_tree=null;
        Object char_literal426_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:3: ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt84=3;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:5: ( type_cast_name )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3874);
                    type_cast_wrapper421=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper421.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3876);
                    lvalue_access422=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access422.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal423=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal423_tree = 
                    (Object)adaptor.create(char_literal423)
                    ;
                    adaptor.addChild(root_0, char_literal423_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3891);
                    type_cast_wrapper424=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper424.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3893);
                    lvalue_access425=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access425.getTree());

                    char_literal426=(Token)match(input,121,FOLLOW_121_in_cast_lvalue3895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal426_tree = 
                    (Object)adaptor.create(char_literal426)
                    ;
                    adaptor.addChild(root_0, char_literal426_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:68: ( access_wrapper name )+
                    int cnt83=0;
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( ((LA83_0 >= 131 && LA83_0 <= 132)) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:69: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3898);
                    	    access_wrapper427=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper427.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3900);
                    	    name428=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name428.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt83 >= 1 ) break loop83;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(83, input);
                                throw eee;
                        }
                        cnt83++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3908);
                    lvalue_access429=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:1: lvalue_access : ( lvalue ( access_wrapper lvalue )* | '(' lvalue ')' ( access_wrapper lvalue )* );
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal433=null;
        Token char_literal435=null;
        ObjcParser.lvalue_return lvalue430 =null;

        ObjcParser.access_wrapper_return access_wrapper431 =null;

        ObjcParser.lvalue_return lvalue432 =null;

        ObjcParser.lvalue_return lvalue434 =null;

        ObjcParser.access_wrapper_return access_wrapper436 =null;

        ObjcParser.lvalue_return lvalue437 =null;


        Object char_literal433_tree=null;
        Object char_literal435_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:3: ( lvalue ( access_wrapper lvalue )* | '(' lvalue ')' ( access_wrapper lvalue )* )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ID||LA87_0==117||LA87_0==122) ) {
                alt87=1;
            }
            else if ( (LA87_0==119) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:5: lvalue ( access_wrapper lvalue )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_in_lvalue_access3924);
                    lvalue430=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue430.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:12: ( access_wrapper lvalue )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( ((LA85_0 >= 131 && LA85_0 <= 132)) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:13: access_wrapper lvalue
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3927);
                    	    access_wrapper431=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper431.getTree());

                    	    pushFollow(FOLLOW_lvalue_in_lvalue_access3929);
                    	    lvalue432=lvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue432.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:5: '(' lvalue ')' ( access_wrapper lvalue )*
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal433=(Token)match(input,119,FOLLOW_119_in_lvalue_access3937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal433_tree = 
                    (Object)adaptor.create(char_literal433)
                    ;
                    adaptor.addChild(root_0, char_literal433_tree);
                    }

                    pushFollow(FOLLOW_lvalue_in_lvalue_access3939);
                    lvalue434=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue434.getTree());

                    char_literal435=(Token)match(input,121,FOLLOW_121_in_lvalue_access3941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal435_tree = 
                    (Object)adaptor.create(char_literal435)
                    ;
                    adaptor.addChild(root_0, char_literal435_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:20: ( access_wrapper lvalue )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( ((LA86_0 >= 131 && LA86_0 <= 132)) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:21: access_wrapper lvalue
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3944);
                    	    access_wrapper436=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper436.getTree());

                    	    pushFollow(FOLLOW_lvalue_in_lvalue_access3946);
                    	    lvalue437=lvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue437.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal438=null;
        Token char_literal440=null;
        Token char_literal442=null;
        Token set443=null;
        ObjcParser.name_return name439 =null;

        ObjcParser.element_value_return element_value441 =null;

        ObjcParser.name_return name444 =null;

        ObjcParser.name_return name445 =null;


        Object char_literal438_tree=null;
        Object char_literal440_tree=null;
        Object char_literal442_tree=null;
        Object set443_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt89=3;
            switch ( input.LA(1) ) {
            case 117:
                {
                int LA89_1 = input.LA(2);

                if ( (LA89_1==ID) ) {
                    int LA89_4 = input.LA(3);

                    if ( (LA89_4==175) && (synpred22_Objc())) {
                        alt89=1;
                    }
                    else if ( (LA89_4==EOF||LA89_4==118||LA89_4==121||LA89_4==123||(LA89_4 >= 125 && LA89_4 <= 126)||(LA89_4 >= 129 && LA89_4 <= 132)||LA89_4==134||LA89_4==139||LA89_4==141||LA89_4==146||LA89_4==215) ) {
                        alt89=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA89_2 = input.LA(2);

                if ( (LA89_2==175) && (synpred22_Objc())) {
                    alt89=1;
                }
                else if ( (LA89_2==EOF||LA89_2==118||LA89_2==121||LA89_2==123||(LA89_2 >= 125 && LA89_2 <= 126)||(LA89_2 >= 129 && LA89_2 <= 132)||LA89_2==134||LA89_2==139||LA89_2==141||LA89_2==146||LA89_2==215) ) {
                    alt89=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;

                }
                }
                break;
            case 122:
                {
                alt89=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:23: ( '&' )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==117) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:23: '&'
                            {
                            char_literal438=(Token)match(input,117,FOLLOW_117_in_lvalue3973); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal438);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3976);
                    name439=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name439.getTree());

                    char_literal440=(Token)match(input,175,FOLLOW_175_in_lvalue3978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(char_literal440);


                    pushFollow(FOLLOW_element_value_in_lvalue3980);
                    element_value441=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value441.getTree());

                    char_literal442=(Token)match(input,177,FOLLOW_177_in_lvalue3982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(char_literal442);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 634:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set443=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==122 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set443)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue4004);
                    name444=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name444.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:636:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue4010);
                    name445=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name445.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:640:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal446=null;

        Object string_literal446_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:5: 'break'
            {
            string_literal446=(Token)match(input,182,FOLLOW_182_in_break_stmt4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal446);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 641:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal447=null;

        Object string_literal447_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:5: 'continue'
            {
            string_literal447=(Token)match(input,185,FOLLOW_185_in_continue_stmt4047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal447);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:1: extern : ( 'extern' | 'MH_EXPORT' );
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set448=null;

        Object set448_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:5: ( 'extern' | 'MH_EXPORT' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set448=(Token)input.LT(1);

            if ( input.LA(1)==171||input.LA(1)==191 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set448)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration449 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper4098);
            extern_declaration449=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration449.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:1: extern_declaration : extern field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern450 =null;

        ObjcParser.field_declaration_return field_declaration451 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:3: ( extern field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:5: extern field_declaration
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_extern_in_extern_declaration4119);
            extern450=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, extern450.getTree());

            pushFollow(FOLLOW_field_declaration_in_extern_declaration4121);
            field_declaration451=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration451.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:1: optional_prefix : ( '@optional' | '@required' );
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set452=null;

        Object set452_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:3: ( '@optional' | '@required' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set452=(Token)input.LT(1);

            if ( input.LA(1)==158||input.LA(1)==164 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set452)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:1: declarations : ( optional_prefix | method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix453 =null;

        ObjcParser.method_declaration_return method_declaration454 =null;

        ObjcParser.property_prefix_return property_prefix455 =null;

        ObjcParser.optional_prefix_return optional_prefix456 =null;

        ObjcParser.field_declaration_return field_declaration457 =null;

        ObjcParser.comments_return comments458 =null;


        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:3: ( optional_prefix | method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt91=4;
            switch ( input.LA(1) ) {
            case 158:
            case 164:
                {
                alt91=1;
                }
                break;
            case 124:
            case 128:
                {
                alt91=2;
                }
                break;
            case 160:
                {
                alt91=3;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt91=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: optional_prefix
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_optional_prefix_in_declarations4147);
                    optional_prefix453=optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optional_prefix453.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: method_declaration
                    {
                    pushFollow(FOLLOW_method_declaration_in_declarations4153);
                    method_declaration454=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration454.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:24: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:27: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations4167);
                    property_prefix455=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix455.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:21: ( optional_prefix )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==158||LA90_0==164) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations4169);
                            optional_prefix456=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix456.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations4172);
                    field_declaration457=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration457.getTree());

                    // AST REWRITE
                    // elements: field_declaration, property_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations4188);
                    comments458=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments458.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration459 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper4203);
            field_declaration459=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration459.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal460=null;

        Object string_literal460_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal460=(Token)match(input,173,FOLLOW_173_in_ns_inline4225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = 
            (Object)adaptor.create(string_literal460)
            ;
            adaptor.addChild(root_0, string_literal460_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal461=null;
        Token char_literal462=null;
        Token char_literal464=null;
        Token char_literal466=null;
        Token char_literal468=null;
        Token char_literal470=null;
        Token char_literal471=null;
        ObjcParser.name_return name463 =null;

        ObjcParser.name_return name465 =null;

        ObjcParser.name_return name467 =null;

        ObjcParser.name_return name469 =null;


        Object string_literal461_tree=null;
        Object char_literal462_tree=null;
        Object char_literal464_tree=null;
        Object char_literal466_tree=null;
        Object char_literal468_tree=null;
        Object char_literal470_tree=null;
        Object char_literal471_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal461=(Token)match(input,160,FOLLOW_160_in_property_prefix4237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = 
            (Object)adaptor.create(string_literal461)
            ;
            adaptor.addChild(root_0, string_literal461_tree);
            }

            char_literal462=(Token)match(input,119,FOLLOW_119_in_property_prefix4239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal462_tree = 
            (Object)adaptor.create(char_literal462)
            ;
            adaptor.addChild(root_0, char_literal462_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix4241);
            name463=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name463.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:26: ( '=' name )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==141) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:27: '=' name
                    {
                    char_literal464=(Token)match(input,141,FOLLOW_141_in_property_prefix4244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal464_tree = 
                    (Object)adaptor.create(char_literal464)
                    ;
                    adaptor.addChild(root_0, char_literal464_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix4246);
                    name465=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name465.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==127) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal466=(Token)match(input,127,FOLLOW_127_in_property_prefix4251); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal466_tree = 
            	    (Object)adaptor.create(char_literal466)
            	    ;
            	    adaptor.addChild(root_0, char_literal466_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix4253);
            	    name467=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name467.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:48: ( '=' name ( ':' )? )?
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==141) ) {
            	        alt94=1;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:49: '=' name ( ':' )?
            	            {
            	            char_literal468=(Token)match(input,141,FOLLOW_141_in_property_prefix4256); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal468_tree = 
            	            (Object)adaptor.create(char_literal468)
            	            ;
            	            adaptor.addChild(root_0, char_literal468_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix4258);
            	            name469=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name469.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:58: ( ':' )?
            	            int alt93=2;
            	            int LA93_0 = input.LA(1);

            	            if ( (LA93_0==135) ) {
            	                alt93=1;
            	            }
            	            switch (alt93) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:58: ':'
            	                    {
            	                    char_literal470=(Token)match(input,135,FOLLOW_135_in_property_prefix4260); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal470_tree = 
            	                    (Object)adaptor.create(char_literal470)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal470_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            char_literal471=(Token)match(input,121,FOLLOW_121_in_property_prefix4267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal471_tree = 
            (Object)adaptor.create(char_literal471)
            ;
            adaptor.addChild(root_0, char_literal471_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration472 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4280);
            interface_declaration472=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration472.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 689:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration473 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4300);
            protocol_declaration473=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration473.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal474=null;
        ObjcParser.typedef_declaration_return typedef_declaration475 =null;


        Object string_literal474_tree=null;
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:5: 'typedef' typedef_declaration
            {
            string_literal474=(Token)match(input,208,FOLLOW_208_in_typedef_declaration_wrapper4318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_208.add(string_literal474);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4320);
            typedef_declaration475=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration475.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 695:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class type_declaration_struct_enum_union_anonymous_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_enum_union_anonymous"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:1: type_declaration_struct_enum_union_anonymous : ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full );
    public final ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous() throws RecognitionException {
        ObjcParser.type_declaration_struct_enum_union_anonymous_return retval = new ObjcParser.type_declaration_struct_enum_union_anonymous_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full476 =null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full477 =null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full478 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:3: ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full )
            int alt96=3;
            switch ( input.LA(1) ) {
            case 205:
                {
                alt96=1;
                }
                break;
            case 189:
                {
                alt96=2;
                }
                break;
            case 209:
                {
                alt96=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:5: type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4341);
                    type_declaration_struct_full476=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full476.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4347);
                    type_declaration_enum_full477=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full477.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:5: type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4353);
                    type_declaration_union_full478=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full478.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_enum_union_anonymous"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:704:1: typedef_declaration : ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' );
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal482=null;
        Token char_literal484=null;
        ObjcParser.block_decl_return block_decl479 =null;

        ObjcParser.typedef_internal_return typedef_internal480 =null;

        ObjcParser.typedef_name_return typedef_name481 =null;

        ObjcParser.typedef_name_return typedef_name483 =null;


        Object char_literal482_tree=null;
        Object char_literal484_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:3: ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' )
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:5: ( block_decl_predicate )=> block_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_decl_in_typedef_declaration4374);
                    block_decl479=block_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_decl479.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_internal_in_typedef_declaration4380);
                    typedef_internal480=typedef_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal480.getTree());

                    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4382);
                    typedef_name481=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name481.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:35: ( ',' typedef_name )*
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==127) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:36: ',' typedef_name
                    	    {
                    	    char_literal482=(Token)match(input,127,FOLLOW_127_in_typedef_declaration4385); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal482_tree = 
                    	    (Object)adaptor.create(char_literal482)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal482_tree);
                    	    }

                    	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4387);
                    	    typedef_name483=typedef_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name483.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop97;
                        }
                    } while (true);


                    char_literal484=(Token)match(input,136,FOLLOW_136_in_typedef_declaration4391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal484_tree = 
                    (Object)adaptor.create(char_literal484)
                    ;
                    adaptor.addChild(root_0, char_literal484_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:708:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal485=null;
        Token char_literal486=null;
        Token char_literal488=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane487 =null;


        Object char_literal485_tree=null;
        Object char_literal486_tree=null;
        Object char_literal488_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal485=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate4403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal485_tree = 
            (Object)adaptor.create(char_literal485)
            ;
            adaptor.addChild(root_0, char_literal485_tree);
            }

            char_literal486=(Token)match(input,122,FOLLOW_122_in_func_pointer_predicate4405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal486_tree = 
            (Object)adaptor.create(char_literal486)
            ;
            adaptor.addChild(root_0, char_literal486_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate4407);
            type_declaration_plane487=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane487.getTree());

            char_literal488=(Token)match(input,121,FOLLOW_121_in_func_pointer_predicate4409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal488_tree = 
            (Object)adaptor.create(char_literal488)
            ;
            adaptor.addChild(root_0, char_literal488_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal489=null;
        Token char_literal490=null;
        Token char_literal492=null;
        Token char_literal493=null;
        Token char_literal495=null;
        Token char_literal497=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane491 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane494 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane496 =null;


        Object char_literal489_tree=null;
        Object char_literal490_tree=null;
        Object char_literal492_tree=null;
        Object char_literal493_tree=null;
        Object char_literal495_tree=null;
        Object char_literal497_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal489=(Token)match(input,119,FOLLOW_119_in_func_pointer4424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal489);


            char_literal490=(Token)match(input,122,FOLLOW_122_in_func_pointer4426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal490);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4428);
            type_declaration_plane491=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane491.getTree());

            char_literal492=(Token)match(input,121,FOLLOW_121_in_func_pointer4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal492);


            char_literal493=(Token)match(input,119,FOLLOW_119_in_func_pointer4432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal493);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ID||LA100_0==170||(LA100_0 >= 180 && LA100_0 <= 181)||LA100_0==184||LA100_0==195||(LA100_0 >= 198 && LA100_0 <= 201)||LA100_0==203||(LA100_0 >= 210 && LA100_0 <= 211)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4435);
                    type_declaration_plane494=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane494.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:68: ( ',' type_declaration_plane )*
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==127) ) {
                            alt99=1;
                        }


                        switch (alt99) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:69: ',' type_declaration_plane
                    	    {
                    	    char_literal495=(Token)match(input,127,FOLLOW_127_in_func_pointer4438); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal495);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4440);
                    	    type_declaration_plane496=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane496.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal497=(Token)match(input,121,FOLLOW_121_in_func_pointer4446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal497);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 713:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:716:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer498 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct499 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum500 =null;

        ObjcParser.type_declaration_union_return type_declaration_union501 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane502 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt101=5;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==119) && (synpred24_Objc())) {
                alt101=1;
            }
            else if ( (LA101_0==205) ) {
                alt101=2;
            }
            else if ( (LA101_0==189) ) {
                alt101=3;
            }
            else if ( (LA101_0==209) ) {
                alt101=4;
            }
            else if ( (LA101_0==ID||LA101_0==170||(LA101_0 >= 180 && LA101_0 <= 181)||LA101_0==184||LA101_0==195||(LA101_0 >= 198 && LA101_0 <= 201)||LA101_0==203||(LA101_0 >= 210 && LA101_0 <= 211)) ) {
                alt101=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4475);
                    func_pointer498=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer498.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4481);
                    type_declaration_struct499=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct499.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4487);
                    type_declaration_enum500=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum500.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4493);
                    type_declaration_union501=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union501.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4499);
                    type_declaration_plane502=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID503=null;

        Object ID503_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: ID
            {
            ID503=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID503);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 725:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal504=null;
        Token char_literal506=null;
        Token string_literal507=null;
        Token char_literal509=null;
        Token char_literal511=null;
        Token char_literal513=null;
        Token char_literal515=null;
        ObjcParser.class_name_return class_name505 =null;

        ObjcParser.protocol_name_return protocol_name508 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple510 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple512 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple514 =null;


        Object string_literal504_tree=null;
        Object char_literal506_tree=null;
        Object string_literal507_tree=null;
        Object char_literal509_tree=null;
        Object char_literal511_tree=null;
        Object char_literal513_tree=null;
        Object char_literal515_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt102=5;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt102=1;
                }
                break;
            case 162:
                {
                alt102=2;
                }
                break;
            case 205:
                {
                alt102=3;
                }
                break;
            case 209:
                {
                alt102=4;
                }
                break;
            case 189:
                {
                alt102=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }

            switch (alt102) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:5: '@class' class_name ';'
                    {
                    string_literal504=(Token)match(input,152,FOLLOW_152_in_forward_class_declaration4532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_152.add(string_literal504);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4534);
                    class_name505=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name505.getTree());

                    char_literal506=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal506);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 728:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: '@protocol' protocol_name ';'
                    {
                    string_literal507=(Token)match(input,162,FOLLOW_162_in_forward_class_declaration4549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal507);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4551);
                    protocol_name508=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name508.getTree());

                    char_literal509=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal509);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 729:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4566);
                    type_declaration_struct_simple510=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple510.getTree());

                    char_literal511=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal511);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 730:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4581);
                    type_declaration_union_simple512=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple512.getTree());

                    char_literal513=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal513);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 731:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4596);
                    type_declaration_enum_simple514=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple514.getTree());

                    char_literal515=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal515);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 732:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID516=null;

        Object ID516_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ID
            {
            ID516=(Token)match(input,ID,FOLLOW_ID_in_class_name4618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID516);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 736:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal517=null;
        ObjcParser.protocol_name_return protocol_name518 =null;

        ObjcParser.implements_interfaces_return implements_interfaces519 =null;

        ObjcParser.class_protocol_end_return class_protocol_end520 =null;


        Object string_literal517_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal517=(Token)match(input,162,FOLLOW_162_in_protocol_declaration4638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal517_tree = 
            (Object)adaptor.create(string_literal517)
            ;
            adaptor.addChild(root_0, string_literal517_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4640);
            protocol_name518=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name518.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:31: ( implements_interfaces )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==137) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4642);
                    implements_interfaces519=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces519.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4650);
            class_protocol_end520=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end520.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal522=null;
        ObjcParser.declarations_return declarations521 =null;


        Object string_literal522_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( declarations )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==MULTI_COMMENT_LIT||LA104_0==SINGLE_COMMENT_LIT||LA104_0==124||LA104_0==128||LA104_0==158||LA104_0==160||LA104_0==164) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4664);
            	    declarations521=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations521.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            string_literal522=(Token)match(input,154,FOLLOW_154_in_class_protocol_end4671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = 
            (Object)adaptor.create(string_literal522)
            ;
            adaptor.addChild(root_0, string_literal522_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal523=null;
        Token char_literal525=null;
        ObjcParser.template_internal_return template_internal524 =null;


        Object char_literal523_tree=null;
        Object char_literal525_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal523=(Token)match(input,137,FOLLOW_137_in_template4683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal523_tree = 
            (Object)adaptor.create(char_literal523)
            ;
            adaptor.addChild(root_0, char_literal523_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4685);
            template_internal524=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal524.getTree());

            char_literal525=(Token)match(input,143,FOLLOW_143_in_template4687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal525_tree = 
            (Object)adaptor.create(char_literal525)
            ;
            adaptor.addChild(root_0, char_literal525_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols526 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4696);
            implements_protocols526=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols526.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:754:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal527=null;
        Token char_literal529=null;
        Token char_literal531=null;
        ObjcParser.type_dec_internal_return type_dec_internal528 =null;

        ObjcParser.type_dec_internal_return type_dec_internal530 =null;


        Object char_literal527_tree=null;
        Object char_literal529_tree=null;
        Object char_literal531_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal527=(Token)match(input,137,FOLLOW_137_in_implements_protocols4721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal527);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4723);
            type_dec_internal528=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal528.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:27: ( ',' type_dec_internal )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==127) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:28: ',' type_dec_internal
            	    {
            	    char_literal529=(Token)match(input,127,FOLLOW_127_in_implements_protocols4726); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal529);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4728);
            	    type_dec_internal530=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal530.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            char_literal531=(Token)match(input,143,FOLLOW_143_in_implements_protocols4732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(char_literal531);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 755:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:758:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal533=null;
        ObjcParser.template_type_return template_type532 =null;

        ObjcParser.template_type_return template_type534 =null;


        Object char_literal533_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4754);
            template_type532=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type532.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:19: ( ',' template_type )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==127) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:20: ',' template_type
            	    {
            	    char_literal533=(Token)match(input,127,FOLLOW_127_in_template_internal4757); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal533_tree = 
            	    (Object)adaptor.create(char_literal533)
            	    ;
            	    adaptor.addChild(root_0, char_literal533_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4759);
            	    template_type534=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type534.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal536=null;
        ObjcParser.template_name_return template_name535 =null;

        ObjcParser.template_name_return template_name537 =null;


        Object string_literal536_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:3: ( template_name | 'struct' template_name )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==ID) ) {
                alt107=1;
            }
            else if ( (LA107_0==205) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4773);
                    template_name535=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name535.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal536=(Token)match(input,205,FOLLOW_205_in_template_type4779); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal536_tree = 
                    (Object)adaptor.create(string_literal536)
                    ;
                    adaptor.addChild(root_0, string_literal536_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4781);
                    template_name537=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name537.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID538=null;

        Object ID538_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:5: ID
            {
            ID538=(Token)match(input,ID,FOLLOW_ID_in_template_name4796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID538);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID539=null;

        Object ID539_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: ID
            {
            ID539=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4819); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID539);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal540=null;
        Token string_literal545=null;
        ObjcParser.interface_name_return interface_name541 =null;

        ObjcParser.superclass_name_return superclass_name542 =null;

        ObjcParser.fields_body_return fields_body543 =null;

        ObjcParser.declarations_return declarations544 =null;


        Object string_literal540_tree=null;
        Object string_literal545_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal540=(Token)match(input,157,FOLLOW_157_in_interface_declaration4843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = 
            (Object)adaptor.create(string_literal540)
            ;
            adaptor.addChild(root_0, string_literal540_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4845);
            interface_name541=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name541.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4847);
            superclass_name542=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name542.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: ( fields_body )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==213) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4851);
                    fields_body543=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body543.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:3: ( declarations )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==MULTI_COMMENT_LIT||LA109_0==SINGLE_COMMENT_LIT||LA109_0==124||LA109_0==128||LA109_0==158||LA109_0==160||LA109_0==164) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4856);
            	    declarations544=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations544.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            string_literal545=(Token)match(input,154,FOLLOW_154_in_interface_declaration4861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal545_tree = 
            (Object)adaptor.create(string_literal545)
            ;
            adaptor.addChild(root_0, string_literal545_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal546=null;
        Token char_literal548=null;
        ObjcParser.body_item_return body_item547 =null;


        Object char_literal546_tree=null;
        Object char_literal548_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal546=(Token)match(input,213,FOLLOW_213_in_fields_body4878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal546_tree = 
            (Object)adaptor.create(char_literal546)
            ;
            adaptor.addChild(root_0, char_literal546_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: ( body_item )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==ID||LA110_0==MULTI_COMMENT_LIT||LA110_0==SINGLE_COMMENT_LIT||LA110_0==119||LA110_0==159||LA110_0==161||LA110_0==163||LA110_0==170||(LA110_0 >= 180 && LA110_0 <= 181)||LA110_0==184||LA110_0==189||LA110_0==195||(LA110_0 >= 198 && LA110_0 <= 201)||LA110_0==203||LA110_0==205||(LA110_0 >= 208 && LA110_0 <= 211)) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4884);
            	    body_item547=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item547.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            char_literal548=(Token)match(input,217,FOLLOW_217_in_fields_body4889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal548_tree = 
            (Object)adaptor.create(char_literal548)
            ;
            adaptor.addChild(root_0, char_literal548_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper549 =null;

        ObjcParser.field_modifiers_return field_modifiers550 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper551 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper552 =null;

        ObjcParser.comments_return comments553 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==ID||LA114_0==119||LA114_0==159||LA114_0==161||LA114_0==163||LA114_0==170||(LA114_0 >= 180 && LA114_0 <= 181)||LA114_0==184||LA114_0==189||LA114_0==195||(LA114_0 >= 198 && LA114_0 <= 201)||LA114_0==203||LA114_0==205||(LA114_0 >= 208 && LA114_0 <= 211)) ) {
                alt114=1;
            }
            else if ( (LA114_0==MULTI_COMMENT_LIT||LA114_0==SINGLE_COMMENT_LIT) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( group_modifier_wrapper )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==159||LA111_0==161||LA111_0==163) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4904);
                            group_modifier_wrapper549=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper549.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:29: ( field_modifiers )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==170) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4907);
                            field_modifiers550=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers550.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==208) ) {
                        alt113=1;
                    }
                    else if ( (LA113_0==ID||LA113_0==119||LA113_0==170||(LA113_0 >= 180 && LA113_0 <= 181)||LA113_0==184||LA113_0==189||LA113_0==195||(LA113_0 >= 198 && LA113_0 <= 201)||LA113_0==203||LA113_0==205||(LA113_0 >= 209 && LA113_0 <= 211)) ) {
                        alt113=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 113, 0, input);

                        throw nvae;

                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4911);
                            typedef_declaration_wrapper551=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper551.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4915);
                            field_declaration_wrapper552=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper552.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4922);
                    comments553=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments553.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier554 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4935);
            group_modifier554=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier554.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 793:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set555=null;

        Object set555_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set555=(Token)input.LT(1);

            if ( input.LA(1)==159||input.LA(1)==161||input.LA(1)==163 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set555)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal556=null;

        Object string_literal556_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal556=(Token)match(input,170,FOLLOW_170_in_field_modifiers4980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = 
            (Object)adaptor.create(string_literal556)
            ;
            adaptor.addChild(root_0, string_literal556_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID557=null;
        ObjcParser.category_return category558 =null;


        Object ID557_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:5: ID ( category )?
            {
            ID557=(Token)match(input,ID,FOLLOW_ID_in_interface_name4995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID557);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:8: ( category )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==119) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4997);
                    category558=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category558.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: category, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 803:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal559=null;
        Token ID560=null;
        Token char_literal561=null;

        Object char_literal559_tree=null;
        Object ID560_tree=null;
        Object char_literal561_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:11: '(' ( ID )? ')'
            {
            char_literal559=(Token)match(input,119,FOLLOW_119_in_category5016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal559);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:15: ( ID )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ID) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:15: ID
                    {
                    ID560=(Token)match(input,ID,FOLLOW_ID_in_category5018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID560);


                    }
                    break;

            }


            char_literal561=(Token)match(input,121,FOLLOW_121_in_category5021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal561);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal562=null;
        Token ID563=null;
        ObjcParser.implements_interfaces_return implements_interfaces564 =null;


        Object char_literal562_tree=null;
        Object ID563_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:5: ( ':' ID )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==135) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:6: ':' ID
                    {
                    char_literal562=(Token)match(input,135,FOLLOW_135_in_superclass_name5041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal562);


                    ID563=(Token)match(input,ID,FOLLOW_ID_in_superclass_name5043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID563);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:15: ( implements_interfaces )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==137) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name5047);
                    implements_interfaces564=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces564.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, implements_interfaces
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 808:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration565 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:5: ( field_declaration )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==ID||LA119_0==119||LA119_0==170||(LA119_0 >= 180 && LA119_0 <= 181)||LA119_0==184||LA119_0==189||LA119_0==195||(LA119_0 >= 198 && LA119_0 <= 201)||LA119_0==203||LA119_0==205||(LA119_0 >= 209 && LA119_0 <= 211)) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations5076);
            	    field_declaration565=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration565.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 812:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal569=null;
        Token char_literal572=null;
        Token char_literal576=null;
        Token char_literal577=null;
        ObjcParser.block_decl_return block_decl566 =null;

        ObjcParser.type_declaration_return type_declaration567 =null;

        ObjcParser.field_name_return field_name568 =null;

        ObjcParser.field_name_return field_name570 =null;

        ObjcParser.classical_method_params_return classical_method_params571 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper573 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper574 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init575 =null;


        Object char_literal569_tree=null;
        Object char_literal572_tree=null;
        Object char_literal576_tree=null;
        Object char_literal577_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:3: ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:5: ( block_decl_predicate )=> block_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_decl_in_field_declaration5103);
                    block_decl566=block_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_decl566.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:6: ( type_declaration field_name )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:7: type_declaration field_name
                    {
                    pushFollow(FOLLOW_type_declaration_in_field_declaration5111);
                    type_declaration567=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration567.getTree());

                    pushFollow(FOLLOW_field_name_in_field_declaration5113);
                    field_name568=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name568.getTree());

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:36: ( ',' field_name )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==127) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:37: ',' field_name
                    	    {
                    	    char_literal569=(Token)match(input,127,FOLLOW_127_in_field_declaration5117); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal569_tree = 
                    	    (Object)adaptor.create(char_literal569)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal569_tree);
                    	    }

                    	    pushFollow(FOLLOW_field_name_in_field_declaration5119);
                    	    field_name570=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name570.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( ((LA123_0 >= 118 && LA123_0 <= 119)||LA123_0==123||LA123_0==126||LA123_0==130||LA123_0==134||LA123_0==139||LA123_0==141||LA123_0==146||LA123_0==215) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==136) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 0, input);

                        throw nvae;

                    }
                    switch (alt123) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            int alt122=2;
                            int LA122_0 = input.LA(1);

                            if ( (LA122_0==119) ) {
                                alt122=1;
                            }
                            else if ( (LA122_0==118||LA122_0==123||LA122_0==126||LA122_0==130||LA122_0==134||LA122_0==139||LA122_0==141||LA122_0==146||LA122_0==215) ) {
                                alt122=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 122, 0, input);

                                throw nvae;

                            }
                            switch (alt122) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:57: classical_method_params ( ';' | block_multiline_wrapper )
                                    {
                                    pushFollow(FOLLOW_classical_method_params_in_field_declaration5126);
                                    classical_method_params571=classical_method_params();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params571.getTree());

                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:81: ( ';' | block_multiline_wrapper )
                                    int alt121=2;
                                    int LA121_0 = input.LA(1);

                                    if ( (LA121_0==136) ) {
                                        alt121=1;
                                    }
                                    else if ( (LA121_0==213) ) {
                                        alt121=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 121, 0, input);

                                        throw nvae;

                                    }
                                    switch (alt121) {
                                        case 1 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:82: ';'
                                            {
                                            char_literal572=(Token)match(input,136,FOLLOW_136_in_field_declaration5129); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            char_literal572_tree = 
                                            (Object)adaptor.create(char_literal572)
                                            ;
                                            adaptor.addChild(root_0, char_literal572_tree);
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:88: block_multiline_wrapper
                                            {
                                            pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration5133);
                                            block_multiline_wrapper573=block_multiline_wrapper();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper573.getTree());

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:117: op_assign_wrapper element_value_or_array_init ';'
                                    {
                                    pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration5140);
                                    op_assign_wrapper574=op_assign_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper574.getTree());

                                    pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration5142);
                                    element_value_or_array_init575=element_value_or_array_init();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init575.getTree());

                                    char_literal576=(Token)match(input,136,FOLLOW_136_in_field_declaration5144); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal576_tree = 
                                    (Object)adaptor.create(char_literal576)
                                    ;
                                    adaptor.addChild(root_0, char_literal576_tree);
                                    }

                                    }


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:171: ';'
                            {
                            char_literal577=(Token)match(input,136,FOLLOW_136_in_field_declaration5150); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal577_tree = 
                            (Object)adaptor.create(char_literal577)
                            ;
                            adaptor.addChild(root_0, char_literal577_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:819:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration578 =null;

        ObjcParser.field_name_return field_name579 =null;


        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple5165);
            type_declaration578=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration578.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple5167);
            field_name579=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name579.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 820:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal580=null;
        Token char_literal582=null;
        Token char_literal584=null;
        ObjcParser.classical_param_return classical_param581 =null;

        ObjcParser.classical_param_return classical_param583 =null;


        Object char_literal580_tree=null;
        Object char_literal582_tree=null;
        Object char_literal584_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal580=(Token)match(input,119,FOLLOW_119_in_classical_method_params5192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal580);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:9: ( classical_param )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ID||LA125_0==119||LA125_0==170||(LA125_0 >= 180 && LA125_0 <= 181)||LA125_0==184||LA125_0==189||LA125_0==195||(LA125_0 >= 198 && LA125_0 <= 201)||LA125_0==203||LA125_0==205||(LA125_0 >= 209 && LA125_0 <= 211)) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params5194);
                    classical_param581=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param581.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:26: ( ',' classical_param )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==127) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:27: ',' classical_param
            	    {
            	    char_literal582=(Token)match(input,127,FOLLOW_127_in_classical_method_params5198); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal582);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params5200);
            	    classical_param583=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param583.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            char_literal584=(Token)match(input,121,FOLLOW_121_in_classical_method_params5204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal584);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 824:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration585 =null;

        ObjcParser.param_name_return param_name586 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param5229);
            classical_type_declaration585=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration585.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param5231);
            param_name586=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name586.getTree());

            // AST REWRITE
            // elements: classical_type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 828:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal590=null;
        Token string_literal591=null;
        Token char_literal593=null;
        Token string_literal594=null;
        Token char_literal596=null;
        Token string_literal597=null;
        Token char_literal599=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol587 =null;

        ObjcParser.func_pointer_return func_pointer588 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane589 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper592 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper595 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper598 =null;


        Object char_literal590_tree=null;
        Object string_literal591_tree=null;
        Object char_literal593_tree=null;
        Object string_literal594_tree=null;
        Object char_literal596_tree=null;
        Object string_literal597_tree=null;
        Object char_literal599_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt131=6;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==181) ) {
                int LA131_1 = input.LA(2);

                if ( (LA131_1==195) ) {
                    int LA131_18 = input.LA(3);

                    if ( (LA131_18==137) ) {
                        int LA131_31 = input.LA(4);

                        if ( (LA131_31==199) && (synpred26_Objc())) {
                            alt131=1;
                        }
                        else if ( (LA131_31==195) ) {
                            int LA131_44 = input.LA(5);

                            if ( (synpred26_Objc()) ) {
                                alt131=1;
                            }
                            else if ( (true) ) {
                                alt131=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 131, 44, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA131_31==200) && (synpred26_Objc())) {
                            alt131=1;
                        }
                        else if ( (LA131_31==203) && (synpred26_Objc())) {
                            alt131=1;
                        }
                        else if ( (LA131_31==ID) ) {
                            int LA131_47 = input.LA(5);

                            if ( (synpred26_Objc()) ) {
                                alt131=1;
                            }
                            else if ( (true) ) {
                                alt131=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 131, 47, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA131_31==137) ) {
                            alt131=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 31, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA131_18==ID||LA131_18==117||(LA131_18 >= 121 && LA131_18 <= 122)||LA131_18==175) ) {
                        alt131=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 18, input);

                        throw nvae;

                    }
                }
                else if ( (LA131_1==ID||LA131_1==170||(LA131_1 >= 199 && LA131_1 <= 201)||LA131_1==203) ) {
                    alt131=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA131_0==195) ) {
                int LA131_2 = input.LA(2);

                if ( (LA131_2==137) ) {
                    int LA131_25 = input.LA(3);

                    if ( (LA131_25==199) && (synpred26_Objc())) {
                        alt131=1;
                    }
                    else if ( (LA131_25==195) ) {
                        int LA131_38 = input.LA(4);

                        if ( (LA131_38==137) ) {
                            alt131=3;
                        }
                        else if ( (LA131_38==143) && (synpred26_Objc())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 38, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA131_25==200) && (synpred26_Objc())) {
                        alt131=1;
                    }
                    else if ( (LA131_25==203) && (synpred26_Objc())) {
                        alt131=1;
                    }
                    else if ( (LA131_25==ID) ) {
                        int LA131_41 = input.LA(4);

                        if ( (LA131_41==122) ) {
                            alt131=3;
                        }
                        else if ( (LA131_41==143) && (synpred26_Objc())) {
                            alt131=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 131, 41, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA131_25==137) ) {
                        alt131=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 25, input);

                        throw nvae;

                    }
                }
                else if ( (LA131_2==ID||LA131_2==117||(LA131_2 >= 121 && LA131_2 <= 122)||LA131_2==175) ) {
                    alt131=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA131_0==119) && (synpred27_Objc())) {
                alt131=2;
            }
            else if ( (LA131_0==ID||LA131_0==170||LA131_0==180||LA131_0==184||(LA131_0 >= 198 && LA131_0 <= 201)||LA131_0==203||(LA131_0 >= 210 && LA131_0 <= 211)) ) {
                alt131=3;
            }
            else if ( (LA131_0==205) ) {
                alt131=4;
            }
            else if ( (LA131_0==209) ) {
                alt131=5;
            }
            else if ( (LA131_0==189) ) {
                alt131=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration5260);
                    type_declaration_protocol587=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol587.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration5271);
                    func_pointer588=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer588.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration5277);
                    type_declaration_plane589=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane589.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:28: ( '&' )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==117) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:28: '&'
                            {
                            char_literal590=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5279); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal590_tree = 
                            (Object)adaptor.create(char_literal590)
                            ;
                            adaptor.addChild(root_0, char_literal590_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal591=(Token)match(input,205,FOLLOW_205_in_classical_type_declaration5287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_205.add(string_literal591);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5289);
                    type_dec_wrapper592=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper592.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:32: ( '&' )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==117) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:32: '&'
                            {
                            char_literal593=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5291); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal593);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 835:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal594=(Token)match(input,209,FOLLOW_209_in_classical_type_declaration5308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_209.add(string_literal594);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5310);
                    type_dec_wrapper595=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper595.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:31: ( '&' )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==117) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:31: '&'
                            {
                            char_literal596=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5312); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal596);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 836:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal597=(Token)match(input,189,FOLLOW_189_in_classical_type_declaration5329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal597);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5331);
                    type_dec_wrapper598=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper598.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:30: ( '&' )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==117) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:30: '&'
                            {
                            char_literal599=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5333); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal599);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal604=null;
        Token char_literal605=null;
        Token char_literal607=null;
        Token char_literal609=null;
        Token char_literal611=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol600 =null;

        ObjcParser.func_pointer_return func_pointer601 =null;

        ObjcParser.block_type_decl_return block_type_decl602 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct603 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum606 =null;

        ObjcParser.type_declaration_union_return type_declaration_union608 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane610 =null;


        Object char_literal604_tree=null;
        Object char_literal605_tree=null;
        Object char_literal607_tree=null;
        Object char_literal609_tree=null;
        Object char_literal611_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt137=7;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration5362);
                    type_declaration_protocol600=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol600.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration5373);
                    func_pointer601=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer601.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( block_type_decl_predicate )=> block_type_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_type_decl_in_type_declaration5384);
                    block_type_decl602=block_type_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_type_decl602.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration5390);
                    type_declaration_struct603=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct603.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:29: ( '&' )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==117) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:29: '&'
                            {
                            char_literal604=(Token)match(input,117,FOLLOW_117_in_type_declaration5392); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal604_tree = 
                            (Object)adaptor.create(char_literal604)
                            ;
                            adaptor.addChild(root_0, char_literal604_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:33: ( '*' )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==122) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:33: '*'
                            {
                            char_literal605=(Token)match(input,122,FOLLOW_122_in_type_declaration5394); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal605_tree = 
                            (Object)adaptor.create(char_literal605)
                            ;
                            adaptor.addChild(root_0, char_literal605_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration5401);
                    type_declaration_enum606=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum606.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:27: ( '&' )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==117) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:27: '&'
                            {
                            char_literal607=(Token)match(input,117,FOLLOW_117_in_type_declaration5403); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal607_tree = 
                            (Object)adaptor.create(char_literal607)
                            ;
                            adaptor.addChild(root_0, char_literal607_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration5410);
                    type_declaration_union608=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union608.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:28: ( '&' )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==117) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:28: '&'
                            {
                            char_literal609=(Token)match(input,117,FOLLOW_117_in_type_declaration5412); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal609_tree = 
                            (Object)adaptor.create(char_literal609)
                            ;
                            adaptor.addChild(root_0, char_literal609_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration5419);
                    type_declaration_plane610=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane610.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:28: ( '&' )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==117) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:28: '&'
                            {
                            char_literal611=(Token)match(input,117,FOLLOW_117_in_type_declaration5421); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal611_tree = 
                            (Object)adaptor.create(char_literal611)
                            ;
                            adaptor.addChild(root_0, char_literal611_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:1: type_declaration_plane : ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal612=null;
        Token string_literal613=null;
        Token string_literal614=null;
        Token string_literal615=null;
        Token string_literal616=null;
        Token string_literal617=null;
        Token string_literal618=null;
        Token char_literal620=null;
        Token string_literal621=null;
        Token char_literal622=null;
        ObjcParser.type_dec_return type_dec619 =null;


        Object string_literal612_tree=null;
        Object string_literal613_tree=null;
        Object string_literal614_tree=null;
        Object string_literal615_tree=null;
        Object string_literal616_tree=null;
        Object string_literal617_tree=null;
        Object string_literal618_tree=null;
        Object char_literal620_tree=null;
        Object string_literal621_tree=null;
        Object char_literal622_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:3: ( ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( '__block' )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==180) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: '__block'
                    {
                    string_literal612=(Token)match(input,180,FOLLOW_180_in_type_declaration_plane5436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal612);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:16: ( 'volatile' )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==211) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:16: 'volatile'
                    {
                    string_literal613=(Token)match(input,211,FOLLOW_211_in_type_declaration_plane5439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_211.add(string_literal613);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:28: ( 'const' )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==184) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:28: 'const'
                    {
                    string_literal614=(Token)match(input,184,FOLLOW_184_in_type_declaration_plane5442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal614);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:37: ( 'unsigned' )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==210) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:37: 'unsigned'
                    {
                    string_literal615=(Token)match(input,210,FOLLOW_210_in_type_declaration_plane5445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_210.add(string_literal615);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:49: ( 'inout' )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==198) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:49: 'inout'
                    {
                    string_literal616=(Token)match(input,198,FOLLOW_198_in_type_declaration_plane5448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_198.add(string_literal616);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:58: ( '__weak' )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==181) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:58: '__weak'
                    {
                    string_literal617=(Token)match(input,181,FOLLOW_181_in_type_declaration_plane5451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal617);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:68: ( 'nullable' )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==201) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:68: 'nullable'
                    {
                    string_literal618=(Token)match(input,201,FOLLOW_201_in_type_declaration_plane5454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(string_literal618);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane5457);
            type_dec619=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec619.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:89: ( '*' 'const' ( '*' )? )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==122) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:90: '*' 'const' ( '*' )?
                    {
                    char_literal620=(Token)match(input,122,FOLLOW_122_in_type_declaration_plane5460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(char_literal620);


                    string_literal621=(Token)match(input,184,FOLLOW_184_in_type_declaration_plane5462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal621);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:102: ( '*' )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==122) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:102: '*'
                            {
                            char_literal622=(Token)match(input,122,FOLLOW_122_in_type_declaration_plane5464); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(char_literal622);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 211, 184, type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 851:109: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:112: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:125: ( 'volatile' )?
                if ( stream_211.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_211.nextNode()
                    );

                }
                stream_211.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:146: ( 'const' )?
                if ( stream_184.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_184.nextNode()
                    );

                }
                stream_184.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:1: type_decl_protocol_predicate : ( ( '__weak' )? 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal623=null;
        Token string_literal624=null;
        Token char_literal625=null;

        Object string_literal623_tree=null;
        Object string_literal624_tree=null;
        Object char_literal625_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:3: ( ( ( '__weak' )? 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:5: ( ( '__weak' )? 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:5: ( ( '__weak' )? 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:6: ( '__weak' )? 'id' '<'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:6: ( '__weak' )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==181) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:6: '__weak'
                    {
                    string_literal623=(Token)match(input,181,FOLLOW_181_in_type_decl_protocol_predicate5496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal623_tree = 
                    (Object)adaptor.create(string_literal623)
                    ;
                    adaptor.addChild(root_0, string_literal623_tree);
                    }

                    }
                    break;

            }


            string_literal624=(Token)match(input,195,FOLLOW_195_in_type_decl_protocol_predicate5499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = 
            (Object)adaptor.create(string_literal624)
            ;
            adaptor.addChild(root_0, string_literal624_tree);
            }

            char_literal625=(Token)match(input,137,FOLLOW_137_in_type_decl_protocol_predicate5501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal625_tree = 
            (Object)adaptor.create(char_literal625)
            ;
            adaptor.addChild(root_0, char_literal625_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:1: type_declaration_protocol : ( '__weak' )? 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal626=null;
        Token string_literal627=null;
        Token char_literal628=null;
        Token char_literal630=null;
        ObjcParser.type_dec_internal_return type_dec_internal629 =null;


        Object string_literal626_tree=null;
        Object string_literal627_tree=null;
        Object char_literal628_tree=null;
        Object char_literal630_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:3: ( ( '__weak' )? 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:5: ( '__weak' )? 'id' '<' type_dec_internal '>'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:5: ( '__weak' )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==181) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:5: '__weak'
                    {
                    string_literal626=(Token)match(input,181,FOLLOW_181_in_type_declaration_protocol5517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal626);


                    }
                    break;

            }


            string_literal627=(Token)match(input,195,FOLLOW_195_in_type_declaration_protocol5520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal627);


            char_literal628=(Token)match(input,137,FOLLOW_137_in_type_declaration_protocol5522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal628);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5524);
            type_dec_internal629=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal629.getTree());

            char_literal630=(Token)match(input,143,FOLLOW_143_in_type_declaration_protocol5526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(char_literal630);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 859:46: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:49: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal631=null;
        ObjcParser.typedef_name_return typedef_name632 =null;


        Object string_literal631_tree=null;
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:5: 'struct' typedef_name
            {
            string_literal631=(Token)match(input,205,FOLLOW_205_in_type_declaration_struct_simple5548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_205.add(string_literal631);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5550);
            typedef_name632=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name632.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 863:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal633=null;
        ObjcParser.typedef_name_return typedef_name634 =null;


        Object string_literal633_tree=null;
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:5: 'union' typedef_name
            {
            string_literal633=(Token)match(input,209,FOLLOW_209_in_type_declaration_union_simple5570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_209.add(string_literal633);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5572);
            typedef_name634=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name634.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 867:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal635=null;
        ObjcParser.typedef_name_return typedef_name636 =null;


        Object string_literal635_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:5: 'enum' typedef_name
            {
            string_literal635=(Token)match(input,189,FOLLOW_189_in_type_declaration_enum_simple5596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal635);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5598);
            typedef_name636=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name636.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 871:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:1: type_declaration_struct_full : 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_struct_full_return type_declaration_struct_full() throws RecognitionException {
        ObjcParser.type_declaration_struct_full_return retval = new ObjcParser.type_declaration_struct_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal637=null;
        ObjcParser.typedef_name_return typedef_name638 =null;

        ObjcParser.struct_wrapper_return struct_wrapper639 =null;


        Object string_literal637_tree=null;
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:3: ( 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: 'struct' ( typedef_name )? struct_wrapper
            {
            string_literal637=(Token)match(input,205,FOLLOW_205_in_type_declaration_struct_full5618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_205.add(string_literal637);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:14: ( typedef_name )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:14: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_full5620);
                    typedef_name638=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name638.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct_full5623);
            struct_wrapper639=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper639.getTree());

            // AST REWRITE
            // elements: typedef_name, struct_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 875:43: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:45: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:58: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_full"


    public static class type_declaration_union_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:1: type_declaration_union_full : 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_union_full_return type_declaration_union_full() throws RecognitionException {
        ObjcParser.type_declaration_union_full_return retval = new ObjcParser.type_declaration_union_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal640=null;
        ObjcParser.typedef_name_return typedef_name641 =null;

        ObjcParser.struct_wrapper_return struct_wrapper642 =null;


        Object string_literal640_tree=null;
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:3: ( 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:5: 'union' ( typedef_name )? struct_wrapper
            {
            string_literal640=(Token)match(input,209,FOLLOW_209_in_type_declaration_union_full5647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_209.add(string_literal640);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:13: ( typedef_name )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ID) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:13: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union_full5649);
                    typedef_name641=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name641.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union_full5652);
            struct_wrapper642=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper642.getTree());

            // AST REWRITE
            // elements: typedef_name, struct_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 879:42: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:44: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:56: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_full"


    public static class type_declaration_enum_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:1: type_declaration_enum_full : 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) ;
    public final ObjcParser.type_declaration_enum_full_return type_declaration_enum_full() throws RecognitionException {
        ObjcParser.type_declaration_enum_full_return retval = new ObjcParser.type_declaration_enum_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal643=null;
        ObjcParser.typedef_name_return typedef_name644 =null;

        ObjcParser.enum_wrapper_return enum_wrapper645 =null;


        Object string_literal643_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:3: ( 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:5: 'enum' ( typedef_name )? enum_wrapper
            {
            string_literal643=(Token)match(input,189,FOLLOW_189_in_type_declaration_enum_full5676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal643);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:12: ( typedef_name )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ID) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:12: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_full5678);
                    typedef_name644=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name644.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum_full5681);
            enum_wrapper645=enum_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper645.getTree());

            // AST REWRITE
            // elements: enum_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 883:39: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:41: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:52: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_full"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full646 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple647 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:3: ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==205) ) {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==ID) ) {
                    int LA152_2 = input.LA(3);

                    if ( (LA152_2==213) && (synpred31_Objc())) {
                        alt152=1;
                    }
                    else if ( (LA152_2==ID||LA152_2==117||(LA152_2 >= 121 && LA152_2 <= 122)) ) {
                        alt152=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 152, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA152_1==213) && (synpred31_Objc())) {
                    alt152=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:5: ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct5716);
                    type_declaration_struct_full646=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full646.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5722);
                    type_declaration_struct_simple647=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple647.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full648 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple649 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:3: ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==209) ) {
                int LA153_1 = input.LA(2);

                if ( (LA153_1==ID) ) {
                    int LA153_2 = input.LA(3);

                    if ( (LA153_2==213) && (synpred32_Objc())) {
                        alt153=1;
                    }
                    else if ( (LA153_2==ID||LA153_2==117||LA153_2==121) ) {
                        alt153=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA153_1==213) && (synpred32_Objc())) {
                    alt153=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }
            switch (alt153) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:5: ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_union5746);
                    type_declaration_union_full648=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full648.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5752);
                    type_declaration_union_simple649=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full650 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple651 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:3: ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==189) ) {
                int LA154_1 = input.LA(2);

                if ( (LA154_1==ID) ) {
                    int LA154_2 = input.LA(3);

                    if ( (LA154_2==213) && (synpred33_Objc())) {
                        alt154=1;
                    }
                    else if ( (LA154_2==ID||LA154_2==117||LA154_2==121) ) {
                        alt154=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 154, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA154_1==213) && (synpred33_Objc())) {
                    alt154=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;

            }
            switch (alt154) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_enum5776);
                    type_declaration_enum_full650=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full650.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5782);
                    type_declaration_enum_simple651=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple651.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal652=null;
        Token char_literal654=null;
        ObjcParser.enum_element_return enum_element653 =null;


        Object char_literal652_tree=null;
        Object char_literal654_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal652=(Token)match(input,213,FOLLOW_213_in_enum_wrapper5795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal652_tree = 
            (Object)adaptor.create(char_literal652)
            ;
            adaptor.addChild(root_0, char_literal652_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:9: ( enum_element )+
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==ID||LA155_0==MULTI_COMMENT_LIT||LA155_0==SINGLE_COMMENT_LIT||LA155_0==127) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5805);
            	    enum_element653=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element653.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);


            char_literal654=(Token)match(input,217,FOLLOW_217_in_enum_wrapper5812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal654_tree = 
            (Object)adaptor.create(char_literal654)
            ;
            adaptor.addChild(root_0, char_literal654_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:1: enum_element : ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal655=null;
        Token char_literal659=null;
        ObjcParser.name_return name656 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper657 =null;

        ObjcParser.element_value_return element_value658 =null;

        ObjcParser.comments_return comments660 =null;


        Object char_literal655_tree=null;
        Object char_literal659_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:3: ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==ID||LA159_0==127) ) {
                alt159=1;
            }
            else if ( (LA159_0==MULTI_COMMENT_LIT||LA159_0==SINGLE_COMMENT_LIT) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }
            switch (alt159) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ( ',' )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==127) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ','
                            {
                            char_literal655=(Token)match(input,127,FOLLOW_127_in_enum_element5827); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal655);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_enum_element5830);
                    name656=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name656.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:15: ( op_assign_wrapper element_value )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==118||LA157_0==123||LA157_0==126||LA157_0==130||LA157_0==134||LA157_0==139||LA157_0==141||LA157_0==146||LA157_0==215) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:16: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5833);
                            op_assign_wrapper657=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper657.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5835);
                            element_value658=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value658.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:50: ( ',' )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==127) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:50: ','
                            {
                            char_literal659=(Token)match(input,127,FOLLOW_127_in_enum_element5839); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal659);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 908:55: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:57: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:75: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5860);
                    comments660=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments660.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct661 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5875);
            struct661=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct661.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal662=null;
        Token char_literal664=null;
        ObjcParser.struct_internal_return struct_internal663 =null;


        Object char_literal662_tree=null;
        Object char_literal664_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:916:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:916:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal662=(Token)match(input,213,FOLLOW_213_in_struct5893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal662_tree = 
            (Object)adaptor.create(char_literal662)
            ;
            adaptor.addChild(root_0, char_literal662_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:7: ( struct_internal )+
            int cnt160=0;
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==ID||LA160_0==MULTI_COMMENT_LIT||LA160_0==SINGLE_COMMENT_LIT||LA160_0==119||LA160_0==170||(LA160_0 >= 180 && LA160_0 <= 181)||LA160_0==184||LA160_0==189||LA160_0==195||(LA160_0 >= 198 && LA160_0 <= 201)||LA160_0==203||LA160_0==205||(LA160_0 >= 209 && LA160_0 <= 211)) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5902);
            	    struct_internal663=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal663.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt160 >= 1 ) break loop160;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(160, input);
                        throw eee;
                }
                cnt160++;
            } while (true);


            char_literal664=(Token)match(input,217,FOLLOW_217_in_struct5909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal664_tree = 
            (Object)adaptor.create(char_literal664)
            ;
            adaptor.addChild(root_0, char_literal664_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:921:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper665 =null;

        ObjcParser.comments_return comments666 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:3: ( field_declaration_wrapper | comments )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ID||LA161_0==119||LA161_0==170||(LA161_0 >= 180 && LA161_0 <= 181)||LA161_0==184||LA161_0==189||LA161_0==195||(LA161_0 >= 198 && LA161_0 <= 201)||LA161_0==203||LA161_0==205||(LA161_0 >= 209 && LA161_0 <= 211)) ) {
                alt161=1;
            }
            else if ( (LA161_0==MULTI_COMMENT_LIT||LA161_0==SINGLE_COMMENT_LIT) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5923);
                    field_declaration_wrapper665=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper665.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5929);
                    comments666=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments666.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec667 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5944);
            type_dec667=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec667.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 927:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:1: type_dec_template : ( ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+ | ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+ );
    public final ObjcParser.type_dec_template_return type_dec_template() throws RecognitionException {
        ObjcParser.type_dec_template_return retval = new ObjcParser.type_dec_template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal668=null;
        Token string_literal669=null;
        Token char_literal670=null;
        Token ID671=null;
        Token char_literal672=null;
        Token char_literal673=null;
        Token ID674=null;
        Token char_literal675=null;
        Token char_literal676=null;

        Object char_literal668_tree=null;
        Object string_literal669_tree=null;
        Object char_literal670_tree=null;
        Object ID671_tree=null;
        Object char_literal672_tree=null;
        Object char_literal673_tree=null;
        Object ID674_tree=null;
        Object char_literal675_tree=null;
        Object char_literal676_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:3: ( ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+ | ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+ )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==137) ) {
                int LA166_1 = input.LA(2);

                if ( (LA166_1==195) && (synpred34_Objc())) {
                    alt166=1;
                }
                else if ( (LA166_1==137) ) {
                    int LA166_3 = input.LA(3);

                    if ( (LA166_3==195) && (synpred34_Objc())) {
                        alt166=1;
                    }
                    else if ( (LA166_3==137) ) {
                        int LA166_6 = input.LA(4);

                        if ( (LA166_6==195) && (synpred34_Objc())) {
                            alt166=1;
                        }
                        else if ( (LA166_6==137) ) {
                            int LA166_9 = input.LA(5);

                            if ( (synpred34_Objc()) ) {
                                alt166=1;
                            }
                            else if ( (synpred35_Objc()) ) {
                                alt166=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 166, 9, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA166_6==ID) && (synpred35_Objc())) {
                            alt166=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 166, 6, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA166_3==ID) && (synpred35_Objc())) {
                        alt166=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 166, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA166_1==ID) && (synpred35_Objc())) {
                    alt166=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }
            switch (alt166) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:5: ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:20: ( '<' )+
                    int cnt162=0;
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==137) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:20: '<'
                    	    {
                    	    char_literal668=(Token)match(input,137,FOLLOW_137_in_type_dec_template5979); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal668_tree = 
                    	    (Object)adaptor.create(char_literal668)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal668_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt162 >= 1 ) break loop162;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(162, input);
                                throw eee;
                        }
                        cnt162++;
                    } while (true);


                    string_literal669=(Token)match(input,195,FOLLOW_195_in_type_dec_template5982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal669_tree = 
                    (Object)adaptor.create(string_literal669)
                    ;
                    adaptor.addChild(root_0, string_literal669_tree);
                    }

                    char_literal670=(Token)match(input,137,FOLLOW_137_in_type_dec_template5984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal670_tree = 
                    (Object)adaptor.create(char_literal670)
                    ;
                    adaptor.addChild(root_0, char_literal670_tree);
                    }

                    ID671=(Token)match(input,ID,FOLLOW_ID_in_type_dec_template5986); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID671_tree = 
                    (Object)adaptor.create(ID671)
                    ;
                    adaptor.addChild(root_0, ID671_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:37: ( '>' )+
                    int cnt163=0;
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==143) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:37: '>'
                    	    {
                    	    char_literal672=(Token)match(input,143,FOLLOW_143_in_type_dec_template5988); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal672_tree = 
                    	    (Object)adaptor.create(char_literal672)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal672_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt163 >= 1 ) break loop163;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(163, input);
                                throw eee;
                        }
                        cnt163++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:22: ( '<' )+
                    int cnt164=0;
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==137) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:22: '<'
                    	    {
                    	    char_literal673=(Token)match(input,137,FOLLOW_137_in_type_dec_template6006); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal673_tree = 
                    	    (Object)adaptor.create(char_literal673)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal673_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt164 >= 1 ) break loop164;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(164, input);
                                throw eee;
                        }
                        cnt164++;
                    } while (true);


                    ID674=(Token)match(input,ID,FOLLOW_ID_in_type_dec_template6009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID674_tree = 
                    (Object)adaptor.create(ID674)
                    ;
                    adaptor.addChild(root_0, ID674_tree);
                    }

                    char_literal675=(Token)match(input,122,FOLLOW_122_in_type_dec_template6011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal675_tree = 
                    (Object)adaptor.create(char_literal675)
                    ;
                    adaptor.addChild(root_0, char_literal675_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:34: ( '>' )+
                    int cnt165=0;
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==143) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:34: '>'
                    	    {
                    	    char_literal676=(Token)match(input,143,FOLLOW_143_in_type_dec_template6013); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal676_tree = 
                    	    (Object)adaptor.create(char_literal676)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal676_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt165 >= 1 ) break loop165;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(165, input);
                                throw eee;
                        }
                        cnt165++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_template"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:1: type_dec : ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal677=null;
        Token char_literal680=null;
        ObjcParser.type_dec_internal_return type_dec_internal678 =null;

        ObjcParser.type_dec_template_return type_dec_template679 =null;

        ObjcParser.array_size_return array_size681 =null;


        Object string_literal677_tree=null;
        Object char_literal680_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:9: ( ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:11: ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:11: ( 'IBOutlet' )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==170) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:11: 'IBOutlet'
                    {
                    string_literal677=(Token)match(input,170,FOLLOW_170_in_type_dec6026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal677_tree = 
                    (Object)adaptor.create(string_literal677)
                    ;
                    adaptor.addChild(root_0, string_literal677_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_internal_in_type_dec6029);
            type_dec_internal678=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal678.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:41: ( type_dec_template )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==137) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:41: type_dec_template
                    {
                    pushFollow(FOLLOW_type_dec_template_in_type_dec6031);
                    type_dec_template679=type_dec_template();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_template679.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:60: ( '*' )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==122) ) {
                    int LA169_3 = input.LA(2);

                    if ( (LA169_3==ID||LA169_3==117||(LA169_3 >= 120 && LA169_3 <= 122)||LA169_3==127||LA169_3==175) ) {
                        alt169=1;
                    }


                }


                switch (alt169) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:60: '*'
            	    {
            	    char_literal680=(Token)match(input,122,FOLLOW_122_in_type_dec6034); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal680_tree = 
            	    (Object)adaptor.create(char_literal680)
            	    ;
            	    adaptor.addChild(root_0, char_literal680_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:65: ( array_size )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==175) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:66: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec6038);
            	    array_size681=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size681.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:939:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID683=null;
        ObjcParser.knownTypes_return knownTypes682 =null;


        Object ID683_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:3: ( knownTypes | ID )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==195||(LA171_0 >= 199 && LA171_0 <= 200)||LA171_0==203) ) {
                alt171=1;
            }
            else if ( (LA171_0==ID) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }
            switch (alt171) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal6055);
                    knownTypes682=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes682.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID683=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal6064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID683_tree = 
                    (Object)adaptor.create(ID683)
                    ;
                    adaptor.addChild(root_0, ID683_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:944:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? ( 'const' '*' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal684=null;
        Token string_literal685=null;
        Token string_literal686=null;
        Token string_literal687=null;
        Token string_literal688=null;
        Token char_literal689=null;
        Token string_literal690=null;
        Token string_literal691=null;

        Object string_literal684_tree=null;
        Object string_literal685_tree=null;
        Object string_literal686_tree=null;
        Object string_literal687_tree=null;
        Object string_literal688_tree=null;
        Object char_literal689_tree=null;
        Object string_literal690_tree=null;
        Object string_literal691_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? ( 'const' '*' )? | ( 'short' )+ ( 'int' )? )
            int alt177=4;
            switch ( input.LA(1) ) {
            case 199:
                {
                alt177=1;
                }
                break;
            case 195:
                {
                alt177=2;
                }
                break;
            case 200:
                {
                alt177=3;
                }
                break;
            case 203:
                {
                alt177=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }

            switch (alt177) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal684=(Token)match(input,199,FOLLOW_199_in_knownTypes6077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal684_tree = 
                    (Object)adaptor.create(string_literal684)
                    ;
                    adaptor.addChild(root_0, string_literal684_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal685=(Token)match(input,195,FOLLOW_195_in_knownTypes6083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal685_tree = 
                    (Object)adaptor.create(string_literal685)
                    ;
                    adaptor.addChild(root_0, string_literal685_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: ( 'long' )+ ( 'int' )? ( 'const' '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: ( 'long' )+
                    int cnt172=0;
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==200) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: 'long'
                    	    {
                    	    string_literal686=(Token)match(input,200,FOLLOW_200_in_knownTypes6089); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal686_tree = 
                    	    (Object)adaptor.create(string_literal686)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal686_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt172 >= 1 ) break loop172;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(172, input);
                                throw eee;
                        }
                        cnt172++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:13: ( 'int' )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==199) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:13: 'int'
                            {
                            string_literal687=(Token)match(input,199,FOLLOW_199_in_knownTypes6092); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal687_tree = 
                            (Object)adaptor.create(string_literal687)
                            ;
                            adaptor.addChild(root_0, string_literal687_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:20: ( 'const' '*' )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==184) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:21: 'const' '*'
                            {
                            string_literal688=(Token)match(input,184,FOLLOW_184_in_knownTypes6096); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal688_tree = 
                            (Object)adaptor.create(string_literal688)
                            ;
                            adaptor.addChild(root_0, string_literal688_tree);
                            }

                            char_literal689=(Token)match(input,122,FOLLOW_122_in_knownTypes6098); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal689_tree = 
                            (Object)adaptor.create(char_literal689)
                            ;
                            adaptor.addChild(root_0, char_literal689_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( 'short' )+
                    int cnt175=0;
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==203) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: 'short'
                    	    {
                    	    string_literal690=(Token)match(input,203,FOLLOW_203_in_knownTypes6106); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal690_tree = 
                    	    (Object)adaptor.create(string_literal690)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal690_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt175 >= 1 ) break loop175;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(175, input);
                                throw eee;
                        }
                        cnt175++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:14: ( 'int' )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==199) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:14: 'int'
                            {
                            string_literal691=(Token)match(input,199,FOLLOW_199_in_knownTypes6109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal691_tree = 
                            (Object)adaptor.create(string_literal691)
                            ;
                            adaptor.addChild(root_0, string_literal691_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID692=null;
        ObjcParser.array_size_return array_size693 =null;

        ObjcParser.field_crap_return field_crap694 =null;


        Object ID692_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:5: ID ( array_size )* ( field_crap )?
            {
            ID692=(Token)match(input,ID,FOLLOW_ID_in_field_name6125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID692);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:8: ( array_size )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==175) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name6127);
            	    array_size693=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size693.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:20: ( field_crap )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==135) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name6131);
                    field_crap694=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap694.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 952:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:955:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal695=null;
        Token set696=null;
        Token char_literal697=null;

        Object char_literal695_tree=null;
        Object set696_tree=null;
        Object char_literal697_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal695=(Token)match(input,175,FOLLOW_175_in_array_size6162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal695_tree = 
            (Object)adaptor.create(char_literal695)
            ;
            adaptor.addChild(root_0, char_literal695_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:9: ( NUMBER_LITERAL | ID )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID||LA180_0==NUMBER_LITERAL) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set696=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set696)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal697=(Token)match(input,177,FOLLOW_177_in_array_size6173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal697_tree = 
            (Object)adaptor.create(char_literal697)
            ;
            adaptor.addChild(root_0, char_literal697_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:958:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal698=null;
        Token NUMBER_LITERAL699=null;

        Object char_literal698_tree=null;
        Object NUMBER_LITERAL699_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:959:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:959:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal698=(Token)match(input,135,FOLLOW_135_in_field_crap6183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal698_tree = 
            (Object)adaptor.create(char_literal698)
            ;
            adaptor.addChild(root_0, char_literal698_tree);
            }

            NUMBER_LITERAL699=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap6185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL699_tree = 
            (Object)adaptor.create(NUMBER_LITERAL699)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL699_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:961:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper700 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants701 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:962:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:962:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration6197);
            method_modifier_wrapper700=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper700.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration6199);
            method_declaration_variants701=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants701.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:964:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier702 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper6211);
            method_modifier702=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier702.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 965:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:967:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set703=null;

        Object set703_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set703=(Token)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==128 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set703)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:970:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common704 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:971:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:971:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants6248);
            method_declaration_common704=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common704.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:973:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal705=null;
        Token char_literal707=null;
        Token char_literal710=null;
        ObjcParser.type_declaration_return type_declaration706 =null;

        ObjcParser.method_name_return method_name708 =null;

        ObjcParser.method_params_return method_params709 =null;


        Object char_literal705_tree=null;
        Object char_literal707_tree=null;
        Object char_literal710_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:6: '(' type_declaration ')' method_name
            {
            char_literal705=(Token)match(input,119,FOLLOW_119_in_method_declaration_common6261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal705_tree = 
            (Object)adaptor.create(char_literal705)
            ;
            adaptor.addChild(root_0, char_literal705_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common6263);
            type_declaration706=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration706.getTree());

            char_literal707=(Token)match(input,121,FOLLOW_121_in_method_declaration_common6265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal707_tree = 
            (Object)adaptor.create(char_literal707)
            ;
            adaptor.addChild(root_0, char_literal707_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common6267);
            method_name708=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name708.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:44: ( method_params )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ID||LA181_0==135) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common6270);
                    method_params709=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params709.getTree());

                    }
                    break;

            }


            char_literal710=(Token)match(input,136,FOLLOW_136_in_method_declaration_common6273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal710_tree = 
            (Object)adaptor.create(char_literal710)
            ;
            adaptor.addChild(root_0, char_literal710_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:976:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal712=null;
        Token char_literal714=null;
        ObjcParser.method_modifier_return method_modifier711 =null;

        ObjcParser.type_declaration_return type_declaration713 =null;

        ObjcParser.method_name_return method_name715 =null;


        Object char_literal712_tree=null;
        Object char_literal714_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate6285);
            method_modifier711=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier711.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:22: '(' type_declaration ')' method_name
            {
            char_literal712=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate6288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal712_tree = 
            (Object)adaptor.create(char_literal712)
            ;
            adaptor.addChild(root_0, char_literal712_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate6290);
            type_declaration713=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration713.getTree());

            char_literal714=(Token)match(input,121,FOLLOW_121_in_method_declaration_predicate6292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal714_tree = 
            (Object)adaptor.create(char_literal714)
            ;
            adaptor.addChild(root_0, char_literal714_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate6294);
            method_name715=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name715.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:980:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID716=null;

        Object ID716_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:981:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:981:5: ID
            {
            ID716=(Token)match(input,ID,FOLLOW_ID_in_method_name6312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID716);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 981:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:981:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:984:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param717 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:5: ( method_param )+
            int cnt182=0;
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==ID||LA182_0==135) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params6335);
            	    method_param717=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param717.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt182 >= 1 ) break loop182;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(182, input);
                        throw eee;
                }
                cnt182++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 985:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:987:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal719=null;
        Token char_literal720=null;
        Token char_literal722=null;
        ObjcParser.prefix_return prefix718 =null;

        ObjcParser.type_declaration_return type_declaration721 =null;

        ObjcParser.param_name_return param_name723 =null;


        Object char_literal719_tree=null;
        Object char_literal720_tree=null;
        Object char_literal722_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:5: ( prefix )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==ID) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param6355);
                    prefix718=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix718.getTree());

                    }
                    break;

            }


            char_literal719=(Token)match(input,135,FOLLOW_135_in_method_param6358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal719);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:17: ( '(' type_declaration ')' )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==119) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:18: '(' type_declaration ')'
                    {
                    char_literal720=(Token)match(input,119,FOLLOW_119_in_method_param6361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal720);


                    pushFollow(FOLLOW_type_declaration_in_method_param6363);
                    type_declaration721=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration721.getTree());

                    char_literal722=(Token)match(input,121,FOLLOW_121_in_method_param6365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal722);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param6369);
            param_name723=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name723.getTree());

            // AST REWRITE
            // elements: param_name, 135, type_declaration, 121, 119, prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 988:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_135.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_121.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:990:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID724=null;

        Object ID724_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:991:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:991:5: ID
            {
            ID724=(Token)match(input,ID,FOLLOW_ID_in_param_name6402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID724);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 991:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:991:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:993:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID725=null;

        Object ID725_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:993:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:993:11: ID
            {
            ID725=(Token)match(input,ID,FOLLOW_ID_in_prefix6421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID725);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 993:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:993:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:996:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL728=null;
        Token DEFINE_LITERAL730=null;
        Token DEFINE_LITERAL733=null;
        ObjcParser.define_as_function_return define_as_function726 =null;

        ObjcParser.define_as_line_return define_as_line727 =null;

        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper729 =null;

        ObjcParser.name_return name731 =null;

        ObjcParser.element_value_return element_value732 =null;

        ObjcParser.name_return name734 =null;


        Object DEFINE_LITERAL728_tree=null;
        Object DEFINE_LITERAL730_tree=null;
        Object DEFINE_LITERAL733_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:997:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt185=5;
            alt185 = dfa185.predict(input);
            switch (alt185) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:997:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration6450);
                    define_as_function726=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function726.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:5: ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_line_in_define_declaration6466);
                    define_as_line727=define_as_line();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_line727.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:5: ( DEFINE_LITERAL classical_method_call_wrapper )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:5: ( DEFINE_LITERAL classical_method_call_wrapper )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:6: DEFINE_LITERAL classical_method_call_wrapper
                    {
                    DEFINE_LITERAL728=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL728);


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_define_declaration6475);
                    classical_method_call_wrapper729=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper729.getTree());

                    }


                    // AST REWRITE
                    // elements: classical_method_call_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 999:52: -> ^( DEFINE classical_method_call_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:55: ^( DEFINE classical_method_call_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL730=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL730);


                    pushFollow(FOLLOW_name_in_define_declaration6500);
                    name731=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name731.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration6502);
                    element_value732=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value732.getTree());

                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1000:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL733=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL733);


                    pushFollow(FOLLOW_name_in_define_declaration6520);
                    name734=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name734.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1001:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_line"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1004:1: define_as_line : DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')' -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' ) ;
    public final ObjcParser.define_as_line_return define_as_line() throws RecognitionException {
        ObjcParser.define_as_line_return retval = new ObjcParser.define_as_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL735=null;
        Token char_literal737=null;
        Token char_literal739=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper736 =null;

        ObjcParser.simple_expression_return simple_expression738 =null;


        Object DEFINE_LITERAL735_tree=null;
        Object char_literal737_tree=null;
        Object char_literal739_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1005:3: ( DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')' -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1005:5: DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')'
            {
            DEFINE_LITERAL735=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_line6542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL735);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_line6544);
            classical_method_call_wrapper736=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper736.getTree());

            char_literal737=(Token)match(input,119,FOLLOW_119_in_define_as_line6546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal737);


            pushFollow(FOLLOW_simple_expression_in_define_as_line6548);
            simple_expression738=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression738.getTree());

            char_literal739=(Token)match(input,121,FOLLOW_121_in_define_as_line6550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal739);


            // AST REWRITE
            // elements: simple_expression, classical_method_call_wrapper, 121, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1005:76: -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1005:79: ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_1, 
                stream_121.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_line"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1008:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL740=null;
        Token char_literal742=null;
        Token char_literal743=null;
        Token char_literal745=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper741 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper744 =null;


        Object DEFINE_LITERAL740_tree=null;
        Object char_literal742_tree=null;
        Object char_literal743_tree=null;
        Object char_literal745_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL740=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function6579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL740);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function6581);
            classical_method_call_wrapper741=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper741.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt188=0;
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==176) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal742=(Token)match(input,176,FOLLOW_176_in_define_as_function6584); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_176.add(char_literal742);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:56: ( '{' )?
            	    int alt186=2;
            	    int LA186_0 = input.LA(1);

            	    if ( (LA186_0==213) ) {
            	        alt186=1;
            	    }
            	    switch (alt186) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:56: '{'
            	            {
            	            char_literal743=(Token)match(input,213,FOLLOW_213_in_define_as_function6586); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_213.add(char_literal743);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function6589);
            	    block_singleline_wrapper744=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper744.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:86: ( '}' )?
            	    int alt187=2;
            	    int LA187_0 = input.LA(1);

            	    if ( (LA187_0==217) ) {
            	        alt187=1;
            	    }
            	    switch (alt187) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:86: '}'
            	            {
            	            char_literal745=(Token)match(input,217,FOLLOW_217_in_define_as_function6591); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_217.add(char_literal745);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt188 >= 1 ) break loop188;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(188, input);
                        throw eee;
                }
                cnt188++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1009:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"


    public static class string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1012:1: string : STRING_LITERAL -> ^( STRING STRING_LITERAL ) ;
    public final ObjcParser.string_return string() throws RecognitionException {
        ObjcParser.string_return retval = new ObjcParser.string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL746=null;

        Object STRING_LITERAL746_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1013:3: ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1013:5: STRING_LITERAL
            {
            STRING_LITERAL746=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string6618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL746);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1013:20: -> ^( STRING STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1013:23: ^( STRING STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING, "STRING")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class string_objc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_objc"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1016:1: string_objc : '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) ;
    public final ObjcParser.string_objc_return string_objc() throws RecognitionException {
        ObjcParser.string_objc_return retval = new ObjcParser.string_objc_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal747=null;
        Token STRING_LITERAL748=null;

        Object char_literal747_tree=null;
        Object STRING_LITERAL748_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1017:3: ( '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1017:5: '@' STRING_LITERAL
            {
            char_literal747=(Token)match(input,149,FOLLOW_149_in_string_objc6641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(char_literal747);


            STRING_LITERAL748=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_objc6643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL748);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1017:24: -> ^( STRING_OBJC STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1017:27: ^( STRING_OBJC STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING_OBJC, "STRING_OBJC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_objc"


    public static class bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bool"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1020:1: bool : ( 'YES' | 'NO' | 'true' | 'false' ) ;
    public final ObjcParser.bool_return bool() throws RecognitionException {
        ObjcParser.bool_return retval = new ObjcParser.bool_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set749=null;

        Object set749_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1021:3: ( ( 'YES' | 'NO' | 'true' | 'false' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set749=(Token)input.LT(1);

            if ( input.LA(1)==172||input.LA(1)==174||input.LA(1)==192||input.LA(1)==207 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set749)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bool"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:6: type_declaration field_name
        {
        pushFollow(FOLLOW_type_declaration_in_synpred1_Objc507);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_field_name_in_synpred1_Objc509);
        field_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1349);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1485);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1496);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred5_Objc1498);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred6_Objc1511);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred6_Objc1513);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1780);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,136,FOLLOW_136_in_synpred7_Objc1782); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc1799);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,197,FOLLOW_197_in_synpred8_Objc1801); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: ( ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:6: ';'
        {
        match(input,136,FOLLOW_136_in_synpred9_Objc1818); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred10_Objc1833);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred10_Objc1835);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred11_Objc2455);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred11_Objc2457);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred12_Objc3092);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,119,FOLLOW_119_in_synpred13_Objc3108); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred13_Objc3110);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred13_Objc3112);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,121,FOLLOW_121_in_synpred13_Objc3114); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred13_Objc3116);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred14_Objc3153);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred14_Objc3155); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred15_Objc3191);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred16_Objc3261);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:30: ( access_wrapper name )*
        loop189:
        do {
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( ((LA189_0 >= 131 && LA189_0 <= 132)) ) {
                alt189=1;
            }


            switch (alt189) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred16_Objc3264);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred16_Objc3266);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop189;
            }
        } while (true);


        match(input,119,FOLLOW_119_in_synpred16_Objc3270); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:6: ( '&' )?
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( (LA190_0==117) ) {
            alt190=1;
        }
        switch (alt190) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred17_Objc3330); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred17_Objc3333);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,175,FOLLOW_175_in_synpred17_Objc3335); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==117||input.LA(1)==122 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred18_Objc3371);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred19_Objc3732);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:5: ( type_cast_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:6: type_cast_name
        {
        pushFollow(FOLLOW_type_cast_name_in_synpred20_Objc3870);
        type_cast_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: ( '(' type_cast_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:6: '(' type_cast_name
        {
        match(input,119,FOLLOW_119_in_synpred21_Objc3883); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_name_in_synpred21_Objc3885);
        type_cast_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:6: ( '&' )?
        int alt191=2;
        int LA191_0 = input.LA(1);

        if ( (LA191_0==117) ) {
            alt191=1;
        }
        switch (alt191) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred22_Objc3964); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred22_Objc3967);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,175,FOLLOW_175_in_synpred22_Objc3969); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:5: ( block_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:6: block_decl_predicate
        {
        pushFollow(FOLLOW_block_decl_predicate_in_synpred23_Objc4369);
        block_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred24_Objc4471);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:5: ( block_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:6: block_decl_predicate
        {
        pushFollow(FOLLOW_block_decl_predicate_in_synpred25_Objc5099);
        block_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5256);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred27_Objc5267);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred28_Objc5358);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred29_Objc5369);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( block_type_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:6: block_type_decl_predicate
        {
        pushFollow(FOLLOW_block_type_decl_predicate_in_synpred30_Objc5380);
        block_type_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // $ANTLR start synpred31_Objc
    public final void synpred31_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:6: 'struct' ( typedef_name )? '{'
        {
        match(input,205,FOLLOW_205_in_synpred31_Objc5707); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:15: ( typedef_name )?
        int alt192=2;
        int LA192_0 = input.LA(1);

        if ( (LA192_0==ID) ) {
            alt192=1;
        }
        switch (alt192) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred31_Objc5709);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,213,FOLLOW_213_in_synpred31_Objc5712); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_Objc

    // $ANTLR start synpred32_Objc
    public final void synpred32_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:6: 'union' ( typedef_name )? '{'
        {
        match(input,209,FOLLOW_209_in_synpred32_Objc5737); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:14: ( typedef_name )?
        int alt193=2;
        int LA193_0 = input.LA(1);

        if ( (LA193_0==ID) ) {
            alt193=1;
        }
        switch (alt193) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred32_Objc5739);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,213,FOLLOW_213_in_synpred32_Objc5742); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_Objc

    // $ANTLR start synpred33_Objc
    public final void synpred33_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:6: 'enum' ( typedef_name )? '{'
        {
        match(input,189,FOLLOW_189_in_synpred33_Objc5767); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:13: ( typedef_name )?
        int alt194=2;
        int LA194_0 = input.LA(1);

        if ( (LA194_0==ID) ) {
            alt194=1;
        }
        switch (alt194) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred33_Objc5769);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,213,FOLLOW_213_in_synpred33_Objc5772); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_Objc

    // $ANTLR start synpred34_Objc
    public final void synpred34_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:5: ( ( '<' )+ 'id' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:6: ( '<' )+ 'id'
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:6: ( '<' )+
        int cnt195=0;
        loop195:
        do {
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==137) ) {
                alt195=1;
            }


            switch (alt195) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:6: '<'
        	    {
        	    match(input,137,FOLLOW_137_in_synpred34_Objc5971); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt195 >= 1 ) break loop195;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(195, input);
                    throw eee;
            }
            cnt195++;
        } while (true);


        match(input,195,FOLLOW_195_in_synpred34_Objc5974); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Objc

    // $ANTLR start synpred35_Objc
    public final void synpred35_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( ( '<' )+ ID '*' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: ( '<' )+ ID '*'
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: ( '<' )+
        int cnt196=0;
        loop196:
        do {
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==137) ) {
                alt196=1;
            }


            switch (alt196) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: '<'
        	    {
        	    match(input,137,FOLLOW_137_in_synpred35_Objc5996); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt196 >= 1 ) break loop196;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(196, input);
                    throw eee;
            }
            cnt196++;
        } while (true);


        match(input,ID,FOLLOW_ID_in_synpred35_Objc5999); if (state.failed) return ;

        match(input,122,FOLLOW_122_in_synpred35_Objc6001); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_Objc

    // $ANTLR start synpred36_Objc
    public final void synpred36_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:997:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:997:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred36_Objc6441); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred36_Objc6443);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,176,FOLLOW_176_in_synpred36_Objc6445); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_Objc

    // $ANTLR start synpred37_Objc
    public final void synpred37_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:5: ( DEFINE_LITERAL classical_method_call_wrapper '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:6: DEFINE_LITERAL classical_method_call_wrapper '('
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred37_Objc6457); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred37_Objc6459);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred37_Objc6461); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_Objc

    // $ANTLR start synpred38_Objc
    public final void synpred38_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred38_Objc6491); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred38_Objc6493);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred38_Objc6495);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_Objc

    // Delegated rules

    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA185 dfa185 = new DFA185(this);
    static final String DFA2_eotS =
        "\u01cb\uffff";
    static final String DFA2_eofS =
        "\u01cb\uffff";
    static final String DFA2_minS =
        "\1\26\10\uffff\3\56\10\uffff\1\56\10\uffff\6\56\1\100\1\56\4\uffff"+
        "\7\56\1\172\14\56\3\uffff\5\56\3\uffff\7\56\1\172\13\56\10\uffff"+
        "\u0167\0\1\uffff";
    static final String DFA2_maxS =
        "\1\u00d3\10\uffff\3\u00d5\10\uffff\1\56\10\uffff\1\u00d5\1\u00d3"+
        "\1\u00d5\1\177\1\u00d5\1\u00d3\1\u00a4\1\u00d3\4\uffff\1\u00cb\2"+
        "\u00af\1\u00c8\1\u00cb\1\u00af\1\u00cb\1\172\3\u00d5\1\u00d3\2\u00d2"+
        "\3\u00cb\2\u00d9\1\177\3\uffff\1\56\3\u00d9\1\u00d3\3\uffff\1\u00cb"+
        "\2\u00af\1\u00c8\1\u00cb\1\u00af\1\u00cb\1\172\3\u00d5\1\u00d3\2"+
        "\u00d2\3\u00cb\2\u00d9\10\uffff\u0167\0\1\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\10\1\3\uffff\6\1\1\2\1\3\1\uffff\1\5\1\6\1\7\1\10\1\11"+
        "\1\13\1\uffff\1\14\10\uffff\3\1\25\uffff\2\1\6\uffff\2\1\25\uffff"+
        "\1\4\u016d\uffff\1\12";
    static final String DFA2_specialS =
        "\1\0\34\uffff\1\1\1\uffff\1\2\1\uffff\1\3\101\uffff\1\4\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
        "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1"+
        "\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
        "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
        "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
        "\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d"+
        "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095"+
        "\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d"+
        "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5"+
        "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad"+
        "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5"+
        "\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd"+
        "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5"+
        "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
        "\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
        "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd"+
        "\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5"+
        "\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed"+
        "\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5"+
        "\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd"+
        "\1\u00fe\1\u00ff\1\u0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105"+
        "\1\u0106\1\u0107\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d"+
        "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u0113\1\u0114\1\u0115"+
        "\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d"+
        "\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123\1\u0124\1\u0125"+
        "\1\u0126\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d"+
        "\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143\1\u0144\1\u0145"+
        "\1\u0146\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b\1\u014c\1\u014d"+
        "\1\u014e\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u0155"+
        "\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b\1\u015c\1\u015d"+
        "\1\u015e\1\u015f\1\u0160\1\u0161\1\u0162\1\u0163\1\u0164\1\u0165"+
        "\1\u0166\1\u0167\1\u0168\1\u0169\1\u016a\1\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\27\27\uffff\1\6\21\uffff\1\32\21\uffff\1\32\44\uffff\1\10"+
            "\20\uffff\1\34\17\uffff\1\23\3\uffff\1\22\1\25\4\uffff\1\24"+
            "\7\uffff\1\1\1\26\10\uffff\1\14\1\7\2\uffff\1\16\4\uffff\1\12"+
            "\1\uffff\1\26\3\uffff\1\3\2\uffff\1\20\1\2\1\4\1\21\1\uffff"+
            "\1\5\1\31\1\11\2\uffff\1\30\1\13\1\17\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\u00a6\uffff\1\36",
            "\1\37\u00a6\uffff\1\40",
            "\1\41\u00a6\uffff\1\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\47\106\uffff\1\45\4\uffff\1\46\15\uffff\1\23\114\uffff\1"+
            "\44",
            "\1\56\21\uffff\1\73\21\uffff\1\72\44\uffff\1\60\62\uffff\1"+
            "\51\11\uffff\1\64\1\57\2\uffff\1\66\4\uffff\1\62\5\uffff\1\53"+
            "\2\uffff\1\70\1\52\1\54\1\71\1\uffff\1\55\1\uffff\1\61\3\uffff"+
            "\1\63\1\67\1\65",
            "\1\76\106\uffff\1\75\22\uffff\1\23\114\uffff\1\74",
            "\1\101\21\uffff\1\103\21\uffff\1\102\54\uffff\1\100",
            "\1\106\106\uffff\1\105\22\uffff\1\23\114\uffff\1\104",
            "\1\115\21\uffff\1\132\21\uffff\1\131\44\uffff\1\117\62\uffff"+
            "\1\110\11\uffff\1\123\1\116\2\uffff\1\125\4\uffff\1\121\5\uffff"+
            "\1\112\2\uffff\1\127\1\111\1\113\1\130\1\uffff\1\114\1\uffff"+
            "\1\120\3\uffff\1\122\1\126\1\124",
            "\1\134\21\uffff\1\134\51\uffff\1\134\3\uffff\1\134\7\uffff"+
            "\1\23\1\134\20\uffff\1\134\3\uffff\1\134\1\uffff\1\134\3\uffff"+
            "\1\134",
            "\1\150\21\uffff\1\165\21\uffff\1\164\44\uffff\1\152\62\uffff"+
            "\1\143\11\uffff\1\156\1\151\2\uffff\1\160\4\uffff\1\154\5\uffff"+
            "\1\145\2\uffff\1\162\1\144\1\146\1\163\1\uffff\1\147\1\uffff"+
            "\1\153\3\uffff\1\155\1\161\1\157",
            "",
            "",
            "",
            "",
            "\1\172\u0094\uffff\1\167\3\uffff\1\166\1\170\2\uffff\1\171",
            "\1\u0080\106\uffff\1\177\2\uffff\1\176\1\uffff\1\174\16\uffff"+
            "\1\173\45\uffff\1\175",
            "\1\u0086\106\uffff\1\u0085\2\uffff\1\u0084\1\uffff\1\u0082"+
            "\16\uffff\1\u0081\45\uffff\1\u0083",
            "\1\u008f\106\uffff\1\u008e\2\uffff\1\u008c\1\uffff\1\u008a"+
            "\16\uffff\1\u0089\45\uffff\1\u008b\10\uffff\1\u0088\16\uffff"+
            "\1\u0087\1\u008d",
            "\1\u0097\106\uffff\1\u0096\2\uffff\1\u0094\1\uffff\1\u0092"+
            "\16\uffff\1\u0091\45\uffff\1\u0093\27\uffff\1\u0090\3\uffff"+
            "\1\u0095",
            "\1\u009d\106\uffff\1\u009c\2\uffff\1\u009b\1\uffff\1\u0099"+
            "\16\uffff\1\u0098\45\uffff\1\u009a",
            "\1\u00a4\173\uffff\1\u00a0\30\uffff\1\u009e\3\uffff\1\u00a1"+
            "\1\u00a2\1\u009f\1\uffff\1\u00a3",
            "\1\u00a5",
            "\1\u00a6\u00a6\uffff\1\u00a7",
            "\1\u00a8\u00a6\uffff\1\u00a9",
            "\1\u00aa\u00a6\uffff\1\u00ab",
            "\1\u00b7\173\uffff\1\u00b2\12\uffff\1\u00b0\2\uffff\1\u00ad"+
            "\12\uffff\1\u00b4\2\uffff\1\u00af\1\u00b3\1\u00b5\1\u00b1\1"+
            "\uffff\1\u00b6\6\uffff\1\u00ae\1\u00ac",
            "\1\u00c2\173\uffff\1\u00bd\12\uffff\1\u00bb\2\uffff\1\u00b8"+
            "\12\uffff\1\u00bf\2\uffff\1\u00ba\1\u00be\1\u00c0\1\u00bc\1"+
            "\uffff\1\u00c1\6\uffff\1\u00b9",
            "\1\u00cc\173\uffff\1\u00c7\12\uffff\1\u00c5\15\uffff\1\u00c9"+
            "\2\uffff\1\u00c4\1\u00c8\1\u00ca\1\u00c6\1\uffff\1\u00cb\6\uffff"+
            "\1\u00c3",
            "\1\u00d5\173\uffff\1\u00d0\12\uffff\1\u00ce\15\uffff\1\u00d2"+
            "\2\uffff\1\u00cd\1\u00d1\1\u00d3\1\u00cf\1\uffff\1\u00d4",
            "\1\u00dd\173\uffff\1\u00d8\12\uffff\1\u00d6\15\uffff\1\u00da"+
            "\3\uffff\1\u00d9\1\u00db\1\u00d7\1\uffff\1\u00dc",
            "\1\u00e3\173\uffff\1\u00de\30\uffff\1\u00e0\3\uffff\1\u00df"+
            "\1\u00e1\2\uffff\1\u00e2",
            "\1\u00ea\21\uffff\1\u00f7\21\uffff\1\u00f6\44\uffff\1\u00ec"+
            "\62\uffff\1\u00e5\11\uffff\1\u00f0\1\u00eb\2\uffff\1\u00f2\4"+
            "\uffff\1\u00ee\5\uffff\1\u00e7\2\uffff\1\u00f4\1\u00e6\1\u00e8"+
            "\1\u00f5\1\uffff\1\u00e9\1\uffff\1\u00ed\3\uffff\1\u00ef\1\u00f3"+
            "\1\u00f1\5\uffff\1\u00e4",
            "\1\u00fe\21\uffff\1\u010b\21\uffff\1\u010a\44\uffff\1\u0100"+
            "\62\uffff\1\u00f9\11\uffff\1\u0104\1\u00ff\2\uffff\1\u0106\4"+
            "\uffff\1\u0102\5\uffff\1\u00fb\2\uffff\1\u0108\1\u00fa\1\u00fc"+
            "\1\u0109\1\uffff\1\u00fd\1\uffff\1\u0101\3\uffff\1\u0103\1\u0107"+
            "\1\u0105\5\uffff\1\u00f8",
            "\1\u010d\21\uffff\1\u010f\21\uffff\1\u010e\54\uffff\1\u010c",
            "",
            "",
            "",
            "\1\u0110",
            "\1\u0114\21\uffff\1\u0116\21\uffff\1\u0115\43\uffff\1\u0111"+
            "\4\uffff\1\u0111\2\uffff\1\u0111\1\u0112\2\uffff\1\u0111\3\uffff"+
            "\1\u0111\4\uffff\1\u0111\1\uffff\1\u0111\4\uffff\1\u0111\104"+
            "\uffff\1\u0111\1\uffff\1\u0113",
            "\1\u0119\21\uffff\1\u011b\21\uffff\1\u011a\54\uffff\1\u0118"+
            "\131\uffff\1\u0117",
            "\1\u011e\21\uffff\1\u0120\21\uffff\1\u011f\54\uffff\1\u011d"+
            "\131\uffff\1\u011c",
            "\1\u0126\21\uffff\1\u0133\21\uffff\1\u0132\44\uffff\1\u0128"+
            "\62\uffff\1\u0121\11\uffff\1\u012c\1\u0127\2\uffff\1\u012e\4"+
            "\uffff\1\u012a\5\uffff\1\u0123\2\uffff\1\u0130\1\u0122\1\u0124"+
            "\1\u0131\1\uffff\1\u0125\1\uffff\1\u0129\3\uffff\1\u012b\1\u012f"+
            "\1\u012d",
            "",
            "",
            "",
            "\1\u0138\u0094\uffff\1\u0135\3\uffff\1\u0134\1\u0136\2\uffff"+
            "\1\u0137",
            "\1\u013e\106\uffff\1\u013d\2\uffff\1\u013c\1\uffff\1\u013a"+
            "\16\uffff\1\u0139\45\uffff\1\u013b",
            "\1\u0144\106\uffff\1\u0143\2\uffff\1\u0142\1\uffff\1\u0140"+
            "\16\uffff\1\u013f\45\uffff\1\u0141",
            "\1\u014d\106\uffff\1\u014c\2\uffff\1\u014a\1\uffff\1\u0148"+
            "\16\uffff\1\u0147\45\uffff\1\u0149\10\uffff\1\u0146\16\uffff"+
            "\1\u0145\1\u014b",
            "\1\u0155\106\uffff\1\u0154\2\uffff\1\u0152\1\uffff\1\u0150"+
            "\16\uffff\1\u014f\45\uffff\1\u0151\27\uffff\1\u014e\3\uffff"+
            "\1\u0153",
            "\1\u015b\106\uffff\1\u015a\2\uffff\1\u0159\1\uffff\1\u0157"+
            "\16\uffff\1\u0156\45\uffff\1\u0158",
            "\1\u0162\173\uffff\1\u015e\30\uffff\1\u015c\3\uffff\1\u015f"+
            "\1\u0160\1\u015d\1\uffff\1\u0161",
            "\1\u0163",
            "\1\u0164\u00a6\uffff\1\u0165",
            "\1\u0166\u00a6\uffff\1\u0167",
            "\1\u0168\u00a6\uffff\1\u0169",
            "\1\u0175\173\uffff\1\u0170\12\uffff\1\u016e\2\uffff\1\u016b"+
            "\12\uffff\1\u0172\2\uffff\1\u016d\1\u0171\1\u0173\1\u016f\1"+
            "\uffff\1\u0174\6\uffff\1\u016c\1\u016a",
            "\1\u0180\173\uffff\1\u017b\12\uffff\1\u0179\2\uffff\1\u0176"+
            "\12\uffff\1\u017d\2\uffff\1\u0178\1\u017c\1\u017e\1\u017a\1"+
            "\uffff\1\u017f\6\uffff\1\u0177",
            "\1\u018a\173\uffff\1\u0185\12\uffff\1\u0183\15\uffff\1\u0187"+
            "\2\uffff\1\u0182\1\u0186\1\u0188\1\u0184\1\uffff\1\u0189\6\uffff"+
            "\1\u0181",
            "\1\u0193\173\uffff\1\u018e\12\uffff\1\u018c\15\uffff\1\u0190"+
            "\2\uffff\1\u018b\1\u018f\1\u0191\1\u018d\1\uffff\1\u0192",
            "\1\u019b\173\uffff\1\u0196\12\uffff\1\u0194\15\uffff\1\u0198"+
            "\3\uffff\1\u0197\1\u0199\1\u0195\1\uffff\1\u019a",
            "\1\u01a1\173\uffff\1\u019c\30\uffff\1\u019e\3\uffff\1\u019d"+
            "\1\u019f\2\uffff\1\u01a0",
            "\1\u01a8\21\uffff\1\u01b5\21\uffff\1\u01b4\44\uffff\1\u01aa"+
            "\62\uffff\1\u01a3\11\uffff\1\u01ae\1\u01a9\2\uffff\1\u01b0\4"+
            "\uffff\1\u01ac\5\uffff\1\u01a5\2\uffff\1\u01b2\1\u01a4\1\u01a6"+
            "\1\u01b3\1\uffff\1\u01a7\1\uffff\1\u01ab\3\uffff\1\u01ad\1\u01b1"+
            "\1\u01af\5\uffff\1\u01a2",
            "\1\u01bc\21\uffff\1\u01c9\21\uffff\1\u01c8\44\uffff\1\u01be"+
            "\62\uffff\1\u01b7\11\uffff\1\u01c2\1\u01bd\2\uffff\1\u01c4\4"+
            "\uffff\1\u01c0\5\uffff\1\u01b9\2\uffff\1\u01c6\1\u01b8\1\u01ba"+
            "\1\u01c7\1\uffff\1\u01bb\1\uffff\1\u01bf\3\uffff\1\u01c1\1\u01c5"+
            "\1\u01c3\5\uffff\1\u01b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_0==170) && (synpred1_Objc())) {s = 1;}

                        else if ( (LA2_0==199) && (synpred1_Objc())) {s = 2;}

                        else if ( (LA2_0==195) && (synpred1_Objc())) {s = 3;}

                        else if ( (LA2_0==200) && (synpred1_Objc())) {s = 4;}

                        else if ( (LA2_0==203) && (synpred1_Objc())) {s = 5;}

                        else if ( (LA2_0==ID) && (synpred1_Objc())) {s = 6;}

                        else if ( (LA2_0==181) && (synpred1_Objc())) {s = 7;}

                        else if ( (LA2_0==119) && (synpred1_Objc())) {s = 8;}

                        else if ( (LA2_0==205) ) {s = 9;}

                        else if ( (LA2_0==189) ) {s = 10;}

                        else if ( (LA2_0==209) ) {s = 11;}

                        else if ( (LA2_0==180) && (synpred1_Objc())) {s = 12;}

                        else if ( (LA2_0==211) && (synpred1_Objc())) {s = 13;}

                        else if ( (LA2_0==184) && (synpred1_Objc())) {s = 14;}

                        else if ( (LA2_0==210) && (synpred1_Objc())) {s = 15;}

                        else if ( (LA2_0==198) && (synpred1_Objc())) {s = 16;}

                        else if ( (LA2_0==201) && (synpred1_Objc())) {s = 17;}

                        else if ( (LA2_0==156) ) {s = 18;}

                        else if ( (LA2_0==152) ) {s = 19;}

                        else if ( (LA2_0==162) ) {s = 20;}

                        else if ( (LA2_0==157) ) {s = 21;}

                        else if ( (LA2_0==171||LA2_0==191) ) {s = 22;}

                        else if ( (LA2_0==DEFINE_LITERAL) ) {s = 23;}

                        else if ( (LA2_0==208) ) {s = 24;}

                        else if ( (LA2_0==204) ) {s = 25;}

                        else if ( (LA2_0==MULTI_COMMENT_LIT||LA2_0==SINGLE_COMMENT_LIT) ) {s = 26;}

                        else if ( (LA2_0==136) ) {s = 28;}

                         
                        input.seek(index2_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_29==213) ) {s = 36;}

                        else if ( (LA2_29==117) && (synpred1_Objc())) {s = 37;}

                        else if ( (LA2_29==122) && (synpred1_Objc())) {s = 38;}

                        else if ( (LA2_29==ID) && (synpred1_Objc())) {s = 39;}

                        else if ( (LA2_29==136) ) {s = 19;}

                         
                        input.seek(index2_29);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_31==213) ) {s = 60;}

                        else if ( (LA2_31==117) && (synpred1_Objc())) {s = 61;}

                        else if ( (LA2_31==ID) && (synpred1_Objc())) {s = 62;}

                        else if ( (LA2_31==136) ) {s = 19;}

                         
                        input.seek(index2_31);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_33==213) ) {s = 68;}

                        else if ( (LA2_33==117) && (synpred1_Objc())) {s = 69;}

                        else if ( (LA2_33==ID) && (synpred1_Objc())) {s = 70;}

                        else if ( (LA2_33==136) ) {s = 19;}

                         
                        input.seek(index2_33);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_99);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_100);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_101);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_102);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_103);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_104);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_105);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_106);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_107);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_108);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_109);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_110);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_111);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_112);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_113);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_114);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_115);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_116);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_117);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_118);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_119);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_120);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_121);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_122);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_123);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_124);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_125);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_126);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_127);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_128);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_129);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_130);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_131);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_132);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_133);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_134);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_135);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_136);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_137);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_138);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_139);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_140);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_141);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_142);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_143);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_144);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_145);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_146);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_147);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_148);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_149);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_150);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_151);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_152);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_153);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_154);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_155);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_156);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_157);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_158);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_159);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_160);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_161);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_162);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_163);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_164);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_165);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_166);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_167);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_168);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_169);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_170);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_171);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_172);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_173);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_174);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_175);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_176);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_177);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_178);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_179);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_180);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_181);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_182);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_183);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_184);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_185);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_186);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_187);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_188);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_189 = input.LA(1);

                         
                        int index2_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_189);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_190 = input.LA(1);

                         
                        int index2_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_190);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_191 = input.LA(1);

                         
                        int index2_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_191);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_192 = input.LA(1);

                         
                        int index2_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_192);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_193 = input.LA(1);

                         
                        int index2_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_193);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_194 = input.LA(1);

                         
                        int index2_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_194);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_195 = input.LA(1);

                         
                        int index2_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_195);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_196 = input.LA(1);

                         
                        int index2_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_196);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_197 = input.LA(1);

                         
                        int index2_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_197);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_198 = input.LA(1);

                         
                        int index2_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_198);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_199 = input.LA(1);

                         
                        int index2_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_199);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_200 = input.LA(1);

                         
                        int index2_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_200);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_201 = input.LA(1);

                         
                        int index2_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_201);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_202 = input.LA(1);

                         
                        int index2_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_202);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_203 = input.LA(1);

                         
                        int index2_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_203);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_204 = input.LA(1);

                         
                        int index2_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_204);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_205 = input.LA(1);

                         
                        int index2_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_205);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_206 = input.LA(1);

                         
                        int index2_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_206);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_207 = input.LA(1);

                         
                        int index2_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_207);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_208 = input.LA(1);

                         
                        int index2_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_208);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_209 = input.LA(1);

                         
                        int index2_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_209);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_210 = input.LA(1);

                         
                        int index2_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_210);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_211 = input.LA(1);

                         
                        int index2_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_211);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_212 = input.LA(1);

                         
                        int index2_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_212);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_213 = input.LA(1);

                         
                        int index2_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_213);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_214 = input.LA(1);

                         
                        int index2_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_214);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_215 = input.LA(1);

                         
                        int index2_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_215);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_216 = input.LA(1);

                         
                        int index2_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_216);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_217 = input.LA(1);

                         
                        int index2_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_217);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_218 = input.LA(1);

                         
                        int index2_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_218);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_219 = input.LA(1);

                         
                        int index2_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_219);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_220 = input.LA(1);

                         
                        int index2_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_220);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_221 = input.LA(1);

                         
                        int index2_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_221);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_222 = input.LA(1);

                         
                        int index2_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_222);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_223 = input.LA(1);

                         
                        int index2_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_223);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_224 = input.LA(1);

                         
                        int index2_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_224);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_225 = input.LA(1);

                         
                        int index2_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_225);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_226 = input.LA(1);

                         
                        int index2_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_226);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_227 = input.LA(1);

                         
                        int index2_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_227);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_228 = input.LA(1);

                         
                        int index2_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_228);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_229 = input.LA(1);

                         
                        int index2_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_229);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA2_230 = input.LA(1);

                         
                        int index2_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_230);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA2_231 = input.LA(1);

                         
                        int index2_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_231);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA2_232 = input.LA(1);

                         
                        int index2_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_232);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA2_233 = input.LA(1);

                         
                        int index2_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_233);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA2_234 = input.LA(1);

                         
                        int index2_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_234);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA2_235 = input.LA(1);

                         
                        int index2_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_235);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA2_236 = input.LA(1);

                         
                        int index2_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_236);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA2_237 = input.LA(1);

                         
                        int index2_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_237);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA2_238 = input.LA(1);

                         
                        int index2_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_238);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA2_239 = input.LA(1);

                         
                        int index2_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_239);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA2_240 = input.LA(1);

                         
                        int index2_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_240);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA2_241 = input.LA(1);

                         
                        int index2_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_241);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA2_242 = input.LA(1);

                         
                        int index2_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_242);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA2_243 = input.LA(1);

                         
                        int index2_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_243);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA2_244 = input.LA(1);

                         
                        int index2_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_244);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA2_245 = input.LA(1);

                         
                        int index2_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_245);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA2_246 = input.LA(1);

                         
                        int index2_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_246);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA2_247 = input.LA(1);

                         
                        int index2_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_247);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA2_248 = input.LA(1);

                         
                        int index2_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_248);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA2_249 = input.LA(1);

                         
                        int index2_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_249);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA2_250 = input.LA(1);

                         
                        int index2_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_250);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA2_251 = input.LA(1);

                         
                        int index2_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_251);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA2_252 = input.LA(1);

                         
                        int index2_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_252);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA2_253 = input.LA(1);

                         
                        int index2_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_253);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA2_254 = input.LA(1);

                         
                        int index2_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_254);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA2_255 = input.LA(1);

                         
                        int index2_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_255);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA2_256 = input.LA(1);

                         
                        int index2_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_256);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA2_257 = input.LA(1);

                         
                        int index2_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_257);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA2_258 = input.LA(1);

                         
                        int index2_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_258);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA2_259 = input.LA(1);

                         
                        int index2_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_259);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA2_260 = input.LA(1);

                         
                        int index2_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_260);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA2_261 = input.LA(1);

                         
                        int index2_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_261);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA2_262 = input.LA(1);

                         
                        int index2_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_262);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA2_263 = input.LA(1);

                         
                        int index2_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_263);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA2_264 = input.LA(1);

                         
                        int index2_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_264);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA2_265 = input.LA(1);

                         
                        int index2_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_265);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA2_266 = input.LA(1);

                         
                        int index2_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_266);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA2_267 = input.LA(1);

                         
                        int index2_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_267);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA2_268 = input.LA(1);

                         
                        int index2_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_268);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA2_269 = input.LA(1);

                         
                        int index2_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_269);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA2_270 = input.LA(1);

                         
                        int index2_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_270);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA2_271 = input.LA(1);

                         
                        int index2_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_271);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA2_272 = input.LA(1);

                         
                        int index2_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_272);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA2_273 = input.LA(1);

                         
                        int index2_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_273);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA2_274 = input.LA(1);

                         
                        int index2_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_274);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA2_275 = input.LA(1);

                         
                        int index2_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_275);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA2_276 = input.LA(1);

                         
                        int index2_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_276);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA2_277 = input.LA(1);

                         
                        int index2_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_277);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA2_278 = input.LA(1);

                         
                        int index2_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_278);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA2_279 = input.LA(1);

                         
                        int index2_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_279);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA2_280 = input.LA(1);

                         
                        int index2_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_280);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA2_281 = input.LA(1);

                         
                        int index2_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_281);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA2_282 = input.LA(1);

                         
                        int index2_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_282);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA2_283 = input.LA(1);

                         
                        int index2_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_283);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA2_284 = input.LA(1);

                         
                        int index2_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_284);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA2_285 = input.LA(1);

                         
                        int index2_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_285);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA2_286 = input.LA(1);

                         
                        int index2_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_286);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA2_287 = input.LA(1);

                         
                        int index2_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_287);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA2_288 = input.LA(1);

                         
                        int index2_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_288);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA2_289 = input.LA(1);

                         
                        int index2_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_289);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA2_290 = input.LA(1);

                         
                        int index2_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_290);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA2_291 = input.LA(1);

                         
                        int index2_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_291);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA2_292 = input.LA(1);

                         
                        int index2_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_292);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA2_293 = input.LA(1);

                         
                        int index2_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_293);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA2_294 = input.LA(1);

                         
                        int index2_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_294);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA2_295 = input.LA(1);

                         
                        int index2_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_295);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA2_296 = input.LA(1);

                         
                        int index2_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_296);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA2_297 = input.LA(1);

                         
                        int index2_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_297);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA2_298 = input.LA(1);

                         
                        int index2_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_298);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA2_299 = input.LA(1);

                         
                        int index2_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_299);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA2_300 = input.LA(1);

                         
                        int index2_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_300);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA2_301 = input.LA(1);

                         
                        int index2_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_301);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA2_302 = input.LA(1);

                         
                        int index2_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_302);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA2_303 = input.LA(1);

                         
                        int index2_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_303);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA2_304 = input.LA(1);

                         
                        int index2_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_304);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA2_305 = input.LA(1);

                         
                        int index2_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_305);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA2_306 = input.LA(1);

                         
                        int index2_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_306);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA2_307 = input.LA(1);

                         
                        int index2_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_307);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA2_308 = input.LA(1);

                         
                        int index2_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_308);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA2_309 = input.LA(1);

                         
                        int index2_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_309);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA2_310 = input.LA(1);

                         
                        int index2_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_310);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA2_311 = input.LA(1);

                         
                        int index2_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_311);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA2_312 = input.LA(1);

                         
                        int index2_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_312);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA2_313 = input.LA(1);

                         
                        int index2_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_313);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA2_314 = input.LA(1);

                         
                        int index2_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_314);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA2_315 = input.LA(1);

                         
                        int index2_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_315);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA2_316 = input.LA(1);

                         
                        int index2_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_316);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA2_317 = input.LA(1);

                         
                        int index2_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_317);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA2_318 = input.LA(1);

                         
                        int index2_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_318);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA2_319 = input.LA(1);

                         
                        int index2_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_319);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA2_320 = input.LA(1);

                         
                        int index2_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_320);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA2_321 = input.LA(1);

                         
                        int index2_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_321);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA2_322 = input.LA(1);

                         
                        int index2_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_322);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA2_323 = input.LA(1);

                         
                        int index2_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_323);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA2_324 = input.LA(1);

                         
                        int index2_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_324);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA2_325 = input.LA(1);

                         
                        int index2_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_325);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA2_326 = input.LA(1);

                         
                        int index2_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_326);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA2_327 = input.LA(1);

                         
                        int index2_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_327);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA2_328 = input.LA(1);

                         
                        int index2_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_328);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA2_329 = input.LA(1);

                         
                        int index2_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_329);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA2_330 = input.LA(1);

                         
                        int index2_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_330);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA2_331 = input.LA(1);

                         
                        int index2_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_331);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA2_332 = input.LA(1);

                         
                        int index2_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_332);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA2_333 = input.LA(1);

                         
                        int index2_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_333);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA2_334 = input.LA(1);

                         
                        int index2_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_334);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA2_335 = input.LA(1);

                         
                        int index2_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_335);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA2_336 = input.LA(1);

                         
                        int index2_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_336);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA2_337 = input.LA(1);

                         
                        int index2_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_337);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA2_338 = input.LA(1);

                         
                        int index2_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_338);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA2_339 = input.LA(1);

                         
                        int index2_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_339);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA2_340 = input.LA(1);

                         
                        int index2_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_340);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA2_341 = input.LA(1);

                         
                        int index2_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_341);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA2_342 = input.LA(1);

                         
                        int index2_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_342);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA2_343 = input.LA(1);

                         
                        int index2_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_343);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA2_344 = input.LA(1);

                         
                        int index2_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_344);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA2_345 = input.LA(1);

                         
                        int index2_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_345);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA2_346 = input.LA(1);

                         
                        int index2_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_346);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA2_347 = input.LA(1);

                         
                        int index2_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_347);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA2_348 = input.LA(1);

                         
                        int index2_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_348);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA2_349 = input.LA(1);

                         
                        int index2_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_349);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA2_350 = input.LA(1);

                         
                        int index2_350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_350);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA2_351 = input.LA(1);

                         
                        int index2_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_351);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA2_352 = input.LA(1);

                         
                        int index2_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_352);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA2_353 = input.LA(1);

                         
                        int index2_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_353);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA2_354 = input.LA(1);

                         
                        int index2_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_354);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA2_355 = input.LA(1);

                         
                        int index2_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_355);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA2_356 = input.LA(1);

                         
                        int index2_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_356);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA2_357 = input.LA(1);

                         
                        int index2_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_357);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA2_358 = input.LA(1);

                         
                        int index2_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_358);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA2_359 = input.LA(1);

                         
                        int index2_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_359);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA2_360 = input.LA(1);

                         
                        int index2_360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_360);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA2_361 = input.LA(1);

                         
                        int index2_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_361);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA2_362 = input.LA(1);

                         
                        int index2_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_362);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA2_363 = input.LA(1);

                         
                        int index2_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_363);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA2_364 = input.LA(1);

                         
                        int index2_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_364);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA2_365 = input.LA(1);

                         
                        int index2_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_365);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA2_366 = input.LA(1);

                         
                        int index2_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_366);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA2_367 = input.LA(1);

                         
                        int index2_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_367);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA2_368 = input.LA(1);

                         
                        int index2_368 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_368);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA2_369 = input.LA(1);

                         
                        int index2_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_369);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA2_370 = input.LA(1);

                         
                        int index2_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_370);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA2_371 = input.LA(1);

                         
                        int index2_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_371);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA2_372 = input.LA(1);

                         
                        int index2_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_372);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA2_373 = input.LA(1);

                         
                        int index2_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_373);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA2_374 = input.LA(1);

                         
                        int index2_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_374);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA2_375 = input.LA(1);

                         
                        int index2_375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_375);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA2_376 = input.LA(1);

                         
                        int index2_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_376);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA2_377 = input.LA(1);

                         
                        int index2_377 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_377);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA2_378 = input.LA(1);

                         
                        int index2_378 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_378);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA2_379 = input.LA(1);

                         
                        int index2_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_379);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA2_380 = input.LA(1);

                         
                        int index2_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_380);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA2_381 = input.LA(1);

                         
                        int index2_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_381);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA2_382 = input.LA(1);

                         
                        int index2_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_382);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA2_383 = input.LA(1);

                         
                        int index2_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_383);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA2_384 = input.LA(1);

                         
                        int index2_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_384);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA2_385 = input.LA(1);

                         
                        int index2_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_385);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA2_386 = input.LA(1);

                         
                        int index2_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_386);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA2_387 = input.LA(1);

                         
                        int index2_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_387);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA2_388 = input.LA(1);

                         
                        int index2_388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_388);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA2_389 = input.LA(1);

                         
                        int index2_389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_389);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA2_390 = input.LA(1);

                         
                        int index2_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_390);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA2_391 = input.LA(1);

                         
                        int index2_391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_391);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA2_392 = input.LA(1);

                         
                        int index2_392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_392);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA2_393 = input.LA(1);

                         
                        int index2_393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_393);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA2_394 = input.LA(1);

                         
                        int index2_394 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_394);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA2_395 = input.LA(1);

                         
                        int index2_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_395);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA2_396 = input.LA(1);

                         
                        int index2_396 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_396);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA2_397 = input.LA(1);

                         
                        int index2_397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_397);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA2_398 = input.LA(1);

                         
                        int index2_398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_398);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA2_399 = input.LA(1);

                         
                        int index2_399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_399);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA2_400 = input.LA(1);

                         
                        int index2_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_400);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA2_401 = input.LA(1);

                         
                        int index2_401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_401);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA2_402 = input.LA(1);

                         
                        int index2_402 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_402);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA2_403 = input.LA(1);

                         
                        int index2_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_403);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA2_404 = input.LA(1);

                         
                        int index2_404 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_404);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA2_405 = input.LA(1);

                         
                        int index2_405 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_405);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA2_406 = input.LA(1);

                         
                        int index2_406 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_406);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA2_407 = input.LA(1);

                         
                        int index2_407 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_407);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA2_408 = input.LA(1);

                         
                        int index2_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_408);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA2_409 = input.LA(1);

                         
                        int index2_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_409);

                        if ( s>=0 ) return s;
                        break;
                    case 315 : 
                        int LA2_410 = input.LA(1);

                         
                        int index2_410 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_410);

                        if ( s>=0 ) return s;
                        break;
                    case 316 : 
                        int LA2_411 = input.LA(1);

                         
                        int index2_411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_411);

                        if ( s>=0 ) return s;
                        break;
                    case 317 : 
                        int LA2_412 = input.LA(1);

                         
                        int index2_412 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_412);

                        if ( s>=0 ) return s;
                        break;
                    case 318 : 
                        int LA2_413 = input.LA(1);

                         
                        int index2_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_413);

                        if ( s>=0 ) return s;
                        break;
                    case 319 : 
                        int LA2_414 = input.LA(1);

                         
                        int index2_414 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_414);

                        if ( s>=0 ) return s;
                        break;
                    case 320 : 
                        int LA2_415 = input.LA(1);

                         
                        int index2_415 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_415);

                        if ( s>=0 ) return s;
                        break;
                    case 321 : 
                        int LA2_416 = input.LA(1);

                         
                        int index2_416 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_416);

                        if ( s>=0 ) return s;
                        break;
                    case 322 : 
                        int LA2_417 = input.LA(1);

                         
                        int index2_417 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_417);

                        if ( s>=0 ) return s;
                        break;
                    case 323 : 
                        int LA2_418 = input.LA(1);

                         
                        int index2_418 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_418);

                        if ( s>=0 ) return s;
                        break;
                    case 324 : 
                        int LA2_419 = input.LA(1);

                         
                        int index2_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_419);

                        if ( s>=0 ) return s;
                        break;
                    case 325 : 
                        int LA2_420 = input.LA(1);

                         
                        int index2_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_420);

                        if ( s>=0 ) return s;
                        break;
                    case 326 : 
                        int LA2_421 = input.LA(1);

                         
                        int index2_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_421);

                        if ( s>=0 ) return s;
                        break;
                    case 327 : 
                        int LA2_422 = input.LA(1);

                         
                        int index2_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_422);

                        if ( s>=0 ) return s;
                        break;
                    case 328 : 
                        int LA2_423 = input.LA(1);

                         
                        int index2_423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_423);

                        if ( s>=0 ) return s;
                        break;
                    case 329 : 
                        int LA2_424 = input.LA(1);

                         
                        int index2_424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_424);

                        if ( s>=0 ) return s;
                        break;
                    case 330 : 
                        int LA2_425 = input.LA(1);

                         
                        int index2_425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_425);

                        if ( s>=0 ) return s;
                        break;
                    case 331 : 
                        int LA2_426 = input.LA(1);

                         
                        int index2_426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_426);

                        if ( s>=0 ) return s;
                        break;
                    case 332 : 
                        int LA2_427 = input.LA(1);

                         
                        int index2_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_427);

                        if ( s>=0 ) return s;
                        break;
                    case 333 : 
                        int LA2_428 = input.LA(1);

                         
                        int index2_428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_428);

                        if ( s>=0 ) return s;
                        break;
                    case 334 : 
                        int LA2_429 = input.LA(1);

                         
                        int index2_429 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_429);

                        if ( s>=0 ) return s;
                        break;
                    case 335 : 
                        int LA2_430 = input.LA(1);

                         
                        int index2_430 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_430);

                        if ( s>=0 ) return s;
                        break;
                    case 336 : 
                        int LA2_431 = input.LA(1);

                         
                        int index2_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_431);

                        if ( s>=0 ) return s;
                        break;
                    case 337 : 
                        int LA2_432 = input.LA(1);

                         
                        int index2_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_432);

                        if ( s>=0 ) return s;
                        break;
                    case 338 : 
                        int LA2_433 = input.LA(1);

                         
                        int index2_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_433);

                        if ( s>=0 ) return s;
                        break;
                    case 339 : 
                        int LA2_434 = input.LA(1);

                         
                        int index2_434 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_434);

                        if ( s>=0 ) return s;
                        break;
                    case 340 : 
                        int LA2_435 = input.LA(1);

                         
                        int index2_435 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_435);

                        if ( s>=0 ) return s;
                        break;
                    case 341 : 
                        int LA2_436 = input.LA(1);

                         
                        int index2_436 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_436);

                        if ( s>=0 ) return s;
                        break;
                    case 342 : 
                        int LA2_437 = input.LA(1);

                         
                        int index2_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_437);

                        if ( s>=0 ) return s;
                        break;
                    case 343 : 
                        int LA2_438 = input.LA(1);

                         
                        int index2_438 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_438);

                        if ( s>=0 ) return s;
                        break;
                    case 344 : 
                        int LA2_439 = input.LA(1);

                         
                        int index2_439 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_439);

                        if ( s>=0 ) return s;
                        break;
                    case 345 : 
                        int LA2_440 = input.LA(1);

                         
                        int index2_440 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_440);

                        if ( s>=0 ) return s;
                        break;
                    case 346 : 
                        int LA2_441 = input.LA(1);

                         
                        int index2_441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_441);

                        if ( s>=0 ) return s;
                        break;
                    case 347 : 
                        int LA2_442 = input.LA(1);

                         
                        int index2_442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_442);

                        if ( s>=0 ) return s;
                        break;
                    case 348 : 
                        int LA2_443 = input.LA(1);

                         
                        int index2_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_443);

                        if ( s>=0 ) return s;
                        break;
                    case 349 : 
                        int LA2_444 = input.LA(1);

                         
                        int index2_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_444);

                        if ( s>=0 ) return s;
                        break;
                    case 350 : 
                        int LA2_445 = input.LA(1);

                         
                        int index2_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_445);

                        if ( s>=0 ) return s;
                        break;
                    case 351 : 
                        int LA2_446 = input.LA(1);

                         
                        int index2_446 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_446);

                        if ( s>=0 ) return s;
                        break;
                    case 352 : 
                        int LA2_447 = input.LA(1);

                         
                        int index2_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_447);

                        if ( s>=0 ) return s;
                        break;
                    case 353 : 
                        int LA2_448 = input.LA(1);

                         
                        int index2_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_448);

                        if ( s>=0 ) return s;
                        break;
                    case 354 : 
                        int LA2_449 = input.LA(1);

                         
                        int index2_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_449);

                        if ( s>=0 ) return s;
                        break;
                    case 355 : 
                        int LA2_450 = input.LA(1);

                         
                        int index2_450 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_450);

                        if ( s>=0 ) return s;
                        break;
                    case 356 : 
                        int LA2_451 = input.LA(1);

                         
                        int index2_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_451);

                        if ( s>=0 ) return s;
                        break;
                    case 357 : 
                        int LA2_452 = input.LA(1);

                         
                        int index2_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_452);

                        if ( s>=0 ) return s;
                        break;
                    case 358 : 
                        int LA2_453 = input.LA(1);

                         
                        int index2_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_453);

                        if ( s>=0 ) return s;
                        break;
                    case 359 : 
                        int LA2_454 = input.LA(1);

                         
                        int index2_454 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_454);

                        if ( s>=0 ) return s;
                        break;
                    case 360 : 
                        int LA2_455 = input.LA(1);

                         
                        int index2_455 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_455);

                        if ( s>=0 ) return s;
                        break;
                    case 361 : 
                        int LA2_456 = input.LA(1);

                         
                        int index2_456 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_456);

                        if ( s>=0 ) return s;
                        break;
                    case 362 : 
                        int LA2_457 = input.LA(1);

                         
                        int index2_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_457);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA21_eotS =
        "\75\uffff";
    static final String DFA21_eofS =
        "\1\3\74\uffff";
    static final String DFA21_minS =
        "\1\26\74\uffff";
    static final String DFA21_maxS =
        "\1\u00d9\74\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\71\uffff";
    static final String DFA21_specialS =
        "\75\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\42\uffff\1\3\1\1"+
            "\1\3\2\uffff\1\3\1\1\1\3\1\uffff\1\1\1\uffff\1\3\1\uffff\3\1"+
            "\1\uffff\1\1\1\uffff\1\3\2\uffff\1\1\1\uffff\1\1\4\uffff\1\1"+
            "\3\uffff\10\3\4\uffff\1\3\3\uffff\6\3\3\uffff\2\3\3\uffff\14"+
            "\3\1\uffff\4\3\1\uffff\11\3\1\uffff\6\3\1\uffff\1\1\1\uffff"+
            "\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "275:15: ( ( access_wrapper name )* op_assign element_value )?";
        }
    }
    static final String DFA26_eotS =
        "\u0083\uffff";
    static final String DFA26_eofS =
        "\u0083\uffff";
    static final String DFA26_minS =
        "\3\56\46\uffff\1\56\2\uffff\1\20\6\uffff\1\56\22\uffff\1\166\11"+
        "\uffff\1\161\4\uffff\1\161\22\uffff\1\171\1\uffff\1\0\13\uffff\1"+
        "\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA26_maxS =
        "\1\u00d5\1\u00d7\1\u00d3\46\uffff\1\172\2\uffff\1\u00da\6\uffff"+
        "\1\u00d3\22\uffff\1\u00d7\11\uffff\1\u00d8\4\uffff\1\u00d8\22\uffff"+
        "\1\u00af\1\uffff\1\0\13\uffff\1\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA26_acceptS =
        "\3\uffff\2\3\1\4\16\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff"+
        "\1\1\1\2\1\uffff\1\3\6\uffff\22\3\1\uffff\11\3\1\uffff\4\3\1\uffff"+
        "\5\3\16\uffff\1\1\1\uffff\1\2\12\3\1\uffff\7\3\5\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\2\46\uffff\1\3\2\uffff\1\4\31\uffff\1\5\11\uffff\1\6"+
        "\4\uffff\1\7\24\uffff\1\10\13\uffff\1\11\7\uffff\1\12\3\uffff\1"+
        "\13}>";
    static final String[] DFA26_transitionS = {
            "\1\1\21\uffff\1\47\21\uffff\1\47\42\uffff\1\3\1\uffff\1\2\2"+
            "\uffff\1\4\15\uffff\1\40\15\uffff\1\46\17\uffff\1\24\1\uffff"+
            "\1\26\1\25\1\5\4\uffff\1\45\4\uffff\2\5\1\41\1\uffff\1\5\1\42"+
            "\1\uffff\1\30\1\33\1\5\1\31\2\uffff\1\36\1\43\1\5\1\32\1\uffff"+
            "\4\5\1\35\1\5\1\27\1\5\1\34\2\uffff\3\5\1\37\1\44",
            "\1\5\106\uffff\1\5\1\55\1\52\1\5\1\uffff\1\5\1\55\1\uffff\1"+
            "\53\1\55\2\uffff\1\53\1\55\2\51\1\uffff\1\55\2\uffff\1\5\1\uffff"+
            "\1\55\1\uffff\1\55\4\uffff\1\55\34\uffff\1\54\47\uffff\1\55",
            "\1\101\106\uffff\1\105\1\uffff\1\66\2\uffff\1\63\57\uffff\1"+
            "\75\11\uffff\1\67\1\64\2\uffff\1\71\4\uffff\1\104\5\uffff\1"+
            "\65\2\uffff\1\73\1\76\1\77\1\74\1\uffff\1\100\1\uffff\1\102"+
            "\3\uffff\1\103\1\72\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\106\106\uffff\1\107\4\uffff\1\110",
            "",
            "",
            "\1\124\35\uffff\1\120\24\uffff\1\125\23\uffff\1\122\30\uffff"+
            "\1\130\4\uffff\1\117\1\uffff\1\112\2\uffff\1\121\2\uffff\1\132"+
            "\2\uffff\1\111\1\132\23\uffff\1\123\14\uffff\1\116\2\uffff\1"+
            "\115\6\uffff\1\126\1\uffff\1\126\1\127\1\uffff\1\5\1\113\1\114"+
            "\14\uffff\1\126\16\uffff\1\126\12\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\150\173\uffff\1\5\11\uffff\2\5\2\uffff\1\5\12\uffff\1\5"+
            "\2\uffff\4\5\1\uffff\1\5\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\155\1\151\3\uffff\1\155\1\uffff\1\153\1\155\2\uffff\1\153"+
            "\1\155\2\152\1\uffff\1\155\4\uffff\1\155\1\uffff\1\155\4\uffff"+
            "\1\155\34\uffff\1\154\47\uffff\1\155",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\163\1\uffff\3\163\1\uffff\1\160\2\uffff\1\163\1\uffff\1"+
            "\163\1\162\1\161\1\uffff\1\163\1\162\1\161\2\157\1\163\3\uffff"+
            "\2\163\1\uffff\6\163\1\uffff\1\165\1\164\32\uffff\1\156\1\uffff"+
            "\1\166\1\163\43\uffff\1\163\1\uffff\1\163",
            "",
            "",
            "",
            "",
            "\1\173\1\uffff\3\173\1\uffff\1\170\2\uffff\1\173\1\uffff\1"+
            "\173\1\172\1\171\1\uffff\1\173\1\172\1\171\2\167\1\173\3\uffff"+
            "\2\173\1\uffff\6\173\1\uffff\1\175\1\174\34\uffff\1\176\1\173"+
            "\43\uffff\1\173\1\uffff\1\173",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0082\1\5\16\uffff\1\5\45\uffff\1\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "284:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_0==ID) ) {s = 1;}

                        else if ( (LA26_0==119) ) {s = 2;}

                        else if ( (LA26_0==117) && (synpred6_Objc())) {s = 3;}

                        else if ( (LA26_0==122) && (synpred6_Objc())) {s = 4;}

                        else if ( (LA26_0==170||(LA26_0 >= 180 && LA26_0 <= 181)||LA26_0==184||LA26_0==189||LA26_0==195||(LA26_0 >= 198 && LA26_0 <= 201)||LA26_0==203||LA26_0==205||(LA26_0 >= 209 && LA26_0 <= 211)) ) {s = 5;}

                        else if ( (LA26_0==166) ) {s = 20;}

                        else if ( (LA26_0==169) ) {s = 21;}

                        else if ( (LA26_0==168) ) {s = 22;}

                        else if ( (LA26_0==204) ) {s = 23;}

                        else if ( (LA26_0==187) ) {s = 24;}

                        else if ( (LA26_0==190) ) {s = 25;}

                        else if ( (LA26_0==196) ) {s = 26;}

                        else if ( (LA26_0==188) ) {s = 27;}

                        else if ( (LA26_0==206) ) {s = 28;}

                        else if ( (LA26_0==202) ) {s = 29;}

                        else if ( (LA26_0==193) ) {s = 30;}

                        else if ( (LA26_0==212) ) {s = 31;}

                        else if ( (LA26_0==136) ) {s = 32;}

                        else if ( (LA26_0==182) ) {s = 33;}

                        else if ( (LA26_0==185) ) {s = 34;}

                        else if ( (LA26_0==194) ) {s = 35;}

                        else if ( (LA26_0==213) ) {s = 36;}

                        else if ( (LA26_0==175) ) {s = 37;}

                        else if ( (LA26_0==150) ) {s = 38;}

                        else if ( (LA26_0==MULTI_COMMENT_LIT||LA26_0==SINGLE_COMMENT_LIT) ) {s = 39;}

                         
                        input.seek(index26_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA26_1 >= 131 && LA26_1 <= 132)) ) {s = 41;}

                        else if ( (LA26_1==119) && (synpred4_Objc())) {s = 42;}

                        else if ( (LA26_1==125||LA26_1==129) && (synpred5_Objc())) {s = 43;}

                        else if ( (LA26_1==175) ) {s = 44;}

                        else if ( (LA26_1==118||LA26_1==123||LA26_1==126||LA26_1==130||LA26_1==134||LA26_1==139||LA26_1==141||LA26_1==146||LA26_1==215) && (synpred6_Objc())) {s = 45;}

                        else if ( (LA26_1==ID||LA26_1==117||LA26_1==120||LA26_1==122||LA26_1==137) ) {s = 5;}

                         
                        input.seek(index26_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_2==122) ) {s = 51;}

                        else if ( (LA26_2==181) && (synpred6_Objc())) {s = 52;}

                        else if ( (LA26_2==195) && (synpred6_Objc())) {s = 53;}

                        else if ( (LA26_2==119) && (synpred6_Objc())) {s = 54;}

                        else if ( (LA26_2==180) && (synpred6_Objc())) {s = 55;}

                        else if ( (LA26_2==211) && (synpred6_Objc())) {s = 56;}

                        else if ( (LA26_2==184) && (synpred6_Objc())) {s = 57;}

                        else if ( (LA26_2==210) && (synpred6_Objc())) {s = 58;}

                        else if ( (LA26_2==198) && (synpred6_Objc())) {s = 59;}

                        else if ( (LA26_2==201) && (synpred6_Objc())) {s = 60;}

                        else if ( (LA26_2==170) && (synpred6_Objc())) {s = 61;}

                        else if ( (LA26_2==199) && (synpred6_Objc())) {s = 62;}

                        else if ( (LA26_2==200) && (synpred6_Objc())) {s = 63;}

                        else if ( (LA26_2==203) && (synpred6_Objc())) {s = 64;}

                        else if ( (LA26_2==ID) && (synpred6_Objc())) {s = 65;}

                        else if ( (LA26_2==205) && (synpred6_Objc())) {s = 66;}

                        else if ( (LA26_2==209) && (synpred6_Objc())) {s = 67;}

                        else if ( (LA26_2==189) && (synpred6_Objc())) {s = 68;}

                        else if ( (LA26_2==117) && (synpred6_Objc())) {s = 69;}

                         
                        input.seek(index26_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_41 = input.LA(1);

                         
                        int index26_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_41==ID) ) {s = 70;}

                        else if ( (LA26_41==117) && (synpred6_Objc())) {s = 71;}

                        else if ( (LA26_41==122) && (synpred6_Objc())) {s = 72;}

                         
                        input.seek(index26_41);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_44==128) && (synpred6_Objc())) {s = 73;}

                        else if ( (LA26_44==119) && (synpred6_Objc())) {s = 74;}

                        else if ( (LA26_44==178) && (synpred6_Objc())) {s = 75;}

                        else if ( (LA26_44==179) && (synpred6_Objc())) {s = 76;}

                        else if ( (LA26_44==165) && (synpred6_Objc())) {s = 77;}

                        else if ( (LA26_44==162) && (synpred6_Objc())) {s = 78;}

                        else if ( (LA26_44==117) && (synpred6_Objc())) {s = 79;}

                        else if ( (LA26_44==ID) ) {s = 80;}

                        else if ( (LA26_44==122) && (synpred6_Objc())) {s = 81;}

                        else if ( (LA26_44==STRING_LITERAL) && (synpred6_Objc())) {s = 82;}

                        else if ( (LA26_44==149) && (synpred6_Objc())) {s = 83;}

                        else if ( (LA26_44==CHAR_LITERAL) && (synpred6_Objc())) {s = 84;}

                        else if ( (LA26_44==NUMBER_LITERAL) ) {s = 85;}

                        else if ( (LA26_44==172||LA26_44==174||LA26_44==192||LA26_44==207) && (synpred6_Objc())) {s = 86;}

                        else if ( (LA26_44==175) && (synpred6_Objc())) {s = 87;}

                        else if ( (LA26_44==112) && (synpred6_Objc())) {s = 88;}

                        else if ( (LA26_44==218) && (synpred6_Objc())) {s = 89;}

                        else if ( (LA26_44==125||LA26_44==129) && (synpred6_Objc())) {s = 90;}

                        else if ( (LA26_44==177) ) {s = 5;}

                         
                        input.seek(index26_44);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_70 = input.LA(1);

                         
                        int index26_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_70==119) && (synpred4_Objc())) {s = 105;}

                        else if ( ((LA26_70 >= 131 && LA26_70 <= 132)) ) {s = 106;}

                        else if ( (LA26_70==125||LA26_70==129) && (synpred5_Objc())) {s = 107;}

                        else if ( (LA26_70==175) && (synpred6_Objc())) {s = 108;}

                        else if ( (LA26_70==118||LA26_70==123||LA26_70==126||LA26_70==130||LA26_70==134||LA26_70==139||LA26_70==141||LA26_70==146||LA26_70==215) && (synpred6_Objc())) {s = 109;}

                         
                        input.seek(index26_70);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_80 = input.LA(1);

                         
                        int index26_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_80==175) && (synpred6_Objc())) {s = 110;}

                        else if ( ((LA26_80 >= 131 && LA26_80 <= 132)) && (synpred6_Objc())) {s = 111;}

                        else if ( (LA26_80==119) && (synpred6_Objc())) {s = 112;}

                        else if ( (LA26_80==126||LA26_80==130) && (synpred6_Objc())) {s = 113;}

                        else if ( (LA26_80==125||LA26_80==129) && (synpred6_Objc())) {s = 114;}

                        else if ( (LA26_80==113||(LA26_80 >= 115 && LA26_80 <= 117)||LA26_80==122||LA26_80==124||LA26_80==128||LA26_80==133||(LA26_80 >= 137 && LA26_80 <= 138)||(LA26_80 >= 140 && LA26_80 <= 145)||LA26_80==178||LA26_80==214||LA26_80==216) && (synpred6_Objc())) {s = 115;}

                        else if ( (LA26_80==148) && (synpred6_Objc())) {s = 116;}

                        else if ( (LA26_80==147) && (synpred6_Objc())) {s = 117;}

                        else if ( (LA26_80==177) ) {s = 118;}

                         
                        input.seek(index26_80);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_85 = input.LA(1);

                         
                        int index26_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA26_85 >= 131 && LA26_85 <= 132)) && (synpred6_Objc())) {s = 119;}

                        else if ( (LA26_85==119) && (synpred6_Objc())) {s = 120;}

                        else if ( (LA26_85==126||LA26_85==130) && (synpred6_Objc())) {s = 121;}

                        else if ( (LA26_85==125||LA26_85==129) && (synpred6_Objc())) {s = 122;}

                        else if ( (LA26_85==113||(LA26_85 >= 115 && LA26_85 <= 117)||LA26_85==122||LA26_85==124||LA26_85==128||LA26_85==133||(LA26_85 >= 137 && LA26_85 <= 138)||(LA26_85 >= 140 && LA26_85 <= 145)||LA26_85==178||LA26_85==214||LA26_85==216) && (synpred6_Objc())) {s = 123;}

                        else if ( (LA26_85==148) && (synpred6_Objc())) {s = 124;}

                        else if ( (LA26_85==147) && (synpred6_Objc())) {s = 125;}

                        else if ( (LA26_85==177) ) {s = 126;}

                         
                        input.seek(index26_85);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_106 = input.LA(1);

                         
                        int index26_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 105;}

                        else if ( (synpred5_Objc()) ) {s = 107;}

                        else if ( (synpred6_Objc()) ) {s = 125;}

                         
                        input.seek(index26_106);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_118 = input.LA(1);

                         
                        int index26_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 125;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_118);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_126 = input.LA(1);

                         
                        int index26_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 125;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_126);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_130 = input.LA(1);

                         
                        int index26_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 125;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_130);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA30_eotS =
        "\147\uffff";
    static final String DFA30_eofS =
        "\147\uffff";
    static final String DFA30_minS =
        "\2\56\1\uffff\1\56\23\uffff\1\20\7\uffff\1\56\31\uffff\1\161\4\uffff"+
        "\1\161\22\uffff\1\171\10\uffff\1\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA30_maxS =
        "\1\u00d3\1\u00d7\1\uffff\1\u00d3\23\uffff\1\u00da\7\uffff\1\u00d3"+
        "\31\uffff\1\u00d8\4\uffff\1\u00d8\22\uffff\1\u00af\10\uffff\1\0"+
        "\7\uffff\1\0\3\uffff\1\0";
    static final String DFA30_acceptS =
        "\2\uffff\1\3\1\uffff\2\4\1\5\16\uffff\1\1\1\2\1\uffff\2\4\6\uffff"+
        "\31\4\1\uffff\4\4\1\uffff\5\4\16\uffff\10\4\1\uffff\7\4\5\uffff";
    static final String DFA30_specialS =
        "\1\0\1\1\1\uffff\1\2\23\uffff\1\3\41\uffff\1\4\4\uffff\1\5\33\uffff"+
        "\1\6\7\uffff\1\7\3\uffff\1\10}>";
    static final String[] DFA30_transitionS = {
            "\1\1\106\uffff\1\4\1\uffff\1\3\2\uffff\1\5\15\uffff\1\2\41\uffff"+
            "\1\6\11\uffff\2\6\2\uffff\1\6\4\uffff\1\6\5\uffff\1\6\2\uffff"+
            "\4\6\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6",
            "\1\6\106\uffff\1\6\1\31\1\uffff\1\6\1\uffff\1\6\1\31\2\uffff"+
            "\1\31\3\uffff\1\31\2\30\1\uffff\1\31\1\uffff\1\25\1\6\1\uffff"+
            "\1\31\1\uffff\1\31\4\uffff\1\31\34\uffff\1\27\25\uffff\1\26"+
            "\21\uffff\1\31",
            "",
            "\1\55\106\uffff\1\61\1\uffff\1\42\2\uffff\1\37\57\uffff\1\51"+
            "\11\uffff\1\43\1\40\2\uffff\1\45\4\uffff\1\60\5\uffff\1\41\2"+
            "\uffff\1\47\1\52\1\53\1\50\1\uffff\1\54\1\uffff\1\56\3\uffff"+
            "\1\57\1\46\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\75\35\uffff\1\71\24\uffff\1\76\23\uffff\1\73\30\uffff\1"+
            "\101\4\uffff\1\70\1\uffff\1\63\2\uffff\1\72\2\uffff\1\103\2"+
            "\uffff\1\62\1\103\23\uffff\1\74\14\uffff\1\67\2\uffff\1\66\6"+
            "\uffff\1\77\1\uffff\1\77\1\100\1\uffff\1\6\1\64\1\65\14\uffff"+
            "\1\77\16\uffff\1\77\12\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\121\173\uffff\1\6\11\uffff\2\6\2\uffff\1\6\12\uffff\1\6"+
            "\2\uffff\4\6\1\uffff\1\6\6\uffff\2\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\127\1\uffff\3\127\1\uffff\1\124\2\uffff\1\127\1\uffff\1"+
            "\127\1\126\1\125\1\uffff\1\127\1\126\1\125\2\123\1\127\3\uffff"+
            "\2\127\1\uffff\6\127\1\uffff\1\131\1\130\32\uffff\1\122\1\uffff"+
            "\1\132\1\127\43\uffff\1\127\1\uffff\1\127",
            "",
            "",
            "",
            "",
            "\1\137\1\uffff\3\137\1\uffff\1\134\2\uffff\1\137\1\uffff\1"+
            "\137\1\136\1\135\1\uffff\1\137\1\136\1\135\2\133\1\137\3\uffff"+
            "\2\137\1\uffff\6\137\1\uffff\1\141\1\140\34\uffff\1\142\1\137"+
            "\43\uffff\1\137\1\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\146\1\6\16\uffff\1\6\45\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "331:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_0 = input.LA(1);

                         
                        int index30_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_0==ID) ) {s = 1;}

                        else if ( (LA30_0==136) && (synpred9_Objc())) {s = 2;}

                        else if ( (LA30_0==119) ) {s = 3;}

                        else if ( (LA30_0==117) && (synpred10_Objc())) {s = 4;}

                        else if ( (LA30_0==122) && (synpred10_Objc())) {s = 5;}

                        else if ( (LA30_0==170||(LA30_0 >= 180 && LA30_0 <= 181)||LA30_0==184||LA30_0==189||LA30_0==195||(LA30_0 >= 198 && LA30_0 <= 201)||LA30_0==203||LA30_0==205||(LA30_0 >= 209 && LA30_0 <= 211)) ) {s = 6;}

                         
                        input.seek(index30_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_1==136) && (synpred7_Objc())) {s = 21;}

                        else if ( (LA30_1==197) && (synpred8_Objc())) {s = 22;}

                        else if ( (LA30_1==175) ) {s = 23;}

                        else if ( ((LA30_1 >= 131 && LA30_1 <= 132)) && (synpred10_Objc())) {s = 24;}

                        else if ( (LA30_1==118||LA30_1==123||LA30_1==126||LA30_1==130||LA30_1==134||LA30_1==139||LA30_1==141||LA30_1==146||LA30_1==215) && (synpred10_Objc())) {s = 25;}

                        else if ( (LA30_1==ID||LA30_1==117||LA30_1==120||LA30_1==122||LA30_1==137) ) {s = 6;}

                         
                        input.seek(index30_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_3 = input.LA(1);

                         
                        int index30_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_3==122) ) {s = 31;}

                        else if ( (LA30_3==181) && (synpred10_Objc())) {s = 32;}

                        else if ( (LA30_3==195) && (synpred10_Objc())) {s = 33;}

                        else if ( (LA30_3==119) && (synpred10_Objc())) {s = 34;}

                        else if ( (LA30_3==180) && (synpred10_Objc())) {s = 35;}

                        else if ( (LA30_3==211) && (synpred10_Objc())) {s = 36;}

                        else if ( (LA30_3==184) && (synpred10_Objc())) {s = 37;}

                        else if ( (LA30_3==210) && (synpred10_Objc())) {s = 38;}

                        else if ( (LA30_3==198) && (synpred10_Objc())) {s = 39;}

                        else if ( (LA30_3==201) && (synpred10_Objc())) {s = 40;}

                        else if ( (LA30_3==170) && (synpred10_Objc())) {s = 41;}

                        else if ( (LA30_3==199) && (synpred10_Objc())) {s = 42;}

                        else if ( (LA30_3==200) && (synpred10_Objc())) {s = 43;}

                        else if ( (LA30_3==203) && (synpred10_Objc())) {s = 44;}

                        else if ( (LA30_3==ID) && (synpred10_Objc())) {s = 45;}

                        else if ( (LA30_3==205) && (synpred10_Objc())) {s = 46;}

                        else if ( (LA30_3==209) && (synpred10_Objc())) {s = 47;}

                        else if ( (LA30_3==189) && (synpred10_Objc())) {s = 48;}

                        else if ( (LA30_3==117) && (synpred10_Objc())) {s = 49;}

                         
                        input.seek(index30_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_23 = input.LA(1);

                         
                        int index30_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_23==128) && (synpred10_Objc())) {s = 50;}

                        else if ( (LA30_23==119) && (synpred10_Objc())) {s = 51;}

                        else if ( (LA30_23==178) && (synpred10_Objc())) {s = 52;}

                        else if ( (LA30_23==179) && (synpred10_Objc())) {s = 53;}

                        else if ( (LA30_23==165) && (synpred10_Objc())) {s = 54;}

                        else if ( (LA30_23==162) && (synpred10_Objc())) {s = 55;}

                        else if ( (LA30_23==117) && (synpred10_Objc())) {s = 56;}

                        else if ( (LA30_23==ID) ) {s = 57;}

                        else if ( (LA30_23==122) && (synpred10_Objc())) {s = 58;}

                        else if ( (LA30_23==STRING_LITERAL) && (synpred10_Objc())) {s = 59;}

                        else if ( (LA30_23==149) && (synpred10_Objc())) {s = 60;}

                        else if ( (LA30_23==CHAR_LITERAL) && (synpred10_Objc())) {s = 61;}

                        else if ( (LA30_23==NUMBER_LITERAL) ) {s = 62;}

                        else if ( (LA30_23==172||LA30_23==174||LA30_23==192||LA30_23==207) && (synpred10_Objc())) {s = 63;}

                        else if ( (LA30_23==175) && (synpred10_Objc())) {s = 64;}

                        else if ( (LA30_23==112) && (synpred10_Objc())) {s = 65;}

                        else if ( (LA30_23==218) && (synpred10_Objc())) {s = 66;}

                        else if ( (LA30_23==125||LA30_23==129) && (synpred10_Objc())) {s = 67;}

                        else if ( (LA30_23==177) ) {s = 6;}

                         
                        input.seek(index30_23);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_57 = input.LA(1);

                         
                        int index30_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_57==175) && (synpred10_Objc())) {s = 82;}

                        else if ( ((LA30_57 >= 131 && LA30_57 <= 132)) && (synpred10_Objc())) {s = 83;}

                        else if ( (LA30_57==119) && (synpred10_Objc())) {s = 84;}

                        else if ( (LA30_57==126||LA30_57==130) && (synpred10_Objc())) {s = 85;}

                        else if ( (LA30_57==125||LA30_57==129) && (synpred10_Objc())) {s = 86;}

                        else if ( (LA30_57==113||(LA30_57 >= 115 && LA30_57 <= 117)||LA30_57==122||LA30_57==124||LA30_57==128||LA30_57==133||(LA30_57 >= 137 && LA30_57 <= 138)||(LA30_57 >= 140 && LA30_57 <= 145)||LA30_57==178||LA30_57==214||LA30_57==216) && (synpred10_Objc())) {s = 87;}

                        else if ( (LA30_57==148) && (synpred10_Objc())) {s = 88;}

                        else if ( (LA30_57==147) && (synpred10_Objc())) {s = 89;}

                        else if ( (LA30_57==177) ) {s = 90;}

                         
                        input.seek(index30_57);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_62 = input.LA(1);

                         
                        int index30_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA30_62 >= 131 && LA30_62 <= 132)) && (synpred10_Objc())) {s = 91;}

                        else if ( (LA30_62==119) && (synpred10_Objc())) {s = 92;}

                        else if ( (LA30_62==126||LA30_62==130) && (synpred10_Objc())) {s = 93;}

                        else if ( (LA30_62==125||LA30_62==129) && (synpred10_Objc())) {s = 94;}

                        else if ( (LA30_62==113||(LA30_62 >= 115 && LA30_62 <= 117)||LA30_62==122||LA30_62==124||LA30_62==128||LA30_62==133||(LA30_62 >= 137 && LA30_62 <= 138)||(LA30_62 >= 140 && LA30_62 <= 145)||LA30_62==178||LA30_62==214||LA30_62==216) && (synpred10_Objc())) {s = 95;}

                        else if ( (LA30_62==148) && (synpred10_Objc())) {s = 96;}

                        else if ( (LA30_62==147) && (synpred10_Objc())) {s = 97;}

                        else if ( (LA30_62==177) ) {s = 98;}

                         
                        input.seek(index30_62);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_90 = input.LA(1);

                         
                        int index30_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 97;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_90);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA30_98 = input.LA(1);

                         
                        int index30_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 97;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_98);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA30_102 = input.LA(1);

                         
                        int index30_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 97;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_102);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA60_eotS =
        "\102\uffff";
    static final String DFA60_eofS =
        "\1\1\101\uffff";
    static final String DFA60_minS =
        "\1\26\101\uffff";
    static final String DFA60_maxS =
        "\1\u00d9\101\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\2\3\uffff\2\1\62\uffff\1\1\4\uffff\3\1\1\uffff";
    static final String DFA60_specialS =
        "\102\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\76\1"+
            "\uffff\2\76\1\5\1\uffff\1\1\1\uffff\1\1\1\6\1\uffff\1\71\2\uffff"+
            "\1\1\1\71\4\uffff\1\76\1\uffff\2\1\2\76\1\uffff\6\76\1\uffff"+
            "\1\100\1\77\1\uffff\10\1\4\uffff\1\1\3\uffff\6\1\3\uffff\3\1"+
            "\1\76\1\uffff\14\1\1\uffff\4\1\1\uffff\11\1\1\uffff\6\1\1\76"+
            "\1\uffff\1\76\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 502:27: ( op2_unary_expression_or_questionmark_if_stmt )*";
        }
    }
    static final String DFA63_eotS =
        "\103\uffff";
    static final String DFA63_eofS =
        "\1\2\102\uffff";
    static final String DFA63_minS =
        "\1\26\102\uffff";
    static final String DFA63_maxS =
        "\1\u00d9\102\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\1\1\2\100\uffff";
    static final String DFA63_specialS =
        "\103\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\2\27\uffff\1\2\21\uffff\1\2\21\uffff\1\2\36\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\1\uffff\2\2\1\1"+
            "\3\uffff\1\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\1\uffff\10"+
            "\2\4\uffff\1\2\3\uffff\6\2\3\uffff\4\2\1\uffff\14\2\1\uffff"+
            "\4\2\1\uffff\11\2\1\uffff\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "516:21: ( increment_decrement )?";
        }
    }
    static final String DFA67_eotS =
        "\u01a1\uffff";
    static final String DFA67_eofS =
        "\125\uffff\1\2\u014b\uffff";
    static final String DFA67_minS =
        "\2\20\17\uffff\1\20\12\uffff\1\161\23\uffff\2\56\1\165\1\20\7\56"+
        "\3\165\1\161\3\56\17\uffff\5\20\23\uffff\16\0\40\uffff\126\0\7\uffff"+
        "\22\0\2\uffff\1\0\22\uffff\3\0\20\uffff\1\0\10\uffff\1\0\34\uffff"+
        "\2\0\2\uffff\4\0\5\uffff\2\0\76\uffff";
    static final String DFA67_maxS =
        "\1\u00cf\1\u00da\17\uffff\1\u00da\12\uffff\1\u00d8\23\uffff\1\u00d3"+
        "\1\u00cb\1\u00af\1\u00da\1\u00d3\2\u00d2\4\u00cb\1\u00af\1\u00c8"+
        "\1\u00cb\1\u00d8\3\u00cb\17\uffff\4\u00da\1\u00d9\23\uffff\16\0"+
        "\40\uffff\126\0\7\uffff\22\0\2\uffff\1\0\22\uffff\3\0\20\uffff\1"+
        "\0\10\uffff\1\0\34\uffff\2\0\2\uffff\4\0\5\uffff\2\0\76\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\3\14\uffff\2\1\1\uffff\12\1\1\uffff\3\1\75\uffff\14\1"+
        "\u009d\uffff\2\1\22\uffff\1\1\3\uffff\1\1\20\uffff\1\1\21\uffff"+
        "\1\1\24\uffff\2\1\4\uffff\5\1\77\uffff\1\2";
    static final String DFA67_specialS =
        "\1\uffff\1\0\56\uffff\1\1\40\uffff\1\2\1\3\1\4\1\5\1\6\23\uffff"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\40\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
        "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
        "\1\146\1\147\1\150\1\151\1\152\7\uffff\1\153\1\154\1\155\1\156\1"+
        "\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171"+
        "\1\172\1\173\1\174\2\uffff\1\175\22\uffff\1\176\1\177\1\u0080\20"+
        "\uffff\1\u0081\10\uffff\1\u0082\34\uffff\1\u0083\1\u0084\2\uffff"+
        "\1\u0085\1\u0086\1\u0087\1\u0088\5\uffff\1\u0089\1\u008a\76\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\35\uffff\1\2\1\uffff"+
            "\1\1\2\uffff\1\2\32\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\14\uffff\1\2\16\uffff\1\2",
            "\1\2\35\uffff\1\34\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\21\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\30\1\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\1\22\1\17\2\uffff\1\24\4\uffff"+
            "\1\37\2\uffff\1\2\2\uffff\1\20\2\uffff\1\26\1\31\1\32\1\27\1"+
            "\uffff\1\33\1\uffff\1\35\1\uffff\1\2\1\uffff\1\36\1\25\1\23"+
            "\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\76\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\63\2\uffff\1\60\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\72\1\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\1\64\1\61\2\uffff\1\66\4\uffff"+
            "\1\101\2\uffff\1\2\2\uffff\1\62\2\uffff\1\70\1\73\1\74\1\71"+
            "\1\uffff\1\75\1\uffff\1\77\1\uffff\1\2\1\uffff\1\100\1\67\1"+
            "\65\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\2\2\1\124\1\uffff\1\2\1\uffff\1\125\1\122\1\uffff"+
            "\3\2\1\uffff\6\2\3\uffff\1\121\1\2\1\uffff\6\2\1\uffff\2\2\32"+
            "\uffff\1\123\2\uffff\1\2\43\uffff\1\2\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\151\173\uffff\1\144\11\uffff\1\135\1\142\2\uffff\1\137\12"+
            "\uffff\1\146\2\uffff\1\141\1\145\1\147\1\143\1\uffff\1\150\6"+
            "\uffff\1\140\1\136",
            "\1\160\173\uffff\1\154\30\uffff\1\152\3\uffff\1\155\1\156\1"+
            "\153\1\uffff\1\157",
            "\1\164\3\uffff\1\165\1\162\16\uffff\1\161\45\uffff\1\163",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\166\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\2\2\2\uffff\4\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\3\2\6\uffff\1\2",
            "\1\u00a2\173\uffff\1\u009d\12\uffff\1\u009b\2\uffff\1\u0098"+
            "\12\uffff\1\u009f\2\uffff\1\u009a\1\u009e\1\u00a0\1\u009c\1"+
            "\uffff\1\u00a1\6\uffff\1\u0099\1\u0097",
            "\1\u00ad\173\uffff\1\u00a8\12\uffff\1\u00a6\2\uffff\1\u00a3"+
            "\12\uffff\1\u00aa\2\uffff\1\u00a5\1\u00a9\1\u00ab\1\u00a7\1"+
            "\uffff\1\u00ac\6\uffff\1\u00a4",
            "\1\u00b7\173\uffff\1\u00b2\12\uffff\1\u00b0\15\uffff\1\u00b4"+
            "\2\uffff\1\u00af\1\u00b3\1\u00b5\1\u00b1\1\uffff\1\u00b6\6\uffff"+
            "\1\u00ae",
            "\1\u00c0\173\uffff\1\u00bb\12\uffff\1\u00b9\15\uffff\1\u00bd"+
            "\2\uffff\1\u00b8\1\u00bc\1\u00be\1\u00ba\1\uffff\1\u00bf",
            "\1\u00c8\173\uffff\1\u00c3\12\uffff\1\u00c1\15\uffff\1\u00c5"+
            "\3\uffff\1\u00c4\1\u00c6\1\u00c2\1\uffff\1\u00c7",
            "\1\u00ce\173\uffff\1\u00c9\30\uffff\1\u00cb\3\uffff\1\u00ca"+
            "\1\u00cc\2\uffff\1\u00cd",
            "\1\u00d3\u0094\uffff\1\u00d0\3\uffff\1\u00cf\1\u00d1\2\uffff"+
            "\1\u00d2",
            "\1\u00d7\3\uffff\1\u00d8\1\u00d5\16\uffff\1\u00d4\45\uffff"+
            "\1\u00d6",
            "\1\u00de\3\uffff\1\u00df\1\u00dc\16\uffff\1\u00db\45\uffff"+
            "\1\u00dd\10\uffff\1\u00da\16\uffff\1\u00d9\1\u00e0",
            "\1\u00e5\3\uffff\1\u00e6\1\u00e3\16\uffff\1\u00e2\45\uffff"+
            "\1\u00e4\27\uffff\1\u00e1\3\uffff\1\u00e7",
            "\1\2\1\uffff\2\2\1\u00eb\1\uffff\1\2\1\uffff\1\u00ec\1\u00e9"+
            "\1\uffff\3\2\1\uffff\6\2\3\uffff\1\u00e8\1\2\1\uffff\6\2\1\uffff"+
            "\2\2\32\uffff\1\u00ea\2\uffff\1\2\43\uffff\1\2\1\uffff\1\2",
            "\1\u00f9\173\uffff\1\u00f4\30\uffff\1\u00f6\3\uffff\1\u00f5"+
            "\1\u00f7\2\uffff\1\u00f8",
            "\1\u00ff\173\uffff\1\u00fa\30\uffff\1\u00fc\3\uffff\1\u00fb"+
            "\1\u00fd\2\uffff\1\u00fe",
            "\1\u0105\173\uffff\1\u0100\30\uffff\1\u0102\3\uffff\1\u0101"+
            "\1\u0103\2\uffff\1\u0104",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\u0108\24\uffff\1\2\23\uffff\1\2\30\uffff\1"+
            "\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2"+
            "\2\7\uffff\1\u0107\13\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\14\uffff\1\2\2\uffff\1\u0106\13"+
            "\uffff\1\2\12\uffff\1\2",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\u011d\1\uffff\1\2\1\uffff\1\u011e\1\u011c\2\uffff\1"+
            "\2\2\uffff\2\2\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\1\u011b\2\uffff\2\2\4\uffff\1\u011a\7\uffff"+
            "\1\2\16\uffff\1\2\12\uffff\1\2",
            "\1\2\35\uffff\1\u012e\24\uffff\1\u0137\23\uffff\1\2\30\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\u012f\2\2\14\uffff\1\2\16\uffff\1\2\12\uffff"+
            "\1\2",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\u0141\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\2\2\14\uffff\1\2\16\uffff\1\2\12\uffff\1\2",
            "\1\u015e\5\uffff\1\2\27\uffff\1\u015a\21\uffff\1\2\2\uffff"+
            "\1\u015f\16\uffff\1\2\4\uffff\1\u015c\31\uffff\1\2\1\uffff\2"+
            "\2\1\u0159\1\uffff\1\u0162\1\uffff\1\2\1\u015b\1\uffff\1\2\1"+
            "\u0154\3\2\1\u0154\4\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\1"+
            "\u015d\10\2\4\uffff\1\u0158\2\uffff\1\u0157\6\2\1\u0160\1\uffff"+
            "\1\u0160\1\u0161\2\2\1\u0155\1\u0156\14\2\1\u0160\4\2\1\uffff"+
            "\11\2\1\u0160\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "522:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_1 = input.LA(1);

                         
                        int index67_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_1==181) && (synpred12_Objc())) {s = 15;}

                        else if ( (LA67_1==195) && (synpred12_Objc())) {s = 16;}

                        else if ( (LA67_1==119) ) {s = 17;}

                        else if ( (LA67_1==180) && (synpred12_Objc())) {s = 18;}

                        else if ( (LA67_1==211) && (synpred12_Objc())) {s = 19;}

                        else if ( (LA67_1==184) && (synpred12_Objc())) {s = 20;}

                        else if ( (LA67_1==210) && (synpred12_Objc())) {s = 21;}

                        else if ( (LA67_1==198) && (synpred12_Objc())) {s = 22;}

                        else if ( (LA67_1==201) && (synpred12_Objc())) {s = 23;}

                        else if ( (LA67_1==170) && (synpred12_Objc())) {s = 24;}

                        else if ( (LA67_1==199) && (synpred12_Objc())) {s = 25;}

                        else if ( (LA67_1==200) && (synpred12_Objc())) {s = 26;}

                        else if ( (LA67_1==203) && (synpred12_Objc())) {s = 27;}

                        else if ( (LA67_1==ID) ) {s = 28;}

                        else if ( (LA67_1==205) && (synpred12_Objc())) {s = 29;}

                        else if ( (LA67_1==209) && (synpred12_Objc())) {s = 30;}

                        else if ( (LA67_1==189) && (synpred12_Objc())) {s = 31;}

                        else if ( (LA67_1==CHAR_LITERAL||LA67_1==NUMBER_LITERAL||LA67_1==STRING_LITERAL||LA67_1==112||LA67_1==117||LA67_1==122||LA67_1==125||(LA67_1 >= 128 && LA67_1 <= 129)||LA67_1==149||LA67_1==162||LA67_1==165||LA67_1==172||(LA67_1 >= 174 && LA67_1 <= 175)||(LA67_1 >= 178 && LA67_1 <= 179)||LA67_1==192||LA67_1==207||LA67_1==218) ) {s = 2;}

                         
                        input.seek(index67_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA67_48 = input.LA(1);

                         
                        int index67_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_48==180) && (synpred12_Objc())) {s = 93;}

                        else if ( (LA67_48==211) && (synpred12_Objc())) {s = 94;}

                        else if ( (LA67_48==184) && (synpred12_Objc())) {s = 95;}

                        else if ( (LA67_48==210) && (synpred12_Objc())) {s = 96;}

                        else if ( (LA67_48==198) && (synpred12_Objc())) {s = 97;}

                        else if ( (LA67_48==181) && (synpred12_Objc())) {s = 98;}

                        else if ( (LA67_48==201) && (synpred12_Objc())) {s = 99;}

                        else if ( (LA67_48==170) && (synpred12_Objc())) {s = 100;}

                        else if ( (LA67_48==199) && (synpred12_Objc())) {s = 101;}

                        else if ( (LA67_48==195) && (synpred12_Objc())) {s = 102;}

                        else if ( (LA67_48==200) && (synpred12_Objc())) {s = 103;}

                        else if ( (LA67_48==203) && (synpred12_Objc())) {s = 104;}

                        else if ( (LA67_48==ID) ) {s = 105;}

                         
                        input.seek(index67_48);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA67_81 = input.LA(1);

                         
                        int index67_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_81==195) && (synpred12_Objc())) {s = 262;}

                        else if ( (LA67_81==137) && (synpred12_Objc())) {s = 263;}

                        else if ( (LA67_81==ID) ) {s = 264;}

                        else if ( (LA67_81==CHAR_LITERAL||LA67_81==NUMBER_LITERAL||LA67_81==STRING_LITERAL||LA67_81==112||LA67_81==117||LA67_81==119||LA67_81==122||LA67_81==125||(LA67_81 >= 128 && LA67_81 <= 129)||LA67_81==149||LA67_81==162||LA67_81==165||LA67_81==172||(LA67_81 >= 174 && LA67_81 <= 175)||(LA67_81 >= 178 && LA67_81 <= 179)||LA67_81==192||LA67_81==207||LA67_81==218) ) {s = 2;}

                         
                        input.seek(index67_81);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA67_82 = input.LA(1);

                         
                        int index67_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_82==184) && (synpred12_Objc())) {s = 282;}

                        else if ( (LA67_82==175) ) {s = 283;}

                        else if ( (LA67_82==122) ) {s = 284;}

                        else if ( (LA67_82==117) ) {s = 285;}

                        else if ( (LA67_82==121) && (synpred12_Objc())) {s = 286;}

                        else if ( (LA67_82==CHAR_LITERAL||LA67_82==ID||LA67_82==NUMBER_LITERAL||LA67_82==STRING_LITERAL||LA67_82==112||LA67_82==119||LA67_82==125||(LA67_82 >= 128 && LA67_82 <= 129)||LA67_82==149||LA67_82==162||LA67_82==165||LA67_82==172||LA67_82==174||(LA67_82 >= 178 && LA67_82 <= 179)||LA67_82==192||LA67_82==207||LA67_82==218) ) {s = 2;}

                         
                        input.seek(index67_82);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA67_83 = input.LA(1);

                         
                        int index67_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_83==ID) ) {s = 302;}

                        else if ( (LA67_83==177) && (synpred12_Objc())) {s = 303;}

                        else if ( (LA67_83==CHAR_LITERAL||LA67_83==STRING_LITERAL||LA67_83==112||LA67_83==117||LA67_83==119||LA67_83==122||LA67_83==125||(LA67_83 >= 128 && LA67_83 <= 129)||LA67_83==149||LA67_83==162||LA67_83==165||LA67_83==172||(LA67_83 >= 174 && LA67_83 <= 175)||(LA67_83 >= 178 && LA67_83 <= 179)||LA67_83==192||LA67_83==207||LA67_83==218) ) {s = 2;}

                        else if ( (LA67_83==NUMBER_LITERAL) ) {s = 311;}

                         
                        input.seek(index67_83);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA67_84 = input.LA(1);

                         
                        int index67_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_84==121) && (synpred12_Objc())) {s = 321;}

                        else if ( (LA67_84==CHAR_LITERAL||LA67_84==ID||LA67_84==NUMBER_LITERAL||LA67_84==STRING_LITERAL||LA67_84==112||LA67_84==117||LA67_84==119||LA67_84==122||LA67_84==125||(LA67_84 >= 128 && LA67_84 <= 129)||LA67_84==149||LA67_84==162||LA67_84==165||LA67_84==172||(LA67_84 >= 174 && LA67_84 <= 175)||(LA67_84 >= 178 && LA67_84 <= 179)||LA67_84==192||LA67_84==207||LA67_84==218) ) {s = 2;}

                         
                        input.seek(index67_84);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA67_85 = input.LA(1);

                         
                        int index67_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA67_85==125||LA67_85==129) ) {s = 340;}

                        else if ( (LA67_85==178) ) {s = 341;}

                        else if ( (LA67_85==179) && (synpred12_Objc())) {s = 342;}

                        else if ( (LA67_85==165) && (synpred12_Objc())) {s = 343;}

                        else if ( (LA67_85==162) ) {s = 344;}

                        else if ( (LA67_85==117) ) {s = 345;}

                        else if ( (LA67_85==ID) ) {s = 346;}

                        else if ( (LA67_85==122) ) {s = 347;}

                        else if ( (LA67_85==STRING_LITERAL) && (synpred12_Objc())) {s = 348;}

                        else if ( (LA67_85==149) && (synpred12_Objc())) {s = 349;}

                        else if ( (LA67_85==CHAR_LITERAL) && (synpred12_Objc())) {s = 350;}

                        else if ( (LA67_85==NUMBER_LITERAL) && (synpred12_Objc())) {s = 351;}

                        else if ( (LA67_85==172||LA67_85==174||LA67_85==192||LA67_85==207) && (synpred12_Objc())) {s = 352;}

                        else if ( (LA67_85==175) ) {s = 353;}

                        else if ( (LA67_85==119) ) {s = 354;}

                        else if ( (LA67_85==EOF||LA67_85==DEFINE_LITERAL||LA67_85==MULTI_COMMENT_LIT||LA67_85==SINGLE_COMMENT_LIT||LA67_85==113||(LA67_85 >= 115 && LA67_85 <= 116)||LA67_85==121||LA67_85==124||(LA67_85 >= 126 && LA67_85 <= 128)||(LA67_85 >= 130 && LA67_85 <= 133)||(LA67_85 >= 135 && LA67_85 <= 138)||(LA67_85 >= 140 && LA67_85 <= 145)||(LA67_85 >= 147 && LA67_85 <= 148)||(LA67_85 >= 150 && LA67_85 <= 157)||(LA67_85 >= 166 && LA67_85 <= 171)||(LA67_85 >= 176 && LA67_85 <= 177)||(LA67_85 >= 180 && LA67_85 <= 191)||(LA67_85 >= 193 && LA67_85 <= 196)||(LA67_85 >= 198 && LA67_85 <= 206)||(LA67_85 >= 208 && LA67_85 <= 214)||(LA67_85 >= 216 && LA67_85 <= 217)) ) {s = 2;}

                         
                        input.seek(index67_85);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA67_105 = input.LA(1);

                         
                        int index67_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_105);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA67_106 = input.LA(1);

                         
                        int index67_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_106);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA67_107 = input.LA(1);

                         
                        int index67_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_107);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA67_108 = input.LA(1);

                         
                        int index67_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_108);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA67_109 = input.LA(1);

                         
                        int index67_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_109);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA67_110 = input.LA(1);

                         
                        int index67_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_110);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA67_111 = input.LA(1);

                         
                        int index67_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_111);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA67_112 = input.LA(1);

                         
                        int index67_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_112);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA67_113 = input.LA(1);

                         
                        int index67_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_113);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA67_114 = input.LA(1);

                         
                        int index67_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_114);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA67_115 = input.LA(1);

                         
                        int index67_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_115);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA67_116 = input.LA(1);

                         
                        int index67_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_116);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA67_117 = input.LA(1);

                         
                        int index67_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_117);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA67_118 = input.LA(1);

                         
                        int index67_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_118);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA67_151 = input.LA(1);

                         
                        int index67_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_151);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA67_152 = input.LA(1);

                         
                        int index67_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_152);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA67_153 = input.LA(1);

                         
                        int index67_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_153);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA67_154 = input.LA(1);

                         
                        int index67_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_154);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA67_155 = input.LA(1);

                         
                        int index67_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_155);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA67_156 = input.LA(1);

                         
                        int index67_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_156);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA67_157 = input.LA(1);

                         
                        int index67_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_157);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA67_158 = input.LA(1);

                         
                        int index67_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_158);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA67_159 = input.LA(1);

                         
                        int index67_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_159);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA67_160 = input.LA(1);

                         
                        int index67_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_160);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA67_161 = input.LA(1);

                         
                        int index67_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_161);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA67_162 = input.LA(1);

                         
                        int index67_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_162);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA67_163 = input.LA(1);

                         
                        int index67_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_163);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA67_164 = input.LA(1);

                         
                        int index67_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_164);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA67_165 = input.LA(1);

                         
                        int index67_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_165);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA67_166 = input.LA(1);

                         
                        int index67_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_166);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA67_167 = input.LA(1);

                         
                        int index67_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_167);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA67_168 = input.LA(1);

                         
                        int index67_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_168);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA67_169 = input.LA(1);

                         
                        int index67_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_169);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA67_170 = input.LA(1);

                         
                        int index67_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_170);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA67_171 = input.LA(1);

                         
                        int index67_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_171);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA67_172 = input.LA(1);

                         
                        int index67_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_172);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA67_173 = input.LA(1);

                         
                        int index67_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_173);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA67_174 = input.LA(1);

                         
                        int index67_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_174);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA67_175 = input.LA(1);

                         
                        int index67_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_175);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA67_176 = input.LA(1);

                         
                        int index67_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_176);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA67_177 = input.LA(1);

                         
                        int index67_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_177);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA67_178 = input.LA(1);

                         
                        int index67_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_178);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA67_179 = input.LA(1);

                         
                        int index67_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_179);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA67_180 = input.LA(1);

                         
                        int index67_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_180);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA67_181 = input.LA(1);

                         
                        int index67_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_181);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA67_182 = input.LA(1);

                         
                        int index67_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_182);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA67_183 = input.LA(1);

                         
                        int index67_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_183);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA67_184 = input.LA(1);

                         
                        int index67_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_184);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA67_185 = input.LA(1);

                         
                        int index67_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_185);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA67_186 = input.LA(1);

                         
                        int index67_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_186);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA67_187 = input.LA(1);

                         
                        int index67_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_187);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA67_188 = input.LA(1);

                         
                        int index67_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_188);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA67_189 = input.LA(1);

                         
                        int index67_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_189);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA67_190 = input.LA(1);

                         
                        int index67_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_190);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA67_191 = input.LA(1);

                         
                        int index67_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_191);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA67_192 = input.LA(1);

                         
                        int index67_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_192);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA67_193 = input.LA(1);

                         
                        int index67_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_193);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA67_194 = input.LA(1);

                         
                        int index67_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_194);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA67_195 = input.LA(1);

                         
                        int index67_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_195);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA67_196 = input.LA(1);

                         
                        int index67_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_196);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA67_197 = input.LA(1);

                         
                        int index67_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_197);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA67_198 = input.LA(1);

                         
                        int index67_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_198);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA67_199 = input.LA(1);

                         
                        int index67_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_199);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA67_200 = input.LA(1);

                         
                        int index67_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_200);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA67_201 = input.LA(1);

                         
                        int index67_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_201);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA67_202 = input.LA(1);

                         
                        int index67_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_202);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA67_203 = input.LA(1);

                         
                        int index67_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_203);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA67_204 = input.LA(1);

                         
                        int index67_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_204);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA67_205 = input.LA(1);

                         
                        int index67_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_205);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA67_206 = input.LA(1);

                         
                        int index67_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_206);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA67_207 = input.LA(1);

                         
                        int index67_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_207);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA67_208 = input.LA(1);

                         
                        int index67_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_208);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA67_209 = input.LA(1);

                         
                        int index67_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_209);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA67_210 = input.LA(1);

                         
                        int index67_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_210);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA67_211 = input.LA(1);

                         
                        int index67_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_211);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA67_212 = input.LA(1);

                         
                        int index67_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_212);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA67_213 = input.LA(1);

                         
                        int index67_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_213);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA67_214 = input.LA(1);

                         
                        int index67_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_214);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA67_215 = input.LA(1);

                         
                        int index67_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_215);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA67_216 = input.LA(1);

                         
                        int index67_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_216);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA67_217 = input.LA(1);

                         
                        int index67_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_217);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA67_218 = input.LA(1);

                         
                        int index67_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_218);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA67_219 = input.LA(1);

                         
                        int index67_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_219);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA67_220 = input.LA(1);

                         
                        int index67_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_220);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA67_221 = input.LA(1);

                         
                        int index67_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_221);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA67_222 = input.LA(1);

                         
                        int index67_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_222);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA67_223 = input.LA(1);

                         
                        int index67_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_223);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA67_224 = input.LA(1);

                         
                        int index67_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_224);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA67_225 = input.LA(1);

                         
                        int index67_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_225);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA67_226 = input.LA(1);

                         
                        int index67_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_226);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA67_227 = input.LA(1);

                         
                        int index67_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_227);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA67_228 = input.LA(1);

                         
                        int index67_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_228);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA67_229 = input.LA(1);

                         
                        int index67_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_229);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA67_230 = input.LA(1);

                         
                        int index67_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_230);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA67_231 = input.LA(1);

                         
                        int index67_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_231);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA67_232 = input.LA(1);

                         
                        int index67_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_232);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA67_233 = input.LA(1);

                         
                        int index67_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_233);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA67_234 = input.LA(1);

                         
                        int index67_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_234);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA67_235 = input.LA(1);

                         
                        int index67_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_235);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA67_236 = input.LA(1);

                         
                        int index67_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_236);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA67_244 = input.LA(1);

                         
                        int index67_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_244);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA67_245 = input.LA(1);

                         
                        int index67_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_245);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA67_246 = input.LA(1);

                         
                        int index67_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_246);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA67_247 = input.LA(1);

                         
                        int index67_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_247);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA67_248 = input.LA(1);

                         
                        int index67_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_248);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA67_249 = input.LA(1);

                         
                        int index67_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_249);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA67_250 = input.LA(1);

                         
                        int index67_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_250);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA67_251 = input.LA(1);

                         
                        int index67_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_251);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA67_252 = input.LA(1);

                         
                        int index67_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_252);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA67_253 = input.LA(1);

                         
                        int index67_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_253);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA67_254 = input.LA(1);

                         
                        int index67_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_254);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA67_255 = input.LA(1);

                         
                        int index67_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_255);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA67_256 = input.LA(1);

                         
                        int index67_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_256);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA67_257 = input.LA(1);

                         
                        int index67_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_257);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA67_258 = input.LA(1);

                         
                        int index67_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_258);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA67_259 = input.LA(1);

                         
                        int index67_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_259);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA67_260 = input.LA(1);

                         
                        int index67_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_260);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA67_261 = input.LA(1);

                         
                        int index67_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 416;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_261);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA67_264 = input.LA(1);

                         
                        int index67_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_264);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA67_283 = input.LA(1);

                         
                        int index67_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_283);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA67_284 = input.LA(1);

                         
                        int index67_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_284);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA67_285 = input.LA(1);

                         
                        int index67_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_285);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA67_302 = input.LA(1);

                         
                        int index67_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_302);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA67_311 = input.LA(1);

                         
                        int index67_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_311);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA67_340 = input.LA(1);

                         
                        int index67_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_340);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA67_341 = input.LA(1);

                         
                        int index67_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_341);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA67_344 = input.LA(1);

                         
                        int index67_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_344);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA67_345 = input.LA(1);

                         
                        int index67_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_345);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA67_346 = input.LA(1);

                         
                        int index67_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_346);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA67_347 = input.LA(1);

                         
                        int index67_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_347);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA67_353 = input.LA(1);

                         
                        int index67_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_353);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA67_354 = input.LA(1);

                         
                        int index67_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 352;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index67_354);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA66_eotS =
        "\104\uffff";
    static final String DFA66_eofS =
        "\1\1\103\uffff";
    static final String DFA66_minS =
        "\1\26\103\uffff";
    static final String DFA66_maxS =
        "\1\u00d9\103\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA66_specialS =
        "\104\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\3\1\1\uffff"+
            "\2\103\1\1\1\uffff\4\1\1\uffff\6\1\1\uffff\2\1\1\uffff\10\1"+
            "\4\uffff\1\1\3\uffff\6\1\3\uffff\4\1\1\uffff\14\1\1\uffff\4"+
            "\1\1\uffff\11\1\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()+ loopback of 524:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA69_eotS =
        "\u00a7\uffff";
    static final String DFA69_eofS =
        "\1\uffff\1\3\u00a5\uffff";
    static final String DFA69_minS =
        "\1\56\1\26\1\20\102\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\45"+
        "\uffff\23\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff";
    static final String DFA69_maxS =
        "\1\56\1\u00d9\1\u00da\102\uffff\1\u00d3\3\uffff\1\u00da\4\uffff"+
        "\1\56\1\u00d8\45\uffff\23\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0"+
        "\1\uffff";
    static final String DFA69_acceptS =
        "\3\uffff\1\2\102\uffff\3\1\1\uffff\4\1\2\uffff\12\1\56\uffff\17"+
        "\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1\1";
    static final String DFA69_specialS =
        "\2\uffff\1\0\106\uffff\1\1\5\uffff\1\2\45\uffff\1\3\1\4\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\1\25\17\uffff\1\26\1\27\4\uffff\1\30\5\uffff\1\31\1\32\1\33"+
        "\1\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\36\uffff\1\3\1"+
            "\uffff\3\3\1\uffff\1\2\1\uffff\2\3\1\uffff\2\3\1\uffff\3\3\1"+
            "\uffff\3\3\1\uffff\4\3\1\uffff\6\3\1\uffff\2\3\1\uffff\10\3"+
            "\4\uffff\1\3\3\uffff\6\3\3\uffff\4\3\1\uffff\14\3\1\uffff\4"+
            "\3\1\uffff\11\3\1\uffff\7\3\1\uffff\2\3",
            "\1\122\35\uffff\1\117\21\uffff\1\107\2\uffff\1\123\16\uffff"+
            "\1\106\4\uffff\1\120\30\uffff\1\126\4\uffff\1\116\1\uffff\1"+
            "\111\1\uffff\1\131\1\105\2\uffff\1\130\2\uffff\1\110\1\130\23"+
            "\uffff\1\121\14\uffff\1\115\2\uffff\1\114\4\uffff\1\3\1\uffff"+
            "\1\124\1\uffff\1\124\1\125\2\uffff\1\112\1\113\2\3\2\uffff\1"+
            "\3\4\uffff\1\3\2\uffff\1\124\2\uffff\1\3\2\uffff\4\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\1\124\1\uffff\3\3\6\uffff\1\127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\165\173\uffff\1\3\11\uffff\2\3\2\uffff\1\3\12\uffff\1\3"+
            "\2\uffff\4\3\1\uffff\1\3\6\uffff\2\3",
            "",
            "",
            "",
            "\1\u0090\35\uffff\1\u0084\24\uffff\1\u0091\23\uffff\1\u008e"+
            "\30\uffff\1\u0094\4\uffff\1\u008d\1\uffff\1\171\2\uffff\1\166"+
            "\2\uffff\1\u0096\2\uffff\1\u0088\1\u0096\23\uffff\1\u008f\14"+
            "\uffff\1\u008c\2\uffff\1\u008b\4\uffff\1\u0080\1\uffff\1\u0092"+
            "\1\uffff\1\u0092\1\u0093\2\uffff\1\u0089\1\u008a\1\172\1\167"+
            "\2\uffff\1\174\4\uffff\1\u0087\2\uffff\1\u0092\2\uffff\1\170"+
            "\2\uffff\1\176\1\u0081\1\u0082\1\177\1\uffff\1\u0083\1\uffff"+
            "\1\u0085\1\uffff\1\u0092\1\uffff\1\u0086\1\175\1\173\6\uffff"+
            "\1\u0095",
            "",
            "",
            "",
            "",
            "\1\u0097",
            "\1\u00a1\21\uffff\1\u00a0\36\uffff\1\u00a6\1\uffff\2\u00a6"+
            "\1\u00a5\1\uffff\1\u009a\1\uffff\1\u00a3\1\u00a4\1\uffff\1\u00a6"+
            "\1\u009c\1\u009b\1\u00a2\1\u00a6\1\u009c\1\u009b\2\u0099\1\u00a6"+
            "\3\uffff\1\u009d\1\u00a6\1\uffff\6\u00a6\1\uffff\1\u009f\1\u009e"+
            "\32\uffff\1\u0098\2\uffff\1\u00a6\43\uffff\1\u00a6\1\uffff\1"+
            "\u00a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "528:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA69_2==122) ) {s = 69;}

                        else if ( (LA69_2==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 70;}

                        else if ( (LA69_2==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 71;}

                        else if ( (LA69_2==128) && (synpred14_Objc())) {s = 72;}

                        else if ( (LA69_2==119) ) {s = 73;}

                        else if ( (LA69_2==178) && (synpred14_Objc())) {s = 74;}

                        else if ( (LA69_2==179) && (synpred14_Objc())) {s = 75;}

                        else if ( (LA69_2==165) && (synpred14_Objc())) {s = 76;}

                        else if ( (LA69_2==162) && (synpred14_Objc())) {s = 77;}

                        else if ( (LA69_2==117) ) {s = 78;}

                        else if ( (LA69_2==ID) ) {s = 79;}

                        else if ( (LA69_2==STRING_LITERAL) && (synpred14_Objc())) {s = 80;}

                        else if ( (LA69_2==149) && (synpred14_Objc())) {s = 81;}

                        else if ( (LA69_2==CHAR_LITERAL) && (synpred14_Objc())) {s = 82;}

                        else if ( (LA69_2==NUMBER_LITERAL) && (synpred14_Objc())) {s = 83;}

                        else if ( (LA69_2==172||LA69_2==174||LA69_2==192||LA69_2==207) && (synpred14_Objc())) {s = 84;}

                        else if ( (LA69_2==175) && (synpred14_Objc())) {s = 85;}

                        else if ( (LA69_2==112) && (synpred14_Objc())) {s = 86;}

                        else if ( (LA69_2==218) && (synpred14_Objc())) {s = 87;}

                        else if ( (LA69_2==125||LA69_2==129) && (synpred14_Objc())) {s = 88;}

                        else if ( (LA69_2==121) && (synpred14_Objc())) {s = 89;}

                        else if ( (LA69_2==170||(LA69_2 >= 180 && LA69_2 <= 181)||LA69_2==184||LA69_2==189||LA69_2==195||(LA69_2 >= 198 && LA69_2 <= 201)||LA69_2==203||LA69_2==205||(LA69_2 >= 209 && LA69_2 <= 211)) ) {s = 3;}

                         
                        input.seek(index69_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_73 = input.LA(1);

                         
                        int index69_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA69_73==122) ) {s = 118;}

                        else if ( (LA69_73==181) ) {s = 119;}

                        else if ( (LA69_73==195) ) {s = 120;}

                        else if ( (LA69_73==119) ) {s = 121;}

                        else if ( (LA69_73==180) ) {s = 122;}

                        else if ( (LA69_73==211) ) {s = 123;}

                        else if ( (LA69_73==184) ) {s = 124;}

                        else if ( (LA69_73==210) ) {s = 125;}

                        else if ( (LA69_73==198) ) {s = 126;}

                        else if ( (LA69_73==201) ) {s = 127;}

                        else if ( (LA69_73==170) ) {s = 128;}

                        else if ( (LA69_73==199) ) {s = 129;}

                        else if ( (LA69_73==200) ) {s = 130;}

                        else if ( (LA69_73==203) ) {s = 131;}

                        else if ( (LA69_73==ID) ) {s = 132;}

                        else if ( (LA69_73==205) ) {s = 133;}

                        else if ( (LA69_73==209) ) {s = 134;}

                        else if ( (LA69_73==189) ) {s = 135;}

                        else if ( (LA69_73==128) && (synpred14_Objc())) {s = 136;}

                        else if ( (LA69_73==178) && (synpred14_Objc())) {s = 137;}

                        else if ( (LA69_73==179) && (synpred14_Objc())) {s = 138;}

                        else if ( (LA69_73==165) && (synpred14_Objc())) {s = 139;}

                        else if ( (LA69_73==162) && (synpred14_Objc())) {s = 140;}

                        else if ( (LA69_73==117) && (synpred14_Objc())) {s = 141;}

                        else if ( (LA69_73==STRING_LITERAL) && (synpred14_Objc())) {s = 142;}

                        else if ( (LA69_73==149) && (synpred14_Objc())) {s = 143;}

                        else if ( (LA69_73==CHAR_LITERAL) && (synpred14_Objc())) {s = 144;}

                        else if ( (LA69_73==NUMBER_LITERAL) && (synpred14_Objc())) {s = 145;}

                        else if ( (LA69_73==172||LA69_73==174||LA69_73==192||LA69_73==207) && (synpred14_Objc())) {s = 146;}

                        else if ( (LA69_73==175) && (synpred14_Objc())) {s = 147;}

                        else if ( (LA69_73==112) && (synpred14_Objc())) {s = 148;}

                        else if ( (LA69_73==218) && (synpred14_Objc())) {s = 149;}

                        else if ( (LA69_73==125||LA69_73==129) && (synpred14_Objc())) {s = 150;}

                         
                        input.seek(index69_73);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA69_79 = input.LA(1);

                         
                        int index69_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA69_79==175) ) {s = 152;}

                        else if ( ((LA69_79 >= 131 && LA69_79 <= 132)) && (synpred14_Objc())) {s = 153;}

                        else if ( (LA69_79==119) && (synpred14_Objc())) {s = 154;}

                        else if ( (LA69_79==126||LA69_79==130) && (synpred14_Objc())) {s = 155;}

                        else if ( (LA69_79==125||LA69_79==129) && (synpred14_Objc())) {s = 156;}

                        else if ( (LA69_79==137) ) {s = 157;}

                        else if ( (LA69_79==148) && (synpred14_Objc())) {s = 158;}

                        else if ( (LA69_79==147) && (synpred14_Objc())) {s = 159;}

                        else if ( (LA69_79==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 160;}

                        else if ( (LA69_79==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 161;}

                        else if ( (LA69_79==127) && (synpred14_Objc())) {s = 162;}

                        else if ( (LA69_79==121) ) {s = 163;}

                        else if ( (LA69_79==122) ) {s = 164;}

                        else if ( (LA69_79==117) ) {s = 165;}

                        else if ( (LA69_79==113||(LA69_79 >= 115 && LA69_79 <= 116)||LA69_79==124||LA69_79==128||LA69_79==133||LA69_79==138||(LA69_79 >= 140 && LA69_79 <= 145)||LA69_79==178||LA69_79==214||LA69_79==216) && (synpred14_Objc())) {s = 166;}

                         
                        input.seek(index69_79);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA69_117 = input.LA(1);

                         
                        int index69_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_117);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA69_118 = input.LA(1);

                         
                        int index69_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_118);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA69_119 = input.LA(1);

                         
                        int index69_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_119);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA69_120 = input.LA(1);

                         
                        int index69_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_120);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA69_121 = input.LA(1);

                         
                        int index69_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_121);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA69_122 = input.LA(1);

                         
                        int index69_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_122);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA69_123 = input.LA(1);

                         
                        int index69_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_123);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA69_124 = input.LA(1);

                         
                        int index69_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_124);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA69_125 = input.LA(1);

                         
                        int index69_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_125);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA69_126 = input.LA(1);

                         
                        int index69_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_126);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA69_127 = input.LA(1);

                         
                        int index69_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_127);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA69_128 = input.LA(1);

                         
                        int index69_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_128);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA69_129 = input.LA(1);

                         
                        int index69_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_129);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA69_130 = input.LA(1);

                         
                        int index69_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_130);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA69_131 = input.LA(1);

                         
                        int index69_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_131);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA69_132 = input.LA(1);

                         
                        int index69_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_132);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA69_133 = input.LA(1);

                         
                        int index69_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_133);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA69_134 = input.LA(1);

                         
                        int index69_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_134);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA69_135 = input.LA(1);

                         
                        int index69_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_135);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA69_151 = input.LA(1);

                         
                        int index69_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_151);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA69_152 = input.LA(1);

                         
                        int index69_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_152);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA69_157 = input.LA(1);

                         
                        int index69_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_157);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA69_163 = input.LA(1);

                         
                        int index69_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_163);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA69_164 = input.LA(1);

                         
                        int index69_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_164);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA69_165 = input.LA(1);

                         
                        int index69_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 166;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_165);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA77_eotS =
        "\u06ee\uffff";
    static final String DFA77_eofS =
        "\2\uffff\1\11\1\uffff\1\11\1\uffff\3\11\2\uffff\1\11\104\uffff\1"+
        "\11\104\uffff\1\11\u0122\uffff\1\11\157\uffff\1\11\157\uffff\1\11"+
        "\53\uffff\1\11\53\uffff\1\11\u03fd\uffff";
    static final String DFA77_minS =
        "\1\20\1\56\1\26\1\56\1\26\1\127\3\26\2\uffff\1\26\3\20\101\uffff"+
        "\1\26\2\20\102\uffff\1\26\2\20\102\uffff\2\20\102\uffff\2\20\102"+
        "\uffff\3\20\101\uffff\2\20\2\56\2\167\4\56\1\127\3\56\4\20\1\26"+
        "\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\31\uffff\2\20\102"+
        "\uffff\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\31\uffff"+
        "\2\20\102\uffff\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100"+
        "\31\uffff\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\31\uffff"+
        "\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\31\uffff\23\0"+
        "\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\31\uffff\117\0\1\uffff\11\0"+
        "\1\uffff\11\0\1\uffff\10\0\1\uffff\10\0\1\uffff\76\0\116\uffff\23"+
        "\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\1\0\7\uffff\1\0"+
        "\3\uffff\1\0\4\uffff\2\0\31\uffff\2\0\116\uffff\23\0\17\uffff\2"+
        "\0\4\uffff\1\0\5\uffff\3\0\1\uffff\1\0\7\uffff\1\0\3\uffff\1\0\4"+
        "\uffff\2\0\31\uffff\2\0\116\uffff\23\0\17\uffff\2\0\4\uffff\1\0"+
        "\5\uffff\3\0\1\uffff\2\0\116\uffff\23\0\17\uffff\2\0\4\uffff\1\0"+
        "\5\uffff\3\0\1\uffff\2\0\116\uffff\23\0\17\uffff\2\0\4\uffff\1\0"+
        "\5\uffff\3\0\1\uffff";
    static final String DFA77_maxS =
        "\1\u00cf\1\56\1\u00d9\1\56\1\u00d9\1\127\3\u00d9\2\uffff\1\u00d9"+
        "\1\u00da\1\u00cf\1\u00da\101\uffff\1\u00d9\1\u00cf\1\u00da\102\uffff"+
        "\1\u00d9\1\u00cf\1\u00da\102\uffff\1\u00cf\1\u00da\102\uffff\1\u00cf"+
        "\1\u00da\102\uffff\1\u00da\1\u00cf\1\u00da\101\uffff\1\u00cf\1\u00da"+
        "\1\u00d5\1\u00d3\2\167\1\56\1\u00d8\1\56\1\u00d8\1\127\3\u00d8\1"+
        "\u00da\3\u00cf\1\u00d9\7\uffff\1\u00d3\3\uffff\1\u00da\4\uffff\1"+
        "\56\1\u00d8\31\uffff\1\u00cf\1\u00da\102\uffff\1\u00d9\7\uffff\1"+
        "\u00d3\3\uffff\1\u00da\4\uffff\1\56\1\u00d8\31\uffff\1\u00cf\1\u00da"+
        "\102\uffff\1\u00d9\7\uffff\1\u00d3\3\uffff\1\u00da\4\uffff\1\56"+
        "\1\u00d8\31\uffff\1\u00d9\7\uffff\1\u00d3\3\uffff\1\u00da\4\uffff"+
        "\1\56\1\u00d8\31\uffff\1\u00d9\7\uffff\1\u00d3\3\uffff\1\u00da\4"+
        "\uffff\1\56\1\u00d8\31\uffff\23\0\7\uffff\1\0\3\uffff\1\0\4\uffff"+
        "\2\0\31\uffff\117\0\1\uffff\11\0\1\uffff\11\0\1\uffff\10\0\1\uffff"+
        "\10\0\1\uffff\76\0\116\uffff\23\0\17\uffff\2\0\4\uffff\1\0\5\uffff"+
        "\3\0\1\uffff\1\0\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\31\uffff\2"+
        "\0\116\uffff\23\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\1"+
        "\0\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\31\uffff\2\0\116\uffff\23"+
        "\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0\116\uffff\23"+
        "\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0\116\uffff\23"+
        "\0\17\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff";
    static final String DFA77_acceptS =
        "\11\uffff\1\2\u01b7\uffff\3\1\1\uffff\4\1\2\uffff\12\1\134\uffff"+
        "\3\1\1\uffff\4\1\2\uffff\12\1\134\uffff\3\1\1\uffff\4\1\2\uffff"+
        "\12\1\30\uffff\3\1\1\uffff\4\1\2\uffff\12\1\30\uffff\3\1\1\uffff"+
        "\4\1\2\uffff\12\1\52\uffff\3\1\1\uffff\4\1\2\uffff\12\1\u0124\uffff"+
        "\17\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1\1\11\uffff\3\1\1\uffff\4"+
        "\1\2\uffff\12\1\162\uffff\17\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1"+
        "\1\11\uffff\3\1\1\uffff\4\1\2\uffff\12\1\162\uffff\17\1\2\uffff"+
        "\4\1\1\uffff\5\1\3\uffff\1\1\143\uffff\17\1\2\uffff\4\1\1\uffff"+
        "\5\1\3\uffff\1\1\143\uffff\17\1\2\uffff\4\1\1\uffff\5\1\3\uffff"+
        "\1\1";
    static final String DFA77_specialS =
        "\16\uffff\1\0\103\uffff\1\1\104\uffff\1\2\103\uffff\1\3\103\uffff"+
        "\1\4\104\uffff\1\5\137\uffff\1\6\5\uffff\1\7\32\uffff\1\10\116\uffff"+
        "\1\11\5\uffff\1\12\32\uffff\1\13\116\uffff\1\14\5\uffff\1\15\45"+
        "\uffff\1\16\5\uffff\1\17\45\uffff\1\20\5\uffff\1\21\31\uffff\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
        "\1\40\1\41\1\42\1\43\1\44\7\uffff\1\45\3\uffff\1\46\4\uffff\1\47"+
        "\1\50\31\uffff\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\uffff\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1"+
        "\u0080\1\uffff\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1"+
        "\u0087\1\u0088\1\u0089\1\uffff\1\u008a\1\u008b\1\u008c\1\u008d\1"+
        "\u008e\1\u008f\1\u0090\1\u0091\1\uffff\1\u0092\1\u0093\1\u0094\1"+
        "\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\uffff\1\u009a\1\u009b\1"+
        "\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1"+
        "\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1"+
        "\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1"+
        "\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1"+
        "\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1"+
        "\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1"+
        "\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1"+
        "\u00d4\1\u00d5\1\u00d6\1\u00d7\116\uffff\1\u00d8\1\u00d9\1\u00da"+
        "\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2"+
        "\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea"+
        "\17\uffff\1\u00eb\1\u00ec\4\uffff\1\u00ed\5\uffff\1\u00ee\1\u00ef"+
        "\1\u00f0\1\uffff\1\u00f1\7\uffff\1\u00f2\3\uffff\1\u00f3\4\uffff"+
        "\1\u00f4\1\u00f5\31\uffff\1\u00f6\1\u00f7\116\uffff\1\u00f8\1\u00f9"+
        "\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1\u0100\1\u0101"+
        "\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107\1\u0108\1\u0109"+
        "\1\u010a\17\uffff\1\u010b\1\u010c\4\uffff\1\u010d\5\uffff\1\u010e"+
        "\1\u010f\1\u0110\1\uffff\1\u0111\7\uffff\1\u0112\3\uffff\1\u0113"+
        "\4\uffff\1\u0114\1\u0115\31\uffff\1\u0116\1\u0117\116\uffff\1\u0118"+
        "\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120"+
        "\1\u0121\1\u0122\1\u0123\1\u0124\1\u0125\1\u0126\1\u0127\1\u0128"+
        "\1\u0129\1\u012a\17\uffff\1\u012b\1\u012c\4\uffff\1\u012d\5\uffff"+
        "\1\u012e\1\u012f\1\u0130\1\uffff\1\u0131\1\u0132\116\uffff\1\u0133"+
        "\1\u0134\1\u0135\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b"+
        "\1\u013c\1\u013d\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143"+
        "\1\u0144\1\u0145\17\uffff\1\u0146\1\u0147\4\uffff\1\u0148\5\uffff"+
        "\1\u0149\1\u014a\1\u014b\1\uffff\1\u014c\1\u014d\116\uffff\1\u014e"+
        "\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u0155\1\u0156"+
        "\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b\1\u015c\1\u015d\1\u015e"+
        "\1\u015f\1\u0160\17\uffff\1\u0161\1\u0162\4\uffff\1\u0163\5\uffff"+
        "\1\u0164\1\u0165\1\u0166\1\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\35\uffff\1\1\1\uffff"+
            "\1\11\2\uffff\1\3\32\uffff\1\5\26\uffff\1\10\1\uffff\1\10\1"+
            "\11\20\uffff\1\10\16\uffff\1\10",
            "\1\13",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\16\1\uffff\2\11\1\uffff\7\11\2\15"+
            "\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10\11\4"+
            "\uffff\1\11\3\uffff\6\11\3\uffff\1\14\3\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\120",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\122\1\uffff\2\11\1\uffff\7\11\2\121"+
            "\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10\11\4"+
            "\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\u0095",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0097\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0096\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u00db\1\uffff\2\11\1\uffff\7\11\2"+
            "\u00da\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u011f\1\uffff\2\11\1\uffff\7\11\2"+
            "\u011e\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0164\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0163\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\1\u0162\3\11\1\uffff\14"+
            "\11\1\uffff\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\u01b1\35\uffff\1\u01ad\24\uffff\1\u01b2\23\uffff\1\u01af"+
            "\30\uffff\1\u01b5\4\uffff\1\u01ac\1\uffff\1\u01a7\2\uffff\1"+
            "\u01ae\2\uffff\1\u01b7\2\uffff\1\u01a6\1\u01b7\23\uffff\1\u01b0"+
            "\14\uffff\1\u01ab\2\uffff\1\u01aa\6\uffff\1\u01b3\1\uffff\1"+
            "\u01b3\1\u01b4\2\uffff\1\u01a8\1\u01a9\14\uffff\1\u01b3\16\uffff"+
            "\1\u01b3\12\uffff\1\u01b6",
            "\1\11\35\uffff\1\u01b8\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u01cd\35\uffff\1\u01ca\21\uffff\1\u01c2\2\uffff\1\u01ce"+
            "\16\uffff\1\u01c1\4\uffff\1\u01cb\30\uffff\1\u01d1\4\uffff\1"+
            "\u01c9\1\uffff\1\u01c4\1\uffff\1\u01d4\1\u01c0\2\uffff\1\u01d3"+
            "\2\uffff\1\u01c3\1\u01d3\23\uffff\1\u01cc\14\uffff\1\u01c8\2"+
            "\uffff\1\u01c7\4\uffff\1\11\1\uffff\1\u01cf\1\uffff\1\u01cf"+
            "\1\u01d0\2\uffff\1\u01c5\1\u01c6\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u01cf\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u01cf\1\uffff\3\11\6\uffff\1\u01d2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u01e5\1\uffff\2\11\1\uffff\7\11\2"+
            "\u01e4\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\35\uffff\1\u0228\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u023d\35\uffff\1\u023a\21\uffff\1\u0232\2\uffff\1\u023e"+
            "\16\uffff\1\u0231\4\uffff\1\u023b\30\uffff\1\u0241\4\uffff\1"+
            "\u0239\1\uffff\1\u0234\1\uffff\1\u0244\1\u0230\2\uffff\1\u0243"+
            "\2\uffff\1\u0233\1\u0243\23\uffff\1\u023c\14\uffff\1\u0238\2"+
            "\uffff\1\u0237\4\uffff\1\11\1\uffff\1\u023f\1\uffff\1\u023f"+
            "\1\u0240\2\uffff\1\u0235\1\u0236\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u023f\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u023f\1\uffff\3\11\6\uffff\1\u0242",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0255\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0254\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\35\uffff\1\u0298\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u02ad\35\uffff\1\u02aa\21\uffff\1\u02a2\2\uffff\1\u02ae"+
            "\16\uffff\1\u02a1\4\uffff\1\u02ab\30\uffff\1\u02b1\4\uffff\1"+
            "\u02a9\1\uffff\1\u02a4\1\uffff\1\u02b4\1\u02a0\2\uffff\1\u02b3"+
            "\2\uffff\1\u02a3\1\u02b3\23\uffff\1\u02ac\14\uffff\1\u02a8\2"+
            "\uffff\1\u02a7\4\uffff\1\11\1\uffff\1\u02af\1\uffff\1\u02af"+
            "\1\u02b0\2\uffff\1\u02a5\1\u02a6\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u02af\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u02af\1\uffff\3\11\6\uffff\1\u02b2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\35\uffff\1\u02c4\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u02d9\35\uffff\1\u02d6\21\uffff\1\u02ce\2\uffff\1\u02da"+
            "\16\uffff\1\u02cd\4\uffff\1\u02d7\30\uffff\1\u02dd\4\uffff\1"+
            "\u02d5\1\uffff\1\u02d0\1\uffff\1\u02e0\1\u02cc\2\uffff\1\u02df"+
            "\2\uffff\1\u02cf\1\u02df\23\uffff\1\u02d8\14\uffff\1\u02d4\2"+
            "\uffff\1\u02d3\4\uffff\1\11\1\uffff\1\u02db\1\uffff\1\u02db"+
            "\1\u02dc\2\uffff\1\u02d1\1\u02d2\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u02db\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u02db\1\uffff\3\11\6\uffff\1\u02de",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\35\uffff\1\u02f0\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u0305\35\uffff\1\u0302\21\uffff\1\u02fa\2\uffff\1\u0306"+
            "\16\uffff\1\u02f9\4\uffff\1\u0303\30\uffff\1\u0309\4\uffff\1"+
            "\u0301\1\uffff\1\u02fc\1\uffff\1\u030c\1\u02f8\2\uffff\1\u030b"+
            "\2\uffff\1\u02fb\1\u030b\23\uffff\1\u0304\14\uffff\1\u0300\2"+
            "\uffff\1\u02ff\4\uffff\1\11\1\uffff\1\u0307\1\uffff\1\u0307"+
            "\1\u0308\2\uffff\1\u02fd\1\u02fe\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u0307\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u0307\1\uffff\3\11\6\uffff\1\u030a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0327\35\uffff\1\u0323\24\uffff\1\u0328\23\uffff\1\u0325"+
            "\30\uffff\1\u032b\4\uffff\1\u0322\1\uffff\1\u031d\2\uffff\1"+
            "\u0324\2\uffff\1\u032d\2\uffff\1\u031c\1\u032d\23\uffff\1\u0326"+
            "\14\uffff\1\u0321\2\uffff\1\u0320\6\uffff\1\u0329\1\uffff\1"+
            "\u0329\1\u032a\2\uffff\1\u031e\1\u031f\14\uffff\1\u0329\16\uffff"+
            "\1\u0329\12\uffff\1\u032c",
            "\1\11\35\uffff\1\u032e\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u0343\35\uffff\1\u0340\21\uffff\1\u0338\2\uffff\1\u0344"+
            "\16\uffff\1\u0337\4\uffff\1\u0341\30\uffff\1\u0347\4\uffff\1"+
            "\u033f\1\uffff\1\u033a\1\uffff\1\u034a\1\u0336\2\uffff\1\u0349"+
            "\2\uffff\1\u0339\1\u0349\23\uffff\1\u0342\14\uffff\1\u033e\2"+
            "\uffff\1\u033d\4\uffff\1\11\1\uffff\1\u0345\1\uffff\1\u0345"+
            "\1\u0346\2\uffff\1\u033b\1\u033c\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u0345\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u0345\1\uffff\3\11\6\uffff\1\u0348",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0364\35\uffff\1\u0360\24\uffff\1\u0365\23\uffff\1\u0362"+
            "\35\uffff\1\u035f\1\uffff\1\u035a\2\uffff\1\u0361\32\uffff\1"+
            "\u0363\14\uffff\1\u035e\2\uffff\1\u035d\6\uffff\1\u0366\1\uffff"+
            "\1\u0366\1\u0367\2\uffff\1\u035b\1\u035c\14\uffff\1\u0366\16"+
            "\uffff\1\u0366",
            "\1\u0382\35\uffff\1\u0375\24\uffff\1\u0383\23\uffff\1\u0380"+
            "\30\uffff\1\u0386\4\uffff\1\u037e\1\uffff\1\u036a\2\uffff\1"+
            "\u037f\2\uffff\1\u0388\2\uffff\1\u0379\1\u0388\23\uffff\1\u0381"+
            "\14\uffff\1\u037d\2\uffff\1\u037c\4\uffff\1\u0371\1\uffff\1"+
            "\u0384\1\uffff\1\u0384\1\u0385\2\uffff\1\u037a\1\u037b\1\u036b"+
            "\1\u0368\2\uffff\1\u036d\4\uffff\1\u0378\2\uffff\1\u0384\2\uffff"+
            "\1\u0369\2\uffff\1\u036f\1\u0372\1\u0373\1\u0370\1\uffff\1\u0374"+
            "\1\uffff\1\u0376\1\uffff\1\u0384\1\uffff\1\u0377\1\u036e\1\u036c"+
            "\6\uffff\1\u0387",
            "\1\u038a\u00a6\uffff\1\u0389",
            "\1\u0398\110\uffff\1\u038d\1\uffff\1\u039c\60\uffff\1\u0394"+
            "\11\uffff\1\u038e\1\u038b\2\uffff\1\u0390\4\uffff\1\u039b\5"+
            "\uffff\1\u038c\2\uffff\1\u0392\1\u0395\1\u0396\1\u0393\1\uffff"+
            "\1\u0397\1\uffff\1\u0399\3\uffff\1\u039a\1\u0391\1\u038f",
            "\1\u039d",
            "\1\u039e",
            "\1\u039f",
            "\1\11\102\uffff\1\u03a5\1\uffff\3\u03a5\1\uffff\1\u03a2\2\uffff"+
            "\1\u03a5\1\uffff\1\u03a5\1\u03a4\1\u03a3\1\uffff\1\u03a5\1\u03a4"+
            "\1\u03a3\2\u03a1\1\u03a5\3\uffff\2\u03a5\1\uffff\6\u03a5\1\uffff"+
            "\1\u03a7\1\u03a6\32\uffff\1\u03a0\1\uffff\1\u03a8\1\u03a5\43"+
            "\uffff\1\u03a5\1\uffff\1\u03a5",
            "\1\u03aa",
            "\1\11\102\uffff\1\u03af\1\uffff\3\u03af\1\uffff\1\u03ac\2\uffff"+
            "\1\u03af\1\uffff\1\u03af\1\u03ae\1\u03ad\1\uffff\1\u03af\1\u03ae"+
            "\1\u03ad\2\u03ab\1\u03af\3\uffff\2\u03af\1\uffff\6\u03af\1\uffff"+
            "\1\u03b1\1\u03b0\34\uffff\1\u03b2\1\u03af\43\uffff\1\u03af\1"+
            "\uffff\1\u03af",
            "\1\u03b4",
            "\1\11\102\uffff\1\u03b9\1\uffff\3\u03b9\1\uffff\1\u03b6\2\uffff"+
            "\1\u03b9\1\uffff\1\u03b9\1\u03b8\1\u03b7\1\uffff\1\u03b9\1\u03b8"+
            "\1\u03b7\2\u03b5\1\u03b9\3\uffff\2\u03b9\1\uffff\6\u03b9\1\uffff"+
            "\1\u03bb\1\u03ba\34\uffff\1\u03bc\1\u03b9\43\uffff\1\u03b9\1"+
            "\uffff\1\u03b9",
            "\1\11\102\uffff\1\u03c2\1\uffff\3\u03c2\1\uffff\1\u03bf\2\uffff"+
            "\1\u03c2\1\uffff\1\u03c2\1\u03c1\1\u03c0\1\uffff\1\u03c2\1\u03c1"+
            "\1\u03c0\2\u03be\1\u03c2\3\uffff\2\u03c2\1\uffff\6\u03c2\1\uffff"+
            "\1\u03c4\1\u03c3\34\uffff\1\u03c5\1\u03c2\43\uffff\1\u03c2\1"+
            "\uffff\1\u03c2",
            "\1\11\102\uffff\1\u03cb\1\uffff\3\u03cb\1\uffff\1\u03c8\2\uffff"+
            "\1\u03cb\1\uffff\1\u03cb\1\u03ca\1\u03c9\1\uffff\1\u03cb\1\u03ca"+
            "\1\u03c9\2\u03c7\1\u03cb\3\uffff\2\u03cb\1\uffff\6\u03cb\1\uffff"+
            "\1\u03cd\1\u03cc\34\uffff\1\u03ce\1\u03cb\43\uffff\1\u03cb\1"+
            "\uffff\1\u03cb",
            "\1\u03db\35\uffff\1\u03d7\24\uffff\1\u03dc\23\uffff\1\u03d9"+
            "\30\uffff\1\u03df\4\uffff\1\u03d6\1\uffff\1\u03d1\2\uffff\1"+
            "\u03d8\2\uffff\1\u03e1\2\uffff\1\u03d0\1\u03e1\23\uffff\1\u03da"+
            "\14\uffff\1\u03d5\2\uffff\1\u03d4\6\uffff\1\u03dd\1\uffff\1"+
            "\u03dd\1\u03de\2\uffff\1\u03d2\1\u03d3\14\uffff\1\u03dd\16\uffff"+
            "\1\u03dd\12\uffff\1\u03e0",
            "\1\u03ec\35\uffff\1\u03e8\24\uffff\1\u03ed\23\uffff\1\u03ea"+
            "\35\uffff\1\u03e7\1\uffff\1\u03e2\2\uffff\1\u03e9\32\uffff\1"+
            "\u03eb\14\uffff\1\u03e6\2\uffff\1\u03e5\6\uffff\1\u03ee\1\uffff"+
            "\1\u03ee\1\u03ef\2\uffff\1\u03e3\1\u03e4\14\uffff\1\u03ee\16"+
            "\uffff\1\u03ee",
            "\1\u03fa\35\uffff\1\u03f6\24\uffff\1\u03fb\23\uffff\1\u03f8"+
            "\35\uffff\1\u03f5\1\uffff\1\u03f0\2\uffff\1\u03f7\32\uffff\1"+
            "\u03f9\14\uffff\1\u03f4\2\uffff\1\u03f3\6\uffff\1\u03fc\1\uffff"+
            "\1\u03fc\1\u03fd\2\uffff\1\u03f1\1\u03f2\14\uffff\1\u03fc\16"+
            "\uffff\1\u03fc",
            "\1\u0408\35\uffff\1\u0404\24\uffff\1\u0409\23\uffff\1\u0406"+
            "\35\uffff\1\u0403\1\uffff\1\u03fe\2\uffff\1\u0405\32\uffff\1"+
            "\u0407\14\uffff\1\u0402\2\uffff\1\u0401\6\uffff\1\u040a\1\uffff"+
            "\1\u040a\1\u040b\2\uffff\1\u03ff\1\u0400\14\uffff\1\u040a\16"+
            "\uffff\1\u040a",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u040c\1\uffff\2\11\1\uffff\7\11\2"+
            "\u040d\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u045c\173\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "\1\u0477\35\uffff\1\u046b\24\uffff\1\u0478\23\uffff\1\u0475"+
            "\30\uffff\1\u047b\4\uffff\1\u0474\1\uffff\1\u0460\2\uffff\1"+
            "\u045d\2\uffff\1\u047d\2\uffff\1\u046f\1\u047d\23\uffff\1\u0476"+
            "\14\uffff\1\u0473\2\uffff\1\u0472\4\uffff\1\u0467\1\uffff\1"+
            "\u0479\1\uffff\1\u0479\1\u047a\2\uffff\1\u0470\1\u0471\1\u0461"+
            "\1\u045e\2\uffff\1\u0463\4\uffff\1\u046e\2\uffff\1\u0479\2\uffff"+
            "\1\u045f\2\uffff\1\u0465\1\u0468\1\u0469\1\u0466\1\uffff\1\u046a"+
            "\1\uffff\1\u046c\1\uffff\1\u0479\1\uffff\1\u046d\1\u0464\1\u0462"+
            "\6\uffff\1\u047c",
            "",
            "",
            "",
            "",
            "\1\u047e",
            "\1\u0488\21\uffff\1\u0487\36\uffff\1\u048d\1\uffff\2\u048d"+
            "\1\u048c\1\uffff\1\u0481\1\uffff\1\u048a\1\u048b\1\uffff\1\u048d"+
            "\1\u0483\1\u0482\1\u0489\1\u048d\1\u0483\1\u0482\2\u0480\1\u048d"+
            "\3\uffff\1\u0484\1\u048d\1\uffff\6\u048d\1\uffff\1\u0486\1\u0485"+
            "\32\uffff\1\u047f\2\uffff\1\u048d\43\uffff\1\u048d\1\uffff\1"+
            "\u048d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\35\uffff\1\u048e\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u04a3\35\uffff\1\u04a0\21\uffff\1\u0498\2\uffff\1\u04a4"+
            "\16\uffff\1\u0497\4\uffff\1\u04a1\30\uffff\1\u04a7\4\uffff\1"+
            "\u049f\1\uffff\1\u049a\1\uffff\1\u04aa\1\u0496\2\uffff\1\u04a9"+
            "\2\uffff\1\u0499\1\u04a9\23\uffff\1\u04a2\14\uffff\1\u049e\2"+
            "\uffff\1\u049d\4\uffff\1\11\1\uffff\1\u04a5\1\uffff\1\u04a5"+
            "\1\u04a6\2\uffff\1\u049b\1\u049c\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u04a5\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u04a5\1\uffff\3\11\6\uffff\1\u04a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u04ba\1\uffff\2\11\1\uffff\7\11\2"+
            "\u04bb\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u050a\173\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "\1\u0525\35\uffff\1\u0519\24\uffff\1\u0526\23\uffff\1\u0523"+
            "\30\uffff\1\u0529\4\uffff\1\u0522\1\uffff\1\u050e\2\uffff\1"+
            "\u050b\2\uffff\1\u052b\2\uffff\1\u051d\1\u052b\23\uffff\1\u0524"+
            "\14\uffff\1\u0521\2\uffff\1\u0520\4\uffff\1\u0515\1\uffff\1"+
            "\u0527\1\uffff\1\u0527\1\u0528\2\uffff\1\u051e\1\u051f\1\u050f"+
            "\1\u050c\2\uffff\1\u0511\4\uffff\1\u051c\2\uffff\1\u0527\2\uffff"+
            "\1\u050d\2\uffff\1\u0513\1\u0516\1\u0517\1\u0514\1\uffff\1\u0518"+
            "\1\uffff\1\u051a\1\uffff\1\u0527\1\uffff\1\u051b\1\u0512\1\u0510"+
            "\6\uffff\1\u052a",
            "",
            "",
            "",
            "",
            "\1\u052c",
            "\1\u0536\21\uffff\1\u0535\36\uffff\1\u053b\1\uffff\2\u053b"+
            "\1\u053a\1\uffff\1\u052f\1\uffff\1\u0538\1\u0539\1\uffff\1\u053b"+
            "\1\u0531\1\u0530\1\u0537\1\u053b\1\u0531\1\u0530\2\u052e\1\u053b"+
            "\3\uffff\1\u0532\1\u053b\1\uffff\6\u053b\1\uffff\1\u0534\1\u0533"+
            "\32\uffff\1\u052d\2\uffff\1\u053b\43\uffff\1\u053b\1\uffff\1"+
            "\u053b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\35\uffff\1\u053c\24\uffff\1\11\23\uffff\1\11\35\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\26\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u0551\35\uffff\1\u054e\21\uffff\1\u0546\2\uffff\1\u0552"+
            "\16\uffff\1\u0545\4\uffff\1\u054f\30\uffff\1\u0555\4\uffff\1"+
            "\u054d\1\uffff\1\u0548\1\uffff\1\u0558\1\u0544\2\uffff\1\u0557"+
            "\2\uffff\1\u0547\1\u0557\23\uffff\1\u0550\14\uffff\1\u054c\2"+
            "\uffff\1\u054b\4\uffff\1\11\1\uffff\1\u0553\1\uffff\1\u0553"+
            "\1\u0554\2\uffff\1\u0549\1\u054a\2\11\2\uffff\1\11\4\uffff\1"+
            "\11\2\uffff\1\u0553\2\uffff\1\11\2\uffff\4\11\1\uffff\1\11\1"+
            "\uffff\1\11\1\uffff\1\u0553\1\uffff\3\11\6\uffff\1\u0556",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0568\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0569\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b8\173\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "\1\u05d3\35\uffff\1\u05c7\24\uffff\1\u05d4\23\uffff\1\u05d1"+
            "\30\uffff\1\u05d7\4\uffff\1\u05d0\1\uffff\1\u05bc\2\uffff\1"+
            "\u05b9\2\uffff\1\u05d9\2\uffff\1\u05cb\1\u05d9\23\uffff\1\u05d2"+
            "\14\uffff\1\u05cf\2\uffff\1\u05ce\4\uffff\1\u05c3\1\uffff\1"+
            "\u05d5\1\uffff\1\u05d5\1\u05d6\2\uffff\1\u05cc\1\u05cd\1\u05bd"+
            "\1\u05ba\2\uffff\1\u05bf\4\uffff\1\u05ca\2\uffff\1\u05d5\2\uffff"+
            "\1\u05bb\2\uffff\1\u05c1\1\u05c4\1\u05c5\1\u05c2\1\uffff\1\u05c6"+
            "\1\uffff\1\u05c8\1\uffff\1\u05d5\1\uffff\1\u05c9\1\u05c0\1\u05be"+
            "\6\uffff\1\u05d8",
            "",
            "",
            "",
            "",
            "\1\u05da",
            "\1\u05e4\21\uffff\1\u05e3\36\uffff\1\u05e9\1\uffff\2\u05e9"+
            "\1\u05e8\1\uffff\1\u05dd\1\uffff\1\u05e6\1\u05e7\1\uffff\1\u05e9"+
            "\1\u05df\1\u05de\1\u05e5\1\u05e9\1\u05df\1\u05de\2\u05dc\1\u05e9"+
            "\3\uffff\1\u05e0\1\u05e9\1\uffff\6\u05e9\1\uffff\1\u05e2\1\u05e1"+
            "\32\uffff\1\u05db\2\uffff\1\u05e9\43\uffff\1\u05e9\1\uffff\1"+
            "\u05e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u05ea\1\uffff\2\11\1\uffff\7\11\2"+
            "\u05eb\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u063a\173\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "\1\u0655\35\uffff\1\u0649\24\uffff\1\u0656\23\uffff\1\u0653"+
            "\30\uffff\1\u0659\4\uffff\1\u0652\1\uffff\1\u063e\2\uffff\1"+
            "\u063b\2\uffff\1\u065b\2\uffff\1\u064d\1\u065b\23\uffff\1\u0654"+
            "\14\uffff\1\u0651\2\uffff\1\u0650\4\uffff\1\u0645\1\uffff\1"+
            "\u0657\1\uffff\1\u0657\1\u0658\2\uffff\1\u064e\1\u064f\1\u063f"+
            "\1\u063c\2\uffff\1\u0641\4\uffff\1\u064c\2\uffff\1\u0657\2\uffff"+
            "\1\u063d\2\uffff\1\u0643\1\u0646\1\u0647\1\u0644\1\uffff\1\u0648"+
            "\1\uffff\1\u064a\1\uffff\1\u0657\1\uffff\1\u064b\1\u0642\1\u0640"+
            "\6\uffff\1\u065a",
            "",
            "",
            "",
            "",
            "\1\u065c",
            "\1\u0666\21\uffff\1\u0665\36\uffff\1\u066b\1\uffff\2\u066b"+
            "\1\u066a\1\uffff\1\u065f\1\uffff\1\u0668\1\u0669\1\uffff\1\u066b"+
            "\1\u0661\1\u0660\1\u0667\1\u066b\1\u0661\1\u0660\2\u065e\1\u066b"+
            "\3\uffff\1\u0662\1\u066b\1\uffff\6\u066b\1\uffff\1\u0664\1\u0663"+
            "\32\uffff\1\u065d\2\uffff\1\u066b\43\uffff\1\u066b\1\uffff\1"+
            "\u066b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\21\uffff\1\11\21\uffff\1\11\36\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u066c\1\uffff\2\11\1\uffff\7\11\2"+
            "\u066d\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\1\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\6\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06bc\173\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "\1\u06d7\35\uffff\1\u06cb\24\uffff\1\u06d8\23\uffff\1\u06d5"+
            "\30\uffff\1\u06db\4\uffff\1\u06d4\1\uffff\1\u06c0\2\uffff\1"+
            "\u06bd\2\uffff\1\u06dd\2\uffff\1\u06cf\1\u06dd\23\uffff\1\u06d6"+
            "\14\uffff\1\u06d3\2\uffff\1\u06d2\4\uffff\1\u06c7\1\uffff\1"+
            "\u06d9\1\uffff\1\u06d9\1\u06da\2\uffff\1\u06d0\1\u06d1\1\u06c1"+
            "\1\u06be\2\uffff\1\u06c3\4\uffff\1\u06ce\2\uffff\1\u06d9\2\uffff"+
            "\1\u06bf\2\uffff\1\u06c5\1\u06c8\1\u06c9\1\u06c6\1\uffff\1\u06ca"+
            "\1\uffff\1\u06cc\1\uffff\1\u06d9\1\uffff\1\u06cd\1\u06c4\1\u06c2"+
            "\6\uffff\1\u06dc",
            "",
            "",
            "",
            "",
            "\1\u06de",
            "\1\u06e8\21\uffff\1\u06e7\36\uffff\1\u06ed\1\uffff\2\u06ed"+
            "\1\u06ec\1\uffff\1\u06e1\1\uffff\1\u06ea\1\u06eb\1\uffff\1\u06ed"+
            "\1\u06e3\1\u06e2\1\u06e9\1\u06ed\1\u06e3\1\u06e2\2\u06e0\1\u06ed"+
            "\3\uffff\1\u06e4\1\u06ed\1\uffff\6\u06ed\1\uffff\1\u06e6\1\u06e5"+
            "\32\uffff\1\u06df\2\uffff\1\u06ed\43\uffff\1\u06ed\1\uffff\1"+
            "\u06ed",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "540:1: simple_expression_value_access2 : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_14 = input.LA(1);

                         
                        int index77_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_14==122) ) {s = 448;}

                        else if ( (LA77_14==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 449;}

                        else if ( (LA77_14==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 450;}

                        else if ( (LA77_14==128) && (synpred16_Objc())) {s = 451;}

                        else if ( (LA77_14==119) ) {s = 452;}

                        else if ( (LA77_14==178) && (synpred16_Objc())) {s = 453;}

                        else if ( (LA77_14==179) && (synpred16_Objc())) {s = 454;}

                        else if ( (LA77_14==165) && (synpred16_Objc())) {s = 455;}

                        else if ( (LA77_14==162) && (synpred16_Objc())) {s = 456;}

                        else if ( (LA77_14==117) ) {s = 457;}

                        else if ( (LA77_14==ID) ) {s = 458;}

                        else if ( (LA77_14==STRING_LITERAL) && (synpred16_Objc())) {s = 459;}

                        else if ( (LA77_14==149) && (synpred16_Objc())) {s = 460;}

                        else if ( (LA77_14==CHAR_LITERAL) && (synpred16_Objc())) {s = 461;}

                        else if ( (LA77_14==NUMBER_LITERAL) && (synpred16_Objc())) {s = 462;}

                        else if ( (LA77_14==172||LA77_14==174||LA77_14==192||LA77_14==207) && (synpred16_Objc())) {s = 463;}

                        else if ( (LA77_14==175) && (synpred16_Objc())) {s = 464;}

                        else if ( (LA77_14==112) && (synpred16_Objc())) {s = 465;}

                        else if ( (LA77_14==218) && (synpred16_Objc())) {s = 466;}

                        else if ( (LA77_14==125||LA77_14==129) && (synpred16_Objc())) {s = 467;}

                        else if ( (LA77_14==121) && (synpred16_Objc())) {s = 468;}

                        else if ( (LA77_14==170||(LA77_14 >= 180 && LA77_14 <= 181)||LA77_14==184||LA77_14==189||LA77_14==195||(LA77_14 >= 198 && LA77_14 <= 201)||LA77_14==203||LA77_14==205||(LA77_14 >= 209 && LA77_14 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_14);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_82 = input.LA(1);

                         
                        int index77_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_82==122) ) {s = 560;}

                        else if ( (LA77_82==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 561;}

                        else if ( (LA77_82==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 562;}

                        else if ( (LA77_82==128) && (synpred16_Objc())) {s = 563;}

                        else if ( (LA77_82==119) ) {s = 564;}

                        else if ( (LA77_82==178) && (synpred16_Objc())) {s = 565;}

                        else if ( (LA77_82==179) && (synpred16_Objc())) {s = 566;}

                        else if ( (LA77_82==165) && (synpred16_Objc())) {s = 567;}

                        else if ( (LA77_82==162) && (synpred16_Objc())) {s = 568;}

                        else if ( (LA77_82==117) ) {s = 569;}

                        else if ( (LA77_82==ID) ) {s = 570;}

                        else if ( (LA77_82==STRING_LITERAL) && (synpred16_Objc())) {s = 571;}

                        else if ( (LA77_82==149) && (synpred16_Objc())) {s = 572;}

                        else if ( (LA77_82==CHAR_LITERAL) && (synpred16_Objc())) {s = 573;}

                        else if ( (LA77_82==NUMBER_LITERAL) && (synpred16_Objc())) {s = 574;}

                        else if ( (LA77_82==172||LA77_82==174||LA77_82==192||LA77_82==207) && (synpred16_Objc())) {s = 575;}

                        else if ( (LA77_82==175) && (synpred16_Objc())) {s = 576;}

                        else if ( (LA77_82==112) && (synpred16_Objc())) {s = 577;}

                        else if ( (LA77_82==218) && (synpred16_Objc())) {s = 578;}

                        else if ( (LA77_82==125||LA77_82==129) && (synpred16_Objc())) {s = 579;}

                        else if ( (LA77_82==121) && (synpred16_Objc())) {s = 580;}

                        else if ( (LA77_82==170||(LA77_82 >= 180 && LA77_82 <= 181)||LA77_82==184||LA77_82==189||LA77_82==195||(LA77_82 >= 198 && LA77_82 <= 201)||LA77_82==203||LA77_82==205||(LA77_82 >= 209 && LA77_82 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_82);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_151 = input.LA(1);

                         
                        int index77_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_151==122) ) {s = 672;}

                        else if ( (LA77_151==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 673;}

                        else if ( (LA77_151==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 674;}

                        else if ( (LA77_151==128) && (synpred16_Objc())) {s = 675;}

                        else if ( (LA77_151==119) ) {s = 676;}

                        else if ( (LA77_151==178) && (synpred16_Objc())) {s = 677;}

                        else if ( (LA77_151==179) && (synpred16_Objc())) {s = 678;}

                        else if ( (LA77_151==165) && (synpred16_Objc())) {s = 679;}

                        else if ( (LA77_151==162) && (synpred16_Objc())) {s = 680;}

                        else if ( (LA77_151==117) ) {s = 681;}

                        else if ( (LA77_151==ID) ) {s = 682;}

                        else if ( (LA77_151==STRING_LITERAL) && (synpred16_Objc())) {s = 683;}

                        else if ( (LA77_151==149) && (synpred16_Objc())) {s = 684;}

                        else if ( (LA77_151==CHAR_LITERAL) && (synpred16_Objc())) {s = 685;}

                        else if ( (LA77_151==NUMBER_LITERAL) && (synpred16_Objc())) {s = 686;}

                        else if ( (LA77_151==172||LA77_151==174||LA77_151==192||LA77_151==207) && (synpred16_Objc())) {s = 687;}

                        else if ( (LA77_151==175) && (synpred16_Objc())) {s = 688;}

                        else if ( (LA77_151==112) && (synpred16_Objc())) {s = 689;}

                        else if ( (LA77_151==218) && (synpred16_Objc())) {s = 690;}

                        else if ( (LA77_151==125||LA77_151==129) && (synpred16_Objc())) {s = 691;}

                        else if ( (LA77_151==121) && (synpred16_Objc())) {s = 692;}

                        else if ( (LA77_151==170||(LA77_151 >= 180 && LA77_151 <= 181)||LA77_151==184||LA77_151==189||LA77_151==195||(LA77_151 >= 198 && LA77_151 <= 201)||LA77_151==203||LA77_151==205||(LA77_151 >= 209 && LA77_151 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_151);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA77_219 = input.LA(1);

                         
                        int index77_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_219==122) ) {s = 716;}

                        else if ( (LA77_219==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 717;}

                        else if ( (LA77_219==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 718;}

                        else if ( (LA77_219==128) && (synpred16_Objc())) {s = 719;}

                        else if ( (LA77_219==119) ) {s = 720;}

                        else if ( (LA77_219==178) && (synpred16_Objc())) {s = 721;}

                        else if ( (LA77_219==179) && (synpred16_Objc())) {s = 722;}

                        else if ( (LA77_219==165) && (synpred16_Objc())) {s = 723;}

                        else if ( (LA77_219==162) && (synpred16_Objc())) {s = 724;}

                        else if ( (LA77_219==117) ) {s = 725;}

                        else if ( (LA77_219==ID) ) {s = 726;}

                        else if ( (LA77_219==STRING_LITERAL) && (synpred16_Objc())) {s = 727;}

                        else if ( (LA77_219==149) && (synpred16_Objc())) {s = 728;}

                        else if ( (LA77_219==CHAR_LITERAL) && (synpred16_Objc())) {s = 729;}

                        else if ( (LA77_219==NUMBER_LITERAL) && (synpred16_Objc())) {s = 730;}

                        else if ( (LA77_219==172||LA77_219==174||LA77_219==192||LA77_219==207) && (synpred16_Objc())) {s = 731;}

                        else if ( (LA77_219==175) && (synpred16_Objc())) {s = 732;}

                        else if ( (LA77_219==112) && (synpred16_Objc())) {s = 733;}

                        else if ( (LA77_219==218) && (synpred16_Objc())) {s = 734;}

                        else if ( (LA77_219==125||LA77_219==129) && (synpred16_Objc())) {s = 735;}

                        else if ( (LA77_219==121) && (synpred16_Objc())) {s = 736;}

                        else if ( (LA77_219==170||(LA77_219 >= 180 && LA77_219 <= 181)||LA77_219==184||LA77_219==189||LA77_219==195||(LA77_219 >= 198 && LA77_219 <= 201)||LA77_219==203||LA77_219==205||(LA77_219 >= 209 && LA77_219 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_219);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA77_287 = input.LA(1);

                         
                        int index77_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_287==122) ) {s = 760;}

                        else if ( (LA77_287==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 761;}

                        else if ( (LA77_287==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 762;}

                        else if ( (LA77_287==128) && (synpred16_Objc())) {s = 763;}

                        else if ( (LA77_287==119) ) {s = 764;}

                        else if ( (LA77_287==178) && (synpred16_Objc())) {s = 765;}

                        else if ( (LA77_287==179) && (synpred16_Objc())) {s = 766;}

                        else if ( (LA77_287==165) && (synpred16_Objc())) {s = 767;}

                        else if ( (LA77_287==162) && (synpred16_Objc())) {s = 768;}

                        else if ( (LA77_287==117) ) {s = 769;}

                        else if ( (LA77_287==ID) ) {s = 770;}

                        else if ( (LA77_287==STRING_LITERAL) && (synpred16_Objc())) {s = 771;}

                        else if ( (LA77_287==149) && (synpred16_Objc())) {s = 772;}

                        else if ( (LA77_287==CHAR_LITERAL) && (synpred16_Objc())) {s = 773;}

                        else if ( (LA77_287==NUMBER_LITERAL) && (synpred16_Objc())) {s = 774;}

                        else if ( (LA77_287==172||LA77_287==174||LA77_287==192||LA77_287==207) && (synpred16_Objc())) {s = 775;}

                        else if ( (LA77_287==175) && (synpred16_Objc())) {s = 776;}

                        else if ( (LA77_287==112) && (synpred16_Objc())) {s = 777;}

                        else if ( (LA77_287==218) && (synpred16_Objc())) {s = 778;}

                        else if ( (LA77_287==125||LA77_287==129) && (synpred16_Objc())) {s = 779;}

                        else if ( (LA77_287==121) && (synpred16_Objc())) {s = 780;}

                        else if ( (LA77_287==170||(LA77_287 >= 180 && LA77_287 <= 181)||LA77_287==184||LA77_287==189||LA77_287==195||(LA77_287 >= 198 && LA77_287 <= 201)||LA77_287==203||LA77_287==205||(LA77_287 >= 209 && LA77_287 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_287);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA77_356 = input.LA(1);

                         
                        int index77_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_356==122) ) {s = 822;}

                        else if ( (LA77_356==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 823;}

                        else if ( (LA77_356==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 824;}

                        else if ( (LA77_356==128) && (synpred16_Objc())) {s = 825;}

                        else if ( (LA77_356==119) ) {s = 826;}

                        else if ( (LA77_356==178) && (synpred16_Objc())) {s = 827;}

                        else if ( (LA77_356==179) && (synpred16_Objc())) {s = 828;}

                        else if ( (LA77_356==165) && (synpred16_Objc())) {s = 829;}

                        else if ( (LA77_356==162) && (synpred16_Objc())) {s = 830;}

                        else if ( (LA77_356==117) ) {s = 831;}

                        else if ( (LA77_356==ID) ) {s = 832;}

                        else if ( (LA77_356==STRING_LITERAL) && (synpred16_Objc())) {s = 833;}

                        else if ( (LA77_356==149) && (synpred16_Objc())) {s = 834;}

                        else if ( (LA77_356==CHAR_LITERAL) && (synpred16_Objc())) {s = 835;}

                        else if ( (LA77_356==NUMBER_LITERAL) && (synpred16_Objc())) {s = 836;}

                        else if ( (LA77_356==172||LA77_356==174||LA77_356==192||LA77_356==207) && (synpred16_Objc())) {s = 837;}

                        else if ( (LA77_356==175) && (synpred16_Objc())) {s = 838;}

                        else if ( (LA77_356==112) && (synpred16_Objc())) {s = 839;}

                        else if ( (LA77_356==218) && (synpred16_Objc())) {s = 840;}

                        else if ( (LA77_356==125||LA77_356==129) && (synpred16_Objc())) {s = 841;}

                        else if ( (LA77_356==121) && (synpred16_Objc())) {s = 842;}

                        else if ( (LA77_356==170||(LA77_356 >= 180 && LA77_356 <= 181)||LA77_356==184||LA77_356==189||LA77_356==195||(LA77_356 >= 198 && LA77_356 <= 201)||LA77_356==203||LA77_356==205||(LA77_356 >= 209 && LA77_356 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_356);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA77_452 = input.LA(1);

                         
                        int index77_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_452==122) ) {s = 1117;}

                        else if ( (LA77_452==181) ) {s = 1118;}

                        else if ( (LA77_452==195) ) {s = 1119;}

                        else if ( (LA77_452==119) ) {s = 1120;}

                        else if ( (LA77_452==180) ) {s = 1121;}

                        else if ( (LA77_452==211) ) {s = 1122;}

                        else if ( (LA77_452==184) ) {s = 1123;}

                        else if ( (LA77_452==210) ) {s = 1124;}

                        else if ( (LA77_452==198) ) {s = 1125;}

                        else if ( (LA77_452==201) ) {s = 1126;}

                        else if ( (LA77_452==170) ) {s = 1127;}

                        else if ( (LA77_452==199) ) {s = 1128;}

                        else if ( (LA77_452==200) ) {s = 1129;}

                        else if ( (LA77_452==203) ) {s = 1130;}

                        else if ( (LA77_452==ID) ) {s = 1131;}

                        else if ( (LA77_452==205) ) {s = 1132;}

                        else if ( (LA77_452==209) ) {s = 1133;}

                        else if ( (LA77_452==189) ) {s = 1134;}

                        else if ( (LA77_452==128) && (synpred16_Objc())) {s = 1135;}

                        else if ( (LA77_452==178) && (synpred16_Objc())) {s = 1136;}

                        else if ( (LA77_452==179) && (synpred16_Objc())) {s = 1137;}

                        else if ( (LA77_452==165) && (synpred16_Objc())) {s = 1138;}

                        else if ( (LA77_452==162) && (synpred16_Objc())) {s = 1139;}

                        else if ( (LA77_452==117) && (synpred16_Objc())) {s = 1140;}

                        else if ( (LA77_452==STRING_LITERAL) && (synpred16_Objc())) {s = 1141;}

                        else if ( (LA77_452==149) && (synpred16_Objc())) {s = 1142;}

                        else if ( (LA77_452==CHAR_LITERAL) && (synpred16_Objc())) {s = 1143;}

                        else if ( (LA77_452==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1144;}

                        else if ( (LA77_452==172||LA77_452==174||LA77_452==192||LA77_452==207) && (synpred16_Objc())) {s = 1145;}

                        else if ( (LA77_452==175) && (synpred16_Objc())) {s = 1146;}

                        else if ( (LA77_452==112) && (synpred16_Objc())) {s = 1147;}

                        else if ( (LA77_452==218) && (synpred16_Objc())) {s = 1148;}

                        else if ( (LA77_452==125||LA77_452==129) && (synpred16_Objc())) {s = 1149;}

                         
                        input.seek(index77_452);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA77_458 = input.LA(1);

                         
                        int index77_458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_458==175) ) {s = 1151;}

                        else if ( ((LA77_458 >= 131 && LA77_458 <= 132)) && (synpred16_Objc())) {s = 1152;}

                        else if ( (LA77_458==119) && (synpred16_Objc())) {s = 1153;}

                        else if ( (LA77_458==126||LA77_458==130) && (synpred16_Objc())) {s = 1154;}

                        else if ( (LA77_458==125||LA77_458==129) && (synpred16_Objc())) {s = 1155;}

                        else if ( (LA77_458==137) ) {s = 1156;}

                        else if ( (LA77_458==148) && (synpred16_Objc())) {s = 1157;}

                        else if ( (LA77_458==147) && (synpred16_Objc())) {s = 1158;}

                        else if ( (LA77_458==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1159;}

                        else if ( (LA77_458==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1160;}

                        else if ( (LA77_458==127) && (synpred16_Objc())) {s = 1161;}

                        else if ( (LA77_458==121) ) {s = 1162;}

                        else if ( (LA77_458==122) ) {s = 1163;}

                        else if ( (LA77_458==117) ) {s = 1164;}

                        else if ( (LA77_458==113||(LA77_458 >= 115 && LA77_458 <= 116)||LA77_458==124||LA77_458==128||LA77_458==133||LA77_458==138||(LA77_458 >= 140 && LA77_458 <= 145)||LA77_458==178||LA77_458==214||LA77_458==216) && (synpred16_Objc())) {s = 1165;}

                         
                        input.seek(index77_458);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA77_485 = input.LA(1);

                         
                        int index77_485 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_485==122) ) {s = 1174;}

                        else if ( (LA77_485==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1175;}

                        else if ( (LA77_485==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1176;}

                        else if ( (LA77_485==128) && (synpred16_Objc())) {s = 1177;}

                        else if ( (LA77_485==119) ) {s = 1178;}

                        else if ( (LA77_485==178) && (synpred16_Objc())) {s = 1179;}

                        else if ( (LA77_485==179) && (synpred16_Objc())) {s = 1180;}

                        else if ( (LA77_485==165) && (synpred16_Objc())) {s = 1181;}

                        else if ( (LA77_485==162) && (synpred16_Objc())) {s = 1182;}

                        else if ( (LA77_485==117) ) {s = 1183;}

                        else if ( (LA77_485==ID) ) {s = 1184;}

                        else if ( (LA77_485==STRING_LITERAL) && (synpred16_Objc())) {s = 1185;}

                        else if ( (LA77_485==149) && (synpred16_Objc())) {s = 1186;}

                        else if ( (LA77_485==CHAR_LITERAL) && (synpred16_Objc())) {s = 1187;}

                        else if ( (LA77_485==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1188;}

                        else if ( (LA77_485==172||LA77_485==174||LA77_485==192||LA77_485==207) && (synpred16_Objc())) {s = 1189;}

                        else if ( (LA77_485==175) && (synpred16_Objc())) {s = 1190;}

                        else if ( (LA77_485==112) && (synpred16_Objc())) {s = 1191;}

                        else if ( (LA77_485==218) && (synpred16_Objc())) {s = 1192;}

                        else if ( (LA77_485==125||LA77_485==129) && (synpred16_Objc())) {s = 1193;}

                        else if ( (LA77_485==121) && (synpred16_Objc())) {s = 1194;}

                        else if ( (LA77_485==170||(LA77_485 >= 180 && LA77_485 <= 181)||LA77_485==184||LA77_485==189||LA77_485==195||(LA77_485 >= 198 && LA77_485 <= 201)||LA77_485==203||LA77_485==205||(LA77_485 >= 209 && LA77_485 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_485);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA77_564 = input.LA(1);

                         
                        int index77_564 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_564==122) ) {s = 1291;}

                        else if ( (LA77_564==181) ) {s = 1292;}

                        else if ( (LA77_564==195) ) {s = 1293;}

                        else if ( (LA77_564==119) ) {s = 1294;}

                        else if ( (LA77_564==180) ) {s = 1295;}

                        else if ( (LA77_564==211) ) {s = 1296;}

                        else if ( (LA77_564==184) ) {s = 1297;}

                        else if ( (LA77_564==210) ) {s = 1298;}

                        else if ( (LA77_564==198) ) {s = 1299;}

                        else if ( (LA77_564==201) ) {s = 1300;}

                        else if ( (LA77_564==170) ) {s = 1301;}

                        else if ( (LA77_564==199) ) {s = 1302;}

                        else if ( (LA77_564==200) ) {s = 1303;}

                        else if ( (LA77_564==203) ) {s = 1304;}

                        else if ( (LA77_564==ID) ) {s = 1305;}

                        else if ( (LA77_564==205) ) {s = 1306;}

                        else if ( (LA77_564==209) ) {s = 1307;}

                        else if ( (LA77_564==189) ) {s = 1308;}

                        else if ( (LA77_564==128) && (synpred16_Objc())) {s = 1309;}

                        else if ( (LA77_564==178) && (synpred16_Objc())) {s = 1310;}

                        else if ( (LA77_564==179) && (synpred16_Objc())) {s = 1311;}

                        else if ( (LA77_564==165) && (synpred16_Objc())) {s = 1312;}

                        else if ( (LA77_564==162) && (synpred16_Objc())) {s = 1313;}

                        else if ( (LA77_564==117) && (synpred16_Objc())) {s = 1314;}

                        else if ( (LA77_564==STRING_LITERAL) && (synpred16_Objc())) {s = 1315;}

                        else if ( (LA77_564==149) && (synpred16_Objc())) {s = 1316;}

                        else if ( (LA77_564==CHAR_LITERAL) && (synpred16_Objc())) {s = 1317;}

                        else if ( (LA77_564==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1318;}

                        else if ( (LA77_564==172||LA77_564==174||LA77_564==192||LA77_564==207) && (synpred16_Objc())) {s = 1319;}

                        else if ( (LA77_564==175) && (synpred16_Objc())) {s = 1320;}

                        else if ( (LA77_564==112) && (synpred16_Objc())) {s = 1321;}

                        else if ( (LA77_564==218) && (synpred16_Objc())) {s = 1322;}

                        else if ( (LA77_564==125||LA77_564==129) && (synpred16_Objc())) {s = 1323;}

                         
                        input.seek(index77_564);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA77_570 = input.LA(1);

                         
                        int index77_570 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_570==175) ) {s = 1325;}

                        else if ( ((LA77_570 >= 131 && LA77_570 <= 132)) && (synpred16_Objc())) {s = 1326;}

                        else if ( (LA77_570==119) && (synpred16_Objc())) {s = 1327;}

                        else if ( (LA77_570==126||LA77_570==130) && (synpred16_Objc())) {s = 1328;}

                        else if ( (LA77_570==125||LA77_570==129) && (synpred16_Objc())) {s = 1329;}

                        else if ( (LA77_570==137) ) {s = 1330;}

                        else if ( (LA77_570==148) && (synpred16_Objc())) {s = 1331;}

                        else if ( (LA77_570==147) && (synpred16_Objc())) {s = 1332;}

                        else if ( (LA77_570==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1333;}

                        else if ( (LA77_570==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1334;}

                        else if ( (LA77_570==127) && (synpred16_Objc())) {s = 1335;}

                        else if ( (LA77_570==121) ) {s = 1336;}

                        else if ( (LA77_570==122) ) {s = 1337;}

                        else if ( (LA77_570==117) ) {s = 1338;}

                        else if ( (LA77_570==113||(LA77_570 >= 115 && LA77_570 <= 116)||LA77_570==124||LA77_570==128||LA77_570==133||LA77_570==138||(LA77_570 >= 140 && LA77_570 <= 145)||LA77_570==178||LA77_570==214||LA77_570==216) && (synpred16_Objc())) {s = 1339;}

                         
                        input.seek(index77_570);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA77_597 = input.LA(1);

                         
                        int index77_597 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_597==122) ) {s = 1348;}

                        else if ( (LA77_597==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1349;}

                        else if ( (LA77_597==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1350;}

                        else if ( (LA77_597==128) && (synpred16_Objc())) {s = 1351;}

                        else if ( (LA77_597==119) ) {s = 1352;}

                        else if ( (LA77_597==178) && (synpred16_Objc())) {s = 1353;}

                        else if ( (LA77_597==179) && (synpred16_Objc())) {s = 1354;}

                        else if ( (LA77_597==165) && (synpred16_Objc())) {s = 1355;}

                        else if ( (LA77_597==162) && (synpred16_Objc())) {s = 1356;}

                        else if ( (LA77_597==117) ) {s = 1357;}

                        else if ( (LA77_597==ID) ) {s = 1358;}

                        else if ( (LA77_597==STRING_LITERAL) && (synpred16_Objc())) {s = 1359;}

                        else if ( (LA77_597==149) && (synpred16_Objc())) {s = 1360;}

                        else if ( (LA77_597==CHAR_LITERAL) && (synpred16_Objc())) {s = 1361;}

                        else if ( (LA77_597==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1362;}

                        else if ( (LA77_597==172||LA77_597==174||LA77_597==192||LA77_597==207) && (synpred16_Objc())) {s = 1363;}

                        else if ( (LA77_597==175) && (synpred16_Objc())) {s = 1364;}

                        else if ( (LA77_597==112) && (synpred16_Objc())) {s = 1365;}

                        else if ( (LA77_597==218) && (synpred16_Objc())) {s = 1366;}

                        else if ( (LA77_597==125||LA77_597==129) && (synpred16_Objc())) {s = 1367;}

                        else if ( (LA77_597==121) && (synpred16_Objc())) {s = 1368;}

                        else if ( (LA77_597==170||(LA77_597 >= 180 && LA77_597 <= 181)||LA77_597==184||LA77_597==189||LA77_597==195||(LA77_597 >= 198 && LA77_597 <= 201)||LA77_597==203||LA77_597==205||(LA77_597 >= 209 && LA77_597 <= 211)) ) {s = 9;}

                         
                        input.seek(index77_597);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA77_676 = input.LA(1);

                         
                        int index77_676 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_676==122) ) {s = 1465;}

                        else if ( (LA77_676==181) ) {s = 1466;}

                        else if ( (LA77_676==195) ) {s = 1467;}

                        else if ( (LA77_676==119) ) {s = 1468;}

                        else if ( (LA77_676==180) ) {s = 1469;}

                        else if ( (LA77_676==211) ) {s = 1470;}

                        else if ( (LA77_676==184) ) {s = 1471;}

                        else if ( (LA77_676==210) ) {s = 1472;}

                        else if ( (LA77_676==198) ) {s = 1473;}

                        else if ( (LA77_676==201) ) {s = 1474;}

                        else if ( (LA77_676==170) ) {s = 1475;}

                        else if ( (LA77_676==199) ) {s = 1476;}

                        else if ( (LA77_676==200) ) {s = 1477;}

                        else if ( (LA77_676==203) ) {s = 1478;}

                        else if ( (LA77_676==ID) ) {s = 1479;}

                        else if ( (LA77_676==205) ) {s = 1480;}

                        else if ( (LA77_676==209) ) {s = 1481;}

                        else if ( (LA77_676==189) ) {s = 1482;}

                        else if ( (LA77_676==128) && (synpred16_Objc())) {s = 1483;}

                        else if ( (LA77_676==178) && (synpred16_Objc())) {s = 1484;}

                        else if ( (LA77_676==179) && (synpred16_Objc())) {s = 1485;}

                        else if ( (LA77_676==165) && (synpred16_Objc())) {s = 1486;}

                        else if ( (LA77_676==162) && (synpred16_Objc())) {s = 1487;}

                        else if ( (LA77_676==117) && (synpred16_Objc())) {s = 1488;}

                        else if ( (LA77_676==STRING_LITERAL) && (synpred16_Objc())) {s = 1489;}

                        else if ( (LA77_676==149) && (synpred16_Objc())) {s = 1490;}

                        else if ( (LA77_676==CHAR_LITERAL) && (synpred16_Objc())) {s = 1491;}

                        else if ( (LA77_676==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1492;}

                        else if ( (LA77_676==172||LA77_676==174||LA77_676==192||LA77_676==207) && (synpred16_Objc())) {s = 1493;}

                        else if ( (LA77_676==175) && (synpred16_Objc())) {s = 1494;}

                        else if ( (LA77_676==112) && (synpred16_Objc())) {s = 1495;}

                        else if ( (LA77_676==218) && (synpred16_Objc())) {s = 1496;}

                        else if ( (LA77_676==125||LA77_676==129) && (synpred16_Objc())) {s = 1497;}

                         
                        input.seek(index77_676);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA77_682 = input.LA(1);

                         
                        int index77_682 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_682==175) ) {s = 1499;}

                        else if ( ((LA77_682 >= 131 && LA77_682 <= 132)) && (synpred16_Objc())) {s = 1500;}

                        else if ( (LA77_682==119) && (synpred16_Objc())) {s = 1501;}

                        else if ( (LA77_682==126||LA77_682==130) && (synpred16_Objc())) {s = 1502;}

                        else if ( (LA77_682==125||LA77_682==129) && (synpred16_Objc())) {s = 1503;}

                        else if ( (LA77_682==137) ) {s = 1504;}

                        else if ( (LA77_682==148) && (synpred16_Objc())) {s = 1505;}

                        else if ( (LA77_682==147) && (synpred16_Objc())) {s = 1506;}

                        else if ( (LA77_682==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1507;}

                        else if ( (LA77_682==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1508;}

                        else if ( (LA77_682==127) && (synpred16_Objc())) {s = 1509;}

                        else if ( (LA77_682==121) ) {s = 1510;}

                        else if ( (LA77_682==122) ) {s = 1511;}

                        else if ( (LA77_682==117) ) {s = 1512;}

                        else if ( (LA77_682==113||(LA77_682 >= 115 && LA77_682 <= 116)||LA77_682==124||LA77_682==128||LA77_682==133||LA77_682==138||(LA77_682 >= 140 && LA77_682 <= 145)||LA77_682==178||LA77_682==214||LA77_682==216) && (synpred16_Objc())) {s = 1513;}

                         
                        input.seek(index77_682);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA77_720 = input.LA(1);

                         
                        int index77_720 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_720==122) ) {s = 1595;}

                        else if ( (LA77_720==181) ) {s = 1596;}

                        else if ( (LA77_720==195) ) {s = 1597;}

                        else if ( (LA77_720==119) ) {s = 1598;}

                        else if ( (LA77_720==180) ) {s = 1599;}

                        else if ( (LA77_720==211) ) {s = 1600;}

                        else if ( (LA77_720==184) ) {s = 1601;}

                        else if ( (LA77_720==210) ) {s = 1602;}

                        else if ( (LA77_720==198) ) {s = 1603;}

                        else if ( (LA77_720==201) ) {s = 1604;}

                        else if ( (LA77_720==170) ) {s = 1605;}

                        else if ( (LA77_720==199) ) {s = 1606;}

                        else if ( (LA77_720==200) ) {s = 1607;}

                        else if ( (LA77_720==203) ) {s = 1608;}

                        else if ( (LA77_720==ID) ) {s = 1609;}

                        else if ( (LA77_720==205) ) {s = 1610;}

                        else if ( (LA77_720==209) ) {s = 1611;}

                        else if ( (LA77_720==189) ) {s = 1612;}

                        else if ( (LA77_720==128) && (synpred16_Objc())) {s = 1613;}

                        else if ( (LA77_720==178) && (synpred16_Objc())) {s = 1614;}

                        else if ( (LA77_720==179) && (synpred16_Objc())) {s = 1615;}

                        else if ( (LA77_720==165) && (synpred16_Objc())) {s = 1616;}

                        else if ( (LA77_720==162) && (synpred16_Objc())) {s = 1617;}

                        else if ( (LA77_720==117) && (synpred16_Objc())) {s = 1618;}

                        else if ( (LA77_720==STRING_LITERAL) && (synpred16_Objc())) {s = 1619;}

                        else if ( (LA77_720==149) && (synpred16_Objc())) {s = 1620;}

                        else if ( (LA77_720==CHAR_LITERAL) && (synpred16_Objc())) {s = 1621;}

                        else if ( (LA77_720==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1622;}

                        else if ( (LA77_720==172||LA77_720==174||LA77_720==192||LA77_720==207) && (synpred16_Objc())) {s = 1623;}

                        else if ( (LA77_720==175) && (synpred16_Objc())) {s = 1624;}

                        else if ( (LA77_720==112) && (synpred16_Objc())) {s = 1625;}

                        else if ( (LA77_720==218) && (synpred16_Objc())) {s = 1626;}

                        else if ( (LA77_720==125||LA77_720==129) && (synpred16_Objc())) {s = 1627;}

                         
                        input.seek(index77_720);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA77_726 = input.LA(1);

                         
                        int index77_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_726==175) ) {s = 1629;}

                        else if ( ((LA77_726 >= 131 && LA77_726 <= 132)) && (synpred16_Objc())) {s = 1630;}

                        else if ( (LA77_726==119) && (synpred16_Objc())) {s = 1631;}

                        else if ( (LA77_726==126||LA77_726==130) && (synpred16_Objc())) {s = 1632;}

                        else if ( (LA77_726==125||LA77_726==129) && (synpred16_Objc())) {s = 1633;}

                        else if ( (LA77_726==137) ) {s = 1634;}

                        else if ( (LA77_726==148) && (synpred16_Objc())) {s = 1635;}

                        else if ( (LA77_726==147) && (synpred16_Objc())) {s = 1636;}

                        else if ( (LA77_726==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1637;}

                        else if ( (LA77_726==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1638;}

                        else if ( (LA77_726==127) && (synpred16_Objc())) {s = 1639;}

                        else if ( (LA77_726==121) ) {s = 1640;}

                        else if ( (LA77_726==122) ) {s = 1641;}

                        else if ( (LA77_726==117) ) {s = 1642;}

                        else if ( (LA77_726==113||(LA77_726 >= 115 && LA77_726 <= 116)||LA77_726==124||LA77_726==128||LA77_726==133||LA77_726==138||(LA77_726 >= 140 && LA77_726 <= 145)||LA77_726==178||LA77_726==214||LA77_726==216) && (synpred16_Objc())) {s = 1643;}

                         
                        input.seek(index77_726);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA77_764 = input.LA(1);

                         
                        int index77_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_764==122) ) {s = 1725;}

                        else if ( (LA77_764==181) ) {s = 1726;}

                        else if ( (LA77_764==195) ) {s = 1727;}

                        else if ( (LA77_764==119) ) {s = 1728;}

                        else if ( (LA77_764==180) ) {s = 1729;}

                        else if ( (LA77_764==211) ) {s = 1730;}

                        else if ( (LA77_764==184) ) {s = 1731;}

                        else if ( (LA77_764==210) ) {s = 1732;}

                        else if ( (LA77_764==198) ) {s = 1733;}

                        else if ( (LA77_764==201) ) {s = 1734;}

                        else if ( (LA77_764==170) ) {s = 1735;}

                        else if ( (LA77_764==199) ) {s = 1736;}

                        else if ( (LA77_764==200) ) {s = 1737;}

                        else if ( (LA77_764==203) ) {s = 1738;}

                        else if ( (LA77_764==ID) ) {s = 1739;}

                        else if ( (LA77_764==205) ) {s = 1740;}

                        else if ( (LA77_764==209) ) {s = 1741;}

                        else if ( (LA77_764==189) ) {s = 1742;}

                        else if ( (LA77_764==128) && (synpred16_Objc())) {s = 1743;}

                        else if ( (LA77_764==178) && (synpred16_Objc())) {s = 1744;}

                        else if ( (LA77_764==179) && (synpred16_Objc())) {s = 1745;}

                        else if ( (LA77_764==165) && (synpred16_Objc())) {s = 1746;}

                        else if ( (LA77_764==162) && (synpred16_Objc())) {s = 1747;}

                        else if ( (LA77_764==117) && (synpred16_Objc())) {s = 1748;}

                        else if ( (LA77_764==STRING_LITERAL) && (synpred16_Objc())) {s = 1749;}

                        else if ( (LA77_764==149) && (synpred16_Objc())) {s = 1750;}

                        else if ( (LA77_764==CHAR_LITERAL) && (synpred16_Objc())) {s = 1751;}

                        else if ( (LA77_764==NUMBER_LITERAL) && (synpred16_Objc())) {s = 1752;}

                        else if ( (LA77_764==172||LA77_764==174||LA77_764==192||LA77_764==207) && (synpred16_Objc())) {s = 1753;}

                        else if ( (LA77_764==175) && (synpred16_Objc())) {s = 1754;}

                        else if ( (LA77_764==112) && (synpred16_Objc())) {s = 1755;}

                        else if ( (LA77_764==218) && (synpred16_Objc())) {s = 1756;}

                        else if ( (LA77_764==125||LA77_764==129) && (synpred16_Objc())) {s = 1757;}

                         
                        input.seek(index77_764);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA77_770 = input.LA(1);

                         
                        int index77_770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_770==175) ) {s = 1759;}

                        else if ( ((LA77_770 >= 131 && LA77_770 <= 132)) && (synpred16_Objc())) {s = 1760;}

                        else if ( (LA77_770==119) && (synpred16_Objc())) {s = 1761;}

                        else if ( (LA77_770==126||LA77_770==130) && (synpred16_Objc())) {s = 1762;}

                        else if ( (LA77_770==125||LA77_770==129) && (synpred16_Objc())) {s = 1763;}

                        else if ( (LA77_770==137) ) {s = 1764;}

                        else if ( (LA77_770==148) && (synpred16_Objc())) {s = 1765;}

                        else if ( (LA77_770==147) && (synpred16_Objc())) {s = 1766;}

                        else if ( (LA77_770==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 1767;}

                        else if ( (LA77_770==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 1768;}

                        else if ( (LA77_770==127) && (synpred16_Objc())) {s = 1769;}

                        else if ( (LA77_770==121) ) {s = 1770;}

                        else if ( (LA77_770==122) ) {s = 1771;}

                        else if ( (LA77_770==117) ) {s = 1772;}

                        else if ( (LA77_770==113||(LA77_770 >= 115 && LA77_770 <= 116)||LA77_770==124||LA77_770==128||LA77_770==133||LA77_770==138||(LA77_770 >= 140 && LA77_770 <= 145)||LA77_770==178||LA77_770==214||LA77_770==216) && (synpred16_Objc())) {s = 1773;}

                         
                        input.seek(index77_770);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA77_796 = input.LA(1);

                         
                        int index77_796 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_796);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA77_797 = input.LA(1);

                         
                        int index77_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_797);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA77_798 = input.LA(1);

                         
                        int index77_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_798);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA77_799 = input.LA(1);

                         
                        int index77_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_799);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA77_800 = input.LA(1);

                         
                        int index77_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_800);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA77_801 = input.LA(1);

                         
                        int index77_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_801);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA77_802 = input.LA(1);

                         
                        int index77_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_802);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA77_803 = input.LA(1);

                         
                        int index77_803 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_803);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA77_804 = input.LA(1);

                         
                        int index77_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_804);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA77_805 = input.LA(1);

                         
                        int index77_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_805);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA77_806 = input.LA(1);

                         
                        int index77_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_806);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA77_807 = input.LA(1);

                         
                        int index77_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_807);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA77_808 = input.LA(1);

                         
                        int index77_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_808);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA77_809 = input.LA(1);

                         
                        int index77_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_809);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA77_810 = input.LA(1);

                         
                        int index77_810 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_810);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA77_811 = input.LA(1);

                         
                        int index77_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_811);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA77_812 = input.LA(1);

                         
                        int index77_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_812);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA77_813 = input.LA(1);

                         
                        int index77_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_813);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA77_814 = input.LA(1);

                         
                        int index77_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_814);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA77_822 = input.LA(1);

                         
                        int index77_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_822);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA77_826 = input.LA(1);

                         
                        int index77_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_826);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA77_831 = input.LA(1);

                         
                        int index77_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_831);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA77_832 = input.LA(1);

                         
                        int index77_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_832);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA77_858 = input.LA(1);

                         
                        int index77_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_858);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA77_859 = input.LA(1);

                         
                        int index77_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_859);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA77_860 = input.LA(1);

                         
                        int index77_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_860);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA77_861 = input.LA(1);

                         
                        int index77_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_861);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA77_862 = input.LA(1);

                         
                        int index77_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_862);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA77_863 = input.LA(1);

                         
                        int index77_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_863);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA77_864 = input.LA(1);

                         
                        int index77_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_864);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA77_865 = input.LA(1);

                         
                        int index77_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_865);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA77_866 = input.LA(1);

                         
                        int index77_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_866);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA77_867 = input.LA(1);

                         
                        int index77_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_867);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA77_868 = input.LA(1);

                         
                        int index77_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_868);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA77_869 = input.LA(1);

                         
                        int index77_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_869);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA77_870 = input.LA(1);

                         
                        int index77_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_870);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA77_871 = input.LA(1);

                         
                        int index77_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_871);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA77_872 = input.LA(1);

                         
                        int index77_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_872);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA77_873 = input.LA(1);

                         
                        int index77_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_873);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA77_874 = input.LA(1);

                         
                        int index77_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_874);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA77_875 = input.LA(1);

                         
                        int index77_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_875);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA77_876 = input.LA(1);

                         
                        int index77_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_876);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA77_877 = input.LA(1);

                         
                        int index77_877 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_877);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA77_878 = input.LA(1);

                         
                        int index77_878 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_878);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA77_879 = input.LA(1);

                         
                        int index77_879 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_879);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA77_880 = input.LA(1);

                         
                        int index77_880 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_880);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA77_881 = input.LA(1);

                         
                        int index77_881 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_881);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA77_882 = input.LA(1);

                         
                        int index77_882 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_882);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA77_883 = input.LA(1);

                         
                        int index77_883 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_883);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA77_884 = input.LA(1);

                         
                        int index77_884 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_884);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA77_885 = input.LA(1);

                         
                        int index77_885 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_885);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA77_886 = input.LA(1);

                         
                        int index77_886 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_886);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA77_887 = input.LA(1);

                         
                        int index77_887 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_887);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA77_888 = input.LA(1);

                         
                        int index77_888 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_888);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA77_889 = input.LA(1);

                         
                        int index77_889 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_889);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA77_890 = input.LA(1);

                         
                        int index77_890 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_890);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA77_891 = input.LA(1);

                         
                        int index77_891 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_891);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA77_892 = input.LA(1);

                         
                        int index77_892 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_892);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA77_893 = input.LA(1);

                         
                        int index77_893 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_893);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA77_894 = input.LA(1);

                         
                        int index77_894 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_894);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA77_895 = input.LA(1);

                         
                        int index77_895 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_895);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA77_896 = input.LA(1);

                         
                        int index77_896 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_896);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA77_897 = input.LA(1);

                         
                        int index77_897 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_897);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA77_898 = input.LA(1);

                         
                        int index77_898 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_898);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA77_899 = input.LA(1);

                         
                        int index77_899 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_899);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA77_900 = input.LA(1);

                         
                        int index77_900 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_900);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA77_901 = input.LA(1);

                         
                        int index77_901 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_901);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA77_902 = input.LA(1);

                         
                        int index77_902 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_902);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA77_903 = input.LA(1);

                         
                        int index77_903 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_903);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA77_904 = input.LA(1);

                         
                        int index77_904 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_904);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA77_905 = input.LA(1);

                         
                        int index77_905 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_905);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA77_906 = input.LA(1);

                         
                        int index77_906 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_906);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA77_907 = input.LA(1);

                         
                        int index77_907 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_907);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA77_908 = input.LA(1);

                         
                        int index77_908 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_908);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA77_909 = input.LA(1);

                         
                        int index77_909 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_909);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA77_910 = input.LA(1);

                         
                        int index77_910 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_910);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA77_911 = input.LA(1);

                         
                        int index77_911 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_911);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA77_912 = input.LA(1);

                         
                        int index77_912 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_912);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA77_913 = input.LA(1);

                         
                        int index77_913 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_913);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA77_914 = input.LA(1);

                         
                        int index77_914 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_914);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA77_915 = input.LA(1);

                         
                        int index77_915 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_915);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA77_916 = input.LA(1);

                         
                        int index77_916 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_916);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA77_917 = input.LA(1);

                         
                        int index77_917 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_917);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA77_918 = input.LA(1);

                         
                        int index77_918 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_918);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA77_919 = input.LA(1);

                         
                        int index77_919 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_919);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA77_920 = input.LA(1);

                         
                        int index77_920 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_920);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA77_921 = input.LA(1);

                         
                        int index77_921 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_921);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA77_922 = input.LA(1);

                         
                        int index77_922 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_922);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA77_923 = input.LA(1);

                         
                        int index77_923 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_923);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA77_924 = input.LA(1);

                         
                        int index77_924 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_924);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA77_925 = input.LA(1);

                         
                        int index77_925 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_925);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA77_926 = input.LA(1);

                         
                        int index77_926 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_926);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA77_927 = input.LA(1);

                         
                        int index77_927 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_927);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA77_928 = input.LA(1);

                         
                        int index77_928 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_928);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA77_929 = input.LA(1);

                         
                        int index77_929 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_929);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA77_930 = input.LA(1);

                         
                        int index77_930 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_930);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA77_931 = input.LA(1);

                         
                        int index77_931 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_931);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA77_932 = input.LA(1);

                         
                        int index77_932 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_932);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA77_933 = input.LA(1);

                         
                        int index77_933 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_933);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA77_934 = input.LA(1);

                         
                        int index77_934 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_934);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA77_935 = input.LA(1);

                         
                        int index77_935 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_935);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA77_936 = input.LA(1);

                         
                        int index77_936 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_936);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA77_938 = input.LA(1);

                         
                        int index77_938 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_938);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA77_939 = input.LA(1);

                         
                        int index77_939 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_939);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA77_940 = input.LA(1);

                         
                        int index77_940 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_940);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA77_941 = input.LA(1);

                         
                        int index77_941 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_941);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA77_942 = input.LA(1);

                         
                        int index77_942 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_942);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA77_943 = input.LA(1);

                         
                        int index77_943 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_943);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA77_944 = input.LA(1);

                         
                        int index77_944 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_944);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA77_945 = input.LA(1);

                         
                        int index77_945 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_945);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA77_946 = input.LA(1);

                         
                        int index77_946 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_946);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA77_948 = input.LA(1);

                         
                        int index77_948 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_948);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA77_949 = input.LA(1);

                         
                        int index77_949 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_949);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA77_950 = input.LA(1);

                         
                        int index77_950 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_950);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA77_951 = input.LA(1);

                         
                        int index77_951 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_951);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA77_952 = input.LA(1);

                         
                        int index77_952 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_952);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA77_953 = input.LA(1);

                         
                        int index77_953 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_953);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA77_954 = input.LA(1);

                         
                        int index77_954 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_954);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA77_955 = input.LA(1);

                         
                        int index77_955 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_955);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA77_956 = input.LA(1);

                         
                        int index77_956 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_956);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA77_958 = input.LA(1);

                         
                        int index77_958 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_958);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA77_959 = input.LA(1);

                         
                        int index77_959 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_959);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA77_960 = input.LA(1);

                         
                        int index77_960 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_960);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA77_961 = input.LA(1);

                         
                        int index77_961 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_961);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA77_962 = input.LA(1);

                         
                        int index77_962 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_962);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA77_963 = input.LA(1);

                         
                        int index77_963 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_963);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA77_964 = input.LA(1);

                         
                        int index77_964 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_964);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA77_965 = input.LA(1);

                         
                        int index77_965 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_965);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA77_967 = input.LA(1);

                         
                        int index77_967 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_967);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA77_968 = input.LA(1);

                         
                        int index77_968 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_968);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA77_969 = input.LA(1);

                         
                        int index77_969 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_969);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA77_970 = input.LA(1);

                         
                        int index77_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_970);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA77_971 = input.LA(1);

                         
                        int index77_971 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_971);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA77_972 = input.LA(1);

                         
                        int index77_972 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_972);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA77_973 = input.LA(1);

                         
                        int index77_973 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_973);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA77_974 = input.LA(1);

                         
                        int index77_974 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_974);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA77_976 = input.LA(1);

                         
                        int index77_976 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_976);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA77_977 = input.LA(1);

                         
                        int index77_977 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_977);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA77_978 = input.LA(1);

                         
                        int index77_978 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_978);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA77_979 = input.LA(1);

                         
                        int index77_979 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_979);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA77_980 = input.LA(1);

                         
                        int index77_980 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_980);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA77_981 = input.LA(1);

                         
                        int index77_981 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_981);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA77_982 = input.LA(1);

                         
                        int index77_982 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_982);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA77_983 = input.LA(1);

                         
                        int index77_983 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_983);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA77_984 = input.LA(1);

                         
                        int index77_984 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_984);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA77_985 = input.LA(1);

                         
                        int index77_985 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_985);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA77_986 = input.LA(1);

                         
                        int index77_986 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_986);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA77_987 = input.LA(1);

                         
                        int index77_987 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_987);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA77_988 = input.LA(1);

                         
                        int index77_988 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_988);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA77_989 = input.LA(1);

                         
                        int index77_989 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_989);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA77_990 = input.LA(1);

                         
                        int index77_990 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_990);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA77_991 = input.LA(1);

                         
                        int index77_991 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_991);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA77_992 = input.LA(1);

                         
                        int index77_992 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_992);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA77_993 = input.LA(1);

                         
                        int index77_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_993);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA77_994 = input.LA(1);

                         
                        int index77_994 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_994);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA77_995 = input.LA(1);

                         
                        int index77_995 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_995);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA77_996 = input.LA(1);

                         
                        int index77_996 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_996);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA77_997 = input.LA(1);

                         
                        int index77_997 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_997);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA77_998 = input.LA(1);

                         
                        int index77_998 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_998);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA77_999 = input.LA(1);

                         
                        int index77_999 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_999);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA77_1000 = input.LA(1);

                         
                        int index77_1000 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1000);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA77_1001 = input.LA(1);

                         
                        int index77_1001 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1001);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA77_1002 = input.LA(1);

                         
                        int index77_1002 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1002);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA77_1003 = input.LA(1);

                         
                        int index77_1003 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1003);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA77_1004 = input.LA(1);

                         
                        int index77_1004 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1004);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA77_1005 = input.LA(1);

                         
                        int index77_1005 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1005);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA77_1006 = input.LA(1);

                         
                        int index77_1006 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1006);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA77_1007 = input.LA(1);

                         
                        int index77_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA77_1008 = input.LA(1);

                         
                        int index77_1008 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1008);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA77_1009 = input.LA(1);

                         
                        int index77_1009 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1009);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA77_1010 = input.LA(1);

                         
                        int index77_1010 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1010);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA77_1011 = input.LA(1);

                         
                        int index77_1011 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1011);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA77_1012 = input.LA(1);

                         
                        int index77_1012 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1012);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA77_1013 = input.LA(1);

                         
                        int index77_1013 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1013);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA77_1014 = input.LA(1);

                         
                        int index77_1014 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1014);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA77_1015 = input.LA(1);

                         
                        int index77_1015 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1015);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA77_1016 = input.LA(1);

                         
                        int index77_1016 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1016);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA77_1017 = input.LA(1);

                         
                        int index77_1017 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1017);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA77_1018 = input.LA(1);

                         
                        int index77_1018 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1018);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA77_1019 = input.LA(1);

                         
                        int index77_1019 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1019);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA77_1020 = input.LA(1);

                         
                        int index77_1020 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1020);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA77_1021 = input.LA(1);

                         
                        int index77_1021 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1021);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA77_1022 = input.LA(1);

                         
                        int index77_1022 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1022);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA77_1023 = input.LA(1);

                         
                        int index77_1023 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1023);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA77_1024 = input.LA(1);

                         
                        int index77_1024 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1024);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA77_1025 = input.LA(1);

                         
                        int index77_1025 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1025);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA77_1026 = input.LA(1);

                         
                        int index77_1026 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1026);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA77_1027 = input.LA(1);

                         
                        int index77_1027 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1027);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA77_1028 = input.LA(1);

                         
                        int index77_1028 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1028);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA77_1029 = input.LA(1);

                         
                        int index77_1029 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1029);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA77_1030 = input.LA(1);

                         
                        int index77_1030 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1030);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA77_1031 = input.LA(1);

                         
                        int index77_1031 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1031);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA77_1032 = input.LA(1);

                         
                        int index77_1032 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1032);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA77_1033 = input.LA(1);

                         
                        int index77_1033 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1033);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA77_1034 = input.LA(1);

                         
                        int index77_1034 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1034);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA77_1035 = input.LA(1);

                         
                        int index77_1035 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1035);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA77_1036 = input.LA(1);

                         
                        int index77_1036 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1036);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA77_1037 = input.LA(1);

                         
                        int index77_1037 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1037);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA77_1116 = input.LA(1);

                         
                        int index77_1116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1116);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA77_1117 = input.LA(1);

                         
                        int index77_1117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1117);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA77_1118 = input.LA(1);

                         
                        int index77_1118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1118);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA77_1119 = input.LA(1);

                         
                        int index77_1119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1119);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA77_1120 = input.LA(1);

                         
                        int index77_1120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1120);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA77_1121 = input.LA(1);

                         
                        int index77_1121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1121);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA77_1122 = input.LA(1);

                         
                        int index77_1122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1122);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA77_1123 = input.LA(1);

                         
                        int index77_1123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1123);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA77_1124 = input.LA(1);

                         
                        int index77_1124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1124);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA77_1125 = input.LA(1);

                         
                        int index77_1125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1125);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA77_1126 = input.LA(1);

                         
                        int index77_1126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1126);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA77_1127 = input.LA(1);

                         
                        int index77_1127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1127);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA77_1128 = input.LA(1);

                         
                        int index77_1128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1128);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA77_1129 = input.LA(1);

                         
                        int index77_1129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1129);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA77_1130 = input.LA(1);

                         
                        int index77_1130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1130);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA77_1131 = input.LA(1);

                         
                        int index77_1131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1131);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA77_1132 = input.LA(1);

                         
                        int index77_1132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1132);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA77_1133 = input.LA(1);

                         
                        int index77_1133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1133);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA77_1134 = input.LA(1);

                         
                        int index77_1134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1134);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA77_1150 = input.LA(1);

                         
                        int index77_1150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1150);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA77_1151 = input.LA(1);

                         
                        int index77_1151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1151);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA77_1156 = input.LA(1);

                         
                        int index77_1156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1156);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA77_1162 = input.LA(1);

                         
                        int index77_1162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1162);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA77_1163 = input.LA(1);

                         
                        int index77_1163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1163);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA77_1164 = input.LA(1);

                         
                        int index77_1164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1164);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA77_1166 = input.LA(1);

                         
                        int index77_1166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1166);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA77_1174 = input.LA(1);

                         
                        int index77_1174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1174);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA77_1178 = input.LA(1);

                         
                        int index77_1178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1178);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA77_1183 = input.LA(1);

                         
                        int index77_1183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1183);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA77_1184 = input.LA(1);

                         
                        int index77_1184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1184);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA77_1210 = input.LA(1);

                         
                        int index77_1210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1210);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA77_1211 = input.LA(1);

                         
                        int index77_1211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1211);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA77_1290 = input.LA(1);

                         
                        int index77_1290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1290);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA77_1291 = input.LA(1);

                         
                        int index77_1291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1291);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA77_1292 = input.LA(1);

                         
                        int index77_1292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1292);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA77_1293 = input.LA(1);

                         
                        int index77_1293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1293);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA77_1294 = input.LA(1);

                         
                        int index77_1294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1294);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA77_1295 = input.LA(1);

                         
                        int index77_1295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1295);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA77_1296 = input.LA(1);

                         
                        int index77_1296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1296);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA77_1297 = input.LA(1);

                         
                        int index77_1297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1297);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA77_1298 = input.LA(1);

                         
                        int index77_1298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1298);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA77_1299 = input.LA(1);

                         
                        int index77_1299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1299);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA77_1300 = input.LA(1);

                         
                        int index77_1300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1300);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA77_1301 = input.LA(1);

                         
                        int index77_1301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1301);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA77_1302 = input.LA(1);

                         
                        int index77_1302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1302);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA77_1303 = input.LA(1);

                         
                        int index77_1303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1303);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA77_1304 = input.LA(1);

                         
                        int index77_1304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1304);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA77_1305 = input.LA(1);

                         
                        int index77_1305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1305);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA77_1306 = input.LA(1);

                         
                        int index77_1306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1306);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA77_1307 = input.LA(1);

                         
                        int index77_1307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1307);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA77_1308 = input.LA(1);

                         
                        int index77_1308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1308);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA77_1324 = input.LA(1);

                         
                        int index77_1324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1324);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA77_1325 = input.LA(1);

                         
                        int index77_1325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1325);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA77_1330 = input.LA(1);

                         
                        int index77_1330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1330);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA77_1336 = input.LA(1);

                         
                        int index77_1336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1336);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA77_1337 = input.LA(1);

                         
                        int index77_1337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1337);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA77_1338 = input.LA(1);

                         
                        int index77_1338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1338);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA77_1340 = input.LA(1);

                         
                        int index77_1340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1340);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA77_1348 = input.LA(1);

                         
                        int index77_1348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1348);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA77_1352 = input.LA(1);

                         
                        int index77_1352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1352);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA77_1357 = input.LA(1);

                         
                        int index77_1357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1357);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA77_1358 = input.LA(1);

                         
                        int index77_1358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1358);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA77_1384 = input.LA(1);

                         
                        int index77_1384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1384);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA77_1385 = input.LA(1);

                         
                        int index77_1385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1385);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA77_1464 = input.LA(1);

                         
                        int index77_1464 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1464);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA77_1465 = input.LA(1);

                         
                        int index77_1465 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1465);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA77_1466 = input.LA(1);

                         
                        int index77_1466 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1466);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA77_1467 = input.LA(1);

                         
                        int index77_1467 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1467);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA77_1468 = input.LA(1);

                         
                        int index77_1468 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1468);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA77_1469 = input.LA(1);

                         
                        int index77_1469 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1469);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA77_1470 = input.LA(1);

                         
                        int index77_1470 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1470);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA77_1471 = input.LA(1);

                         
                        int index77_1471 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1471);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA77_1472 = input.LA(1);

                         
                        int index77_1472 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1472);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA77_1473 = input.LA(1);

                         
                        int index77_1473 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1473);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA77_1474 = input.LA(1);

                         
                        int index77_1474 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1474);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA77_1475 = input.LA(1);

                         
                        int index77_1475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1475);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA77_1476 = input.LA(1);

                         
                        int index77_1476 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1476);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA77_1477 = input.LA(1);

                         
                        int index77_1477 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1477);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA77_1478 = input.LA(1);

                         
                        int index77_1478 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1478);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA77_1479 = input.LA(1);

                         
                        int index77_1479 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1479);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA77_1480 = input.LA(1);

                         
                        int index77_1480 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1480);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA77_1481 = input.LA(1);

                         
                        int index77_1481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1481);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA77_1482 = input.LA(1);

                         
                        int index77_1482 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1482);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA77_1498 = input.LA(1);

                         
                        int index77_1498 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1498);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA77_1499 = input.LA(1);

                         
                        int index77_1499 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1499);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA77_1504 = input.LA(1);

                         
                        int index77_1504 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1504);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA77_1510 = input.LA(1);

                         
                        int index77_1510 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1510);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA77_1511 = input.LA(1);

                         
                        int index77_1511 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1511);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA77_1512 = input.LA(1);

                         
                        int index77_1512 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1512);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA77_1514 = input.LA(1);

                         
                        int index77_1514 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1514);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA77_1515 = input.LA(1);

                         
                        int index77_1515 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1515);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA77_1594 = input.LA(1);

                         
                        int index77_1594 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1594);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA77_1595 = input.LA(1);

                         
                        int index77_1595 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1595);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA77_1596 = input.LA(1);

                         
                        int index77_1596 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1596);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA77_1597 = input.LA(1);

                         
                        int index77_1597 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1597);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA77_1598 = input.LA(1);

                         
                        int index77_1598 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1598);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA77_1599 = input.LA(1);

                         
                        int index77_1599 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1599);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA77_1600 = input.LA(1);

                         
                        int index77_1600 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1600);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA77_1601 = input.LA(1);

                         
                        int index77_1601 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1601);

                        if ( s>=0 ) return s;
                        break;
                    case 315 : 
                        int LA77_1602 = input.LA(1);

                         
                        int index77_1602 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1602);

                        if ( s>=0 ) return s;
                        break;
                    case 316 : 
                        int LA77_1603 = input.LA(1);

                         
                        int index77_1603 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1603);

                        if ( s>=0 ) return s;
                        break;
                    case 317 : 
                        int LA77_1604 = input.LA(1);

                         
                        int index77_1604 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1604);

                        if ( s>=0 ) return s;
                        break;
                    case 318 : 
                        int LA77_1605 = input.LA(1);

                         
                        int index77_1605 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1605);

                        if ( s>=0 ) return s;
                        break;
                    case 319 : 
                        int LA77_1606 = input.LA(1);

                         
                        int index77_1606 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1606);

                        if ( s>=0 ) return s;
                        break;
                    case 320 : 
                        int LA77_1607 = input.LA(1);

                         
                        int index77_1607 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1607);

                        if ( s>=0 ) return s;
                        break;
                    case 321 : 
                        int LA77_1608 = input.LA(1);

                         
                        int index77_1608 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1608);

                        if ( s>=0 ) return s;
                        break;
                    case 322 : 
                        int LA77_1609 = input.LA(1);

                         
                        int index77_1609 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1609);

                        if ( s>=0 ) return s;
                        break;
                    case 323 : 
                        int LA77_1610 = input.LA(1);

                         
                        int index77_1610 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1610);

                        if ( s>=0 ) return s;
                        break;
                    case 324 : 
                        int LA77_1611 = input.LA(1);

                         
                        int index77_1611 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1611);

                        if ( s>=0 ) return s;
                        break;
                    case 325 : 
                        int LA77_1612 = input.LA(1);

                         
                        int index77_1612 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1612);

                        if ( s>=0 ) return s;
                        break;
                    case 326 : 
                        int LA77_1628 = input.LA(1);

                         
                        int index77_1628 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1628);

                        if ( s>=0 ) return s;
                        break;
                    case 327 : 
                        int LA77_1629 = input.LA(1);

                         
                        int index77_1629 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1629);

                        if ( s>=0 ) return s;
                        break;
                    case 328 : 
                        int LA77_1634 = input.LA(1);

                         
                        int index77_1634 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1634);

                        if ( s>=0 ) return s;
                        break;
                    case 329 : 
                        int LA77_1640 = input.LA(1);

                         
                        int index77_1640 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1640);

                        if ( s>=0 ) return s;
                        break;
                    case 330 : 
                        int LA77_1641 = input.LA(1);

                         
                        int index77_1641 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1641);

                        if ( s>=0 ) return s;
                        break;
                    case 331 : 
                        int LA77_1642 = input.LA(1);

                         
                        int index77_1642 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1642);

                        if ( s>=0 ) return s;
                        break;
                    case 332 : 
                        int LA77_1644 = input.LA(1);

                         
                        int index77_1644 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1644);

                        if ( s>=0 ) return s;
                        break;
                    case 333 : 
                        int LA77_1645 = input.LA(1);

                         
                        int index77_1645 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1645);

                        if ( s>=0 ) return s;
                        break;
                    case 334 : 
                        int LA77_1724 = input.LA(1);

                         
                        int index77_1724 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1724);

                        if ( s>=0 ) return s;
                        break;
                    case 335 : 
                        int LA77_1725 = input.LA(1);

                         
                        int index77_1725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1725);

                        if ( s>=0 ) return s;
                        break;
                    case 336 : 
                        int LA77_1726 = input.LA(1);

                         
                        int index77_1726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1726);

                        if ( s>=0 ) return s;
                        break;
                    case 337 : 
                        int LA77_1727 = input.LA(1);

                         
                        int index77_1727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1727);

                        if ( s>=0 ) return s;
                        break;
                    case 338 : 
                        int LA77_1728 = input.LA(1);

                         
                        int index77_1728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1728);

                        if ( s>=0 ) return s;
                        break;
                    case 339 : 
                        int LA77_1729 = input.LA(1);

                         
                        int index77_1729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1729);

                        if ( s>=0 ) return s;
                        break;
                    case 340 : 
                        int LA77_1730 = input.LA(1);

                         
                        int index77_1730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1730);

                        if ( s>=0 ) return s;
                        break;
                    case 341 : 
                        int LA77_1731 = input.LA(1);

                         
                        int index77_1731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1731);

                        if ( s>=0 ) return s;
                        break;
                    case 342 : 
                        int LA77_1732 = input.LA(1);

                         
                        int index77_1732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1732);

                        if ( s>=0 ) return s;
                        break;
                    case 343 : 
                        int LA77_1733 = input.LA(1);

                         
                        int index77_1733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1733);

                        if ( s>=0 ) return s;
                        break;
                    case 344 : 
                        int LA77_1734 = input.LA(1);

                         
                        int index77_1734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1734);

                        if ( s>=0 ) return s;
                        break;
                    case 345 : 
                        int LA77_1735 = input.LA(1);

                         
                        int index77_1735 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1735);

                        if ( s>=0 ) return s;
                        break;
                    case 346 : 
                        int LA77_1736 = input.LA(1);

                         
                        int index77_1736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1736);

                        if ( s>=0 ) return s;
                        break;
                    case 347 : 
                        int LA77_1737 = input.LA(1);

                         
                        int index77_1737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1737);

                        if ( s>=0 ) return s;
                        break;
                    case 348 : 
                        int LA77_1738 = input.LA(1);

                         
                        int index77_1738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1738);

                        if ( s>=0 ) return s;
                        break;
                    case 349 : 
                        int LA77_1739 = input.LA(1);

                         
                        int index77_1739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1739);

                        if ( s>=0 ) return s;
                        break;
                    case 350 : 
                        int LA77_1740 = input.LA(1);

                         
                        int index77_1740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1740);

                        if ( s>=0 ) return s;
                        break;
                    case 351 : 
                        int LA77_1741 = input.LA(1);

                         
                        int index77_1741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1741);

                        if ( s>=0 ) return s;
                        break;
                    case 352 : 
                        int LA77_1742 = input.LA(1);

                         
                        int index77_1742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1742);

                        if ( s>=0 ) return s;
                        break;
                    case 353 : 
                        int LA77_1758 = input.LA(1);

                         
                        int index77_1758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1758);

                        if ( s>=0 ) return s;
                        break;
                    case 354 : 
                        int LA77_1759 = input.LA(1);

                         
                        int index77_1759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1759);

                        if ( s>=0 ) return s;
                        break;
                    case 355 : 
                        int LA77_1764 = input.LA(1);

                         
                        int index77_1764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1764);

                        if ( s>=0 ) return s;
                        break;
                    case 356 : 
                        int LA77_1770 = input.LA(1);

                         
                        int index77_1770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1770);

                        if ( s>=0 ) return s;
                        break;
                    case 357 : 
                        int LA77_1771 = input.LA(1);

                         
                        int index77_1771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1771);

                        if ( s>=0 ) return s;
                        break;
                    case 358 : 
                        int LA77_1772 = input.LA(1);

                         
                        int index77_1772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1773;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index77_1772);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA75_eotS =
        "\105\uffff";
    static final String DFA75_eofS =
        "\1\1\104\uffff";
    static final String DFA75_minS =
        "\1\26\104\uffff";
    static final String DFA75_maxS =
        "\1\u00d9\104\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\102\uffff\1\1";
    static final String DFA75_specialS =
        "\105\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\7\1\2\104\1\1\1\uffff\4"+
            "\1\1\uffff\6\1\1\uffff\2\1\1\uffff\10\1\4\uffff\1\1\3\uffff"+
            "\6\1\3\uffff\4\1\1\uffff\14\1\1\uffff\4\1\1\uffff\11\1\1\uffff"+
            "\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 542:30: ( access_wrapper simple_expression_value )*";
        }
    }
    static final String DFA76_eotS =
        "\104\uffff";
    static final String DFA76_eofS =
        "\1\2\103\uffff";
    static final String DFA76_minS =
        "\1\26\103\uffff";
    static final String DFA76_maxS =
        "\1\u00d9\103\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\1\1\2\101\uffff";
    static final String DFA76_specialS =
        "\104\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\27\uffff\1\2\21\uffff\1\2\21\uffff\1\2\36\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\3\2\1\1\2\uffff"+
            "\1\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\1\uffff\10\2\4\uffff"+
            "\1\2\3\uffff\6\2\3\uffff\4\2\1\uffff\14\2\1\uffff\4\2\1\uffff"+
            "\11\2\1\uffff\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "542:72: ( ( '+=' | '-=' ) simple_expression_value )?";
        }
    }
    static final String DFA79_eotS =
        "\u0168\uffff";
    static final String DFA79_eofS =
        "\2\uffff\1\13\6\uffff\1\u0082\u015e\uffff";
    static final String DFA79_minS =
        "\1\20\1\56\1\26\6\uffff\1\26\1\20\103\uffff\1\20\103\uffff\2\20"+
        "\2\56\2\167\4\56\1\127\3\56\4\20\140\0\2\uffff\10\0\2\uffff\10\0"+
        "\2\uffff\7\0\2\uffff\7\0\2\uffff\74\0";
    static final String DFA79_maxS =
        "\1\u00cf\1\56\1\u00d9\6\uffff\1\u00d9\1\u00da\103\uffff\1\u00da"+
        "\103\uffff\1\u00cf\1\u00da\1\u00d5\1\u00d3\2\167\1\56\1\u00d8\1"+
        "\56\1\u00d8\1\127\3\u00d8\1\u00da\3\u00cf\140\0\2\uffff\10\0\2\uffff"+
        "\10\0\2\uffff\7\0\2\uffff\7\0\2\uffff\74\0";
    static final String DFA79_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\103\uffff\103\2\162"+
        "\uffff\1\1\11\uffff\1\1\11\uffff\1\1\10\uffff\1\1\10\uffff\1\1\75"+
        "\uffff";
    static final String DFA79_specialS =
        "\1\0\10\uffff\1\1\u008f\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1"+
        "\6\4\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
        "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
        "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
        "\1\146\2\uffff\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\2"+
        "\uffff\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166\2\uffff\1"+
        "\167\1\170\1\171\1\172\1\173\1\174\1\175\2\uffff\1\176\1\177\1\u0080"+
        "\1\u0081\1\u0082\1\u0083\1\u0084\2\uffff\1\u0085\1\u0086\1\u0087"+
        "\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
        "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097"+
        "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af"+
        "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7"+
        "\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf"+
        "\1\u00c0}>";
    static final String[] DFA79_transitionS = {
            "\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\35\uffff\1\1\4\uffff"+
            "\1\3\32\uffff\1\5\26\uffff\1\10\1\uffff\1\10\21\uffff\1\10\16"+
            "\uffff\1\10",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\12\13\1\uffff"+
            "\4\13\1\uffff\6\13\1\uffff\2\13\1\uffff\10\13\4\uffff\1\13\3"+
            "\uffff\6\13\3\uffff\1\12\3\13\1\uffff\14\13\1\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\7\13\1\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0088\27\uffff\1\127\21\uffff\1\174\21\uffff\1\173\36\uffff"+
            "\1\u008b\1\uffff\2\u008b\1\122\1\uffff\1\120\1\uffff\1\125\1"+
            "\130\1\uffff\1\131\1\u0091\1\121\1\u008e\1\131\1\u0091\1\121"+
            "\2\117\1\u008b\1\uffff\1\u0090\1\165\2\u008b\1\uffff\6\u008b"+
            "\1\uffff\1\124\1\123\1\uffff\1\172\1\176\1\u0084\1\u008d\1\u008a"+
            "\1\177\1\u0083\1\u0086\4\uffff\1\u0085\3\uffff\1\151\1\u008c"+
            "\1\153\1\152\1\132\1\u0087\3\uffff\1\116\1\175\1\u008f\1\u008b"+
            "\1\uffff\1\143\1\137\1\166\1\u0080\1\145\1\167\1\u0081\1\155"+
            "\1\160\1\141\1\156\1\u0087\1\uffff\1\163\1\170\1\134\1\157\1"+
            "\uffff\1\147\1\133\1\135\1\150\1\162\1\136\1\154\1\140\1\161"+
            "\1\uffff\1\u0089\1\142\1\146\1\144\1\164\1\171\1\u008b\1\uffff"+
            "\1\u008b\1\126",
            "\1\u009d\35\uffff\1\u0099\24\uffff\1\u009e\23\uffff\1\u009b"+
            "\30\uffff\1\u00a1\4\uffff\1\u0098\1\uffff\1\u0093\2\uffff\1"+
            "\u009a\2\uffff\1\u00a3\2\uffff\1\u0092\1\u00a3\23\uffff\1\u009c"+
            "\14\uffff\1\u0097\2\uffff\1\u0096\6\uffff\1\u009f\1\uffff\1"+
            "\u009f\1\u00a0\2\uffff\1\u0094\1\u0095\14\uffff\1\u009f\16\uffff"+
            "\1\u009f\12\uffff\1\u00a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00af\35\uffff\1\u00ab\24\uffff\1\u00b0\23\uffff\1\u00ad"+
            "\30\uffff\1\u00b3\4\uffff\1\u00aa\1\uffff\1\u00a5\2\uffff\1"+
            "\u00ac\2\uffff\1\u00b5\2\uffff\1\u00a4\1\u00b5\23\uffff\1\u00ae"+
            "\14\uffff\1\u00a9\2\uffff\1\u00a8\6\uffff\1\u00b1\1\uffff\1"+
            "\u00b1\1\u00b2\2\uffff\1\u00a6\1\u00a7\14\uffff\1\u00b1\16\uffff"+
            "\1\u00b1\12\uffff\1\u00b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c0\35\uffff\1\u00bc\24\uffff\1\u00c1\23\uffff\1\u00be"+
            "\35\uffff\1\u00bb\1\uffff\1\u00b6\2\uffff\1\u00bd\32\uffff\1"+
            "\u00bf\14\uffff\1\u00ba\2\uffff\1\u00b9\6\uffff\1\u00c2\1\uffff"+
            "\1\u00c2\1\u00c3\2\uffff\1\u00b7\1\u00b8\14\uffff\1\u00c2\16"+
            "\uffff\1\u00c2",
            "\1\u00de\35\uffff\1\u00d1\24\uffff\1\u00df\23\uffff\1\u00dc"+
            "\30\uffff\1\u00e2\4\uffff\1\u00da\1\uffff\1\u00c6\2\uffff\1"+
            "\u00db\2\uffff\1\u00e4\2\uffff\1\u00d5\1\u00e4\23\uffff\1\u00dd"+
            "\14\uffff\1\u00d9\2\uffff\1\u00d8\4\uffff\1\u00cd\1\uffff\1"+
            "\u00e0\1\uffff\1\u00e0\1\u00e1\2\uffff\1\u00d6\1\u00d7\1\u00c7"+
            "\1\u00c4\2\uffff\1\u00c9\4\uffff\1\u00d4\2\uffff\1\u00e0\2\uffff"+
            "\1\u00c5\2\uffff\1\u00cb\1\u00ce\1\u00cf\1\u00cc\1\uffff\1\u00d0"+
            "\1\uffff\1\u00d2\1\uffff\1\u00e0\1\uffff\1\u00d3\1\u00ca\1\u00c8"+
            "\6\uffff\1\u00e3",
            "\1\u00e6\u00a6\uffff\1\u00e5",
            "\1\u00f4\110\uffff\1\u00e9\1\uffff\1\u00f8\60\uffff\1\u00f0"+
            "\11\uffff\1\u00ea\1\u00e7\2\uffff\1\u00ec\4\uffff\1\u00f7\5"+
            "\uffff\1\u00e8\2\uffff\1\u00ee\1\u00f1\1\u00f2\1\u00ef\1\uffff"+
            "\1\u00f3\1\uffff\1\u00f5\3\uffff\1\u00f6\1\u00ed\1\u00eb",
            "\1\u00f9",
            "\1\u00fa",
            "\1\u00fb",
            "\1\13\102\uffff\1\u0101\1\uffff\3\u0101\1\uffff\1\u00fe\2\uffff"+
            "\1\u0101\1\uffff\1\u0101\1\u0100\1\u00ff\1\uffff\1\u0101\1\u0100"+
            "\1\u00ff\2\u00fd\1\u0101\3\uffff\2\u0101\1\uffff\6\u0101\1\uffff"+
            "\1\u0103\1\u0102\32\uffff\1\u00fc\1\uffff\1\u0104\1\u0101\43"+
            "\uffff\1\u0101\1\uffff\1\u0101",
            "\1\u0106",
            "\1\13\102\uffff\1\u010b\1\uffff\3\u010b\1\uffff\1\u0108\2\uffff"+
            "\1\u010b\1\uffff\1\u010b\1\u010a\1\u0109\1\uffff\1\u010b\1\u010a"+
            "\1\u0109\2\u0107\1\u010b\3\uffff\2\u010b\1\uffff\6\u010b\1\uffff"+
            "\1\u010d\1\u010c\34\uffff\1\u010e\1\u010b\43\uffff\1\u010b\1"+
            "\uffff\1\u010b",
            "\1\u0110",
            "\1\13\102\uffff\1\u0115\1\uffff\3\u0115\1\uffff\1\u0112\2\uffff"+
            "\1\u0115\1\uffff\1\u0115\1\u0114\1\u0113\1\uffff\1\u0115\1\u0114"+
            "\1\u0113\2\u0111\1\u0115\3\uffff\2\u0115\1\uffff\6\u0115\1\uffff"+
            "\1\u0117\1\u0116\34\uffff\1\u0118\1\u0115\43\uffff\1\u0115\1"+
            "\uffff\1\u0115",
            "\1\13\102\uffff\1\u011e\1\uffff\3\u011e\1\uffff\1\u011b\2\uffff"+
            "\1\u011e\1\uffff\1\u011e\1\u011d\1\u011c\1\uffff\1\u011e\1\u011d"+
            "\1\u011c\2\u011a\1\u011e\3\uffff\2\u011e\1\uffff\6\u011e\1\uffff"+
            "\1\u0120\1\u011f\34\uffff\1\u0121\1\u011e\43\uffff\1\u011e\1"+
            "\uffff\1\u011e",
            "\1\13\102\uffff\1\u0127\1\uffff\3\u0127\1\uffff\1\u0124\2\uffff"+
            "\1\u0127\1\uffff\1\u0127\1\u0126\1\u0125\1\uffff\1\u0127\1\u0126"+
            "\1\u0125\2\u0123\1\u0127\3\uffff\2\u0127\1\uffff\6\u0127\1\uffff"+
            "\1\u0129\1\u0128\34\uffff\1\u012a\1\u0127\43\uffff\1\u0127\1"+
            "\uffff\1\u0127",
            "\1\u0137\35\uffff\1\u0133\24\uffff\1\u0138\23\uffff\1\u0135"+
            "\30\uffff\1\u013b\4\uffff\1\u0132\1\uffff\1\u012d\2\uffff\1"+
            "\u0134\2\uffff\1\u013d\2\uffff\1\u012c\1\u013d\23\uffff\1\u0136"+
            "\14\uffff\1\u0131\2\uffff\1\u0130\6\uffff\1\u0139\1\uffff\1"+
            "\u0139\1\u013a\2\uffff\1\u012e\1\u012f\14\uffff\1\u0139\16\uffff"+
            "\1\u0139\12\uffff\1\u013c",
            "\1\u0148\35\uffff\1\u0144\24\uffff\1\u0149\23\uffff\1\u0146"+
            "\35\uffff\1\u0143\1\uffff\1\u013e\2\uffff\1\u0145\32\uffff\1"+
            "\u0147\14\uffff\1\u0142\2\uffff\1\u0141\6\uffff\1\u014a\1\uffff"+
            "\1\u014a\1\u014b\2\uffff\1\u013f\1\u0140\14\uffff\1\u014a\16"+
            "\uffff\1\u014a",
            "\1\u0156\35\uffff\1\u0152\24\uffff\1\u0157\23\uffff\1\u0154"+
            "\35\uffff\1\u0151\1\uffff\1\u014c\2\uffff\1\u0153\32\uffff\1"+
            "\u0155\14\uffff\1\u0150\2\uffff\1\u014f\6\uffff\1\u0158\1\uffff"+
            "\1\u0158\1\u0159\2\uffff\1\u014d\1\u014e\14\uffff\1\u0158\16"+
            "\uffff\1\u0158",
            "\1\u0164\35\uffff\1\u0160\24\uffff\1\u0165\23\uffff\1\u0162"+
            "\35\uffff\1\u015f\1\uffff\1\u015a\2\uffff\1\u0161\32\uffff\1"+
            "\u0163\14\uffff\1\u015e\2\uffff\1\u015d\6\uffff\1\u0166\1\uffff"+
            "\1\u0166\1\u0167\2\uffff\1\u015b\1\u015c\14\uffff\1\u0166\16"+
            "\uffff\1\u0166",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "545:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_0 = input.LA(1);

                         
                        int index79_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA79_0==117) ) {s = 1;}

                        else if ( (LA79_0==ID) ) {s = 2;}

                        else if ( (LA79_0==122) && (synpred18_Objc())) {s = 3;}

                        else if ( (LA79_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA79_0==149) ) {s = 5;}

                        else if ( (LA79_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA79_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA79_0==172||LA79_0==174||LA79_0==192||LA79_0==207) ) {s = 8;}

                         
                        input.seek(index79_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_9 = input.LA(1);

                         
                        int index79_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA79_9==175) ) {s = 78;}

                        else if ( ((LA79_9 >= 131 && LA79_9 <= 132)) && (synpred18_Objc())) {s = 79;}

                        else if ( (LA79_9==119) && (synpred18_Objc())) {s = 80;}

                        else if ( (LA79_9==126||LA79_9==130) && (synpred18_Objc())) {s = 81;}

                        else if ( (LA79_9==117) && (synpred18_Objc())) {s = 82;}

                        else if ( (LA79_9==148) && (synpred18_Objc())) {s = 83;}

                        else if ( (LA79_9==147) && (synpred18_Objc())) {s = 84;}

                        else if ( (LA79_9==121) && (synpred18_Objc())) {s = 85;}

                        else if ( (LA79_9==217) && (synpred18_Objc())) {s = 86;}

                        else if ( (LA79_9==ID) && (synpred18_Objc())) {s = 87;}

                        else if ( (LA79_9==122) && (synpred18_Objc())) {s = 88;}

                        else if ( (LA79_9==124||LA79_9==128) && (synpred18_Objc())) {s = 89;}

                        else if ( (LA79_9==170) && (synpred18_Objc())) {s = 90;}

                        else if ( (LA79_9==199) && (synpred18_Objc())) {s = 91;}

                        else if ( (LA79_9==195) && (synpred18_Objc())) {s = 92;}

                        else if ( (LA79_9==200) && (synpred18_Objc())) {s = 93;}

                        else if ( (LA79_9==203) && (synpred18_Objc())) {s = 94;}

                        else if ( (LA79_9==181) && (synpred18_Objc())) {s = 95;}

                        else if ( (LA79_9==205) && (synpred18_Objc())) {s = 96;}

                        else if ( (LA79_9==189) && (synpred18_Objc())) {s = 97;}

                        else if ( (LA79_9==209) && (synpred18_Objc())) {s = 98;}

                        else if ( (LA79_9==180) && (synpred18_Objc())) {s = 99;}

                        else if ( (LA79_9==211) && (synpred18_Objc())) {s = 100;}

                        else if ( (LA79_9==184) && (synpred18_Objc())) {s = 101;}

                        else if ( (LA79_9==210) && (synpred18_Objc())) {s = 102;}

                        else if ( (LA79_9==198) && (synpred18_Objc())) {s = 103;}

                        else if ( (LA79_9==201) && (synpred18_Objc())) {s = 104;}

                        else if ( (LA79_9==166) && (synpred18_Objc())) {s = 105;}

                        else if ( (LA79_9==169) && (synpred18_Objc())) {s = 106;}

                        else if ( (LA79_9==168) && (synpred18_Objc())) {s = 107;}

                        else if ( (LA79_9==204) && (synpred18_Objc())) {s = 108;}

                        else if ( (LA79_9==187) && (synpred18_Objc())) {s = 109;}

                        else if ( (LA79_9==190) && (synpred18_Objc())) {s = 110;}

                        else if ( (LA79_9==196) && (synpred18_Objc())) {s = 111;}

                        else if ( (LA79_9==188) && (synpred18_Objc())) {s = 112;}

                        else if ( (LA79_9==206) && (synpred18_Objc())) {s = 113;}

                        else if ( (LA79_9==202) && (synpred18_Objc())) {s = 114;}

                        else if ( (LA79_9==193) && (synpred18_Objc())) {s = 115;}

                        else if ( (LA79_9==212) && (synpred18_Objc())) {s = 116;}

                        else if ( (LA79_9==136) && (synpred18_Objc())) {s = 117;}

                        else if ( (LA79_9==182) && (synpred18_Objc())) {s = 118;}

                        else if ( (LA79_9==185) && (synpred18_Objc())) {s = 119;}

                        else if ( (LA79_9==194) && (synpred18_Objc())) {s = 120;}

                        else if ( (LA79_9==213) && (synpred18_Objc())) {s = 121;}

                        else if ( (LA79_9==150) && (synpred18_Objc())) {s = 122;}

                        else if ( (LA79_9==SINGLE_COMMENT_LIT) && (synpred18_Objc())) {s = 123;}

                        else if ( (LA79_9==MULTI_COMMENT_LIT) && (synpred18_Objc())) {s = 124;}

                        else if ( (LA79_9==176) && (synpred18_Objc())) {s = 125;}

                        else if ( (LA79_9==151) && (synpred18_Objc())) {s = 126;}

                        else if ( (LA79_9==155) && (synpred18_Objc())) {s = 127;}

                        else if ( (LA79_9==183) && (synpred18_Objc())) {s = 128;}

                        else if ( (LA79_9==186) && (synpred18_Objc())) {s = 129;}

                        else if ( (LA79_9==EOF) && (synpred18_Objc())) {s = 130;}

                        else if ( (LA79_9==156) && (synpred18_Objc())) {s = 131;}

                        else if ( (LA79_9==152) && (synpred18_Objc())) {s = 132;}

                        else if ( (LA79_9==162) && (synpred18_Objc())) {s = 133;}

                        else if ( (LA79_9==157) && (synpred18_Objc())) {s = 134;}

                        else if ( (LA79_9==171||LA79_9==191) && (synpred18_Objc())) {s = 135;}

                        else if ( (LA79_9==DEFINE_LITERAL) && (synpred18_Objc())) {s = 136;}

                        else if ( (LA79_9==208) && (synpred18_Objc())) {s = 137;}

                        else if ( (LA79_9==154) && (synpred18_Objc())) {s = 138;}

                        else if ( (LA79_9==113||(LA79_9 >= 115 && LA79_9 <= 116)||LA79_9==133||(LA79_9 >= 137 && LA79_9 <= 138)||(LA79_9 >= 140 && LA79_9 <= 145)||LA79_9==178||LA79_9==214||LA79_9==216) && (synpred18_Objc())) {s = 139;}

                        else if ( (LA79_9==167) && (synpred18_Objc())) {s = 140;}

                        else if ( (LA79_9==153) && (synpred18_Objc())) {s = 141;}

                        else if ( (LA79_9==127) && (synpred18_Objc())) {s = 142;}

                        else if ( (LA79_9==177) && (synpred18_Objc())) {s = 143;}

                        else if ( (LA79_9==135) && (synpred18_Objc())) {s = 144;}

                        else if ( (LA79_9==125||LA79_9==129) && (synpred18_Objc())) {s = 145;}

                         
                        input.seek(index79_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_153 = input.LA(1);

                         
                        int index79_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA79_153==175) ) {s = 252;}

                        else if ( ((LA79_153 >= 131 && LA79_153 <= 132)) ) {s = 253;}

                        else if ( (LA79_153==119) ) {s = 254;}

                        else if ( (LA79_153==126||LA79_153==130) ) {s = 255;}

                        else if ( (LA79_153==125||LA79_153==129) ) {s = 256;}

                        else if ( (LA79_153==113||(LA79_153 >= 115 && LA79_153 <= 117)||LA79_153==122||LA79_153==124||LA79_153==128||LA79_153==133||(LA79_153 >= 137 && LA79_153 <= 138)||(LA79_153 >= 140 && LA79_153 <= 145)||LA79_153==178||LA79_153==214||LA79_153==216) ) {s = 257;}

                        else if ( (LA79_153==148) ) {s = 258;}

                        else if ( (LA79_153==147) ) {s = 259;}

                        else if ( (LA79_153==177) && (synpred17_Objc())) {s = 260;}

                        else if ( (LA79_153==ID) ) {s = 11;}

                         
                        input.seek(index79_153);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA79_155 = input.LA(1);

                         
                        int index79_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA79_155 >= 131 && LA79_155 <= 132)) ) {s = 263;}

                        else if ( (LA79_155==119) ) {s = 264;}

                        else if ( (LA79_155==126||LA79_155==130) ) {s = 265;}

                        else if ( (LA79_155==125||LA79_155==129) ) {s = 266;}

                        else if ( (LA79_155==113||(LA79_155 >= 115 && LA79_155 <= 117)||LA79_155==122||LA79_155==124||LA79_155==128||LA79_155==133||(LA79_155 >= 137 && LA79_155 <= 138)||(LA79_155 >= 140 && LA79_155 <= 145)||LA79_155==178||LA79_155==214||LA79_155==216) ) {s = 267;}

                        else if ( (LA79_155==148) ) {s = 268;}

                        else if ( (LA79_155==147) ) {s = 269;}

                        else if ( (LA79_155==177) && (synpred17_Objc())) {s = 270;}

                        else if ( (LA79_155==ID) ) {s = 11;}

                         
                        input.seek(index79_155);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA79_157 = input.LA(1);

                         
                        int index79_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA79_157 >= 131 && LA79_157 <= 132)) ) {s = 273;}

                        else if ( (LA79_157==119) ) {s = 274;}

                        else if ( (LA79_157==126||LA79_157==130) ) {s = 275;}

                        else if ( (LA79_157==125||LA79_157==129) ) {s = 276;}

                        else if ( (LA79_157==113||(LA79_157 >= 115 && LA79_157 <= 117)||LA79_157==122||LA79_157==124||LA79_157==128||LA79_157==133||(LA79_157 >= 137 && LA79_157 <= 138)||(LA79_157 >= 140 && LA79_157 <= 145)||LA79_157==178||LA79_157==214||LA79_157==216) ) {s = 277;}

                        else if ( (LA79_157==148) ) {s = 278;}

                        else if ( (LA79_157==147) ) {s = 279;}

                        else if ( (LA79_157==177) && (synpred17_Objc())) {s = 280;}

                        else if ( (LA79_157==ID) ) {s = 11;}

                         
                        input.seek(index79_157);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA79_158 = input.LA(1);

                         
                        int index79_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA79_158 >= 131 && LA79_158 <= 132)) ) {s = 282;}

                        else if ( (LA79_158==119) ) {s = 283;}

                        else if ( (LA79_158==126||LA79_158==130) ) {s = 284;}

                        else if ( (LA79_158==125||LA79_158==129) ) {s = 285;}

                        else if ( (LA79_158==113||(LA79_158 >= 115 && LA79_158 <= 117)||LA79_158==122||LA79_158==124||LA79_158==128||LA79_158==133||(LA79_158 >= 137 && LA79_158 <= 138)||(LA79_158 >= 140 && LA79_158 <= 145)||LA79_158==178||LA79_158==214||LA79_158==216) ) {s = 286;}

                        else if ( (LA79_158==148) ) {s = 287;}

                        else if ( (LA79_158==147) ) {s = 288;}

                        else if ( (LA79_158==177) && (synpred17_Objc())) {s = 289;}

                        else if ( (LA79_158==ID) ) {s = 11;}

                         
                        input.seek(index79_158);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA79_159 = input.LA(1);

                         
                        int index79_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA79_159 >= 131 && LA79_159 <= 132)) ) {s = 291;}

                        else if ( (LA79_159==119) ) {s = 292;}

                        else if ( (LA79_159==126||LA79_159==130) ) {s = 293;}

                        else if ( (LA79_159==125||LA79_159==129) ) {s = 294;}

                        else if ( (LA79_159==113||(LA79_159 >= 115 && LA79_159 <= 117)||LA79_159==122||LA79_159==124||LA79_159==128||LA79_159==133||(LA79_159 >= 137 && LA79_159 <= 138)||(LA79_159 >= 140 && LA79_159 <= 145)||LA79_159==178||LA79_159==214||LA79_159==216) ) {s = 295;}

                        else if ( (LA79_159==148) ) {s = 296;}

                        else if ( (LA79_159==147) ) {s = 297;}

                        else if ( (LA79_159==177) && (synpred17_Objc())) {s = 298;}

                        else if ( (LA79_159==ID) ) {s = 11;}

                         
                        input.seek(index79_159);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA79_164 = input.LA(1);

                         
                        int index79_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_164);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA79_165 = input.LA(1);

                         
                        int index79_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_165);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA79_166 = input.LA(1);

                         
                        int index79_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_166);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA79_167 = input.LA(1);

                         
                        int index79_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_167);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA79_168 = input.LA(1);

                         
                        int index79_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_168);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA79_169 = input.LA(1);

                         
                        int index79_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_169);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA79_170 = input.LA(1);

                         
                        int index79_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_170);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA79_171 = input.LA(1);

                         
                        int index79_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_171);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA79_172 = input.LA(1);

                         
                        int index79_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_172);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA79_173 = input.LA(1);

                         
                        int index79_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_173);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA79_174 = input.LA(1);

                         
                        int index79_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_174);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA79_175 = input.LA(1);

                         
                        int index79_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_175);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA79_176 = input.LA(1);

                         
                        int index79_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_176);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA79_177 = input.LA(1);

                         
                        int index79_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_177);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA79_178 = input.LA(1);

                         
                        int index79_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_178);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA79_179 = input.LA(1);

                         
                        int index79_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_179);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA79_180 = input.LA(1);

                         
                        int index79_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_180);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA79_181 = input.LA(1);

                         
                        int index79_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (synpred18_Objc()) ) {s = 145;}

                         
                        input.seek(index79_181);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA79_182 = input.LA(1);

                         
                        int index79_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_182);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA79_183 = input.LA(1);

                         
                        int index79_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_183);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA79_184 = input.LA(1);

                         
                        int index79_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_184);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA79_185 = input.LA(1);

                         
                        int index79_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_185);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA79_186 = input.LA(1);

                         
                        int index79_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_186);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA79_187 = input.LA(1);

                         
                        int index79_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_187);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA79_188 = input.LA(1);

                         
                        int index79_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_188);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA79_189 = input.LA(1);

                         
                        int index79_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_189);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA79_190 = input.LA(1);

                         
                        int index79_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_190);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA79_191 = input.LA(1);

                         
                        int index79_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_191);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA79_192 = input.LA(1);

                         
                        int index79_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_192);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA79_193 = input.LA(1);

                         
                        int index79_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_193);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA79_194 = input.LA(1);

                         
                        int index79_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_194);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA79_195 = input.LA(1);

                         
                        int index79_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_195);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA79_196 = input.LA(1);

                         
                        int index79_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_196);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA79_197 = input.LA(1);

                         
                        int index79_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_197);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA79_198 = input.LA(1);

                         
                        int index79_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_198);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA79_199 = input.LA(1);

                         
                        int index79_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_199);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA79_200 = input.LA(1);

                         
                        int index79_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_200);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA79_201 = input.LA(1);

                         
                        int index79_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_201);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA79_202 = input.LA(1);

                         
                        int index79_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_202);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA79_203 = input.LA(1);

                         
                        int index79_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_203);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA79_204 = input.LA(1);

                         
                        int index79_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_204);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA79_205 = input.LA(1);

                         
                        int index79_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_205);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA79_206 = input.LA(1);

                         
                        int index79_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_206);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA79_207 = input.LA(1);

                         
                        int index79_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_207);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA79_208 = input.LA(1);

                         
                        int index79_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_208);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA79_209 = input.LA(1);

                         
                        int index79_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_209);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA79_210 = input.LA(1);

                         
                        int index79_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_210);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA79_211 = input.LA(1);

                         
                        int index79_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_211);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA79_212 = input.LA(1);

                         
                        int index79_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_212);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA79_213 = input.LA(1);

                         
                        int index79_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_213);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA79_214 = input.LA(1);

                         
                        int index79_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_214);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA79_215 = input.LA(1);

                         
                        int index79_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_215);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA79_216 = input.LA(1);

                         
                        int index79_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_216);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA79_217 = input.LA(1);

                         
                        int index79_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_217);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA79_218 = input.LA(1);

                         
                        int index79_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_218);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA79_219 = input.LA(1);

                         
                        int index79_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_219);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA79_220 = input.LA(1);

                         
                        int index79_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_220);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA79_221 = input.LA(1);

                         
                        int index79_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_221);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA79_222 = input.LA(1);

                         
                        int index79_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_222);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA79_223 = input.LA(1);

                         
                        int index79_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_223);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA79_224 = input.LA(1);

                         
                        int index79_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_224);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA79_225 = input.LA(1);

                         
                        int index79_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_225);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA79_226 = input.LA(1);

                         
                        int index79_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_226);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA79_227 = input.LA(1);

                         
                        int index79_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_227);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA79_228 = input.LA(1);

                         
                        int index79_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_228);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA79_229 = input.LA(1);

                         
                        int index79_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_229);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA79_230 = input.LA(1);

                         
                        int index79_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_230);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA79_231 = input.LA(1);

                         
                        int index79_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_231);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA79_232 = input.LA(1);

                         
                        int index79_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_232);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA79_233 = input.LA(1);

                         
                        int index79_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_233);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA79_234 = input.LA(1);

                         
                        int index79_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_234);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA79_235 = input.LA(1);

                         
                        int index79_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_235);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA79_236 = input.LA(1);

                         
                        int index79_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_236);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA79_237 = input.LA(1);

                         
                        int index79_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_237);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA79_238 = input.LA(1);

                         
                        int index79_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_238);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA79_239 = input.LA(1);

                         
                        int index79_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_239);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA79_240 = input.LA(1);

                         
                        int index79_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_240);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA79_241 = input.LA(1);

                         
                        int index79_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_241);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA79_242 = input.LA(1);

                         
                        int index79_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_242);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA79_243 = input.LA(1);

                         
                        int index79_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_243);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA79_244 = input.LA(1);

                         
                        int index79_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_244);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA79_245 = input.LA(1);

                         
                        int index79_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_245);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA79_246 = input.LA(1);

                         
                        int index79_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_246);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA79_247 = input.LA(1);

                         
                        int index79_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_247);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA79_248 = input.LA(1);

                         
                        int index79_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_248);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA79_249 = input.LA(1);

                         
                        int index79_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_249);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA79_250 = input.LA(1);

                         
                        int index79_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_250);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA79_251 = input.LA(1);

                         
                        int index79_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_251);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA79_252 = input.LA(1);

                         
                        int index79_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_252);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA79_253 = input.LA(1);

                         
                        int index79_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_253);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA79_254 = input.LA(1);

                         
                        int index79_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_254);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA79_255 = input.LA(1);

                         
                        int index79_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_255);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA79_256 = input.LA(1);

                         
                        int index79_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_256);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA79_257 = input.LA(1);

                         
                        int index79_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_257);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA79_258 = input.LA(1);

                         
                        int index79_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_258);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA79_259 = input.LA(1);

                         
                        int index79_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_259);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA79_262 = input.LA(1);

                         
                        int index79_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_262);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA79_263 = input.LA(1);

                         
                        int index79_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_263);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA79_264 = input.LA(1);

                         
                        int index79_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_264);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA79_265 = input.LA(1);

                         
                        int index79_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_265);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA79_266 = input.LA(1);

                         
                        int index79_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_266);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA79_267 = input.LA(1);

                         
                        int index79_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_267);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA79_268 = input.LA(1);

                         
                        int index79_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_268);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA79_269 = input.LA(1);

                         
                        int index79_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_269);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA79_272 = input.LA(1);

                         
                        int index79_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_272);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA79_273 = input.LA(1);

                         
                        int index79_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_273);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA79_274 = input.LA(1);

                         
                        int index79_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_274);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA79_275 = input.LA(1);

                         
                        int index79_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_275);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA79_276 = input.LA(1);

                         
                        int index79_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_276);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA79_277 = input.LA(1);

                         
                        int index79_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_277);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA79_278 = input.LA(1);

                         
                        int index79_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_278);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA79_279 = input.LA(1);

                         
                        int index79_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_279);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA79_282 = input.LA(1);

                         
                        int index79_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_282);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA79_283 = input.LA(1);

                         
                        int index79_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_283);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA79_284 = input.LA(1);

                         
                        int index79_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_284);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA79_285 = input.LA(1);

                         
                        int index79_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_285);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA79_286 = input.LA(1);

                         
                        int index79_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_286);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA79_287 = input.LA(1);

                         
                        int index79_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_287);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA79_288 = input.LA(1);

                         
                        int index79_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_288);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA79_291 = input.LA(1);

                         
                        int index79_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_291);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA79_292 = input.LA(1);

                         
                        int index79_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_292);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA79_293 = input.LA(1);

                         
                        int index79_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_293);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA79_294 = input.LA(1);

                         
                        int index79_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_294);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA79_295 = input.LA(1);

                         
                        int index79_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_295);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA79_296 = input.LA(1);

                         
                        int index79_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_296);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA79_297 = input.LA(1);

                         
                        int index79_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_297);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA79_300 = input.LA(1);

                         
                        int index79_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_300);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA79_301 = input.LA(1);

                         
                        int index79_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_301);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA79_302 = input.LA(1);

                         
                        int index79_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_302);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA79_303 = input.LA(1);

                         
                        int index79_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_303);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA79_304 = input.LA(1);

                         
                        int index79_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_304);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA79_305 = input.LA(1);

                         
                        int index79_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_305);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA79_306 = input.LA(1);

                         
                        int index79_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_306);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA79_307 = input.LA(1);

                         
                        int index79_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_307);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA79_308 = input.LA(1);

                         
                        int index79_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_308);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA79_309 = input.LA(1);

                         
                        int index79_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_309);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA79_310 = input.LA(1);

                         
                        int index79_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_310);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA79_311 = input.LA(1);

                         
                        int index79_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_311);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA79_312 = input.LA(1);

                         
                        int index79_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_312);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA79_313 = input.LA(1);

                         
                        int index79_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_313);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA79_314 = input.LA(1);

                         
                        int index79_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_314);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA79_315 = input.LA(1);

                         
                        int index79_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_315);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA79_316 = input.LA(1);

                         
                        int index79_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_316);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA79_317 = input.LA(1);

                         
                        int index79_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_317);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA79_318 = input.LA(1);

                         
                        int index79_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_318);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA79_319 = input.LA(1);

                         
                        int index79_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_319);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA79_320 = input.LA(1);

                         
                        int index79_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_320);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA79_321 = input.LA(1);

                         
                        int index79_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_321);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA79_322 = input.LA(1);

                         
                        int index79_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_322);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA79_323 = input.LA(1);

                         
                        int index79_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_323);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA79_324 = input.LA(1);

                         
                        int index79_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_324);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA79_325 = input.LA(1);

                         
                        int index79_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_325);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA79_326 = input.LA(1);

                         
                        int index79_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_326);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA79_327 = input.LA(1);

                         
                        int index79_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_327);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA79_328 = input.LA(1);

                         
                        int index79_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_328);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA79_329 = input.LA(1);

                         
                        int index79_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_329);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA79_330 = input.LA(1);

                         
                        int index79_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_330);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA79_331 = input.LA(1);

                         
                        int index79_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_331);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA79_332 = input.LA(1);

                         
                        int index79_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_332);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA79_333 = input.LA(1);

                         
                        int index79_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_333);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA79_334 = input.LA(1);

                         
                        int index79_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_334);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA79_335 = input.LA(1);

                         
                        int index79_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_335);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA79_336 = input.LA(1);

                         
                        int index79_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_336);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA79_337 = input.LA(1);

                         
                        int index79_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_337);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA79_338 = input.LA(1);

                         
                        int index79_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_338);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA79_339 = input.LA(1);

                         
                        int index79_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_339);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA79_340 = input.LA(1);

                         
                        int index79_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_340);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA79_341 = input.LA(1);

                         
                        int index79_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_341);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA79_342 = input.LA(1);

                         
                        int index79_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_342);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA79_343 = input.LA(1);

                         
                        int index79_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_343);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA79_344 = input.LA(1);

                         
                        int index79_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_344);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA79_345 = input.LA(1);

                         
                        int index79_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_345);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA79_346 = input.LA(1);

                         
                        int index79_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_346);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA79_347 = input.LA(1);

                         
                        int index79_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_347);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA79_348 = input.LA(1);

                         
                        int index79_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_348);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA79_349 = input.LA(1);

                         
                        int index79_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_349);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA79_350 = input.LA(1);

                         
                        int index79_350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_350);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA79_351 = input.LA(1);

                         
                        int index79_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_351);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA79_352 = input.LA(1);

                         
                        int index79_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_352);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA79_353 = input.LA(1);

                         
                        int index79_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_353);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA79_354 = input.LA(1);

                         
                        int index79_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_354);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA79_355 = input.LA(1);

                         
                        int index79_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_355);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA79_356 = input.LA(1);

                         
                        int index79_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_356);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA79_357 = input.LA(1);

                         
                        int index79_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_357);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA79_358 = input.LA(1);

                         
                        int index79_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_358);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA79_359 = input.LA(1);

                         
                        int index79_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 298;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index79_359);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA81_eotS =
        "\74\uffff";
    static final String DFA81_eofS =
        "\74\uffff";
    static final String DFA81_minS =
        "\2\56\1\165\17\uffff\1\165\6\uffff\1\56\4\uffff\1\56\4\uffff\1\u008f"+
        "\1\u0089\2\u008f\1\172\1\uffff\5\0\1\uffff\1\0\1\uffff\10\0\1\uffff"+
        "\1\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00d3\1\u00cb\1\u00af\17\uffff\1\u00af\6\uffff\1\u00cb\4\uffff"+
        "\1\u00cb\4\uffff\2\u008f\1\u00c8\1\u00cb\1\u008f\1\uffff\5\0\1\uffff"+
        "\1\0\1\uffff\10\0\1\uffff\1\0\1\uffff";
    static final String DFA81_acceptS =
        "\3\uffff\1\2\67\uffff\1\1";
    static final String DFA81_specialS =
        "\51\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\uffff\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\uffff\1\16\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\3\110\uffff\1\3\62\uffff\1\3\11\uffff\1\3\1\1\2\uffff\1\3"+
            "\4\uffff\1\3\5\uffff\1\2\2\uffff\4\3\1\uffff\1\3\1\uffff\1\3"+
            "\3\uffff\3\3",
            "\1\3\173\uffff\1\3\30\uffff\1\22\3\uffff\3\3\1\uffff\1\3",
            "\1\3\3\uffff\2\3\16\uffff\1\31\45\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\3\uffff\2\3\16\uffff\1\36\45\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\47\132\uffff\1\3\71\uffff\1\44\3\uffff\1\43\1\45\2\uffff"+
            "\1\46",
            "",
            "",
            "",
            "",
            "\1\55\132\uffff\1\3\71\uffff\1\52\3\uffff\1\51\1\53\2\uffff"+
            "\1\54",
            "",
            "",
            "",
            "",
            "\1\57",
            "\1\3\5\uffff\1\61",
            "\1\64\50\uffff\1\63\16\uffff\1\62\1\65",
            "\1\67\67\uffff\1\66\3\uffff\1\70",
            "\1\3\24\uffff\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "593:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_41 = input.LA(1);

                         
                        int index81_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_41);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA81_42 = input.LA(1);

                         
                        int index81_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_42);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA81_43 = input.LA(1);

                         
                        int index81_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_43);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA81_44 = input.LA(1);

                         
                        int index81_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_44);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA81_45 = input.LA(1);

                         
                        int index81_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_45);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA81_47 = input.LA(1);

                         
                        int index81_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_47);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA81_49 = input.LA(1);

                         
                        int index81_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_49);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA81_50 = input.LA(1);

                         
                        int index81_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_50);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA81_51 = input.LA(1);

                         
                        int index81_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_51);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA81_52 = input.LA(1);

                         
                        int index81_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_52);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA81_53 = input.LA(1);

                         
                        int index81_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_53);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA81_54 = input.LA(1);

                         
                        int index81_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_54);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA81_55 = input.LA(1);

                         
                        int index81_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_55);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA81_56 = input.LA(1);

                         
                        int index81_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_56);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA81_58 = input.LA(1);

                         
                        int index81_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_58);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA84_eotS =
        "\112\uffff";
    static final String DFA84_eofS =
        "\56\uffff\1\2\33\uffff";
    static final String DFA84_minS =
        "\2\56\5\uffff\1\56\12\uffff\1\165\31\uffff\1\20\1\uffff\1\56\1\0"+
        "\10\uffff\1\0\21\uffff";
    static final String DFA84_maxS =
        "\1\172\1\u00d3\5\uffff\1\u00d3\12\uffff\1\u00af\31\uffff\1\u00da"+
        "\1\uffff\1\u00d7\1\0\10\uffff\1\0\21\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\3\2\uffff\2\1\1\uffff\12\1\1\uffff\3\1\2\uffff\1\1\21"+
        "\2\2\1\1\uffff\1\1\2\uffff\1\1\21\uffff\4\1\4\uffff";
    static final String DFA84_specialS =
        "\1\uffff\1\0\5\uffff\1\1\12\uffff\1\2\31\uffff\1\3\1\uffff\1\4\1"+
        "\5\10\uffff\1\6\21\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\2\106\uffff\1\2\1\uffff\1\1\2\uffff\1\2",
            "\1\22\106\uffff\1\2\1\uffff\1\7\2\uffff\1\2\57\uffff\1\16\11"+
            "\uffff\1\10\1\5\2\uffff\1\12\4\uffff\1\25\5\uffff\1\6\2\uffff"+
            "\1\14\1\17\1\20\1\15\1\uffff\1\21\1\uffff\1\23\3\uffff\1\24"+
            "\1\13\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\46\110\uffff\1\33\2\uffff\1\30\57\uffff\1\42\11\uffff\1"+
            "\34\1\31\2\uffff\1\36\4\uffff\1\51\5\uffff\1\32\2\uffff\1\40"+
            "\1\43\1\44\1\41\1\uffff\1\45\1\uffff\1\47\3\uffff\1\50\1\37"+
            "\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\3\uffff\1\56\1\53\16\uffff\1\52\45\uffff\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\57\24\uffff\1\70\23\uffff\1\2\30\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\1\2\14\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\2"+
            "\2\1\uffff\1\60\2\2\14\uffff\1\2\16\uffff\1\2\12\uffff\1\2",
            "",
            "\1\103\106\uffff\1\102\1\2\1\105\2\uffff\1\104\1\2\1\uffff"+
            "\2\2\2\uffff\4\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2\104\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "622:1: cast_lvalue : ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA84_1==181) && (synpred20_Objc())) {s = 5;}

                        else if ( (LA84_1==195) && (synpred20_Objc())) {s = 6;}

                        else if ( (LA84_1==119) ) {s = 7;}

                        else if ( (LA84_1==180) && (synpred20_Objc())) {s = 8;}

                        else if ( (LA84_1==211) && (synpred20_Objc())) {s = 9;}

                        else if ( (LA84_1==184) && (synpred20_Objc())) {s = 10;}

                        else if ( (LA84_1==210) && (synpred20_Objc())) {s = 11;}

                        else if ( (LA84_1==198) && (synpred20_Objc())) {s = 12;}

                        else if ( (LA84_1==201) && (synpred20_Objc())) {s = 13;}

                        else if ( (LA84_1==170) && (synpred20_Objc())) {s = 14;}

                        else if ( (LA84_1==199) && (synpred20_Objc())) {s = 15;}

                        else if ( (LA84_1==200) && (synpred20_Objc())) {s = 16;}

                        else if ( (LA84_1==203) && (synpred20_Objc())) {s = 17;}

                        else if ( (LA84_1==ID) ) {s = 18;}

                        else if ( (LA84_1==205) && (synpred20_Objc())) {s = 19;}

                        else if ( (LA84_1==209) && (synpred20_Objc())) {s = 20;}

                        else if ( (LA84_1==189) && (synpred20_Objc())) {s = 21;}

                        else if ( (LA84_1==117||LA84_1==122) ) {s = 2;}

                         
                        input.seek(index84_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_7 = input.LA(1);

                         
                        int index84_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA84_7==122) && (synpred20_Objc())) {s = 24;}

                        else if ( (LA84_7==181) && (synpred21_Objc())) {s = 25;}

                        else if ( (LA84_7==195) && (synpred21_Objc())) {s = 26;}

                        else if ( (LA84_7==119) && (synpred21_Objc())) {s = 27;}

                        else if ( (LA84_7==180) && (synpred21_Objc())) {s = 28;}

                        else if ( (LA84_7==211) && (synpred21_Objc())) {s = 29;}

                        else if ( (LA84_7==184) && (synpred21_Objc())) {s = 30;}

                        else if ( (LA84_7==210) && (synpred21_Objc())) {s = 31;}

                        else if ( (LA84_7==198) && (synpred21_Objc())) {s = 32;}

                        else if ( (LA84_7==201) && (synpred21_Objc())) {s = 33;}

                        else if ( (LA84_7==170) && (synpred21_Objc())) {s = 34;}

                        else if ( (LA84_7==199) && (synpred21_Objc())) {s = 35;}

                        else if ( (LA84_7==200) && (synpred21_Objc())) {s = 36;}

                        else if ( (LA84_7==203) && (synpred21_Objc())) {s = 37;}

                        else if ( (LA84_7==ID) && (synpred21_Objc())) {s = 38;}

                        else if ( (LA84_7==205) && (synpred21_Objc())) {s = 39;}

                        else if ( (LA84_7==209) && (synpred21_Objc())) {s = 40;}

                        else if ( (LA84_7==189) && (synpred21_Objc())) {s = 41;}

                         
                        input.seek(index84_7);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_18 = input.LA(1);

                         
                        int index84_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA84_18==137) && (synpred20_Objc())) {s = 42;}

                        else if ( (LA84_18==122) && (synpred20_Objc())) {s = 43;}

                        else if ( (LA84_18==175) ) {s = 44;}

                        else if ( (LA84_18==117) && (synpred20_Objc())) {s = 45;}

                        else if ( (LA84_18==121) ) {s = 46;}

                         
                        input.seek(index84_18);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_44 = input.LA(1);

                         
                        int index84_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA84_44==ID) ) {s = 47;}

                        else if ( (LA84_44==177) && (synpred20_Objc())) {s = 48;}

                        else if ( (LA84_44==CHAR_LITERAL||LA84_44==STRING_LITERAL||LA84_44==112||LA84_44==117||LA84_44==119||LA84_44==122||LA84_44==125||(LA84_44 >= 128 && LA84_44 <= 129)||LA84_44==149||LA84_44==162||LA84_44==165||LA84_44==172||(LA84_44 >= 174 && LA84_44 <= 175)||(LA84_44 >= 178 && LA84_44 <= 179)||LA84_44==192||LA84_44==207||LA84_44==218) ) {s = 2;}

                        else if ( (LA84_44==NUMBER_LITERAL) ) {s = 56;}

                         
                        input.seek(index84_44);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_46 = input.LA(1);

                         
                        int index84_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA84_46==117) && (synpred20_Objc())) {s = 66;}

                        else if ( (LA84_46==ID) && (synpred20_Objc())) {s = 67;}

                        else if ( (LA84_46==122) && (synpred20_Objc())) {s = 68;}

                        else if ( (LA84_46==119) && (synpred20_Objc())) {s = 69;}

                        else if ( (LA84_46==EOF||LA84_46==118||LA84_46==123||(LA84_46 >= 125 && LA84_46 <= 126)||(LA84_46 >= 129 && LA84_46 <= 132)||LA84_46==134||LA84_46==139||LA84_46==141||LA84_46==146||LA84_46==215) ) {s = 2;}

                         
                        input.seek(index84_46);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_47 = input.LA(1);

                         
                        int index84_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred20_Objc()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index84_47);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_56 = input.LA(1);

                         
                        int index84_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred20_Objc()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index84_56);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA98_eotS =
        "\u018b\uffff";
    static final String DFA98_eofS =
        "\u018b\uffff";
    static final String DFA98_minS =
        "\7\56\13\uffff\10\56\2\uffff\3\56\2\uffff\1\56\1\172\3\56\1\uffff"+
        "\1\56\1\uffff\4\56\1\uffff\1\56\1\uffff\3\56\2\uffff\3\56\2\uffff"+
        "\3\56\2\uffff\1\56\1\172\3\56\1\uffff\1\56\1\uffff\4\56\1\uffff"+
        "\1\56\1\uffff\3\56\2\uffff\1\u0089\1\56\1\172\1\uffff\1\56\1\uffff"+
        "\1\56\1\uffff\1\u00b1\1\56\1\u0089\1\56\1\172\1\uffff\1\56\1\uffff"+
        "\1\56\1\uffff\1\u00b1\1\56\1\172\3\56\2\uffff\1\56\1\u0089\1\56"+
        "\1\172\1\uffff\1\56\1\uffff\1\56\1\uffff\1\u00b1\2\56\1\172\3\56"+
        "\1\uffff\1\56\1\uffff\3\56\2\uffff\1\u0089\1\56\1\172\1\uffff\1"+
        "\56\1\uffff\1\56\1\uffff\1\u00b1\5\56\1\uffff\1\56\1\uffff\1\u0089"+
        "\1\56\1\172\1\uffff\1\56\1\uffff\1\56\1\uffff\1\u00b1\1\56\3\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\6\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0\1\uffff\1\0"+
        "\1\uffff\3\0\2\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff"+
        "\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1\uffff\1"+
        "\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\7\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\4\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\5\0\2\uffff\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\2\uffff\4\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11"+
        "\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\3\0\2"+
        "\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0\1\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff";
    static final String DFA98_maxS =
        "\1\u00d3\1\u00cb\2\u00af\1\u00c8\1\u00cb\1\u00af\13\uffff\2\u00af"+
        "\1\u00c8\1\u00cb\1\u00af\1\u00c3\1\u00b8\1\u00b1\2\uffff\1\u00c3"+
        "\1\u00b8\1\u00b1\2\uffff\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1"+
        "\uffff\1\u00c8\1\uffff\1\u00af\1\u00c3\1\u00b8\1\u00b1\1\uffff\1"+
        "\u00cb\1\uffff\1\u00c3\1\u00b8\1\u00b1\2\uffff\1\u00c3\1\u00b8\1"+
        "\u00b1\2\uffff\1\u00c3\1\u00b8\1\u00b1\2\uffff\1\u00b8\1\172\1\u00c3"+
        "\1\u00b8\1\u00b1\1\uffff\1\u00c8\1\uffff\1\u00af\1\u00c3\1\u00b8"+
        "\1\u00b1\1\uffff\1\u00cb\1\uffff\1\u00c3\1\u00b8\1\u00b1\2\uffff"+
        "\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\uffff\1\u00b8\1\uffff\1"+
        "\u00b1\1\u00af\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\uffff\1\u00b8"+
        "\1\uffff\1\u00b1\1\u00af\1\172\1\u00c3\1\u00b8\1\u00b1\2\uffff\1"+
        "\u00af\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\uffff\1\u00b8\1\uffff"+
        "\1\u00b1\1\u00af\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\uffff\1"+
        "\u00c8\1\uffff\1\u00c3\1\u00b8\1\u00b1\2\uffff\1\u0089\1\u00c3\1"+
        "\172\1\uffff\1\u00b1\1\uffff\1\u00b8\1\uffff\1\u00b1\2\u00af\1\u00c3"+
        "\1\u00b8\1\u00b1\1\uffff\1\u00cb\1\uffff\1\u0089\1\u00c3\1\172\1"+
        "\uffff\1\u00b1\1\uffff\1\u00b8\1\uffff\1\u00b1\1\u00af\3\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0"+
        "\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\3\0\2\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0"+
        "\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\5\0\2\uffff\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\2\uffff\4\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0"+
        "\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\3\0\2\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0\1\uffff\7\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff";
    static final String DFA98_acceptS =
        "\7\uffff\1\2\22\uffff\1\1\4\uffff\1\1\6\uffff\1\1\6\uffff\1\1\5"+
        "\uffff\1\1\4\uffff\1\1\4\uffff\1\1\6\uffff\1\1\6\uffff\1\1\5\uffff"+
        "\1\1\6\uffff\1\1\11\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff"+
        "\1\1\5\uffff\1\1\6\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff\1"+
        "\1\11\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff\1\1\5\uffff\1"+
        "\1\6\uffff\1\1\10\uffff\1\1\7\uffff\1\1\15\uffff\1\1\3\uffff\1\1"+
        "\14\uffff\1\1\3\uffff\1\1\11\uffff\1\1\7\uffff\1\1\12\uffff\1\1"+
        "\3\uffff\1\1\7\uffff\1\1\7\uffff\1\1\11\uffff\1\1\7\uffff\1\1\15"+
        "\uffff\1\1\3\uffff\1\1\6\uffff\1\1\6\uffff\1\1\10\uffff\1\1\13\uffff"+
        "\1\1\3\uffff\1\1\3\uffff";
    static final String DFA98_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\4\uffff\1\13\3\uffff\1\14\2\uffff\1\15\2\uffff\1\16\1\uffff"+
        "\1\17\1\uffff\1\20\2\uffff\1\21\2\uffff\1\22\4\uffff\1\23\4\uffff"+
        "\1\24\3\uffff\1\25\2\uffff\1\26\2\uffff\1\27\1\uffff\1\30\1\uffff"+
        "\1\31\2\uffff\1\32\2\uffff\1\33\11\uffff\1\34\2\uffff\1\35\6\uffff"+
        "\1\36\2\uffff\1\37\2\uffff\1\40\3\uffff\1\41\6\uffff\1\42\2\uffff"+
        "\1\43\1\44\2\uffff\1\45\2\uffff\1\46\2\uffff\1\47\11\uffff\1\50"+
        "\2\uffff\1\51\1\52\1\uffff\1\53\2\uffff\1\54\7\uffff\1\55\2\uffff"+
        "\1\56\1\57\1\60\1\61\1\uffff\1\62\1\uffff\1\63\1\uffff\1\64\1\65"+
        "\1\66\1\67\1\70\1\uffff\1\71\1\uffff\1\72\1\uffff\1\73\1\74\1\75"+
        "\1\76\1\77\1\100\2\uffff\1\101\1\102\1\103\1\104\1\uffff\1\105\1"+
        "\uffff\1\106\1\uffff\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1"+
        "\uffff\1\116\1\uffff\1\117\1\120\1\121\2\uffff\1\122\1\123\1\124"+
        "\1\uffff\1\125\1\uffff\1\126\1\uffff\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff\1\141\1\uffff"+
        "\1\142\1\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1"+
        "\153\1\uffff\1\154\1\uffff\1\155\1\uffff\1\156\1\uffff\1\157\2\uffff"+
        "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\uffff\1\167\1\uffff"+
        "\1\170\1\uffff\1\171\1\uffff\1\172\2\uffff\1\173\1\174\1\175\1\176"+
        "\1\uffff\1\177\1\uffff\1\u0080\1\uffff\1\u0081\1\u0082\1\u0083\1"+
        "\u0084\1\u0085\2\uffff\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1"+
        "\u008b\1\u008c\1\uffff\1\u008d\1\uffff\1\u008e\1\uffff\1\u008f\1"+
        "\uffff\1\u0090\2\uffff\1\u0091\1\u0092\1\u0093\1\u0094\2\uffff\1"+
        "\u0095\1\u0096\1\u0097\1\u0098\1\uffff\1\u0099\1\uffff\1\u009a\1"+
        "\uffff\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1"+
        "\uffff\1\u00a2\1\uffff\1\u00a3\1\u00a4\1\u00a5\1\uffff\1\u00a6\1"+
        "\uffff\1\u00a7\1\uffff\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1"+
        "\u00ad\1\u00ae\1\u00af\1\u00b0\1\uffff\1\u00b1\1\uffff\1\u00b2\1"+
        "\uffff\1\u00b3\1\uffff\1\u00b4\2\uffff\1\u00b5\1\u00b6\1\u00b7\2"+
        "\uffff\1\u00b8\1\u00b9\1\u00ba\1\uffff\1\u00bb\1\uffff\1\u00bc\1"+
        "\uffff\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\uffff\1"+
        "\u00c3\1\uffff\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1"+
        "\u00ca\1\uffff\1\u00cb\1\uffff\1\u00cc\1\uffff\1\u00cd\1\uffff\1"+
        "\u00ce\2\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\6\110\uffff\1\7\62\uffff\1\1\11\uffff\2\7\2\uffff\1\7\4\uffff"+
            "\1\7\5\uffff\1\3\2\uffff\1\7\1\2\1\4\1\7\1\uffff\1\5\1\uffff"+
            "\1\7\3\uffff\3\7",
            "\1\26\u0094\uffff\1\23\3\uffff\1\22\1\24\2\uffff\1\25",
            "\1\7\111\uffff\1\32\1\uffff\1\30\16\uffff\1\27\45\uffff\1\31",
            "\1\7\111\uffff\1\37\1\uffff\1\35\16\uffff\1\34\45\uffff\1\36",
            "\1\7\111\uffff\1\46\1\uffff\1\44\16\uffff\1\43\45\uffff\1\45"+
            "\10\uffff\1\42\16\uffff\1\41\1\47",
            "\1\7\111\uffff\1\55\1\uffff\1\53\16\uffff\1\52\45\uffff\1\54"+
            "\27\uffff\1\51\3\uffff\1\56",
            "\1\7\111\uffff\1\63\1\uffff\1\61\16\uffff\1\60\45\uffff\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\7\111\uffff\1\70\1\uffff\1\66\16\uffff\1\65\45\uffff\1\67",
            "\1\7\111\uffff\1\75\1\uffff\1\73\16\uffff\1\72\45\uffff\1\74",
            "\1\7\111\uffff\1\104\1\uffff\1\102\16\uffff\1\101\45\uffff"+
            "\1\103\10\uffff\1\100\16\uffff\1\77\1\105",
            "\1\7\111\uffff\1\113\1\uffff\1\111\16\uffff\1\110\45\uffff"+
            "\1\112\27\uffff\1\107\3\uffff\1\114",
            "\1\7\111\uffff\1\121\1\uffff\1\117\16\uffff\1\116\45\uffff"+
            "\1\120",
            "\1\125\132\uffff\1\124\71\uffff\1\123",
            "\1\7\111\uffff\1\130\1\uffff\1\131\64\uffff\1\127\10\uffff"+
            "\1\7",
            "\1\133\24\uffff\1\133\155\uffff\1\134",
            "",
            "",
            "\1\137\132\uffff\1\136\71\uffff\1\135",
            "\1\7\111\uffff\1\142\1\uffff\1\143\64\uffff\1\141\10\uffff"+
            "\1\7",
            "\1\145\24\uffff\1\145\155\uffff\1\146",
            "",
            "",
            "\1\7\111\uffff\1\153\1\uffff\1\151\16\uffff\1\150\45\uffff"+
            "\1\152\10\uffff\1\147",
            "\1\155",
            "\1\160\132\uffff\1\157\71\uffff\1\156",
            "\1\7\111\uffff\1\163\1\uffff\1\164\64\uffff\1\162\10\uffff"+
            "\1\7",
            "\1\166\24\uffff\1\166\155\uffff\1\167",
            "",
            "\1\7\111\uffff\1\175\1\uffff\1\173\16\uffff\1\172\45\uffff"+
            "\1\174\10\uffff\1\171\16\uffff\1\170\1\176",
            "",
            "\1\7\111\uffff\1\u0083\1\uffff\1\u0081\16\uffff\1\u0080\45"+
            "\uffff\1\u0082",
            "\1\u0087\132\uffff\1\u0086\71\uffff\1\u0085",
            "\1\7\111\uffff\1\u008a\1\uffff\1\u008b\64\uffff\1\u0089\10"+
            "\uffff\1\7",
            "\1\u008d\24\uffff\1\u008d\155\uffff\1\u008e",
            "",
            "\1\7\111\uffff\1\u0093\1\uffff\1\u0091\16\uffff\1\u0090\45"+
            "\uffff\1\u0092\27\uffff\1\u008f\3\uffff\1\u0094",
            "",
            "\1\u0098\132\uffff\1\u0097\71\uffff\1\u0096",
            "\1\7\111\uffff\1\u009b\1\uffff\1\u009c\64\uffff\1\u009a\10"+
            "\uffff\1\7",
            "\1\u009e\24\uffff\1\u009e\155\uffff\1\u009f",
            "",
            "",
            "\1\u00a2\132\uffff\1\u00a1\71\uffff\1\u00a0",
            "\1\7\111\uffff\1\u00a5\1\uffff\1\u00a6\64\uffff\1\u00a4\10"+
            "\uffff\1\7",
            "\1\u00a8\24\uffff\1\u00a8\155\uffff\1\u00a9",
            "",
            "",
            "\1\u00ac\132\uffff\1\u00ab\71\uffff\1\u00aa",
            "\1\7\111\uffff\1\u00af\1\uffff\1\u00b0\64\uffff\1\u00ae\10"+
            "\uffff\1\7",
            "\1\u00b2\24\uffff\1\u00b2\155\uffff\1\u00b3",
            "",
            "",
            "\1\7\111\uffff\1\u00b8\1\uffff\1\u00b6\16\uffff\1\u00b5\45"+
            "\uffff\1\u00b7\10\uffff\1\u00b4",
            "\1\u00ba",
            "\1\u00bd\132\uffff\1\u00bc\71\uffff\1\u00bb",
            "\1\7\111\uffff\1\u00c0\1\uffff\1\u00c1\64\uffff\1\u00bf\10"+
            "\uffff\1\7",
            "\1\u00c3\24\uffff\1\u00c3\155\uffff\1\u00c4",
            "",
            "\1\7\111\uffff\1\u00ca\1\uffff\1\u00c8\16\uffff\1\u00c7\45"+
            "\uffff\1\u00c9\10\uffff\1\u00c6\16\uffff\1\u00c5\1\u00cb",
            "",
            "\1\7\111\uffff\1\u00d0\1\uffff\1\u00ce\16\uffff\1\u00cd\45"+
            "\uffff\1\u00cf",
            "\1\u00d4\132\uffff\1\u00d3\71\uffff\1\u00d2",
            "\1\7\111\uffff\1\u00d7\1\uffff\1\u00d8\64\uffff\1\u00d6\10"+
            "\uffff\1\7",
            "\1\u00da\24\uffff\1\u00da\155\uffff\1\u00db",
            "",
            "\1\7\111\uffff\1\u00e0\1\uffff\1\u00de\16\uffff\1\u00dd\45"+
            "\uffff\1\u00df\27\uffff\1\u00dc\3\uffff\1\u00e1",
            "",
            "\1\u00e5\132\uffff\1\u00e4\71\uffff\1\u00e3",
            "\1\7\111\uffff\1\u00e8\1\uffff\1\u00e9\64\uffff\1\u00e7\10"+
            "\uffff\1\7",
            "\1\u00eb\24\uffff\1\u00eb\155\uffff\1\u00ec",
            "",
            "",
            "\1\u00ed",
            "\1\u00f0\132\uffff\1\u00ef\71\uffff\1\u00ee",
            "\1\u00f1",
            "",
            "\1\u00f2\24\uffff\1\u00f2\155\uffff\1\u00f3",
            "",
            "\1\7\111\uffff\1\u00f6\1\uffff\1\u00f7\64\uffff\1\u00f5\10"+
            "\uffff\1\7",
            "",
            "\1\u00f9",
            "\1\7\111\uffff\1\u00fa\1\uffff\1\7\64\uffff\1\u00fb",
            "\1\u00fe",
            "\1\u0101\132\uffff\1\u0100\71\uffff\1\u00ff",
            "\1\u0102",
            "",
            "\1\u0103\24\uffff\1\u0103\155\uffff\1\u0104",
            "",
            "\1\7\111\uffff\1\u0107\1\uffff\1\u0108\64\uffff\1\u0106\10"+
            "\uffff\1\7",
            "",
            "\1\u010a",
            "\1\7\111\uffff\1\u010b\1\uffff\1\7\64\uffff\1\u010c",
            "\1\u010f",
            "\1\u0112\132\uffff\1\u0111\71\uffff\1\u0110",
            "\1\7\111\uffff\1\u0115\1\uffff\1\u0116\64\uffff\1\u0114\10"+
            "\uffff\1\7",
            "\1\u0118\24\uffff\1\u0118\155\uffff\1\u0119",
            "",
            "",
            "\1\7\111\uffff\1\u011d\1\uffff\1\u011b\16\uffff\1\u011a\45"+
            "\uffff\1\u011c",
            "\1\u011f",
            "\1\u0122\132\uffff\1\u0121\71\uffff\1\u0120",
            "\1\u0123",
            "",
            "\1\u0124\24\uffff\1\u0124\155\uffff\1\u0125",
            "",
            "\1\7\111\uffff\1\u0128\1\uffff\1\u0129\64\uffff\1\u0127\10"+
            "\uffff\1\7",
            "",
            "\1\u012b",
            "\1\7\111\uffff\1\u012c\1\uffff\1\7\64\uffff\1\u012d",
            "\1\7\111\uffff\1\u0134\1\uffff\1\u0132\16\uffff\1\u0131\45"+
            "\uffff\1\u0133\10\uffff\1\u0130",
            "\1\u0136",
            "\1\u0139\132\uffff\1\u0138\71\uffff\1\u0137",
            "\1\7\111\uffff\1\u013c\1\uffff\1\u013d\64\uffff\1\u013b\10"+
            "\uffff\1\7",
            "\1\u013f\24\uffff\1\u013f\155\uffff\1\u0140",
            "",
            "\1\7\111\uffff\1\u0146\1\uffff\1\u0144\16\uffff\1\u0143\45"+
            "\uffff\1\u0145\10\uffff\1\u0142\16\uffff\1\u0141\1\u0147",
            "",
            "\1\u014b\132\uffff\1\u014a\71\uffff\1\u0149",
            "\1\7\111\uffff\1\u014e\1\uffff\1\u014f\64\uffff\1\u014d\10"+
            "\uffff\1\7",
            "\1\u0151\24\uffff\1\u0151\155\uffff\1\u0152",
            "",
            "",
            "\1\u0153",
            "\1\u0156\132\uffff\1\u0155\71\uffff\1\u0154",
            "\1\u0157",
            "",
            "\1\u0158\24\uffff\1\u0158\155\uffff\1\u0159",
            "",
            "\1\7\111\uffff\1\u015c\1\uffff\1\u015d\64\uffff\1\u015b\10"+
            "\uffff\1\7",
            "",
            "\1\u015f",
            "\1\7\111\uffff\1\u0160\1\uffff\1\7\64\uffff\1\u0161",
            "\1\7\111\uffff\1\u0167\1\uffff\1\u0165\16\uffff\1\u0164\45"+
            "\uffff\1\u0166",
            "\1\u016b\132\uffff\1\u016a\71\uffff\1\u0169",
            "\1\7\111\uffff\1\u016e\1\uffff\1\u016f\64\uffff\1\u016d\10"+
            "\uffff\1\7",
            "\1\u0171\24\uffff\1\u0171\155\uffff\1\u0172",
            "",
            "\1\7\111\uffff\1\u0177\1\uffff\1\u0175\16\uffff\1\u0174\45"+
            "\uffff\1\u0176\27\uffff\1\u0173\3\uffff\1\u0178",
            "",
            "\1\u017a",
            "\1\u017d\132\uffff\1\u017c\71\uffff\1\u017b",
            "\1\u017e",
            "",
            "\1\u017f\24\uffff\1\u017f\155\uffff\1\u0180",
            "",
            "\1\7\111\uffff\1\u0183\1\uffff\1\u0184\64\uffff\1\u0182\10"+
            "\uffff\1\7",
            "",
            "\1\u0186",
            "\1\7\111\uffff\1\u0187\1\uffff\1\7\64\uffff\1\u0188",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "704:1: typedef_declaration : ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_2 = input.LA(1);

                         
                        int index98_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_2==137) ) {s = 23;}

                        else if ( (LA98_2==122) ) {s = 24;}

                        else if ( (LA98_2==175) ) {s = 25;}

                        else if ( (LA98_2==120) && (synpred23_Objc())) {s = 26;}

                        else if ( (LA98_2==ID) ) {s = 7;}

                         
                        input.seek(index98_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA98_3 = input.LA(1);

                         
                        int index98_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_3==137) ) {s = 28;}

                        else if ( (LA98_3==122) ) {s = 29;}

                        else if ( (LA98_3==175) ) {s = 30;}

                        else if ( (LA98_3==120) && (synpred23_Objc())) {s = 31;}

                        else if ( (LA98_3==ID) ) {s = 7;}

                         
                        input.seek(index98_3);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA98_4 = input.LA(1);

                         
                        int index98_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_4==199) ) {s = 33;}

                        else if ( (LA98_4==184) ) {s = 34;}

                        else if ( (LA98_4==137) ) {s = 35;}

                        else if ( (LA98_4==122) ) {s = 36;}

                        else if ( (LA98_4==175) ) {s = 37;}

                        else if ( (LA98_4==120) && (synpred23_Objc())) {s = 38;}

                        else if ( (LA98_4==200) ) {s = 39;}

                        else if ( (LA98_4==ID) ) {s = 7;}

                         
                        input.seek(index98_4);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA98_5 = input.LA(1);

                         
                        int index98_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_5==199) ) {s = 41;}

                        else if ( (LA98_5==137) ) {s = 42;}

                        else if ( (LA98_5==122) ) {s = 43;}

                        else if ( (LA98_5==175) ) {s = 44;}

                        else if ( (LA98_5==120) && (synpred23_Objc())) {s = 45;}

                        else if ( (LA98_5==203) ) {s = 46;}

                        else if ( (LA98_5==ID) ) {s = 7;}

                         
                        input.seek(index98_5);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA98_6 = input.LA(1);

                         
                        int index98_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_6==137) ) {s = 48;}

                        else if ( (LA98_6==122) ) {s = 49;}

                        else if ( (LA98_6==175) ) {s = 50;}

                        else if ( (LA98_6==120) && (synpred23_Objc())) {s = 51;}

                        else if ( (LA98_6==ID) ) {s = 7;}

                         
                        input.seek(index98_6);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA98_18 = input.LA(1);

                         
                        int index98_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_18==137) ) {s = 53;}

                        else if ( (LA98_18==122) ) {s = 54;}

                        else if ( (LA98_18==175) ) {s = 55;}

                        else if ( (LA98_18==120) && (synpred23_Objc())) {s = 56;}

                        else if ( (LA98_18==ID) ) {s = 7;}

                         
                        input.seek(index98_18);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA98_19 = input.LA(1);

                         
                        int index98_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_19==137) ) {s = 58;}

                        else if ( (LA98_19==122) ) {s = 59;}

                        else if ( (LA98_19==175) ) {s = 60;}

                        else if ( (LA98_19==120) && (synpred23_Objc())) {s = 61;}

                        else if ( (LA98_19==ID) ) {s = 7;}

                         
                        input.seek(index98_19);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA98_20 = input.LA(1);

                         
                        int index98_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_20==199) ) {s = 63;}

                        else if ( (LA98_20==184) ) {s = 64;}

                        else if ( (LA98_20==137) ) {s = 65;}

                        else if ( (LA98_20==122) ) {s = 66;}

                        else if ( (LA98_20==175) ) {s = 67;}

                        else if ( (LA98_20==120) && (synpred23_Objc())) {s = 68;}

                        else if ( (LA98_20==200) ) {s = 69;}

                        else if ( (LA98_20==ID) ) {s = 7;}

                         
                        input.seek(index98_20);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA98_21 = input.LA(1);

                         
                        int index98_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_21==199) ) {s = 71;}

                        else if ( (LA98_21==137) ) {s = 72;}

                        else if ( (LA98_21==122) ) {s = 73;}

                        else if ( (LA98_21==175) ) {s = 74;}

                        else if ( (LA98_21==120) && (synpred23_Objc())) {s = 75;}

                        else if ( (LA98_21==203) ) {s = 76;}

                        else if ( (LA98_21==ID) ) {s = 7;}

                         
                        input.seek(index98_21);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA98_22 = input.LA(1);

                         
                        int index98_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_22==137) ) {s = 78;}

                        else if ( (LA98_22==122) ) {s = 79;}

                        else if ( (LA98_22==175) ) {s = 80;}

                        else if ( (LA98_22==120) && (synpred23_Objc())) {s = 81;}

                        else if ( (LA98_22==ID) ) {s = 7;}

                         
                        input.seek(index98_22);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA98_24 = input.LA(1);

                         
                        int index98_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_24==ID||LA98_24==184) ) {s = 7;}

                        else if ( (LA98_24==175) ) {s = 87;}

                        else if ( (LA98_24==120) && (synpred23_Objc())) {s = 88;}

                        else if ( (LA98_24==122) ) {s = 89;}

                         
                        input.seek(index98_24);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA98_29 = input.LA(1);

                         
                        int index98_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_29==ID||LA98_29==184) ) {s = 7;}

                        else if ( (LA98_29==175) ) {s = 97;}

                        else if ( (LA98_29==120) && (synpred23_Objc())) {s = 98;}

                        else if ( (LA98_29==122) ) {s = 99;}

                         
                        input.seek(index98_29);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA98_33 = input.LA(1);

                         
                        int index98_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_33==184) ) {s = 103;}

                        else if ( (LA98_33==137) ) {s = 104;}

                        else if ( (LA98_33==122) ) {s = 105;}

                        else if ( (LA98_33==175) ) {s = 106;}

                        else if ( (LA98_33==120) && (synpred23_Objc())) {s = 107;}

                        else if ( (LA98_33==ID) ) {s = 7;}

                         
                        input.seek(index98_33);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA98_36 = input.LA(1);

                         
                        int index98_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_36==ID||LA98_36==184) ) {s = 7;}

                        else if ( (LA98_36==175) ) {s = 114;}

                        else if ( (LA98_36==120) && (synpred23_Objc())) {s = 115;}

                        else if ( (LA98_36==122) ) {s = 116;}

                         
                        input.seek(index98_36);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA98_39 = input.LA(1);

                         
                        int index98_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_39==199) ) {s = 120;}

                        else if ( (LA98_39==184) ) {s = 121;}

                        else if ( (LA98_39==137) ) {s = 122;}

                        else if ( (LA98_39==122) ) {s = 123;}

                        else if ( (LA98_39==175) ) {s = 124;}

                        else if ( (LA98_39==120) && (synpred23_Objc())) {s = 125;}

                        else if ( (LA98_39==200) ) {s = 126;}

                        else if ( (LA98_39==ID) ) {s = 7;}

                         
                        input.seek(index98_39);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA98_41 = input.LA(1);

                         
                        int index98_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_41==137) ) {s = 128;}

                        else if ( (LA98_41==122) ) {s = 129;}

                        else if ( (LA98_41==175) ) {s = 130;}

                        else if ( (LA98_41==120) && (synpred23_Objc())) {s = 131;}

                        else if ( (LA98_41==ID) ) {s = 7;}

                         
                        input.seek(index98_41);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA98_43 = input.LA(1);

                         
                        int index98_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_43==ID||LA98_43==184) ) {s = 7;}

                        else if ( (LA98_43==175) ) {s = 137;}

                        else if ( (LA98_43==120) && (synpred23_Objc())) {s = 138;}

                        else if ( (LA98_43==122) ) {s = 139;}

                         
                        input.seek(index98_43);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA98_46 = input.LA(1);

                         
                        int index98_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_46==199) ) {s = 143;}

                        else if ( (LA98_46==137) ) {s = 144;}

                        else if ( (LA98_46==122) ) {s = 145;}

                        else if ( (LA98_46==175) ) {s = 146;}

                        else if ( (LA98_46==120) && (synpred23_Objc())) {s = 147;}

                        else if ( (LA98_46==203) ) {s = 148;}

                        else if ( (LA98_46==ID) ) {s = 7;}

                         
                        input.seek(index98_46);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA98_49 = input.LA(1);

                         
                        int index98_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_49==ID||LA98_49==184) ) {s = 7;}

                        else if ( (LA98_49==175) ) {s = 154;}

                        else if ( (LA98_49==120) && (synpred23_Objc())) {s = 155;}

                        else if ( (LA98_49==122) ) {s = 156;}

                         
                        input.seek(index98_49);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA98_54 = input.LA(1);

                         
                        int index98_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_54==ID||LA98_54==184) ) {s = 7;}

                        else if ( (LA98_54==175) ) {s = 164;}

                        else if ( (LA98_54==120) && (synpred23_Objc())) {s = 165;}

                        else if ( (LA98_54==122) ) {s = 166;}

                         
                        input.seek(index98_54);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA98_59 = input.LA(1);

                         
                        int index98_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_59==ID||LA98_59==184) ) {s = 7;}

                        else if ( (LA98_59==175) ) {s = 174;}

                        else if ( (LA98_59==120) && (synpred23_Objc())) {s = 175;}

                        else if ( (LA98_59==122) ) {s = 176;}

                         
                        input.seek(index98_59);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA98_63 = input.LA(1);

                         
                        int index98_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_63==184) ) {s = 180;}

                        else if ( (LA98_63==137) ) {s = 181;}

                        else if ( (LA98_63==122) ) {s = 182;}

                        else if ( (LA98_63==175) ) {s = 183;}

                        else if ( (LA98_63==120) && (synpred23_Objc())) {s = 184;}

                        else if ( (LA98_63==ID) ) {s = 7;}

                         
                        input.seek(index98_63);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA98_66 = input.LA(1);

                         
                        int index98_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_66==ID||LA98_66==184) ) {s = 7;}

                        else if ( (LA98_66==175) ) {s = 191;}

                        else if ( (LA98_66==120) && (synpred23_Objc())) {s = 192;}

                        else if ( (LA98_66==122) ) {s = 193;}

                         
                        input.seek(index98_66);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA98_69 = input.LA(1);

                         
                        int index98_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_69==199) ) {s = 197;}

                        else if ( (LA98_69==184) ) {s = 198;}

                        else if ( (LA98_69==137) ) {s = 199;}

                        else if ( (LA98_69==122) ) {s = 200;}

                        else if ( (LA98_69==175) ) {s = 201;}

                        else if ( (LA98_69==120) && (synpred23_Objc())) {s = 202;}

                        else if ( (LA98_69==200) ) {s = 203;}

                        else if ( (LA98_69==ID) ) {s = 7;}

                         
                        input.seek(index98_69);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA98_71 = input.LA(1);

                         
                        int index98_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_71==137) ) {s = 205;}

                        else if ( (LA98_71==122) ) {s = 206;}

                        else if ( (LA98_71==175) ) {s = 207;}

                        else if ( (LA98_71==120) && (synpred23_Objc())) {s = 208;}

                        else if ( (LA98_71==ID) ) {s = 7;}

                         
                        input.seek(index98_71);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA98_73 = input.LA(1);

                         
                        int index98_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_73==ID||LA98_73==184) ) {s = 7;}

                        else if ( (LA98_73==175) ) {s = 214;}

                        else if ( (LA98_73==120) && (synpred23_Objc())) {s = 215;}

                        else if ( (LA98_73==122) ) {s = 216;}

                         
                        input.seek(index98_73);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA98_76 = input.LA(1);

                         
                        int index98_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_76==199) ) {s = 220;}

                        else if ( (LA98_76==137) ) {s = 221;}

                        else if ( (LA98_76==122) ) {s = 222;}

                        else if ( (LA98_76==175) ) {s = 223;}

                        else if ( (LA98_76==120) && (synpred23_Objc())) {s = 224;}

                        else if ( (LA98_76==203) ) {s = 225;}

                        else if ( (LA98_76==ID) ) {s = 7;}

                         
                        input.seek(index98_76);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA98_79 = input.LA(1);

                         
                        int index98_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_79==ID||LA98_79==184) ) {s = 7;}

                        else if ( (LA98_79==175) ) {s = 231;}

                        else if ( (LA98_79==120) && (synpred23_Objc())) {s = 232;}

                        else if ( (LA98_79==122) ) {s = 233;}

                         
                        input.seek(index98_79);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA98_89 = input.LA(1);

                         
                        int index98_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_89==ID||LA98_89==184) ) {s = 7;}

                        else if ( (LA98_89==175) ) {s = 245;}

                        else if ( (LA98_89==120) && (synpred23_Objc())) {s = 246;}

                        else if ( (LA98_89==122) ) {s = 247;}

                         
                        input.seek(index98_89);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA98_92 = input.LA(1);

                         
                        int index98_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_92==120) && (synpred23_Objc())) {s = 250;}

                        else if ( (LA98_92==175) ) {s = 251;}

                        else if ( (LA98_92==ID||LA98_92==122) ) {s = 7;}

                         
                        input.seek(index98_92);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA98_99 = input.LA(1);

                         
                        int index98_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_99==ID||LA98_99==184) ) {s = 7;}

                        else if ( (LA98_99==175) ) {s = 262;}

                        else if ( (LA98_99==120) && (synpred23_Objc())) {s = 263;}

                        else if ( (LA98_99==122) ) {s = 264;}

                         
                        input.seek(index98_99);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA98_102 = input.LA(1);

                         
                        int index98_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_102==120) && (synpred23_Objc())) {s = 267;}

                        else if ( (LA98_102==175) ) {s = 268;}

                        else if ( (LA98_102==ID||LA98_102==122) ) {s = 7;}

                         
                        input.seek(index98_102);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA98_105 = input.LA(1);

                         
                        int index98_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_105==ID||LA98_105==184) ) {s = 7;}

                        else if ( (LA98_105==175) ) {s = 276;}

                        else if ( (LA98_105==120) && (synpred23_Objc())) {s = 277;}

                        else if ( (LA98_105==122) ) {s = 278;}

                         
                        input.seek(index98_105);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA98_109 = input.LA(1);

                         
                        int index98_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_109==137) ) {s = 282;}

                        else if ( (LA98_109==122) ) {s = 283;}

                        else if ( (LA98_109==175) ) {s = 284;}

                        else if ( (LA98_109==120) && (synpred23_Objc())) {s = 285;}

                        else if ( (LA98_109==ID) ) {s = 7;}

                         
                        input.seek(index98_109);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA98_116 = input.LA(1);

                         
                        int index98_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_116==ID||LA98_116==184) ) {s = 7;}

                        else if ( (LA98_116==175) ) {s = 295;}

                        else if ( (LA98_116==120) && (synpred23_Objc())) {s = 296;}

                        else if ( (LA98_116==122) ) {s = 297;}

                         
                        input.seek(index98_116);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA98_119 = input.LA(1);

                         
                        int index98_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_119==120) && (synpred23_Objc())) {s = 300;}

                        else if ( (LA98_119==175) ) {s = 301;}

                        else if ( (LA98_119==ID||LA98_119==122) ) {s = 7;}

                         
                        input.seek(index98_119);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA98_120 = input.LA(1);

                         
                        int index98_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_120==184) ) {s = 304;}

                        else if ( (LA98_120==137) ) {s = 305;}

                        else if ( (LA98_120==122) ) {s = 306;}

                        else if ( (LA98_120==175) ) {s = 307;}

                        else if ( (LA98_120==120) && (synpred23_Objc())) {s = 308;}

                        else if ( (LA98_120==ID) ) {s = 7;}

                         
                        input.seek(index98_120);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA98_123 = input.LA(1);

                         
                        int index98_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_123==ID||LA98_123==184) ) {s = 7;}

                        else if ( (LA98_123==175) ) {s = 315;}

                        else if ( (LA98_123==120) && (synpred23_Objc())) {s = 316;}

                        else if ( (LA98_123==122) ) {s = 317;}

                         
                        input.seek(index98_123);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA98_126 = input.LA(1);

                         
                        int index98_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_126==199) ) {s = 321;}

                        else if ( (LA98_126==184) ) {s = 322;}

                        else if ( (LA98_126==137) ) {s = 323;}

                        else if ( (LA98_126==122) ) {s = 324;}

                        else if ( (LA98_126==175) ) {s = 325;}

                        else if ( (LA98_126==120) && (synpred23_Objc())) {s = 326;}

                        else if ( (LA98_126==200) ) {s = 327;}

                        else if ( (LA98_126==ID) ) {s = 7;}

                         
                        input.seek(index98_126);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA98_129 = input.LA(1);

                         
                        int index98_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_129==ID||LA98_129==184) ) {s = 7;}

                        else if ( (LA98_129==175) ) {s = 333;}

                        else if ( (LA98_129==120) && (synpred23_Objc())) {s = 334;}

                        else if ( (LA98_129==122) ) {s = 335;}

                         
                        input.seek(index98_129);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA98_139 = input.LA(1);

                         
                        int index98_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_139==ID||LA98_139==184) ) {s = 7;}

                        else if ( (LA98_139==175) ) {s = 347;}

                        else if ( (LA98_139==120) && (synpred23_Objc())) {s = 348;}

                        else if ( (LA98_139==122) ) {s = 349;}

                         
                        input.seek(index98_139);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA98_142 = input.LA(1);

                         
                        int index98_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_142==120) && (synpred23_Objc())) {s = 352;}

                        else if ( (LA98_142==175) ) {s = 353;}

                        else if ( (LA98_142==ID||LA98_142==122) ) {s = 7;}

                         
                        input.seek(index98_142);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA98_143 = input.LA(1);

                         
                        int index98_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_143==137) ) {s = 356;}

                        else if ( (LA98_143==122) ) {s = 357;}

                        else if ( (LA98_143==175) ) {s = 358;}

                        else if ( (LA98_143==120) && (synpred23_Objc())) {s = 359;}

                        else if ( (LA98_143==ID) ) {s = 7;}

                         
                        input.seek(index98_143);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA98_145 = input.LA(1);

                         
                        int index98_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_145==ID||LA98_145==184) ) {s = 7;}

                        else if ( (LA98_145==175) ) {s = 365;}

                        else if ( (LA98_145==120) && (synpred23_Objc())) {s = 366;}

                        else if ( (LA98_145==122) ) {s = 367;}

                         
                        input.seek(index98_145);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA98_148 = input.LA(1);

                         
                        int index98_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_148==199) ) {s = 371;}

                        else if ( (LA98_148==137) ) {s = 372;}

                        else if ( (LA98_148==122) ) {s = 373;}

                        else if ( (LA98_148==175) ) {s = 374;}

                        else if ( (LA98_148==120) && (synpred23_Objc())) {s = 375;}

                        else if ( (LA98_148==203) ) {s = 376;}

                        else if ( (LA98_148==ID) ) {s = 7;}

                         
                        input.seek(index98_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA98_156 = input.LA(1);

                         
                        int index98_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_156==ID||LA98_156==184) ) {s = 7;}

                        else if ( (LA98_156==175) ) {s = 386;}

                        else if ( (LA98_156==120) && (synpred23_Objc())) {s = 387;}

                        else if ( (LA98_156==122) ) {s = 388;}

                         
                        input.seek(index98_156);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA98_159 = input.LA(1);

                         
                        int index98_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA98_159==120) && (synpred23_Objc())) {s = 391;}

                        else if ( (LA98_159==175) ) {s = 392;}

                        else if ( (LA98_159==ID||LA98_159==122) ) {s = 7;}

                         
                        input.seek(index98_159);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA98_160 = input.LA(1);

                         
                        int index98_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_160);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA98_161 = input.LA(1);

                         
                        int index98_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_161);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA98_162 = input.LA(1);

                         
                        int index98_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_162);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA98_164 = input.LA(1);

                         
                        int index98_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_164);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA98_166 = input.LA(1);

                         
                        int index98_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_166);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA98_168 = input.LA(1);

                         
                        int index98_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_168);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA98_169 = input.LA(1);

                         
                        int index98_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_169);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA98_170 = input.LA(1);

                         
                        int index98_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_170);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA98_171 = input.LA(1);

                         
                        int index98_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_171);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA98_172 = input.LA(1);

                         
                        int index98_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_172);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA98_174 = input.LA(1);

                         
                        int index98_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_174);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA98_176 = input.LA(1);

                         
                        int index98_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_176);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA98_178 = input.LA(1);

                         
                        int index98_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_178);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA98_179 = input.LA(1);

                         
                        int index98_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_179);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA98_180 = input.LA(1);

                         
                        int index98_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_180);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA98_181 = input.LA(1);

                         
                        int index98_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_181);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA98_182 = input.LA(1);

                         
                        int index98_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_182);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA98_183 = input.LA(1);

                         
                        int index98_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_183);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA98_186 = input.LA(1);

                         
                        int index98_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_186);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA98_187 = input.LA(1);

                         
                        int index98_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_187);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA98_188 = input.LA(1);

                         
                        int index98_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_188);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA98_189 = input.LA(1);

                         
                        int index98_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_189);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA98_191 = input.LA(1);

                         
                        int index98_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_191);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA98_193 = input.LA(1);

                         
                        int index98_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_193);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA98_195 = input.LA(1);

                         
                        int index98_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_195);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA98_196 = input.LA(1);

                         
                        int index98_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_196);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA98_197 = input.LA(1);

                         
                        int index98_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_197);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA98_198 = input.LA(1);

                         
                        int index98_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_198);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA98_199 = input.LA(1);

                         
                        int index98_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_199);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA98_200 = input.LA(1);

                         
                        int index98_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_200);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA98_201 = input.LA(1);

                         
                        int index98_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_201);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA98_203 = input.LA(1);

                         
                        int index98_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_203);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA98_205 = input.LA(1);

                         
                        int index98_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_205);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA98_206 = input.LA(1);

                         
                        int index98_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_206);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA98_207 = input.LA(1);

                         
                        int index98_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_207);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA98_210 = input.LA(1);

                         
                        int index98_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_210);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA98_211 = input.LA(1);

                         
                        int index98_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_211);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA98_212 = input.LA(1);

                         
                        int index98_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_212);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA98_214 = input.LA(1);

                         
                        int index98_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_214);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA98_216 = input.LA(1);

                         
                        int index98_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_216);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA98_218 = input.LA(1);

                         
                        int index98_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_218);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA98_219 = input.LA(1);

                         
                        int index98_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_219);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA98_220 = input.LA(1);

                         
                        int index98_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_220);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA98_221 = input.LA(1);

                         
                        int index98_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_221);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA98_222 = input.LA(1);

                         
                        int index98_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_222);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA98_223 = input.LA(1);

                         
                        int index98_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_223);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA98_225 = input.LA(1);

                         
                        int index98_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_225);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA98_227 = input.LA(1);

                         
                        int index98_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_227);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA98_228 = input.LA(1);

                         
                        int index98_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_228);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA98_229 = input.LA(1);

                         
                        int index98_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_229);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA98_231 = input.LA(1);

                         
                        int index98_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_231);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA98_233 = input.LA(1);

                         
                        int index98_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_233);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA98_235 = input.LA(1);

                         
                        int index98_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_235);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA98_236 = input.LA(1);

                         
                        int index98_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_236);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA98_237 = input.LA(1);

                         
                        int index98_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_237);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA98_238 = input.LA(1);

                         
                        int index98_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_238);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA98_239 = input.LA(1);

                         
                        int index98_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_239);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA98_240 = input.LA(1);

                         
                        int index98_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_240);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA98_241 = input.LA(1);

                         
                        int index98_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_241);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA98_242 = input.LA(1);

                         
                        int index98_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_242);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA98_243 = input.LA(1);

                         
                        int index98_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_243);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA98_245 = input.LA(1);

                         
                        int index98_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_245);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA98_247 = input.LA(1);

                         
                        int index98_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_247);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA98_249 = input.LA(1);

                         
                        int index98_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_249);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA98_251 = input.LA(1);

                         
                        int index98_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_251);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA98_254 = input.LA(1);

                         
                        int index98_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_254);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA98_255 = input.LA(1);

                         
                        int index98_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_255);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA98_256 = input.LA(1);

                         
                        int index98_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_256);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA98_257 = input.LA(1);

                         
                        int index98_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_257);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA98_258 = input.LA(1);

                         
                        int index98_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_258);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA98_259 = input.LA(1);

                         
                        int index98_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_259);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA98_260 = input.LA(1);

                         
                        int index98_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_260);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA98_262 = input.LA(1);

                         
                        int index98_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_262);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA98_264 = input.LA(1);

                         
                        int index98_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_264);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA98_266 = input.LA(1);

                         
                        int index98_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_266);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA98_268 = input.LA(1);

                         
                        int index98_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_268);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA98_271 = input.LA(1);

                         
                        int index98_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_271);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA98_272 = input.LA(1);

                         
                        int index98_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_272);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA98_273 = input.LA(1);

                         
                        int index98_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_273);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA98_274 = input.LA(1);

                         
                        int index98_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_274);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA98_276 = input.LA(1);

                         
                        int index98_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA98_278 = input.LA(1);

                         
                        int index98_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_278);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA98_280 = input.LA(1);

                         
                        int index98_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_280);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA98_281 = input.LA(1);

                         
                        int index98_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_281);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA98_282 = input.LA(1);

                         
                        int index98_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_282);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA98_283 = input.LA(1);

                         
                        int index98_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_283);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA98_284 = input.LA(1);

                         
                        int index98_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_284);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA98_287 = input.LA(1);

                         
                        int index98_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_287);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA98_288 = input.LA(1);

                         
                        int index98_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_288);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA98_289 = input.LA(1);

                         
                        int index98_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_289);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA98_290 = input.LA(1);

                         
                        int index98_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_290);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA98_291 = input.LA(1);

                         
                        int index98_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_291);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA98_292 = input.LA(1);

                         
                        int index98_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_292);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA98_293 = input.LA(1);

                         
                        int index98_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_293);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA98_295 = input.LA(1);

                         
                        int index98_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_295);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA98_297 = input.LA(1);

                         
                        int index98_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_297);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA98_299 = input.LA(1);

                         
                        int index98_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_299);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA98_301 = input.LA(1);

                         
                        int index98_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_301);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA98_304 = input.LA(1);

                         
                        int index98_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_304);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA98_305 = input.LA(1);

                         
                        int index98_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_305);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA98_306 = input.LA(1);

                         
                        int index98_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_306);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA98_307 = input.LA(1);

                         
                        int index98_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_307);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA98_310 = input.LA(1);

                         
                        int index98_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_310);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA98_311 = input.LA(1);

                         
                        int index98_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_311);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA98_312 = input.LA(1);

                         
                        int index98_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_312);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA98_313 = input.LA(1);

                         
                        int index98_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_313);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA98_315 = input.LA(1);

                         
                        int index98_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_315);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA98_317 = input.LA(1);

                         
                        int index98_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_317);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA98_319 = input.LA(1);

                         
                        int index98_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_319);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA98_320 = input.LA(1);

                         
                        int index98_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_320);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA98_321 = input.LA(1);

                         
                        int index98_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_321);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA98_322 = input.LA(1);

                         
                        int index98_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_322);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA98_323 = input.LA(1);

                         
                        int index98_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_323);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA98_324 = input.LA(1);

                         
                        int index98_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_324);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA98_325 = input.LA(1);

                         
                        int index98_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_325);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA98_327 = input.LA(1);

                         
                        int index98_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_327);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA98_329 = input.LA(1);

                         
                        int index98_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_329);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA98_330 = input.LA(1);

                         
                        int index98_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_330);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA98_331 = input.LA(1);

                         
                        int index98_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_331);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA98_333 = input.LA(1);

                         
                        int index98_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_333);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA98_335 = input.LA(1);

                         
                        int index98_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_335);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA98_337 = input.LA(1);

                         
                        int index98_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_337);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA98_338 = input.LA(1);

                         
                        int index98_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_338);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA98_339 = input.LA(1);

                         
                        int index98_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_339);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA98_340 = input.LA(1);

                         
                        int index98_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_340);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA98_341 = input.LA(1);

                         
                        int index98_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_341);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA98_342 = input.LA(1);

                         
                        int index98_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_342);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA98_343 = input.LA(1);

                         
                        int index98_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_343);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA98_344 = input.LA(1);

                         
                        int index98_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_344);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA98_345 = input.LA(1);

                         
                        int index98_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_345);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA98_347 = input.LA(1);

                         
                        int index98_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_347);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA98_349 = input.LA(1);

                         
                        int index98_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_349);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA98_351 = input.LA(1);

                         
                        int index98_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_351);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA98_353 = input.LA(1);

                         
                        int index98_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_353);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA98_356 = input.LA(1);

                         
                        int index98_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_356);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA98_357 = input.LA(1);

                         
                        int index98_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_357);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA98_358 = input.LA(1);

                         
                        int index98_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_358);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA98_361 = input.LA(1);

                         
                        int index98_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_361);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA98_362 = input.LA(1);

                         
                        int index98_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_362);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA98_363 = input.LA(1);

                         
                        int index98_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_363);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA98_365 = input.LA(1);

                         
                        int index98_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_365);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA98_367 = input.LA(1);

                         
                        int index98_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_367);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA98_369 = input.LA(1);

                         
                        int index98_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_369);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA98_370 = input.LA(1);

                         
                        int index98_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_370);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA98_371 = input.LA(1);

                         
                        int index98_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_371);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA98_372 = input.LA(1);

                         
                        int index98_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_372);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA98_373 = input.LA(1);

                         
                        int index98_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_373);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA98_374 = input.LA(1);

                         
                        int index98_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_374);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA98_376 = input.LA(1);

                         
                        int index98_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_376);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA98_378 = input.LA(1);

                         
                        int index98_378 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_378);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA98_379 = input.LA(1);

                         
                        int index98_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_379);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA98_380 = input.LA(1);

                         
                        int index98_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_380);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA98_381 = input.LA(1);

                         
                        int index98_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_381);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA98_382 = input.LA(1);

                         
                        int index98_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_382);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA98_383 = input.LA(1);

                         
                        int index98_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_383);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA98_384 = input.LA(1);

                         
                        int index98_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_384);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA98_386 = input.LA(1);

                         
                        int index98_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_386);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA98_388 = input.LA(1);

                         
                        int index98_388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_388);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA98_390 = input.LA(1);

                         
                        int index98_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_390);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA98_392 = input.LA(1);

                         
                        int index98_392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index98_392);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA124_eotS =
        "\u01e5\uffff";
    static final String DFA124_eofS =
        "\u01e5\uffff";
    static final String DFA124_minS =
        "\7\56\13\uffff\11\56\2\uffff\4\56\2\uffff\1\56\1\172\5\56\2\uffff"+
        "\6\56\2\uffff\4\56\2\uffff\4\56\2\uffff\4\56\2\uffff\1\56\1\172"+
        "\5\56\2\uffff\6\56\2\uffff\4\56\2\uffff\1\u0089\1\56\1\172\1\uffff"+
        "\3\56\2\uffff\1\u00b1\1\56\3\uffff\1\u0089\2\uffff\1\172\1\56\1"+
        "\uffff\3\56\2\uffff\1\u00b1\1\56\2\uffff\1\172\4\56\2\uffff\1\56"+
        "\1\u0089\1\56\1\172\1\uffff\3\56\2\uffff\1\u00b1\1\56\2\uffff\1"+
        "\56\1\172\5\56\2\uffff\4\56\2\uffff\1\u0089\1\56\1\172\1\uffff\3"+
        "\56\2\uffff\1\u00b1\1\56\2\uffff\6\56\2\uffff\1\u0089\1\56\1\172"+
        "\1\uffff\3\56\2\uffff\1\u00b1\1\56\2\uffff\3\0\1\uffff\3\0\2\uffff"+
        "\2\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\5\0\2\uffff\4\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff\4\0\2\uffff\3\0\1\uffff"+
        "\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0"+
        "\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\5\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0\1\uffff\3\0\2\uffff\2\0"+
        "\2\uffff\4\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\5\0\2\uffff"+
        "\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff\3\0\1\uffff\3\0"+
        "\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0\2\uffff"+
        "\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\7\0\3\uffff\3\0"+
        "\2\uffff\3\0\3\uffff";
    static final String DFA124_maxS =
        "\1\u00d3\1\u00cb\2\u00af\1\u00c8\1\u00cb\1\u00af\13\uffff\2\u00af"+
        "\1\u00c8\1\u00cb\1\u00af\1\u00c3\1\u00b8\1\u00b1\1\171\2\uffff\1"+
        "\u00cb\1\u00b8\1\u00b1\1\171\2\uffff\1\u00b8\1\172\1\u00c3\1\u00b8"+
        "\1\u00b1\1\171\1\u00c8\2\uffff\1\u00af\1\u00c3\1\u00b8\1\u00b1\1"+
        "\171\1\u00cb\2\uffff\1\u00c3\1\u00b8\1\u00b1\1\171\2\uffff\1\u00c3"+
        "\1\u00b8\1\u00b1\1\171\2\uffff\1\u00c3\1\u00b8\1\u00b1\1\171\2\uffff"+
        "\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\171\1\u00c8\2\uffff\1\u00af"+
        "\1\u00c3\1\u00b8\1\u00b1\1\171\1\u00cb\2\uffff\1\u00c3\1\u00b8\1"+
        "\u00b1\1\171\2\uffff\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\171"+
        "\1\u00b8\2\uffff\1\u00b1\1\u00af\3\uffff\1\u008f\2\uffff\1\u008f"+
        "\1\u00c3\1\uffff\1\u00b1\1\171\1\u00b8\2\uffff\1\u00b1\1\u00af\2"+
        "\uffff\1\172\1\u00c3\1\u00b8\1\u00b1\1\171\2\uffff\1\u00af\1\u0089"+
        "\1\u00c3\1\172\1\uffff\1\u00b1\1\171\1\u00b8\2\uffff\1\u00b1\1\u00af"+
        "\2\uffff\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\171\1\u00c8\2\uffff"+
        "\1\u00c3\1\u00b8\1\u00b1\1\171\2\uffff\1\u0089\1\u00c3\1\172\1\uffff"+
        "\1\u00b1\1\171\1\u00b8\2\uffff\1\u00b1\1\u00af\2\uffff\1\u00af\1"+
        "\u00c3\1\u00b8\1\u00b1\1\171\1\u00cb\2\uffff\1\u0089\1\u00c3\1\172"+
        "\1\uffff\1\u00b1\1\171\1\u00b8\2\uffff\1\u00b1\1\u00af\2\uffff\3"+
        "\0\1\uffff\3\0\2\uffff\2\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2"+
        "\uffff\5\0\2\uffff\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff"+
        "\4\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\3\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\5\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\4\0\2\uffff\7\0\3\uffff\3\0\2\uffff"+
        "\3\0\3\uffff\5\0\2\uffff\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0"+
        "\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff"+
        "\3\0\3\uffff\4\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0"+
        "\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff";
    static final String DFA124_acceptS =
        "\7\uffff\1\2\141\uffff\1\1\17\uffff\1\1\24\uffff\1\1\33\uffff\1"+
        "\1\24\uffff\1\1\14\uffff\1\1\14\uffff\1\1\24\uffff\1\1\33\uffff"+
        "\1\1\24\uffff\1\1\10\uffff\1\1\26\uffff\1\1\31\uffff\1\1\16\uffff"+
        "\1\1\40\uffff\1\1\25\uffff\1\1\10\uffff\1\1\36\uffff\1\1\20\uffff"+
        "\1\1\14\uffff";
    static final String DFA124_specialS =
        "\32\uffff\1\0\5\uffff\1\1\7\uffff\1\2\7\uffff\1\3\6\uffff\1\4\5"+
        "\uffff\1\5\5\uffff\1\6\7\uffff\1\7\7\uffff\1\10\6\uffff\1\11\7\uffff"+
        "\1\12\17\uffff\1\13\13\uffff\1\14\10\uffff\1\15\14\uffff\1\16\6"+
        "\uffff\1\17\7\uffff\1\20\13\uffff\1\21\10\uffff\1\22\7\uffff\1\23"+
        "\1\24\1\25\1\uffff\1\26\1\27\1\30\2\uffff\1\31\1\32\2\uffff\1\33"+
        "\1\34\1\35\1\uffff\1\36\1\37\1\40\2\uffff\1\41\1\42\2\uffff\1\43"+
        "\1\44\1\45\1\46\1\47\2\uffff\1\50\1\51\1\52\1\53\1\uffff\1\54\1"+
        "\55\1\56\2\uffff\1\57\1\60\2\uffff\1\61\1\62\1\63\1\64\1\65\1\66"+
        "\1\67\2\uffff\1\70\1\71\1\72\1\73\2\uffff\1\74\1\75\1\76\1\uffff"+
        "\1\77\1\100\1\101\2\uffff\1\102\1\103\2\uffff\1\104\1\105\1\106"+
        "\1\107\1\110\1\111\2\uffff\1\112\1\113\1\114\1\uffff\1\115\1\116"+
        "\1\117\2\uffff\1\120\1\121\2\uffff\1\122\1\123\1\124\1\125\1\126"+
        "\1\127\1\130\3\uffff\1\131\1\132\1\133\2\uffff\1\134\1\135\1\136"+
        "\3\uffff\1\137\1\uffff\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145"+
        "\3\uffff\1\146\1\147\1\150\2\uffff\1\151\1\152\1\153\3\uffff\1\154"+
        "\1\155\1\156\1\157\1\uffff\1\160\1\161\1\162\2\uffff\1\163\1\164"+
        "\2\uffff\1\165\1\166\1\167\1\170\2\uffff\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\3\uffff\1\u0080\1\u0081\1\u0082\2\uffff\1\u0083"+
        "\1\u0084\1\u0085\3\uffff\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\2\uffff\1\u008b\1\u008c\1\u008d\1\u008e\1\uffff\1\u008f\1\u0090"+
        "\1\u0091\2\uffff\1\u0092\1\u0093\2\uffff\1\u0094\1\u0095\1\u0096"+
        "\1\u0097\1\u0098\1\u0099\1\u009a\2\uffff\1\u009b\1\u009c\1\u009d"+
        "\1\uffff\1\u009e\1\u009f\1\u00a0\2\uffff\1\u00a1\1\u00a2\2\uffff"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\3\uffff"+
        "\1\u00aa\1\u00ab\1\u00ac\2\uffff\1\u00ad\1\u00ae\1\u00af\3\uffff"+
        "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\2\uffff\1\u00b4\1\u00b5\1\u00b6"+
        "\1\uffff\1\u00b7\1\u00b8\1\u00b9\2\uffff\1\u00ba\1\u00bb\2\uffff"+
        "\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\2\uffff\1\u00c2"+
        "\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\3\uffff\1\u00c9"+
        "\1\u00ca\1\u00cb\2\uffff\1\u00cc\1\u00cd\1\u00ce\3\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\6\110\uffff\1\7\62\uffff\1\1\11\uffff\2\7\2\uffff\1\7\4\uffff"+
            "\1\7\5\uffff\1\3\2\uffff\1\7\1\2\1\4\1\7\1\uffff\1\5\1\uffff"+
            "\1\7\3\uffff\3\7",
            "\1\26\u0094\uffff\1\23\3\uffff\1\22\1\24\2\uffff\1\25",
            "\1\7\106\uffff\1\7\2\uffff\1\32\1\uffff\1\30\16\uffff\1\27"+
            "\45\uffff\1\31",
            "\1\7\106\uffff\1\7\2\uffff\1\40\1\uffff\1\36\16\uffff\1\35"+
            "\45\uffff\1\37",
            "\1\7\106\uffff\1\7\2\uffff\1\50\1\uffff\1\46\16\uffff\1\45"+
            "\45\uffff\1\47\10\uffff\1\44\16\uffff\1\43\1\51",
            "\1\7\106\uffff\1\7\2\uffff\1\60\1\uffff\1\56\16\uffff\1\55"+
            "\45\uffff\1\57\27\uffff\1\54\3\uffff\1\61",
            "\1\7\106\uffff\1\7\2\uffff\1\67\1\uffff\1\65\16\uffff\1\64"+
            "\45\uffff\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\75\1\uffff\1\73\16\uffff\1\72"+
            "\45\uffff\1\74",
            "\1\7\106\uffff\1\7\2\uffff\1\103\1\uffff\1\101\16\uffff\1\100"+
            "\45\uffff\1\102",
            "\1\7\106\uffff\1\7\2\uffff\1\113\1\uffff\1\111\16\uffff\1\110"+
            "\45\uffff\1\112\10\uffff\1\107\16\uffff\1\106\1\114",
            "\1\7\106\uffff\1\7\2\uffff\1\123\1\uffff\1\121\16\uffff\1\120"+
            "\45\uffff\1\122\27\uffff\1\117\3\uffff\1\124",
            "\1\7\106\uffff\1\7\2\uffff\1\132\1\uffff\1\130\16\uffff\1\127"+
            "\45\uffff\1\131",
            "\1\137\132\uffff\1\136\71\uffff\1\135",
            "\1\7\106\uffff\1\7\2\uffff\1\142\1\uffff\1\143\64\uffff\1\141"+
            "\10\uffff\1\7",
            "\1\146\24\uffff\1\146\155\uffff\1\147",
            "\1\151\112\uffff\1\7",
            "",
            "",
            "\1\156\132\uffff\1\157\71\uffff\1\153\3\uffff\2\7\2\uffff\1"+
            "\7",
            "\1\7\106\uffff\1\7\2\uffff\1\162\1\uffff\1\163\64\uffff\1\161"+
            "\10\uffff\1\7",
            "\1\166\24\uffff\1\166\155\uffff\1\167",
            "\1\171\112\uffff\1\7",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\176\1\uffff\1\174\16\uffff\1\173"+
            "\45\uffff\1\175\10\uffff\1\172",
            "\1\u0081",
            "\1\u0084\132\uffff\1\u0083\71\uffff\1\u0082",
            "\1\7\106\uffff\1\7\2\uffff\1\u0087\1\uffff\1\u0088\64\uffff"+
            "\1\u0086\10\uffff\1\7",
            "\1\u008b\24\uffff\1\u008b\155\uffff\1\u008c",
            "\1\u008e\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u0094\1\uffff\1\u0092\16\uffff"+
            "\1\u0091\45\uffff\1\u0093\10\uffff\1\u0090\16\uffff\1\u008f"+
            "\1\u0095",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u009b\1\uffff\1\u0099\16\uffff"+
            "\1\u0098\45\uffff\1\u009a",
            "\1\u00a0\132\uffff\1\u009f\71\uffff\1\u009e",
            "\1\7\106\uffff\1\7\2\uffff\1\u00a3\1\uffff\1\u00a4\64\uffff"+
            "\1\u00a2\10\uffff\1\7",
            "\1\u00a7\24\uffff\1\u00a7\155\uffff\1\u00a8",
            "\1\u00aa\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u00af\1\uffff\1\u00ad\16\uffff"+
            "\1\u00ac\45\uffff\1\u00ae\27\uffff\1\u00ab\3\uffff\1\u00b0",
            "",
            "",
            "\1\u00b5\132\uffff\1\u00b4\71\uffff\1\u00b3",
            "\1\7\106\uffff\1\7\2\uffff\1\u00b8\1\uffff\1\u00b9\64\uffff"+
            "\1\u00b7\10\uffff\1\7",
            "\1\u00bc\24\uffff\1\u00bc\155\uffff\1\u00bd",
            "\1\u00bf\112\uffff\1\7",
            "",
            "",
            "\1\u00c2\132\uffff\1\u00c1\71\uffff\1\u00c0",
            "\1\7\106\uffff\1\7\2\uffff\1\u00c5\1\uffff\1\u00c6\64\uffff"+
            "\1\u00c4\10\uffff\1\7",
            "\1\u00c9\24\uffff\1\u00c9\155\uffff\1\u00ca",
            "\1\u00cc\112\uffff\1\7",
            "",
            "",
            "\1\u00cf\132\uffff\1\u00ce\71\uffff\1\u00cd",
            "\1\7\106\uffff\1\7\2\uffff\1\u00d2\1\uffff\1\u00d3\64\uffff"+
            "\1\u00d1\10\uffff\1\7",
            "\1\u00d6\24\uffff\1\u00d6\155\uffff\1\u00d7",
            "\1\u00d9\112\uffff\1\7",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u00de\1\uffff\1\u00dc\16\uffff"+
            "\1\u00db\45\uffff\1\u00dd\10\uffff\1\u00da",
            "\1\u00e1",
            "\1\u00e4\132\uffff\1\u00e3\71\uffff\1\u00e2",
            "\1\7\106\uffff\1\7\2\uffff\1\u00e7\1\uffff\1\u00e8\64\uffff"+
            "\1\u00e6\10\uffff\1\7",
            "\1\u00eb\24\uffff\1\u00eb\155\uffff\1\u00ec",
            "\1\u00ee\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u00f4\1\uffff\1\u00f2\16\uffff"+
            "\1\u00f1\45\uffff\1\u00f3\10\uffff\1\u00f0\16\uffff\1\u00ef"+
            "\1\u00f5",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u00fb\1\uffff\1\u00f9\16\uffff"+
            "\1\u00f8\45\uffff\1\u00fa",
            "\1\u0100\132\uffff\1\u00ff\71\uffff\1\u00fe",
            "\1\7\106\uffff\1\7\2\uffff\1\u0103\1\uffff\1\u0104\64\uffff"+
            "\1\u0102\10\uffff\1\7",
            "\1\u0107\24\uffff\1\u0107\155\uffff\1\u0108",
            "\1\u010a\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u010f\1\uffff\1\u010d\16\uffff"+
            "\1\u010c\45\uffff\1\u010e\27\uffff\1\u010b\3\uffff\1\u0110",
            "",
            "",
            "\1\u0115\132\uffff\1\u0114\71\uffff\1\u0113",
            "\1\7\106\uffff\1\7\2\uffff\1\u0118\1\uffff\1\u0119\64\uffff"+
            "\1\u0117\10\uffff\1\7",
            "\1\u011c\24\uffff\1\u011c\155\uffff\1\u011d",
            "\1\u011f\112\uffff\1\7",
            "",
            "",
            "\1\u0120",
            "\1\u0123\132\uffff\1\u0122\71\uffff\1\u0121",
            "\1\u0124",
            "",
            "\1\u0125\24\uffff\1\u0125\155\uffff\1\u0126",
            "\1\u0128\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u012b\1\uffff\1\u012c\64\uffff"+
            "\1\u012a\10\uffff\1\7",
            "",
            "",
            "\1\u012f",
            "\1\7\106\uffff\1\7\2\uffff\1\u0130\1\uffff\1\7\64\uffff\1\u0131",
            "",
            "",
            "",
            "\1\u0135\5\uffff\1\7",
            "",
            "",
            "\1\u0137\24\uffff\1\7",
            "\1\u013b\132\uffff\1\u013a\71\uffff\1\u0139",
            "",
            "\1\u013c\24\uffff\1\u013c\155\uffff\1\u013d",
            "\1\u013f\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u0142\1\uffff\1\u0143\64\uffff"+
            "\1\u0141\10\uffff\1\7",
            "",
            "",
            "\1\u0146",
            "\1\7\106\uffff\1\7\2\uffff\1\u0147\1\uffff\1\7\64\uffff\1\u0148",
            "",
            "",
            "\1\u014c",
            "\1\u014f\132\uffff\1\u014e\71\uffff\1\u014d",
            "\1\7\106\uffff\1\7\2\uffff\1\u0152\1\uffff\1\u0153\64\uffff"+
            "\1\u0151\10\uffff\1\7",
            "\1\u0156\24\uffff\1\u0156\155\uffff\1\u0157",
            "\1\u0159\112\uffff\1\7",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u015d\1\uffff\1\u015b\16\uffff"+
            "\1\u015a\45\uffff\1\u015c",
            "\1\u0160",
            "\1\u0163\132\uffff\1\u0162\71\uffff\1\u0161",
            "\1\u0164",
            "",
            "\1\u0165\24\uffff\1\u0165\155\uffff\1\u0166",
            "\1\u0168\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u016b\1\uffff\1\u016c\64\uffff"+
            "\1\u016a\10\uffff\1\7",
            "",
            "",
            "\1\u016f",
            "\1\7\106\uffff\1\7\2\uffff\1\u0170\1\uffff\1\7\64\uffff\1\u0171",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u0179\1\uffff\1\u0177\16\uffff"+
            "\1\u0176\45\uffff\1\u0178\10\uffff\1\u0175",
            "\1\u017c",
            "\1\u017f\132\uffff\1\u017e\71\uffff\1\u017d",
            "\1\7\106\uffff\1\7\2\uffff\1\u0182\1\uffff\1\u0183\64\uffff"+
            "\1\u0181\10\uffff\1\7",
            "\1\u0186\24\uffff\1\u0186\155\uffff\1\u0187",
            "\1\u0189\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u018f\1\uffff\1\u018d\16\uffff"+
            "\1\u018c\45\uffff\1\u018e\10\uffff\1\u018b\16\uffff\1\u018a"+
            "\1\u0190",
            "",
            "",
            "\1\u0195\132\uffff\1\u0194\71\uffff\1\u0193",
            "\1\7\106\uffff\1\7\2\uffff\1\u0198\1\uffff\1\u0199\64\uffff"+
            "\1\u0197\10\uffff\1\7",
            "\1\u019c\24\uffff\1\u019c\155\uffff\1\u019d",
            "\1\u019f\112\uffff\1\7",
            "",
            "",
            "\1\u01a0",
            "\1\u01a3\132\uffff\1\u01a2\71\uffff\1\u01a1",
            "\1\u01a4",
            "",
            "\1\u01a5\24\uffff\1\u01a5\155\uffff\1\u01a6",
            "\1\u01a8\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u01ab\1\uffff\1\u01ac\64\uffff"+
            "\1\u01aa\10\uffff\1\7",
            "",
            "",
            "\1\u01af",
            "\1\7\106\uffff\1\7\2\uffff\1\u01b0\1\uffff\1\7\64\uffff\1\u01b1",
            "",
            "",
            "\1\7\106\uffff\1\7\2\uffff\1\u01b8\1\uffff\1\u01b6\16\uffff"+
            "\1\u01b5\45\uffff\1\u01b7",
            "\1\u01bd\132\uffff\1\u01bc\71\uffff\1\u01bb",
            "\1\7\106\uffff\1\7\2\uffff\1\u01c0\1\uffff\1\u01c1\64\uffff"+
            "\1\u01bf\10\uffff\1\7",
            "\1\u01c4\24\uffff\1\u01c4\155\uffff\1\u01c5",
            "\1\u01c7\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u01cc\1\uffff\1\u01ca\16\uffff"+
            "\1\u01c9\45\uffff\1\u01cb\27\uffff\1\u01c8\3\uffff\1\u01cd",
            "",
            "",
            "\1\u01d0",
            "\1\u01d3\132\uffff\1\u01d2\71\uffff\1\u01d1",
            "\1\u01d4",
            "",
            "\1\u01d5\24\uffff\1\u01d5\155\uffff\1\u01d6",
            "\1\u01d8\112\uffff\1\7",
            "\1\7\106\uffff\1\7\2\uffff\1\u01db\1\uffff\1\u01dc\64\uffff"+
            "\1\u01da\10\uffff\1\7",
            "",
            "",
            "\1\u01df",
            "\1\7\106\uffff\1\7\2\uffff\1\u01e0\1\uffff\1\7\64\uffff\1\u01e1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "814:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_26 = input.LA(1);

                         
                        int index124_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_26==121) ) {s = 7;}

                        else if ( (LA124_26==ID) && (synpred25_Objc())) {s = 105;}

                         
                        input.seek(index124_26);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_32 = input.LA(1);

                         
                        int index124_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_32==121) ) {s = 7;}

                        else if ( (LA124_32==ID) && (synpred25_Objc())) {s = 121;}

                         
                        input.seek(index124_32);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_40 = input.LA(1);

                         
                        int index124_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_40==121) ) {s = 7;}

                        else if ( (LA124_40==ID) && (synpred25_Objc())) {s = 142;}

                         
                        input.seek(index124_40);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_48 = input.LA(1);

                         
                        int index124_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_48==121) ) {s = 7;}

                        else if ( (LA124_48==ID) && (synpred25_Objc())) {s = 170;}

                         
                        input.seek(index124_48);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_55 = input.LA(1);

                         
                        int index124_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_55==121) ) {s = 7;}

                        else if ( (LA124_55==ID) && (synpred25_Objc())) {s = 191;}

                         
                        input.seek(index124_55);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_61 = input.LA(1);

                         
                        int index124_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_61==121) ) {s = 7;}

                        else if ( (LA124_61==ID) && (synpred25_Objc())) {s = 204;}

                         
                        input.seek(index124_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_67 = input.LA(1);

                         
                        int index124_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_67==121) ) {s = 7;}

                        else if ( (LA124_67==ID) && (synpred25_Objc())) {s = 217;}

                         
                        input.seek(index124_67);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_75 = input.LA(1);

                         
                        int index124_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_75==121) ) {s = 7;}

                        else if ( (LA124_75==ID) && (synpred25_Objc())) {s = 238;}

                         
                        input.seek(index124_75);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_83 = input.LA(1);

                         
                        int index124_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_83==121) ) {s = 7;}

                        else if ( (LA124_83==ID) && (synpred25_Objc())) {s = 266;}

                         
                        input.seek(index124_83);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_90 = input.LA(1);

                         
                        int index124_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_90==121) ) {s = 7;}

                        else if ( (LA124_90==ID) && (synpred25_Objc())) {s = 287;}

                         
                        input.seek(index124_90);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_98 = input.LA(1);

                         
                        int index124_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_98==121) ) {s = 7;}

                        else if ( (LA124_98==ID) && (synpred25_Objc())) {s = 296;}

                         
                        input.seek(index124_98);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA124_114 = input.LA(1);

                         
                        int index124_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_114==121) ) {s = 7;}

                        else if ( (LA124_114==ID) && (synpred25_Objc())) {s = 319;}

                         
                        input.seek(index124_114);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA124_126 = input.LA(1);

                         
                        int index124_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_126==121) ) {s = 7;}

                        else if ( (LA124_126==ID) && (synpred25_Objc())) {s = 345;}

                         
                        input.seek(index124_126);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA124_135 = input.LA(1);

                         
                        int index124_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_135==121) ) {s = 7;}

                        else if ( (LA124_135==ID) && (synpred25_Objc())) {s = 360;}

                         
                        input.seek(index124_135);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA124_148 = input.LA(1);

                         
                        int index124_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_148==121) ) {s = 7;}

                        else if ( (LA124_148==ID) && (synpred25_Objc())) {s = 393;}

                         
                        input.seek(index124_148);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA124_155 = input.LA(1);

                         
                        int index124_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_155==121) ) {s = 7;}

                        else if ( (LA124_155==ID) && (synpred25_Objc())) {s = 415;}

                         
                        input.seek(index124_155);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA124_163 = input.LA(1);

                         
                        int index124_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_163==121) ) {s = 7;}

                        else if ( (LA124_163==ID) && (synpred25_Objc())) {s = 424;}

                         
                        input.seek(index124_163);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA124_175 = input.LA(1);

                         
                        int index124_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_175==121) ) {s = 7;}

                        else if ( (LA124_175==ID) && (synpred25_Objc())) {s = 455;}

                         
                        input.seek(index124_175);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA124_184 = input.LA(1);

                         
                        int index124_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA124_184==121) ) {s = 7;}

                        else if ( (LA124_184==ID) && (synpred25_Objc())) {s = 472;}

                         
                        input.seek(index124_184);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA124_192 = input.LA(1);

                         
                        int index124_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_192);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA124_193 = input.LA(1);

                         
                        int index124_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_193);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA124_194 = input.LA(1);

                         
                        int index124_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_194);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA124_196 = input.LA(1);

                         
                        int index124_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_196);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA124_197 = input.LA(1);

                         
                        int index124_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_197);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA124_198 = input.LA(1);

                         
                        int index124_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_198);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA124_201 = input.LA(1);

                         
                        int index124_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_201);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA124_202 = input.LA(1);

                         
                        int index124_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_202);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA124_205 = input.LA(1);

                         
                        int index124_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_205);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA124_206 = input.LA(1);

                         
                        int index124_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_206);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA124_207 = input.LA(1);

                         
                        int index124_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_207);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA124_209 = input.LA(1);

                         
                        int index124_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_209);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA124_210 = input.LA(1);

                         
                        int index124_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_210);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA124_211 = input.LA(1);

                         
                        int index124_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_211);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA124_214 = input.LA(1);

                         
                        int index124_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_214);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA124_215 = input.LA(1);

                         
                        int index124_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_215);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA124_218 = input.LA(1);

                         
                        int index124_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_218);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA124_219 = input.LA(1);

                         
                        int index124_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_219);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA124_220 = input.LA(1);

                         
                        int index124_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_220);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA124_221 = input.LA(1);

                         
                        int index124_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_221);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA124_222 = input.LA(1);

                         
                        int index124_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_222);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA124_225 = input.LA(1);

                         
                        int index124_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_225);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA124_226 = input.LA(1);

                         
                        int index124_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_226);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA124_227 = input.LA(1);

                         
                        int index124_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_227);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA124_228 = input.LA(1);

                         
                        int index124_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_228);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA124_230 = input.LA(1);

                         
                        int index124_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_230);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA124_231 = input.LA(1);

                         
                        int index124_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_231);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA124_232 = input.LA(1);

                         
                        int index124_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_232);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA124_235 = input.LA(1);

                         
                        int index124_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_235);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA124_236 = input.LA(1);

                         
                        int index124_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_236);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA124_239 = input.LA(1);

                         
                        int index124_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_239);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA124_240 = input.LA(1);

                         
                        int index124_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_240);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA124_241 = input.LA(1);

                         
                        int index124_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_241);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA124_242 = input.LA(1);

                         
                        int index124_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_242);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA124_243 = input.LA(1);

                         
                        int index124_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_243);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA124_244 = input.LA(1);

                         
                        int index124_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_244);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA124_245 = input.LA(1);

                         
                        int index124_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_245);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA124_248 = input.LA(1);

                         
                        int index124_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_248);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA124_249 = input.LA(1);

                         
                        int index124_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_249);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA124_250 = input.LA(1);

                         
                        int index124_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_250);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA124_251 = input.LA(1);

                         
                        int index124_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_251);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA124_254 = input.LA(1);

                         
                        int index124_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_254);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA124_255 = input.LA(1);

                         
                        int index124_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_255);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA124_256 = input.LA(1);

                         
                        int index124_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_256);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA124_258 = input.LA(1);

                         
                        int index124_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_258);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA124_259 = input.LA(1);

                         
                        int index124_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_259);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA124_260 = input.LA(1);

                         
                        int index124_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_260);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA124_263 = input.LA(1);

                         
                        int index124_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_263);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA124_264 = input.LA(1);

                         
                        int index124_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_264);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA124_267 = input.LA(1);

                         
                        int index124_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_267);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA124_268 = input.LA(1);

                         
                        int index124_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_268);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA124_269 = input.LA(1);

                         
                        int index124_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_269);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA124_270 = input.LA(1);

                         
                        int index124_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_270);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA124_271 = input.LA(1);

                         
                        int index124_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_271);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA124_272 = input.LA(1);

                         
                        int index124_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_272);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA124_275 = input.LA(1);

                         
                        int index124_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_275);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA124_276 = input.LA(1);

                         
                        int index124_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_276);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA124_277 = input.LA(1);

                         
                        int index124_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_277);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA124_279 = input.LA(1);

                         
                        int index124_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_279);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA124_280 = input.LA(1);

                         
                        int index124_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_280);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA124_281 = input.LA(1);

                         
                        int index124_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_281);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA124_284 = input.LA(1);

                         
                        int index124_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_284);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA124_285 = input.LA(1);

                         
                        int index124_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_285);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA124_288 = input.LA(1);

                         
                        int index124_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_288);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA124_289 = input.LA(1);

                         
                        int index124_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_289);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA124_290 = input.LA(1);

                         
                        int index124_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_290);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA124_291 = input.LA(1);

                         
                        int index124_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_291);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA124_292 = input.LA(1);

                         
                        int index124_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_292);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA124_293 = input.LA(1);

                         
                        int index124_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_293);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA124_294 = input.LA(1);

                         
                        int index124_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_294);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA124_298 = input.LA(1);

                         
                        int index124_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_298);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA124_299 = input.LA(1);

                         
                        int index124_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_299);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA124_300 = input.LA(1);

                         
                        int index124_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_300);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA124_303 = input.LA(1);

                         
                        int index124_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_303);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA124_304 = input.LA(1);

                         
                        int index124_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_304);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA124_305 = input.LA(1);

                         
                        int index124_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_305);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA124_309 = input.LA(1);

                         
                        int index124_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_309);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA124_311 = input.LA(1);

                         
                        int index124_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_311);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA124_313 = input.LA(1);

                         
                        int index124_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_313);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA124_314 = input.LA(1);

                         
                        int index124_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_314);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA124_315 = input.LA(1);

                         
                        int index124_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_315);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA124_316 = input.LA(1);

                         
                        int index124_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_316);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA124_317 = input.LA(1);

                         
                        int index124_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_317);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA124_321 = input.LA(1);

                         
                        int index124_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_321);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA124_322 = input.LA(1);

                         
                        int index124_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_322);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA124_323 = input.LA(1);

                         
                        int index124_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_323);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA124_326 = input.LA(1);

                         
                        int index124_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_326);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA124_327 = input.LA(1);

                         
                        int index124_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_327);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA124_328 = input.LA(1);

                         
                        int index124_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_328);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA124_332 = input.LA(1);

                         
                        int index124_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_332);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA124_333 = input.LA(1);

                         
                        int index124_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_333);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA124_334 = input.LA(1);

                         
                        int index124_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_334);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA124_335 = input.LA(1);

                         
                        int index124_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_335);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA124_337 = input.LA(1);

                         
                        int index124_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_337);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA124_338 = input.LA(1);

                         
                        int index124_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_338);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA124_339 = input.LA(1);

                         
                        int index124_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_339);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA124_342 = input.LA(1);

                         
                        int index124_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_342);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA124_343 = input.LA(1);

                         
                        int index124_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_343);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA124_346 = input.LA(1);

                         
                        int index124_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_346);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA124_347 = input.LA(1);

                         
                        int index124_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_347);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA124_348 = input.LA(1);

                         
                        int index124_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_348);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA124_349 = input.LA(1);

                         
                        int index124_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_349);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA124_352 = input.LA(1);

                         
                        int index124_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_352);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA124_353 = input.LA(1);

                         
                        int index124_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_353);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA124_354 = input.LA(1);

                         
                        int index124_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_354);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA124_355 = input.LA(1);

                         
                        int index124_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_355);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA124_356 = input.LA(1);

                         
                        int index124_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_356);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA124_357 = input.LA(1);

                         
                        int index124_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_357);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA124_358 = input.LA(1);

                         
                        int index124_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_358);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA124_362 = input.LA(1);

                         
                        int index124_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_362);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA124_363 = input.LA(1);

                         
                        int index124_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_363);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA124_364 = input.LA(1);

                         
                        int index124_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_364);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA124_367 = input.LA(1);

                         
                        int index124_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_367);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA124_368 = input.LA(1);

                         
                        int index124_368 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_368);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA124_369 = input.LA(1);

                         
                        int index124_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_369);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA124_373 = input.LA(1);

                         
                        int index124_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_373);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA124_374 = input.LA(1);

                         
                        int index124_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_374);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA124_375 = input.LA(1);

                         
                        int index124_375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_375);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA124_376 = input.LA(1);

                         
                        int index124_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_376);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA124_377 = input.LA(1);

                         
                        int index124_377 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_377);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA124_380 = input.LA(1);

                         
                        int index124_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_380);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA124_381 = input.LA(1);

                         
                        int index124_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_381);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA124_382 = input.LA(1);

                         
                        int index124_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_382);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA124_383 = input.LA(1);

                         
                        int index124_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_383);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA124_385 = input.LA(1);

                         
                        int index124_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_385);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA124_386 = input.LA(1);

                         
                        int index124_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_386);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA124_387 = input.LA(1);

                         
                        int index124_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_387);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA124_390 = input.LA(1);

                         
                        int index124_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_390);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA124_391 = input.LA(1);

                         
                        int index124_391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_391);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA124_394 = input.LA(1);

                         
                        int index124_394 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_394);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA124_395 = input.LA(1);

                         
                        int index124_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_395);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA124_396 = input.LA(1);

                         
                        int index124_396 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_396);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA124_397 = input.LA(1);

                         
                        int index124_397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_397);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA124_398 = input.LA(1);

                         
                        int index124_398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_398);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA124_399 = input.LA(1);

                         
                        int index124_399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_399);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA124_400 = input.LA(1);

                         
                        int index124_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_400);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA124_403 = input.LA(1);

                         
                        int index124_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_403);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA124_404 = input.LA(1);

                         
                        int index124_404 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_404);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA124_405 = input.LA(1);

                         
                        int index124_405 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_405);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA124_407 = input.LA(1);

                         
                        int index124_407 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_407);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA124_408 = input.LA(1);

                         
                        int index124_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_408);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA124_409 = input.LA(1);

                         
                        int index124_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_409);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA124_412 = input.LA(1);

                         
                        int index124_412 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_412);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA124_413 = input.LA(1);

                         
                        int index124_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_413);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA124_416 = input.LA(1);

                         
                        int index124_416 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_416);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA124_417 = input.LA(1);

                         
                        int index124_417 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_417);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA124_418 = input.LA(1);

                         
                        int index124_418 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_418);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA124_419 = input.LA(1);

                         
                        int index124_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_419);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA124_420 = input.LA(1);

                         
                        int index124_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_420);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA124_421 = input.LA(1);

                         
                        int index124_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_421);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA124_422 = input.LA(1);

                         
                        int index124_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_422);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA124_426 = input.LA(1);

                         
                        int index124_426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_426);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA124_427 = input.LA(1);

                         
                        int index124_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_427);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA124_428 = input.LA(1);

                         
                        int index124_428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_428);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA124_431 = input.LA(1);

                         
                        int index124_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_431);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA124_432 = input.LA(1);

                         
                        int index124_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_432);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA124_433 = input.LA(1);

                         
                        int index124_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_433);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA124_437 = input.LA(1);

                         
                        int index124_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_437);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA124_438 = input.LA(1);

                         
                        int index124_438 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_438);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA124_439 = input.LA(1);

                         
                        int index124_439 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_439);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA124_440 = input.LA(1);

                         
                        int index124_440 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_440);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA124_443 = input.LA(1);

                         
                        int index124_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_443);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA124_444 = input.LA(1);

                         
                        int index124_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_444);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA124_445 = input.LA(1);

                         
                        int index124_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_445);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA124_447 = input.LA(1);

                         
                        int index124_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_447);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA124_448 = input.LA(1);

                         
                        int index124_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_448);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA124_449 = input.LA(1);

                         
                        int index124_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_449);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA124_452 = input.LA(1);

                         
                        int index124_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_452);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA124_453 = input.LA(1);

                         
                        int index124_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_453);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA124_456 = input.LA(1);

                         
                        int index124_456 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_456);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA124_457 = input.LA(1);

                         
                        int index124_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_457);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA124_458 = input.LA(1);

                         
                        int index124_458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_458);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA124_459 = input.LA(1);

                         
                        int index124_459 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_459);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA124_460 = input.LA(1);

                         
                        int index124_460 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_460);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA124_461 = input.LA(1);

                         
                        int index124_461 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_461);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA124_464 = input.LA(1);

                         
                        int index124_464 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_464);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA124_465 = input.LA(1);

                         
                        int index124_465 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_465);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA124_466 = input.LA(1);

                         
                        int index124_466 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_466);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA124_467 = input.LA(1);

                         
                        int index124_467 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_467);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA124_468 = input.LA(1);

                         
                        int index124_468 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_468);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA124_469 = input.LA(1);

                         
                        int index124_469 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_469);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA124_470 = input.LA(1);

                         
                        int index124_470 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_470);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA124_474 = input.LA(1);

                         
                        int index124_474 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_474);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA124_475 = input.LA(1);

                         
                        int index124_475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_475);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA124_476 = input.LA(1);

                         
                        int index124_476 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_476);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA124_479 = input.LA(1);

                         
                        int index124_479 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_479);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA124_480 = input.LA(1);

                         
                        int index124_480 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_480);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA124_481 = input.LA(1);

                         
                        int index124_481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index124_481);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA137_eotS =
        "\u0201\uffff";
    static final String DFA137_eofS =
        "\u0201\uffff";
    static final String DFA137_minS =
        "\3\56\1\uffff\5\56\11\uffff\1\56\6\uffff\3\56\4\uffff\10\56\4\uffff"+
        "\1\56\1\172\3\56\1\uffff\1\56\3\uffff\4\56\1\uffff\1\56\3\uffff"+
        "\3\56\4\uffff\1\56\6\uffff\1\u0089\2\uffff\1\172\1\56\1\uffff\1"+
        "\56\1\uffff\1\56\3\uffff\1\u00b1\4\56\4\uffff\3\56\4\uffff\1\56"+
        "\1\172\3\56\1\uffff\1\56\3\uffff\4\56\1\uffff\1\56\3\uffff\3\56"+
        "\4\uffff\1\u0089\1\56\1\172\1\uffff\1\56\1\uffff\1\56\3\uffff\1"+
        "\u00b1\1\56\1\172\3\56\4\uffff\1\56\1\u0089\1\56\1\172\1\uffff\1"+
        "\56\1\uffff\1\56\3\uffff\1\u00b1\2\56\1\172\3\56\1\uffff\1\56\3"+
        "\uffff\3\56\4\uffff\1\u0089\1\56\1\172\1\uffff\1\56\1\uffff\1\56"+
        "\3\uffff\1\u00b1\5\56\1\uffff\1\56\3\uffff\1\u0089\1\56\1\172\1"+
        "\uffff\1\56\1\uffff\1\56\3\uffff\1\u00b1\1\56\1\uffff\1\0\2\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0"+
        "\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff"+
        "\5\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\4\uffff\4\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff\3\0\4\uffff\3\0\1\uffff"+
        "\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\3\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1"+
        "\uffff\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\5\0\4\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\4\0"+
        "\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1"+
        "\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\4\uffff\3\0\1\uffff\1\0\1"+
        "\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA137_maxS =
        "\1\u00d3\1\u00cb\1\u00af\1\uffff\1\u00cb\1\u00af\1\u00c8\1\u00cb"+
        "\1\u00af\11\uffff\1\u00af\6\uffff\1\u00cb\1\u00b8\1\u00b1\4\uffff"+
        "\2\u00af\1\u00c8\1\u00cb\1\u00af\1\u00c3\1\u00b8\1\u00b1\4\uffff"+
        "\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\uffff\1\u00c8\3\uffff\1"+
        "\u00af\1\u00c3\1\u00b8\1\u00b1\1\uffff\1\u00cb\3\uffff\1\u00c3\1"+
        "\u00b8\1\u00b1\4\uffff\1\u00cb\6\uffff\1\u008f\2\uffff\1\u008f\1"+
        "\u00c3\1\uffff\1\u00b1\1\uffff\1\u00b8\3\uffff\1\u00b1\1\u00af\1"+
        "\u00c3\1\u00b8\1\u00b1\4\uffff\1\u00c3\1\u00b8\1\u00b1\4\uffff\1"+
        "\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\uffff\1\u00c8\3\uffff\1\u00af"+
        "\1\u00c3\1\u00b8\1\u00b1\1\uffff\1\u00cb\3\uffff\1\u00c3\1\u00b8"+
        "\1\u00b1\4\uffff\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\uffff\1"+
        "\u00b8\3\uffff\1\u00b1\1\u00af\1\172\1\u00c3\1\u00b8\1\u00b1\4\uffff"+
        "\1\u00af\1\u0089\1\u00c3\1\172\1\uffff\1\u00b1\1\uffff\1\u00b8\3"+
        "\uffff\1\u00b1\1\u00af\1\u00b8\1\172\1\u00c3\1\u00b8\1\u00b1\1\uffff"+
        "\1\u00c8\3\uffff\1\u00c3\1\u00b8\1\u00b1\4\uffff\1\u0089\1\u00c3"+
        "\1\172\1\uffff\1\u00b1\1\uffff\1\u00b8\3\uffff\1\u00b1\2\u00af\1"+
        "\u00c3\1\u00b8\1\u00b1\1\uffff\1\u00cb\3\uffff\1\u0089\1\u00c3\1"+
        "\172\1\uffff\1\u00b1\1\uffff\1\u00b8\3\uffff\1\u00b1\1\u00af\1\uffff"+
        "\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\1\uffff\1\0\1\uffff"+
        "\1\0\3\uffff\5\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\4\uffff\4\0"+
        "\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff\3\0\4\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\3\0"+
        "\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1\0\3"+
        "\uffff\1\0\1\uffff\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff"+
        "\5\0\4\uffff\7\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0"+
        "\4\uffff\4\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff"+
        "\1\0\3\uffff\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1"+
        "\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\4\uffff\3\0\1"+
        "\uffff\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\7\0\1\uffff"+
        "\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA137_acceptS =
        "\3\uffff\1\2\5\uffff\1\4\1\5\1\6\1\7\17\uffff\1\3\13\uffff\1\3\10"+
        "\uffff\1\3\10\uffff\1\3\7\uffff\1\3\11\uffff\1\1\1\uffff\2\1\4\uffff"+
        "\1\3\11\uffff\1\3\6\uffff\1\3\10\uffff\1\3\10\uffff\1\3\7\uffff"+
        "\1\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\13\uffff\1\3\7\uffff"+
        "\1\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\6\uffff\1\1\1\uffff"+
        "\2\1\3\uffff\1\1\1\uffff\1\1\7\uffff\1\3\5\uffff\1\3\12\uffff\1"+
        "\3\13\uffff\1\3\12\uffff\1\3\11\uffff\1\3\13\uffff\1\3\7\uffff\1"+
        "\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\17\uffff\1\3\5\uffff\1"+
        "\3\13\uffff\1\3\11\uffff\1\3\14\uffff\1\3\5\uffff\1\3\11\uffff\1"+
        "\3\11\uffff\1\3\13\uffff\1\3\11\uffff\1\3\17\uffff\1\3\5\uffff\1"+
        "\3\10\uffff\1\3\10\uffff\1\3\12\uffff\1\3\15\uffff\1\3\5\uffff\1"+
        "\3\5\uffff";
    static final String DFA137_specialS =
        "\1\0\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\20\uffff\1\6\1\7\5\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\uffff\1\15\5\uffff\1\16\2\uffff\1\17"+
        "\2\uffff\1\20\3\uffff\1\21\1\uffff\1\22\2\uffff\1\23\4\uffff\1\24"+
        "\5\uffff\1\25\6\uffff\1\26\2\uffff\1\27\4\uffff\1\30\4\uffff\1\31"+
        "\1\uffff\1\32\6\uffff\1\33\5\uffff\1\34\2\uffff\1\35\2\uffff\1\36"+
        "\3\uffff\1\37\1\uffff\1\40\2\uffff\1\41\4\uffff\1\42\13\uffff\1"+
        "\43\4\uffff\1\44\2\uffff\1\45\5\uffff\1\46\6\uffff\1\47\4\uffff"+
        "\1\50\1\51\2\uffff\1\52\2\uffff\1\53\4\uffff\1\54\13\uffff\1\55"+
        "\4\uffff\1\56\1\57\1\uffff\1\60\2\uffff\1\61\11\uffff\1\62\4\uffff"+
        "\1\63\1\uffff\1\64\2\uffff\1\65\1\uffff\1\66\1\uffff\1\67\1\uffff"+
        "\1\70\1\71\1\72\1\73\1\74\1\uffff\1\75\1\uffff\1\76\3\uffff\1\77"+
        "\1\uffff\1\100\4\uffff\1\101\1\102\1\103\1\uffff\1\104\1\uffff\1"+
        "\105\3\uffff\1\106\1\107\1\110\1\111\1\112\1\uffff\1\113\1\uffff"+
        "\1\114\3\uffff\1\115\1\116\1\117\1\120\1\121\1\122\4\uffff\1\123"+
        "\1\124\1\125\1\126\1\uffff\1\127\1\uffff\1\130\3\uffff\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\uffff\1\140\3\uffff\1\141\1\142"+
        "\1\143\4\uffff\1\144\1\145\1\146\1\uffff\1\147\1\uffff\1\150\3\uffff"+
        "\1\151\1\152\1\153\1\154\1\155\1\156\1\uffff\1\157\3\uffff\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\uffff\1\164\3\uffff\1\165\1\166\1\167"+
        "\1\170\1\171\1\172\1\173\1\174\1\175\1\uffff\1\176\1\uffff\1\177"+
        "\3\uffff\1\u0080\1\uffff\1\u0081\4\uffff\1\u0082\1\u0083\1\u0084"+
        "\1\u0085\1\uffff\1\u0086\1\uffff\1\u0087\3\uffff\1\u0088\1\u0089"+
        "\1\u008a\1\u008b\1\u008c\4\uffff\1\u008d\1\u008e\1\u008f\1\u0090"+
        "\1\u0091\1\u0092\1\u0093\1\uffff\1\u0094\1\uffff\1\u0095\3\uffff"+
        "\1\u0096\1\uffff\1\u0097\4\uffff\1\u0098\1\u0099\1\u009a\1\u009b"+
        "\4\uffff\1\u009c\1\u009d\1\u009e\1\u009f\1\uffff\1\u00a0\1\uffff"+
        "\1\u00a1\3\uffff\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8\1\uffff\1\u00a9\3\uffff\1\u00aa\1\u00ab\1\u00ac\1\uffff"+
        "\1\u00ad\1\uffff\1\u00ae\3\uffff\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\uffff\1\u00b8\1\uffff"+
        "\1\u00b9\3\uffff\1\u00ba\1\uffff\1\u00bb\4\uffff\1\u00bc\1\u00bd"+
        "\1\u00be\4\uffff\1\u00bf\1\u00c0\1\u00c1\1\uffff\1\u00c2\1\uffff"+
        "\1\u00c3\3\uffff\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\uffff\1\u00ca\3\uffff\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\u00cf"+
        "\1\u00d0\1\u00d1\1\uffff\1\u00d2\1\uffff\1\u00d3\3\uffff\1\u00d4"+
        "\1\uffff\1\u00d5\4\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\10\110\uffff\1\3\62\uffff\1\4\11\uffff\1\14\1\1\2\uffff\1"+
            "\14\4\uffff\1\12\5\uffff\1\2\2\uffff\1\14\1\5\1\6\1\14\1\uffff"+
            "\1\7\1\uffff\1\11\3\uffff\1\13\2\14",
            "\1\14\173\uffff\1\14\30\uffff\1\22\3\uffff\3\14\1\uffff\1\14",
            "\1\14\106\uffff\1\14\2\uffff\1\34\1\14\1\32\16\uffff\1\31\45"+
            "\uffff\1\33",
            "",
            "\1\44\u0094\uffff\1\41\3\uffff\1\40\1\42\2\uffff\1\43",
            "\1\14\106\uffff\1\14\2\uffff\1\50\1\14\1\46\16\uffff\1\45\45"+
            "\uffff\1\47",
            "\1\14\106\uffff\1\14\2\uffff\1\61\1\14\1\57\16\uffff\1\56\45"+
            "\uffff\1\60\10\uffff\1\55\16\uffff\1\54\1\62",
            "\1\14\106\uffff\1\14\2\uffff\1\72\1\14\1\70\16\uffff\1\67\45"+
            "\uffff\1\71\27\uffff\1\66\3\uffff\1\73",
            "\1\14\106\uffff\1\14\2\uffff\1\102\1\14\1\100\16\uffff\1\77"+
            "\45\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\3\uffff\2\14\16\uffff\1\106\45\uffff\1"+
            "\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\132\uffff\1\121\71\uffff\1\115\3\uffff\1\114\1\116\2"+
            "\uffff\1\117",
            "\1\14\106\uffff\1\14\2\uffff\1\124\1\14\1\125\64\uffff\1\123"+
            "\10\uffff\1\14",
            "\1\131\24\uffff\1\131\155\uffff\1\132",
            "",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\136\1\14\1\134\16\uffff\1\133"+
            "\45\uffff\1\135",
            "\1\14\106\uffff\1\14\2\uffff\1\145\1\14\1\143\16\uffff\1\142"+
            "\45\uffff\1\144",
            "\1\14\106\uffff\1\14\2\uffff\1\156\1\14\1\154\16\uffff\1\153"+
            "\45\uffff\1\155\10\uffff\1\152\16\uffff\1\151\1\157",
            "\1\14\106\uffff\1\14\2\uffff\1\167\1\14\1\165\16\uffff\1\164"+
            "\45\uffff\1\166\27\uffff\1\163\3\uffff\1\170",
            "\1\14\106\uffff\1\14\2\uffff\1\177\1\14\1\175\16\uffff\1\174"+
            "\45\uffff\1\176",
            "\1\u0085\132\uffff\1\u0084\71\uffff\1\u0083",
            "\1\14\106\uffff\1\14\2\uffff\1\u0088\1\14\1\u0089\64\uffff"+
            "\1\u0087\10\uffff\1\14",
            "\1\u008d\24\uffff\1\u008d\155\uffff\1\u008e",
            "",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u0093\1\14\1\u0091\16\uffff"+
            "\1\u0090\45\uffff\1\u0092\10\uffff\1\u008f",
            "\1\u0097",
            "\1\u009a\132\uffff\1\u0099\71\uffff\1\u0098",
            "\1\14\106\uffff\1\14\2\uffff\1\u009d\1\14\1\u009e\64\uffff"+
            "\1\u009c\10\uffff\1\14",
            "\1\u00a2\24\uffff\1\u00a2\155\uffff\1\u00a3",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u00a9\1\14\1\u00a7\16\uffff"+
            "\1\u00a6\45\uffff\1\u00a8\10\uffff\1\u00a5\16\uffff\1\u00a4"+
            "\1\u00aa",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u00b1\1\14\1\u00af\16\uffff"+
            "\1\u00ae\45\uffff\1\u00b0",
            "\1\u00b7\132\uffff\1\u00b6\71\uffff\1\u00b5",
            "\1\14\106\uffff\1\14\2\uffff\1\u00ba\1\14\1\u00bb\64\uffff"+
            "\1\u00b9\10\uffff\1\14",
            "\1\u00bf\24\uffff\1\u00bf\155\uffff\1\u00c0",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u00c5\1\14\1\u00c3\16\uffff"+
            "\1\u00c2\45\uffff\1\u00c4\27\uffff\1\u00c1\3\uffff\1\u00c6",
            "",
            "",
            "",
            "\1\u00cc\132\uffff\1\u00cb\71\uffff\1\u00ca",
            "\1\14\106\uffff\1\14\2\uffff\1\u00cf\1\14\1\u00d0\64\uffff"+
            "\1\u00ce\10\uffff\1\14",
            "\1\u00d4\24\uffff\1\u00d4\155\uffff\1\u00d5",
            "",
            "",
            "",
            "",
            "\1\u00da\132\uffff\1\14\71\uffff\1\u00d7\3\uffff\1\u00d6\1"+
            "\u00d8\2\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00dc\5\uffff\1\u00dd",
            "",
            "",
            "\1\u00de\24\uffff\1\u00df",
            "\1\u00e2\132\uffff\1\u00e1\71\uffff\1\u00e0",
            "",
            "\1\u00e3\24\uffff\1\u00e3\155\uffff\1\u00e4",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u00e7\1\14\1\u00e8\64\uffff"+
            "\1\u00e6\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u00ec",
            "\1\14\106\uffff\1\14\2\uffff\1\u00ed\2\14\64\uffff\1\u00ee",
            "\1\u00f5\132\uffff\1\u00f4\71\uffff\1\u00f3",
            "\1\14\106\uffff\1\14\2\uffff\1\u00f8\1\14\1\u00f9\64\uffff"+
            "\1\u00f7\10\uffff\1\14",
            "\1\u00fd\24\uffff\1\u00fd\155\uffff\1\u00fe",
            "",
            "",
            "",
            "",
            "\1\u0101\132\uffff\1\u0100\71\uffff\1\u00ff",
            "\1\14\106\uffff\1\14\2\uffff\1\u0104\1\14\1\u0105\64\uffff"+
            "\1\u0103\10\uffff\1\14",
            "\1\u0109\24\uffff\1\u0109\155\uffff\1\u010a",
            "",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u010f\1\14\1\u010d\16\uffff"+
            "\1\u010c\45\uffff\1\u010e\10\uffff\1\u010b",
            "\1\u0113",
            "\1\u0116\132\uffff\1\u0115\71\uffff\1\u0114",
            "\1\14\106\uffff\1\14\2\uffff\1\u0119\1\14\1\u011a\64\uffff"+
            "\1\u0118\10\uffff\1\14",
            "\1\u011e\24\uffff\1\u011e\155\uffff\1\u011f",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u0125\1\14\1\u0123\16\uffff"+
            "\1\u0122\45\uffff\1\u0124\10\uffff\1\u0121\16\uffff\1\u0120"+
            "\1\u0126",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u012d\1\14\1\u012b\16\uffff"+
            "\1\u012a\45\uffff\1\u012c",
            "\1\u0133\132\uffff\1\u0132\71\uffff\1\u0131",
            "\1\14\106\uffff\1\14\2\uffff\1\u0136\1\14\1\u0137\64\uffff"+
            "\1\u0135\10\uffff\1\14",
            "\1\u013b\24\uffff\1\u013b\155\uffff\1\u013c",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u0141\1\14\1\u013f\16\uffff"+
            "\1\u013e\45\uffff\1\u0140\27\uffff\1\u013d\3\uffff\1\u0142",
            "",
            "",
            "",
            "\1\u0148\132\uffff\1\u0147\71\uffff\1\u0146",
            "\1\14\106\uffff\1\14\2\uffff\1\u014b\1\14\1\u014c\64\uffff"+
            "\1\u014a\10\uffff\1\14",
            "\1\u0150\24\uffff\1\u0150\155\uffff\1\u0151",
            "",
            "",
            "",
            "",
            "\1\u0152",
            "\1\u0155\132\uffff\1\u0154\71\uffff\1\u0153",
            "\1\u0156",
            "",
            "\1\u0157\24\uffff\1\u0157\155\uffff\1\u0158",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u015b\1\14\1\u015c\64\uffff"+
            "\1\u015a\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u0160",
            "\1\14\106\uffff\1\14\2\uffff\1\u0161\2\14\64\uffff\1\u0162",
            "\1\u0167",
            "\1\u016a\132\uffff\1\u0169\71\uffff\1\u0168",
            "\1\14\106\uffff\1\14\2\uffff\1\u016d\1\14\1\u016e\64\uffff"+
            "\1\u016c\10\uffff\1\14",
            "\1\u0172\24\uffff\1\u0172\155\uffff\1\u0173",
            "",
            "",
            "",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u0177\1\14\1\u0175\16\uffff"+
            "\1\u0174\45\uffff\1\u0176",
            "\1\u017b",
            "\1\u017e\132\uffff\1\u017d\71\uffff\1\u017c",
            "\1\u017f",
            "",
            "\1\u0180\24\uffff\1\u0180\155\uffff\1\u0181",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u0184\1\14\1\u0185\64\uffff"+
            "\1\u0183\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u0189",
            "\1\14\106\uffff\1\14\2\uffff\1\u018a\2\14\64\uffff\1\u018b",
            "\1\14\106\uffff\1\14\2\uffff\1\u0194\1\14\1\u0192\16\uffff"+
            "\1\u0191\45\uffff\1\u0193\10\uffff\1\u0190",
            "\1\u0198",
            "\1\u019b\132\uffff\1\u019a\71\uffff\1\u0199",
            "\1\14\106\uffff\1\14\2\uffff\1\u019e\1\14\1\u019f\64\uffff"+
            "\1\u019d\10\uffff\1\14",
            "\1\u01a3\24\uffff\1\u01a3\155\uffff\1\u01a4",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u01aa\1\14\1\u01a8\16\uffff"+
            "\1\u01a7\45\uffff\1\u01a9\10\uffff\1\u01a6\16\uffff\1\u01a5"+
            "\1\u01ab",
            "",
            "",
            "",
            "\1\u01b1\132\uffff\1\u01b0\71\uffff\1\u01af",
            "\1\14\106\uffff\1\14\2\uffff\1\u01b4\1\14\1\u01b5\64\uffff"+
            "\1\u01b3\10\uffff\1\14",
            "\1\u01b9\24\uffff\1\u01b9\155\uffff\1\u01ba",
            "",
            "",
            "",
            "",
            "\1\u01bb",
            "\1\u01be\132\uffff\1\u01bd\71\uffff\1\u01bc",
            "\1\u01bf",
            "",
            "\1\u01c0\24\uffff\1\u01c0\155\uffff\1\u01c1",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u01c4\1\14\1\u01c5\64\uffff"+
            "\1\u01c3\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u01c9",
            "\1\14\106\uffff\1\14\2\uffff\1\u01ca\2\14\64\uffff\1\u01cb",
            "\1\14\106\uffff\1\14\2\uffff\1\u01d3\1\14\1\u01d1\16\uffff"+
            "\1\u01d0\45\uffff\1\u01d2",
            "\1\u01d9\132\uffff\1\u01d8\71\uffff\1\u01d7",
            "\1\14\106\uffff\1\14\2\uffff\1\u01dc\1\14\1\u01dd\64\uffff"+
            "\1\u01db\10\uffff\1\14",
            "\1\u01e1\24\uffff\1\u01e1\155\uffff\1\u01e2",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u01e7\1\14\1\u01e5\16\uffff"+
            "\1\u01e4\45\uffff\1\u01e6\27\uffff\1\u01e3\3\uffff\1\u01e8",
            "",
            "",
            "",
            "\1\u01ec",
            "\1\u01ef\132\uffff\1\u01ee\71\uffff\1\u01ed",
            "\1\u01f0",
            "",
            "\1\u01f1\24\uffff\1\u01f1\155\uffff\1\u01f2",
            "",
            "\1\14\106\uffff\1\14\2\uffff\1\u01f5\1\14\1\u01f6\64\uffff"+
            "\1\u01f4\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u01fa",
            "\1\14\106\uffff\1\14\2\uffff\1\u01fb\2\14\64\uffff\1\u01fc",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "840:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_0 = input.LA(1);

                         
                        int index137_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_0==181) ) {s = 1;}

                        else if ( (LA137_0==195) ) {s = 2;}

                        else if ( (LA137_0==119) && (synpred29_Objc())) {s = 3;}

                        else if ( (LA137_0==170) ) {s = 4;}

                        else if ( (LA137_0==199) ) {s = 5;}

                        else if ( (LA137_0==200) ) {s = 6;}

                        else if ( (LA137_0==203) ) {s = 7;}

                        else if ( (LA137_0==ID) ) {s = 8;}

                        else if ( (LA137_0==205) ) {s = 9;}

                        else if ( (LA137_0==189) ) {s = 10;}

                        else if ( (LA137_0==209) ) {s = 11;}

                        else if ( (LA137_0==180||LA137_0==184||LA137_0==198||LA137_0==201||(LA137_0 >= 210 && LA137_0 <= 211)) ) {s = 12;}

                         
                        input.seek(index137_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_2==137) ) {s = 25;}

                        else if ( (LA137_2==122) ) {s = 26;}

                        else if ( (LA137_2==175) ) {s = 27;}

                        else if ( (LA137_2==120) && (synpred30_Objc())) {s = 28;}

                        else if ( (LA137_2==ID||LA137_2==117||LA137_2==121) ) {s = 12;}

                         
                        input.seek(index137_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA137_5 = input.LA(1);

                         
                        int index137_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_5==137) ) {s = 37;}

                        else if ( (LA137_5==122) ) {s = 38;}

                        else if ( (LA137_5==175) ) {s = 39;}

                        else if ( (LA137_5==120) && (synpred30_Objc())) {s = 40;}

                        else if ( (LA137_5==ID||LA137_5==117||LA137_5==121) ) {s = 12;}

                         
                        input.seek(index137_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA137_6 = input.LA(1);

                         
                        int index137_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_6==199) ) {s = 44;}

                        else if ( (LA137_6==184) ) {s = 45;}

                        else if ( (LA137_6==137) ) {s = 46;}

                        else if ( (LA137_6==122) ) {s = 47;}

                        else if ( (LA137_6==175) ) {s = 48;}

                        else if ( (LA137_6==120) && (synpred30_Objc())) {s = 49;}

                        else if ( (LA137_6==200) ) {s = 50;}

                        else if ( (LA137_6==ID||LA137_6==117||LA137_6==121) ) {s = 12;}

                         
                        input.seek(index137_6);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA137_7 = input.LA(1);

                         
                        int index137_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_7==199) ) {s = 54;}

                        else if ( (LA137_7==137) ) {s = 55;}

                        else if ( (LA137_7==122) ) {s = 56;}

                        else if ( (LA137_7==175) ) {s = 57;}

                        else if ( (LA137_7==120) && (synpred30_Objc())) {s = 58;}

                        else if ( (LA137_7==203) ) {s = 59;}

                        else if ( (LA137_7==ID||LA137_7==117||LA137_7==121) ) {s = 12;}

                         
                        input.seek(index137_7);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA137_8 = input.LA(1);

                         
                        int index137_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_8==137) ) {s = 63;}

                        else if ( (LA137_8==122) ) {s = 64;}

                        else if ( (LA137_8==175) ) {s = 65;}

                        else if ( (LA137_8==120) && (synpred30_Objc())) {s = 66;}

                        else if ( (LA137_8==ID||LA137_8==117||LA137_8==121) ) {s = 12;}

                         
                        input.seek(index137_8);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA137_25 = input.LA(1);

                         
                        int index137_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_25==199) && (synpred28_Objc())) {s = 76;}

                        else if ( (LA137_25==195) ) {s = 77;}

                        else if ( (LA137_25==200) && (synpred28_Objc())) {s = 78;}

                        else if ( (LA137_25==203) && (synpred28_Objc())) {s = 79;}

                        else if ( (LA137_25==ID) ) {s = 80;}

                        else if ( (LA137_25==137) ) {s = 81;}

                         
                        input.seek(index137_25);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA137_26 = input.LA(1);

                         
                        int index137_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_26==ID||LA137_26==117||LA137_26==121||LA137_26==184) ) {s = 12;}

                        else if ( (LA137_26==175) ) {s = 83;}

                        else if ( (LA137_26==120) && (synpred30_Objc())) {s = 84;}

                        else if ( (LA137_26==122) ) {s = 85;}

                         
                        input.seek(index137_26);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA137_32 = input.LA(1);

                         
                        int index137_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_32==137) ) {s = 91;}

                        else if ( (LA137_32==122) ) {s = 92;}

                        else if ( (LA137_32==175) ) {s = 93;}

                        else if ( (LA137_32==120) && (synpred30_Objc())) {s = 94;}

                        else if ( (LA137_32==ID||LA137_32==117||LA137_32==121) ) {s = 12;}

                         
                        input.seek(index137_32);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA137_33 = input.LA(1);

                         
                        int index137_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_33==137) ) {s = 98;}

                        else if ( (LA137_33==122) ) {s = 99;}

                        else if ( (LA137_33==175) ) {s = 100;}

                        else if ( (LA137_33==120) && (synpred30_Objc())) {s = 101;}

                        else if ( (LA137_33==ID||LA137_33==117||LA137_33==121) ) {s = 12;}

                         
                        input.seek(index137_33);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA137_34 = input.LA(1);

                         
                        int index137_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_34==199) ) {s = 105;}

                        else if ( (LA137_34==184) ) {s = 106;}

                        else if ( (LA137_34==137) ) {s = 107;}

                        else if ( (LA137_34==122) ) {s = 108;}

                        else if ( (LA137_34==175) ) {s = 109;}

                        else if ( (LA137_34==120) && (synpred30_Objc())) {s = 110;}

                        else if ( (LA137_34==200) ) {s = 111;}

                        else if ( (LA137_34==ID||LA137_34==117||LA137_34==121) ) {s = 12;}

                         
                        input.seek(index137_34);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA137_35 = input.LA(1);

                         
                        int index137_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_35==199) ) {s = 115;}

                        else if ( (LA137_35==137) ) {s = 116;}

                        else if ( (LA137_35==122) ) {s = 117;}

                        else if ( (LA137_35==175) ) {s = 118;}

                        else if ( (LA137_35==120) && (synpred30_Objc())) {s = 119;}

                        else if ( (LA137_35==203) ) {s = 120;}

                        else if ( (LA137_35==ID||LA137_35==117||LA137_35==121) ) {s = 12;}

                         
                        input.seek(index137_35);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA137_36 = input.LA(1);

                         
                        int index137_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_36==137) ) {s = 124;}

                        else if ( (LA137_36==122) ) {s = 125;}

                        else if ( (LA137_36==175) ) {s = 126;}

                        else if ( (LA137_36==120) && (synpred30_Objc())) {s = 127;}

                        else if ( (LA137_36==ID||LA137_36==117||LA137_36==121) ) {s = 12;}

                         
                        input.seek(index137_36);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA137_38 = input.LA(1);

                         
                        int index137_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_38==ID||LA137_38==117||LA137_38==121||LA137_38==184) ) {s = 12;}

                        else if ( (LA137_38==175) ) {s = 135;}

                        else if ( (LA137_38==120) && (synpred30_Objc())) {s = 136;}

                        else if ( (LA137_38==122) ) {s = 137;}

                         
                        input.seek(index137_38);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA137_44 = input.LA(1);

                         
                        int index137_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_44==184) ) {s = 143;}

                        else if ( (LA137_44==137) ) {s = 144;}

                        else if ( (LA137_44==122) ) {s = 145;}

                        else if ( (LA137_44==175) ) {s = 146;}

                        else if ( (LA137_44==120) && (synpred30_Objc())) {s = 147;}

                        else if ( (LA137_44==ID||LA137_44==117||LA137_44==121) ) {s = 12;}

                         
                        input.seek(index137_44);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA137_47 = input.LA(1);

                         
                        int index137_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_47==ID||LA137_47==117||LA137_47==121||LA137_47==184) ) {s = 12;}

                        else if ( (LA137_47==175) ) {s = 156;}

                        else if ( (LA137_47==120) && (synpred30_Objc())) {s = 157;}

                        else if ( (LA137_47==122) ) {s = 158;}

                         
                        input.seek(index137_47);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA137_50 = input.LA(1);

                         
                        int index137_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_50==199) ) {s = 164;}

                        else if ( (LA137_50==184) ) {s = 165;}

                        else if ( (LA137_50==137) ) {s = 166;}

                        else if ( (LA137_50==122) ) {s = 167;}

                        else if ( (LA137_50==175) ) {s = 168;}

                        else if ( (LA137_50==120) && (synpred30_Objc())) {s = 169;}

                        else if ( (LA137_50==200) ) {s = 170;}

                        else if ( (LA137_50==ID||LA137_50==117||LA137_50==121) ) {s = 12;}

                         
                        input.seek(index137_50);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA137_54 = input.LA(1);

                         
                        int index137_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_54==137) ) {s = 174;}

                        else if ( (LA137_54==122) ) {s = 175;}

                        else if ( (LA137_54==175) ) {s = 176;}

                        else if ( (LA137_54==120) && (synpred30_Objc())) {s = 177;}

                        else if ( (LA137_54==ID||LA137_54==117||LA137_54==121) ) {s = 12;}

                         
                        input.seek(index137_54);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA137_56 = input.LA(1);

                         
                        int index137_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_56==ID||LA137_56==117||LA137_56==121||LA137_56==184) ) {s = 12;}

                        else if ( (LA137_56==175) ) {s = 185;}

                        else if ( (LA137_56==120) && (synpred30_Objc())) {s = 186;}

                        else if ( (LA137_56==122) ) {s = 187;}

                         
                        input.seek(index137_56);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA137_59 = input.LA(1);

                         
                        int index137_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_59==199) ) {s = 193;}

                        else if ( (LA137_59==137) ) {s = 194;}

                        else if ( (LA137_59==122) ) {s = 195;}

                        else if ( (LA137_59==175) ) {s = 196;}

                        else if ( (LA137_59==120) && (synpred30_Objc())) {s = 197;}

                        else if ( (LA137_59==203) ) {s = 198;}

                        else if ( (LA137_59==ID||LA137_59==117||LA137_59==121) ) {s = 12;}

                         
                        input.seek(index137_59);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA137_64 = input.LA(1);

                         
                        int index137_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_64==ID||LA137_64==117||LA137_64==121||LA137_64==184) ) {s = 12;}

                        else if ( (LA137_64==175) ) {s = 206;}

                        else if ( (LA137_64==120) && (synpred30_Objc())) {s = 207;}

                        else if ( (LA137_64==122) ) {s = 208;}

                         
                        input.seek(index137_64);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA137_70 = input.LA(1);

                         
                        int index137_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_70==199) && (synpred28_Objc())) {s = 214;}

                        else if ( (LA137_70==195) ) {s = 215;}

                        else if ( (LA137_70==200) && (synpred28_Objc())) {s = 216;}

                        else if ( (LA137_70==203) && (synpred28_Objc())) {s = 217;}

                        else if ( (LA137_70==ID) ) {s = 218;}

                        else if ( (LA137_70==137) ) {s = 12;}

                         
                        input.seek(index137_70);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA137_77 = input.LA(1);

                         
                        int index137_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_77==137) ) {s = 220;}

                        else if ( (LA137_77==143) && (synpred28_Objc())) {s = 221;}

                         
                        input.seek(index137_77);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA137_80 = input.LA(1);

                         
                        int index137_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_80==122) ) {s = 222;}

                        else if ( (LA137_80==143) && (synpred28_Objc())) {s = 223;}

                         
                        input.seek(index137_80);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA137_85 = input.LA(1);

                         
                        int index137_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_85==ID||LA137_85==117||LA137_85==121||LA137_85==184) ) {s = 12;}

                        else if ( (LA137_85==175) ) {s = 230;}

                        else if ( (LA137_85==120) && (synpred30_Objc())) {s = 231;}

                        else if ( (LA137_85==122) ) {s = 232;}

                         
                        input.seek(index137_85);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA137_90 = input.LA(1);

                         
                        int index137_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_90==120) && (synpred30_Objc())) {s = 237;}

                        else if ( (LA137_90==175) ) {s = 238;}

                        else if ( (LA137_90==ID||LA137_90==117||(LA137_90 >= 121 && LA137_90 <= 122)) ) {s = 12;}

                         
                        input.seek(index137_90);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA137_92 = input.LA(1);

                         
                        int index137_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_92==ID||LA137_92==117||LA137_92==121||LA137_92==184) ) {s = 12;}

                        else if ( (LA137_92==175) ) {s = 247;}

                        else if ( (LA137_92==120) && (synpred30_Objc())) {s = 248;}

                        else if ( (LA137_92==122) ) {s = 249;}

                         
                        input.seek(index137_92);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA137_99 = input.LA(1);

                         
                        int index137_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_99==ID||LA137_99==117||LA137_99==121||LA137_99==184) ) {s = 12;}

                        else if ( (LA137_99==175) ) {s = 259;}

                        else if ( (LA137_99==120) && (synpred30_Objc())) {s = 260;}

                        else if ( (LA137_99==122) ) {s = 261;}

                         
                        input.seek(index137_99);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA137_105 = input.LA(1);

                         
                        int index137_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_105==184) ) {s = 267;}

                        else if ( (LA137_105==137) ) {s = 268;}

                        else if ( (LA137_105==122) ) {s = 269;}

                        else if ( (LA137_105==175) ) {s = 270;}

                        else if ( (LA137_105==120) && (synpred30_Objc())) {s = 271;}

                        else if ( (LA137_105==ID||LA137_105==117||LA137_105==121) ) {s = 12;}

                         
                        input.seek(index137_105);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA137_108 = input.LA(1);

                         
                        int index137_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_108==ID||LA137_108==117||LA137_108==121||LA137_108==184) ) {s = 12;}

                        else if ( (LA137_108==175) ) {s = 280;}

                        else if ( (LA137_108==120) && (synpred30_Objc())) {s = 281;}

                        else if ( (LA137_108==122) ) {s = 282;}

                         
                        input.seek(index137_108);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA137_111 = input.LA(1);

                         
                        int index137_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_111==199) ) {s = 288;}

                        else if ( (LA137_111==184) ) {s = 289;}

                        else if ( (LA137_111==137) ) {s = 290;}

                        else if ( (LA137_111==122) ) {s = 291;}

                        else if ( (LA137_111==175) ) {s = 292;}

                        else if ( (LA137_111==120) && (synpred30_Objc())) {s = 293;}

                        else if ( (LA137_111==200) ) {s = 294;}

                        else if ( (LA137_111==ID||LA137_111==117||LA137_111==121) ) {s = 12;}

                         
                        input.seek(index137_111);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA137_115 = input.LA(1);

                         
                        int index137_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_115==137) ) {s = 298;}

                        else if ( (LA137_115==122) ) {s = 299;}

                        else if ( (LA137_115==175) ) {s = 300;}

                        else if ( (LA137_115==120) && (synpred30_Objc())) {s = 301;}

                        else if ( (LA137_115==ID||LA137_115==117||LA137_115==121) ) {s = 12;}

                         
                        input.seek(index137_115);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA137_117 = input.LA(1);

                         
                        int index137_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_117==ID||LA137_117==117||LA137_117==121||LA137_117==184) ) {s = 12;}

                        else if ( (LA137_117==175) ) {s = 309;}

                        else if ( (LA137_117==120) && (synpred30_Objc())) {s = 310;}

                        else if ( (LA137_117==122) ) {s = 311;}

                         
                        input.seek(index137_117);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA137_120 = input.LA(1);

                         
                        int index137_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_120==199) ) {s = 317;}

                        else if ( (LA137_120==137) ) {s = 318;}

                        else if ( (LA137_120==122) ) {s = 319;}

                        else if ( (LA137_120==175) ) {s = 320;}

                        else if ( (LA137_120==120) && (synpred30_Objc())) {s = 321;}

                        else if ( (LA137_120==203) ) {s = 322;}

                        else if ( (LA137_120==ID||LA137_120==117||LA137_120==121) ) {s = 12;}

                         
                        input.seek(index137_120);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA137_125 = input.LA(1);

                         
                        int index137_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_125==ID||LA137_125==117||LA137_125==121||LA137_125==184) ) {s = 12;}

                        else if ( (LA137_125==175) ) {s = 330;}

                        else if ( (LA137_125==120) && (synpred30_Objc())) {s = 331;}

                        else if ( (LA137_125==122) ) {s = 332;}

                         
                        input.seek(index137_125);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA137_137 = input.LA(1);

                         
                        int index137_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_137==ID||LA137_137==117||LA137_137==121||LA137_137==184) ) {s = 12;}

                        else if ( (LA137_137==175) ) {s = 346;}

                        else if ( (LA137_137==120) && (synpred30_Objc())) {s = 347;}

                        else if ( (LA137_137==122) ) {s = 348;}

                         
                        input.seek(index137_137);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA137_142 = input.LA(1);

                         
                        int index137_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_142==120) && (synpred30_Objc())) {s = 353;}

                        else if ( (LA137_142==175) ) {s = 354;}

                        else if ( (LA137_142==ID||LA137_142==117||(LA137_142 >= 121 && LA137_142 <= 122)) ) {s = 12;}

                         
                        input.seek(index137_142);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA137_145 = input.LA(1);

                         
                        int index137_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_145==ID||LA137_145==117||LA137_145==121||LA137_145==184) ) {s = 12;}

                        else if ( (LA137_145==175) ) {s = 364;}

                        else if ( (LA137_145==120) && (synpred30_Objc())) {s = 365;}

                        else if ( (LA137_145==122) ) {s = 366;}

                         
                        input.seek(index137_145);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA137_151 = input.LA(1);

                         
                        int index137_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_151==137) ) {s = 372;}

                        else if ( (LA137_151==122) ) {s = 373;}

                        else if ( (LA137_151==175) ) {s = 374;}

                        else if ( (LA137_151==120) && (synpred30_Objc())) {s = 375;}

                        else if ( (LA137_151==ID||LA137_151==117||LA137_151==121) ) {s = 12;}

                         
                        input.seek(index137_151);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA137_158 = input.LA(1);

                         
                        int index137_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_158==ID||LA137_158==117||LA137_158==121||LA137_158==184) ) {s = 12;}

                        else if ( (LA137_158==175) ) {s = 387;}

                        else if ( (LA137_158==120) && (synpred30_Objc())) {s = 388;}

                        else if ( (LA137_158==122) ) {s = 389;}

                         
                        input.seek(index137_158);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA137_163 = input.LA(1);

                         
                        int index137_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_163==120) && (synpred30_Objc())) {s = 394;}

                        else if ( (LA137_163==175) ) {s = 395;}

                        else if ( (LA137_163==ID||LA137_163==117||(LA137_163 >= 121 && LA137_163 <= 122)) ) {s = 12;}

                         
                        input.seek(index137_163);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA137_164 = input.LA(1);

                         
                        int index137_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_164==184) ) {s = 400;}

                        else if ( (LA137_164==137) ) {s = 401;}

                        else if ( (LA137_164==122) ) {s = 402;}

                        else if ( (LA137_164==175) ) {s = 403;}

                        else if ( (LA137_164==120) && (synpred30_Objc())) {s = 404;}

                        else if ( (LA137_164==ID||LA137_164==117||LA137_164==121) ) {s = 12;}

                         
                        input.seek(index137_164);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA137_167 = input.LA(1);

                         
                        int index137_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_167==ID||LA137_167==117||LA137_167==121||LA137_167==184) ) {s = 12;}

                        else if ( (LA137_167==175) ) {s = 413;}

                        else if ( (LA137_167==120) && (synpred30_Objc())) {s = 414;}

                        else if ( (LA137_167==122) ) {s = 415;}

                         
                        input.seek(index137_167);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA137_170 = input.LA(1);

                         
                        int index137_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_170==199) ) {s = 421;}

                        else if ( (LA137_170==184) ) {s = 422;}

                        else if ( (LA137_170==137) ) {s = 423;}

                        else if ( (LA137_170==122) ) {s = 424;}

                        else if ( (LA137_170==175) ) {s = 425;}

                        else if ( (LA137_170==120) && (synpred30_Objc())) {s = 426;}

                        else if ( (LA137_170==200) ) {s = 427;}

                        else if ( (LA137_170==ID||LA137_170==117||LA137_170==121) ) {s = 12;}

                         
                        input.seek(index137_170);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA137_175 = input.LA(1);

                         
                        int index137_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_175==ID||LA137_175==117||LA137_175==121||LA137_175==184) ) {s = 12;}

                        else if ( (LA137_175==175) ) {s = 435;}

                        else if ( (LA137_175==120) && (synpred30_Objc())) {s = 436;}

                        else if ( (LA137_175==122) ) {s = 437;}

                         
                        input.seek(index137_175);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA137_187 = input.LA(1);

                         
                        int index137_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_187==ID||LA137_187==117||LA137_187==121||LA137_187==184) ) {s = 12;}

                        else if ( (LA137_187==175) ) {s = 451;}

                        else if ( (LA137_187==120) && (synpred30_Objc())) {s = 452;}

                        else if ( (LA137_187==122) ) {s = 453;}

                         
                        input.seek(index137_187);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA137_192 = input.LA(1);

                         
                        int index137_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_192==120) && (synpred30_Objc())) {s = 458;}

                        else if ( (LA137_192==175) ) {s = 459;}

                        else if ( (LA137_192==ID||LA137_192==117||(LA137_192 >= 121 && LA137_192 <= 122)) ) {s = 12;}

                         
                        input.seek(index137_192);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA137_193 = input.LA(1);

                         
                        int index137_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_193==137) ) {s = 464;}

                        else if ( (LA137_193==122) ) {s = 465;}

                        else if ( (LA137_193==175) ) {s = 466;}

                        else if ( (LA137_193==120) && (synpred30_Objc())) {s = 467;}

                        else if ( (LA137_193==ID||LA137_193==117||LA137_193==121) ) {s = 12;}

                         
                        input.seek(index137_193);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA137_195 = input.LA(1);

                         
                        int index137_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_195==ID||LA137_195==117||LA137_195==121||LA137_195==184) ) {s = 12;}

                        else if ( (LA137_195==175) ) {s = 475;}

                        else if ( (LA137_195==120) && (synpred30_Objc())) {s = 476;}

                        else if ( (LA137_195==122) ) {s = 477;}

                         
                        input.seek(index137_195);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA137_198 = input.LA(1);

                         
                        int index137_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_198==199) ) {s = 483;}

                        else if ( (LA137_198==137) ) {s = 484;}

                        else if ( (LA137_198==122) ) {s = 485;}

                        else if ( (LA137_198==175) ) {s = 486;}

                        else if ( (LA137_198==120) && (synpred30_Objc())) {s = 487;}

                        else if ( (LA137_198==203) ) {s = 488;}

                        else if ( (LA137_198==ID||LA137_198==117||LA137_198==121) ) {s = 12;}

                         
                        input.seek(index137_198);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA137_208 = input.LA(1);

                         
                        int index137_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_208==ID||LA137_208==117||LA137_208==121||LA137_208==184) ) {s = 12;}

                        else if ( (LA137_208==175) ) {s = 500;}

                        else if ( (LA137_208==120) && (synpred30_Objc())) {s = 501;}

                        else if ( (LA137_208==122) ) {s = 502;}

                         
                        input.seek(index137_208);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA137_213 = input.LA(1);

                         
                        int index137_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA137_213==120) && (synpred30_Objc())) {s = 507;}

                        else if ( (LA137_213==175) ) {s = 508;}

                        else if ( (LA137_213==ID||LA137_213==117||(LA137_213 >= 121 && LA137_213 <= 122)) ) {s = 12;}

                         
                        input.seek(index137_213);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA137_215 = input.LA(1);

                         
                        int index137_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 223;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_215);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA137_218 = input.LA(1);

                         
                        int index137_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 223;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_218);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA137_220 = input.LA(1);

                         
                        int index137_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_220);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA137_222 = input.LA(1);

                         
                        int index137_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_222);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA137_224 = input.LA(1);

                         
                        int index137_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_224);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA137_225 = input.LA(1);

                         
                        int index137_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_225);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA137_226 = input.LA(1);

                         
                        int index137_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_226);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA137_227 = input.LA(1);

                         
                        int index137_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_227);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA137_228 = input.LA(1);

                         
                        int index137_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_228);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA137_230 = input.LA(1);

                         
                        int index137_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_230);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA137_232 = input.LA(1);

                         
                        int index137_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_232);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA137_236 = input.LA(1);

                         
                        int index137_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_236);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA137_238 = input.LA(1);

                         
                        int index137_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_238);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA137_243 = input.LA(1);

                         
                        int index137_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_243);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA137_244 = input.LA(1);

                         
                        int index137_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_244);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA137_245 = input.LA(1);

                         
                        int index137_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_245);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA137_247 = input.LA(1);

                         
                        int index137_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_247);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA137_249 = input.LA(1);

                         
                        int index137_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_249);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA137_253 = input.LA(1);

                         
                        int index137_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_253);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA137_254 = input.LA(1);

                         
                        int index137_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_254);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA137_255 = input.LA(1);

                         
                        int index137_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_255);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA137_256 = input.LA(1);

                         
                        int index137_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_256);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA137_257 = input.LA(1);

                         
                        int index137_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_257);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA137_259 = input.LA(1);

                         
                        int index137_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_259);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA137_261 = input.LA(1);

                         
                        int index137_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_261);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA137_265 = input.LA(1);

                         
                        int index137_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_265);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA137_266 = input.LA(1);

                         
                        int index137_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_266);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA137_267 = input.LA(1);

                         
                        int index137_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_267);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA137_268 = input.LA(1);

                         
                        int index137_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_268);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA137_269 = input.LA(1);

                         
                        int index137_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_269);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA137_270 = input.LA(1);

                         
                        int index137_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_270);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA137_275 = input.LA(1);

                         
                        int index137_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_275);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA137_276 = input.LA(1);

                         
                        int index137_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_276);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA137_277 = input.LA(1);

                         
                        int index137_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_277);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA137_278 = input.LA(1);

                         
                        int index137_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_278);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA137_280 = input.LA(1);

                         
                        int index137_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_280);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA137_282 = input.LA(1);

                         
                        int index137_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_282);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA137_286 = input.LA(1);

                         
                        int index137_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_286);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA137_287 = input.LA(1);

                         
                        int index137_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_287);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA137_288 = input.LA(1);

                         
                        int index137_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_288);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA137_289 = input.LA(1);

                         
                        int index137_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_289);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA137_290 = input.LA(1);

                         
                        int index137_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_290);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA137_291 = input.LA(1);

                         
                        int index137_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_291);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA137_292 = input.LA(1);

                         
                        int index137_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_292);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA137_294 = input.LA(1);

                         
                        int index137_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_294);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA137_298 = input.LA(1);

                         
                        int index137_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_298);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA137_299 = input.LA(1);

                         
                        int index137_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_299);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA137_300 = input.LA(1);

                         
                        int index137_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_300);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA137_305 = input.LA(1);

                         
                        int index137_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_305);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA137_306 = input.LA(1);

                         
                        int index137_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_306);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA137_307 = input.LA(1);

                         
                        int index137_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_307);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA137_309 = input.LA(1);

                         
                        int index137_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_309);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA137_311 = input.LA(1);

                         
                        int index137_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_311);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA137_315 = input.LA(1);

                         
                        int index137_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_315);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA137_316 = input.LA(1);

                         
                        int index137_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_316);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA137_317 = input.LA(1);

                         
                        int index137_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_317);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA137_318 = input.LA(1);

                         
                        int index137_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_318);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA137_319 = input.LA(1);

                         
                        int index137_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_319);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA137_320 = input.LA(1);

                         
                        int index137_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_320);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA137_322 = input.LA(1);

                         
                        int index137_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_322);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA137_326 = input.LA(1);

                         
                        int index137_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_326);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA137_327 = input.LA(1);

                         
                        int index137_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_327);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA137_328 = input.LA(1);

                         
                        int index137_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_328);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA137_330 = input.LA(1);

                         
                        int index137_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_330);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA137_332 = input.LA(1);

                         
                        int index137_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_332);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA137_336 = input.LA(1);

                         
                        int index137_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_336);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA137_337 = input.LA(1);

                         
                        int index137_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_337);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA137_338 = input.LA(1);

                         
                        int index137_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_338);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA137_339 = input.LA(1);

                         
                        int index137_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_339);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA137_340 = input.LA(1);

                         
                        int index137_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_340);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA137_341 = input.LA(1);

                         
                        int index137_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_341);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA137_342 = input.LA(1);

                         
                        int index137_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_342);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA137_343 = input.LA(1);

                         
                        int index137_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_343);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA137_344 = input.LA(1);

                         
                        int index137_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_344);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA137_346 = input.LA(1);

                         
                        int index137_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_346);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA137_348 = input.LA(1);

                         
                        int index137_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_348);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA137_352 = input.LA(1);

                         
                        int index137_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_352);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA137_354 = input.LA(1);

                         
                        int index137_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_354);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA137_359 = input.LA(1);

                         
                        int index137_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_359);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA137_360 = input.LA(1);

                         
                        int index137_360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_360);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA137_361 = input.LA(1);

                         
                        int index137_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_361);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA137_362 = input.LA(1);

                         
                        int index137_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_362);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA137_364 = input.LA(1);

                         
                        int index137_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_364);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA137_366 = input.LA(1);

                         
                        int index137_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_366);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA137_370 = input.LA(1);

                         
                        int index137_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_370);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA137_371 = input.LA(1);

                         
                        int index137_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_371);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA137_372 = input.LA(1);

                         
                        int index137_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_372);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA137_373 = input.LA(1);

                         
                        int index137_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_373);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA137_374 = input.LA(1);

                         
                        int index137_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_374);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA137_379 = input.LA(1);

                         
                        int index137_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_379);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA137_380 = input.LA(1);

                         
                        int index137_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_380);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA137_381 = input.LA(1);

                         
                        int index137_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_381);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA137_382 = input.LA(1);

                         
                        int index137_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_382);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA137_383 = input.LA(1);

                         
                        int index137_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_383);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA137_384 = input.LA(1);

                         
                        int index137_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_384);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA137_385 = input.LA(1);

                         
                        int index137_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_385);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA137_387 = input.LA(1);

                         
                        int index137_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_387);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA137_389 = input.LA(1);

                         
                        int index137_389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_389);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA137_393 = input.LA(1);

                         
                        int index137_393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_393);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA137_395 = input.LA(1);

                         
                        int index137_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_395);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA137_400 = input.LA(1);

                         
                        int index137_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_400);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA137_401 = input.LA(1);

                         
                        int index137_401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_401);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA137_402 = input.LA(1);

                         
                        int index137_402 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_402);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA137_403 = input.LA(1);

                         
                        int index137_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_403);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA137_408 = input.LA(1);

                         
                        int index137_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_408);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA137_409 = input.LA(1);

                         
                        int index137_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_409);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA137_410 = input.LA(1);

                         
                        int index137_410 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_410);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA137_411 = input.LA(1);

                         
                        int index137_411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_411);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA137_413 = input.LA(1);

                         
                        int index137_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_413);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA137_415 = input.LA(1);

                         
                        int index137_415 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_415);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA137_419 = input.LA(1);

                         
                        int index137_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_419);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA137_420 = input.LA(1);

                         
                        int index137_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_420);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA137_421 = input.LA(1);

                         
                        int index137_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_421);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA137_422 = input.LA(1);

                         
                        int index137_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_422);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA137_423 = input.LA(1);

                         
                        int index137_423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_423);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA137_424 = input.LA(1);

                         
                        int index137_424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_424);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA137_425 = input.LA(1);

                         
                        int index137_425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_425);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA137_427 = input.LA(1);

                         
                        int index137_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_427);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA137_431 = input.LA(1);

                         
                        int index137_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_431);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA137_432 = input.LA(1);

                         
                        int index137_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_432);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA137_433 = input.LA(1);

                         
                        int index137_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_433);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA137_435 = input.LA(1);

                         
                        int index137_435 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_435);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA137_437 = input.LA(1);

                         
                        int index137_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_437);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA137_441 = input.LA(1);

                         
                        int index137_441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_441);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA137_442 = input.LA(1);

                         
                        int index137_442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_442);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA137_443 = input.LA(1);

                         
                        int index137_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_443);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA137_444 = input.LA(1);

                         
                        int index137_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_444);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA137_445 = input.LA(1);

                         
                        int index137_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_445);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA137_446 = input.LA(1);

                         
                        int index137_446 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_446);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA137_447 = input.LA(1);

                         
                        int index137_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_447);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA137_448 = input.LA(1);

                         
                        int index137_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_448);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA137_449 = input.LA(1);

                         
                        int index137_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_449);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA137_451 = input.LA(1);

                         
                        int index137_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_451);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA137_453 = input.LA(1);

                         
                        int index137_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_453);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA137_457 = input.LA(1);

                         
                        int index137_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_457);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA137_459 = input.LA(1);

                         
                        int index137_459 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_459);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA137_464 = input.LA(1);

                         
                        int index137_464 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_464);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA137_465 = input.LA(1);

                         
                        int index137_465 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_465);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA137_466 = input.LA(1);

                         
                        int index137_466 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_466);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA137_471 = input.LA(1);

                         
                        int index137_471 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_471);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA137_472 = input.LA(1);

                         
                        int index137_472 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_472);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA137_473 = input.LA(1);

                         
                        int index137_473 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_473);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA137_475 = input.LA(1);

                         
                        int index137_475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_475);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA137_477 = input.LA(1);

                         
                        int index137_477 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_477);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA137_481 = input.LA(1);

                         
                        int index137_481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_481);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA137_482 = input.LA(1);

                         
                        int index137_482 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_482);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA137_483 = input.LA(1);

                         
                        int index137_483 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_483);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA137_484 = input.LA(1);

                         
                        int index137_484 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_484);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA137_485 = input.LA(1);

                         
                        int index137_485 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_485);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA137_486 = input.LA(1);

                         
                        int index137_486 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_486);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA137_488 = input.LA(1);

                         
                        int index137_488 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_488);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA137_492 = input.LA(1);

                         
                        int index137_492 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_492);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA137_493 = input.LA(1);

                         
                        int index137_493 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_493);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA137_494 = input.LA(1);

                         
                        int index137_494 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_494);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA137_495 = input.LA(1);

                         
                        int index137_495 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_495);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA137_496 = input.LA(1);

                         
                        int index137_496 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_496);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA137_497 = input.LA(1);

                         
                        int index137_497 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_497);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA137_498 = input.LA(1);

                         
                        int index137_498 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_498);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA137_500 = input.LA(1);

                         
                        int index137_500 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_500);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA137_502 = input.LA(1);

                         
                        int index137_502 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_502);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA137_506 = input.LA(1);

                         
                        int index137_506 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_506);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA137_508 = input.LA(1);

                         
                        int index137_508 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index137_508);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA185_eotS =
        "\u0098\uffff";
    static final String DFA185_eofS =
        "\2\uffff\1\26\10\uffff\1\161\u008c\uffff";
    static final String DFA185_minS =
        "\1\26\1\56\1\20\1\56\2\20\3\uffff\1\56\1\uffff\1\26\50\uffff\1\0"+
        "\1\uffff\24\0\17\uffff\1\0\17\uffff\3\0\13\uffff\1\0\26\uffff\1"+
        "\0\2\uffff\2\0\5\uffff";
    static final String DFA185_maxS =
        "\1\26\1\56\1\u00da\1\56\1\u00da\1\u00cf\3\uffff\1\167\1\uffff\1"+
        "\u00d8\50\uffff\1\0\1\uffff\24\0\17\uffff\1\0\17\uffff\3\0\13\uffff"+
        "\1\0\26\uffff\1\0\2\uffff\2\0\5\uffff";
    static final String DFA185_acceptS =
        "\6\uffff\3\4\1\uffff\1\4\1\uffff\12\4\1\5\36\uffff\1\1\24\uffff"+
        "\17\4\1\uffff\16\4\4\uffff\13\4\1\uffff\26\4\1\uffff\2\4\3\uffff"+
        "\1\4\1\1\1\2\1\3";
    static final String DFA185_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\3\uffff\1\3\1\uffff\1\4\50\uffff\1"+
        "\5\1\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
        "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\17\uffff\1\32\17\uffff"+
        "\1\33\1\34\1\35\13\uffff\1\36\26\uffff\1\37\2\uffff\1\40\1\41\5"+
        "\uffff}>";
    static final String[] DFA185_transitionS = {
            "\1\1",
            "\1\2",
            "\1\17\5\uffff\1\26\27\uffff\1\13\21\uffff\1\26\2\uffff\1\20"+
            "\16\uffff\1\26\4\uffff\1\15\30\uffff\1\23\4\uffff\1\12\1\uffff"+
            "\1\4\2\uffff\1\14\1\uffff\1\26\1\25\2\uffff\1\5\1\25\1\uffff"+
            "\2\3\3\uffff\1\26\14\uffff\1\16\2\uffff\3\26\1\uffff\2\26\4"+
            "\uffff\1\11\2\uffff\1\10\1\uffff\1\26\2\uffff\2\26\1\21\1\uffff"+
            "\1\21\1\22\2\uffff\1\6\1\7\2\26\2\uffff\1\26\4\uffff\1\26\1"+
            "\uffff\1\26\1\21\2\uffff\1\26\2\uffff\4\26\1\uffff\3\26\1\uffff"+
            "\1\21\4\26\6\uffff\1\24",
            "\1\64",
            "\1\102\35\uffff\1\77\21\uffff\1\67\2\uffff\1\103\16\uffff\1"+
            "\66\4\uffff\1\100\30\uffff\1\106\4\uffff\1\76\1\uffff\1\71\1"+
            "\uffff\1\111\1\65\2\uffff\1\110\2\uffff\1\70\1\110\23\uffff"+
            "\1\101\14\uffff\1\75\2\uffff\1\74\4\uffff\1\122\1\uffff\1\104"+
            "\1\uffff\1\104\1\105\2\uffff\1\72\1\73\1\114\1\112\2\uffff\1"+
            "\116\4\uffff\1\130\2\uffff\1\104\2\uffff\1\113\2\uffff\1\120"+
            "\1\123\1\124\1\121\1\uffff\1\125\1\uffff\1\126\1\uffff\1\104"+
            "\1\uffff\1\127\1\117\1\115\6\uffff\1\107",
            "\1\143\35\uffff\1\137\24\uffff\1\144\23\uffff\1\141\35\uffff"+
            "\1\136\1\uffff\1\131\2\uffff\1\140\32\uffff\1\142\14\uffff\1"+
            "\135\2\uffff\1\134\6\uffff\1\145\1\uffff\1\145\1\146\2\uffff"+
            "\1\132\1\133\14\uffff\1\145\16\uffff\1\145",
            "",
            "",
            "",
            "\1\26\110\uffff\1\147",
            "",
            "\1\u0087\27\uffff\1\167\21\uffff\1\u008b\21\uffff\1\u008a\36"+
            "\uffff\1\u0094\1\uffff\2\u0094\1\u0092\1\uffff\1\153\1\26\1"+
            "\uffff\1\u0091\1\uffff\1\156\1\155\1\154\1\uffff\1\156\1\155"+
            "\1\154\2\152\1\u0094\2\uffff\1\u008c\1\u008e\1\u0094\1\uffff"+
            "\6\u0094\1\uffff\1\160\1\157\3\uffff\1\u0083\1\u0090\1\u008d"+
            "\1\uffff\1\u0082\1\u0085\4\uffff\1\u0084\4\uffff\1\u008f\2\uffff"+
            "\1\162\1\u0086\3\uffff\1\151\2\uffff\1\u0094\1\uffff\1\174\1"+
            "\170\2\uffff\1\176\4\uffff\1\172\1\uffff\1\u0086\3\uffff\1\164"+
            "\2\uffff\1\u0080\1\163\1\165\1\u0081\1\uffff\1\166\1\u0089\1"+
            "\171\2\uffff\1\u0088\1\173\1\177\1\175\2\uffff\1\u0094\1\uffff"+
            "\1\u0094",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;

    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "996:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA185_2 = input.LA(1);

                         
                        int index185_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA185_2 >= 131 && LA185_2 <= 132)) ) {s = 3;}

                        else if ( (LA185_2==119) ) {s = 4;}

                        else if ( (LA185_2==128) ) {s = 5;}

                        else if ( (LA185_2==178) && (synpred38_Objc())) {s = 6;}

                        else if ( (LA185_2==179) && (synpred38_Objc())) {s = 7;}

                        else if ( (LA185_2==165) && (synpred38_Objc())) {s = 8;}

                        else if ( (LA185_2==162) ) {s = 9;}

                        else if ( (LA185_2==117) && (synpred38_Objc())) {s = 10;}

                        else if ( (LA185_2==ID) ) {s = 11;}

                        else if ( (LA185_2==122) && (synpred38_Objc())) {s = 12;}

                        else if ( (LA185_2==STRING_LITERAL) && (synpred38_Objc())) {s = 13;}

                        else if ( (LA185_2==149) && (synpred38_Objc())) {s = 14;}

                        else if ( (LA185_2==CHAR_LITERAL) && (synpred38_Objc())) {s = 15;}

                        else if ( (LA185_2==NUMBER_LITERAL) && (synpred38_Objc())) {s = 16;}

                        else if ( (LA185_2==172||LA185_2==174||LA185_2==192||LA185_2==207) && (synpred38_Objc())) {s = 17;}

                        else if ( (LA185_2==175) && (synpred38_Objc())) {s = 18;}

                        else if ( (LA185_2==112) && (synpred38_Objc())) {s = 19;}

                        else if ( (LA185_2==218) && (synpred38_Objc())) {s = 20;}

                        else if ( (LA185_2==125||LA185_2==129) && (synpred38_Objc())) {s = 21;}

                        else if ( (LA185_2==EOF||LA185_2==DEFINE_LITERAL||LA185_2==MULTI_COMMENT_LIT||LA185_2==SINGLE_COMMENT_LIT||LA185_2==124||LA185_2==136||(LA185_2 >= 152 && LA185_2 <= 154)||(LA185_2 >= 156 && LA185_2 <= 157)||LA185_2==167||(LA185_2 >= 170 && LA185_2 <= 171)||(LA185_2 >= 180 && LA185_2 <= 181)||LA185_2==184||LA185_2==189||LA185_2==191||LA185_2==195||(LA185_2 >= 198 && LA185_2 <= 201)||(LA185_2 >= 203 && LA185_2 <= 205)||(LA185_2 >= 208 && LA185_2 <= 211)) ) {s = 22;}

                         
                        input.seek(index185_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA185_4 = input.LA(1);

                         
                        int index185_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA185_4==122) ) {s = 53;}

                        else if ( (LA185_4==SINGLE_COMMENT_LIT) ) {s = 54;}

                        else if ( (LA185_4==MULTI_COMMENT_LIT) ) {s = 55;}

                        else if ( (LA185_4==128) ) {s = 56;}

                        else if ( (LA185_4==119) ) {s = 57;}

                        else if ( (LA185_4==178) ) {s = 58;}

                        else if ( (LA185_4==179) ) {s = 59;}

                        else if ( (LA185_4==165) ) {s = 60;}

                        else if ( (LA185_4==162) ) {s = 61;}

                        else if ( (LA185_4==117) ) {s = 62;}

                        else if ( (LA185_4==ID) ) {s = 63;}

                        else if ( (LA185_4==STRING_LITERAL) ) {s = 64;}

                        else if ( (LA185_4==149) ) {s = 65;}

                        else if ( (LA185_4==CHAR_LITERAL) ) {s = 66;}

                        else if ( (LA185_4==NUMBER_LITERAL) ) {s = 67;}

                        else if ( (LA185_4==172||LA185_4==174||LA185_4==192||LA185_4==207) ) {s = 68;}

                        else if ( (LA185_4==175) ) {s = 69;}

                        else if ( (LA185_4==112) ) {s = 70;}

                        else if ( (LA185_4==218) ) {s = 71;}

                        else if ( (LA185_4==125||LA185_4==129) ) {s = 72;}

                        else if ( (LA185_4==121) ) {s = 73;}

                        else if ( (LA185_4==181) && (synpred38_Objc())) {s = 74;}

                        else if ( (LA185_4==195) && (synpred38_Objc())) {s = 75;}

                        else if ( (LA185_4==180) && (synpred38_Objc())) {s = 76;}

                        else if ( (LA185_4==211) && (synpred38_Objc())) {s = 77;}

                        else if ( (LA185_4==184) && (synpred38_Objc())) {s = 78;}

                        else if ( (LA185_4==210) && (synpred38_Objc())) {s = 79;}

                        else if ( (LA185_4==198) && (synpred38_Objc())) {s = 80;}

                        else if ( (LA185_4==201) && (synpred38_Objc())) {s = 81;}

                        else if ( (LA185_4==170) && (synpred38_Objc())) {s = 82;}

                        else if ( (LA185_4==199) && (synpred38_Objc())) {s = 83;}

                        else if ( (LA185_4==200) && (synpred38_Objc())) {s = 84;}

                        else if ( (LA185_4==203) && (synpred38_Objc())) {s = 85;}

                        else if ( (LA185_4==205) && (synpred38_Objc())) {s = 86;}

                        else if ( (LA185_4==209) && (synpred38_Objc())) {s = 87;}

                        else if ( (LA185_4==189) && (synpred38_Objc())) {s = 88;}

                         
                        input.seek(index185_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA185_5 = input.LA(1);

                         
                        int index185_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA185_5==119) ) {s = 89;}

                        else if ( (LA185_5==178) && (synpred38_Objc())) {s = 90;}

                        else if ( (LA185_5==179) && (synpred38_Objc())) {s = 91;}

                        else if ( (LA185_5==165) && (synpred38_Objc())) {s = 92;}

                        else if ( (LA185_5==162) && (synpred38_Objc())) {s = 93;}

                        else if ( (LA185_5==117) && (synpred38_Objc())) {s = 94;}

                        else if ( (LA185_5==ID) && (synpred38_Objc())) {s = 95;}

                        else if ( (LA185_5==122) && (synpred38_Objc())) {s = 96;}

                        else if ( (LA185_5==STRING_LITERAL) && (synpred38_Objc())) {s = 97;}

                        else if ( (LA185_5==149) && (synpred38_Objc())) {s = 98;}

                        else if ( (LA185_5==CHAR_LITERAL) && (synpred38_Objc())) {s = 99;}

                        else if ( (LA185_5==NUMBER_LITERAL) && (synpred38_Objc())) {s = 100;}

                        else if ( (LA185_5==172||LA185_5==174||LA185_5==192||LA185_5==207) && (synpred38_Objc())) {s = 101;}

                        else if ( (LA185_5==175) && (synpred38_Objc())) {s = 102;}

                         
                        input.seek(index185_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA185_9 = input.LA(1);

                         
                        int index185_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA185_9==119) && (synpred38_Objc())) {s = 103;}

                        else if ( (LA185_9==ID) ) {s = 22;}

                         
                        input.seek(index185_9);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA185_11 = input.LA(1);

                         
                        int index185_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA185_11==175) ) {s = 105;}

                        else if ( ((LA185_11 >= 131 && LA185_11 <= 132)) ) {s = 106;}

                        else if ( (LA185_11==119) ) {s = 107;}

                        else if ( (LA185_11==126||LA185_11==130) && (synpred38_Objc())) {s = 108;}

                        else if ( (LA185_11==125||LA185_11==129) && (synpred38_Objc())) {s = 109;}

                        else if ( (LA185_11==124||LA185_11==128) && (synpred38_Objc())) {s = 110;}

                        else if ( (LA185_11==148) && (synpred38_Objc())) {s = 111;}

                        else if ( (LA185_11==147) && (synpred38_Objc())) {s = 112;}

                        else if ( (LA185_11==EOF) && (synpred38_Objc())) {s = 113;}

                        else if ( (LA185_11==170) && (synpred38_Objc())) {s = 114;}

                        else if ( (LA185_11==199) && (synpred38_Objc())) {s = 115;}

                        else if ( (LA185_11==195) && (synpred38_Objc())) {s = 116;}

                        else if ( (LA185_11==200) && (synpred38_Objc())) {s = 117;}

                        else if ( (LA185_11==203) && (synpred38_Objc())) {s = 118;}

                        else if ( (LA185_11==ID) ) {s = 119;}

                        else if ( (LA185_11==181) && (synpred38_Objc())) {s = 120;}

                        else if ( (LA185_11==205) && (synpred38_Objc())) {s = 121;}

                        else if ( (LA185_11==189) && (synpred38_Objc())) {s = 122;}

                        else if ( (LA185_11==209) && (synpred38_Objc())) {s = 123;}

                        else if ( (LA185_11==180) && (synpred38_Objc())) {s = 124;}

                        else if ( (LA185_11==211) && (synpred38_Objc())) {s = 125;}

                        else if ( (LA185_11==184) && (synpred38_Objc())) {s = 126;}

                        else if ( (LA185_11==210) && (synpred38_Objc())) {s = 127;}

                        else if ( (LA185_11==198) && (synpred38_Objc())) {s = 128;}

                        else if ( (LA185_11==201) && (synpred38_Objc())) {s = 129;}

                        else if ( (LA185_11==156) && (synpred38_Objc())) {s = 130;}

                        else if ( (LA185_11==152) && (synpred38_Objc())) {s = 131;}

                        else if ( (LA185_11==162) && (synpred38_Objc())) {s = 132;}

                        else if ( (LA185_11==157) && (synpred38_Objc())) {s = 133;}

                        else if ( (LA185_11==171||LA185_11==191) && (synpred38_Objc())) {s = 134;}

                        else if ( (LA185_11==DEFINE_LITERAL) && (synpred38_Objc())) {s = 135;}

                        else if ( (LA185_11==208) && (synpred38_Objc())) {s = 136;}

                        else if ( (LA185_11==204) && (synpred38_Objc())) {s = 137;}

                        else if ( (LA185_11==SINGLE_COMMENT_LIT) && (synpred38_Objc())) {s = 138;}

                        else if ( (LA185_11==MULTI_COMMENT_LIT) && (synpred38_Objc())) {s = 139;}

                        else if ( (LA185_11==136) && (synpred38_Objc())) {s = 140;}

                        else if ( (LA185_11==154) && (synpred38_Objc())) {s = 141;}

                        else if ( (LA185_11==137) ) {s = 142;}

                        else if ( (LA185_11==167) && (synpred38_Objc())) {s = 143;}

                        else if ( (LA185_11==153) && (synpred38_Objc())) {s = 144;}

                        else if ( (LA185_11==122) ) {s = 145;}

                        else if ( (LA185_11==117) ) {s = 146;}

                        else if ( (LA185_11==120) ) {s = 22;}

                        else if ( (LA185_11==113||(LA185_11 >= 115 && LA185_11 <= 116)||LA185_11==133||LA185_11==138||(LA185_11 >= 140 && LA185_11 <= 145)||LA185_11==178||LA185_11==214||LA185_11==216) && (synpred38_Objc())) {s = 148;}

                         
                        input.seek(index185_11);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA185_52 = input.LA(1);

                         
                        int index185_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                         
                        input.seek(index185_52);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA185_54 = input.LA(1);

                         
                        int index185_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                         
                        input.seek(index185_54);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA185_55 = input.LA(1);

                         
                        int index185_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                         
                        input.seek(index185_55);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA185_56 = input.LA(1);

                         
                        int index185_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_56);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA185_57 = input.LA(1);

                         
                        int index185_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_57);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA185_58 = input.LA(1);

                         
                        int index185_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_58);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA185_59 = input.LA(1);

                         
                        int index185_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_59);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA185_60 = input.LA(1);

                         
                        int index185_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_60);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA185_61 = input.LA(1);

                         
                        int index185_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_61);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA185_62 = input.LA(1);

                         
                        int index185_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_62);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA185_63 = input.LA(1);

                         
                        int index185_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_63);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA185_64 = input.LA(1);

                         
                        int index185_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_64);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA185_65 = input.LA(1);

                         
                        int index185_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_65);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA185_66 = input.LA(1);

                         
                        int index185_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_66);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA185_67 = input.LA(1);

                         
                        int index185_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_67);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA185_68 = input.LA(1);

                         
                        int index185_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_68);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA185_69 = input.LA(1);

                         
                        int index185_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_69);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA185_70 = input.LA(1);

                         
                        int index185_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_70);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA185_71 = input.LA(1);

                         
                        int index185_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_71);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA185_72 = input.LA(1);

                         
                        int index185_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                        else if ( (synpred38_Objc()) ) {s = 148;}

                         
                        input.seek(index185_72);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA185_73 = input.LA(1);

                         
                        int index185_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 149;}

                        else if ( (synpred37_Objc()) ) {s = 150;}

                        else if ( (true) ) {s = 151;}

                         
                        input.seek(index185_73);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA185_89 = input.LA(1);

                         
                        int index185_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_89);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA185_105 = input.LA(1);

                         
                        int index185_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_105);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA185_106 = input.LA(1);

                         
                        int index185_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_106);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA185_107 = input.LA(1);

                         
                        int index185_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_107);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA185_119 = input.LA(1);

                         
                        int index185_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_119);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA185_142 = input.LA(1);

                         
                        int index185_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_142);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA185_145 = input.LA(1);

                         
                        int index185_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_145);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA185_146 = input.LA(1);

                         
                        int index185_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index185_146);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code483 = new BitSet(new long[]{0x0000400000400002L,0x0080000000040001L,0xA1300C0431000100L,0x00000000000F3BC8L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_code_internal580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_c_in_extern_wrapper664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_extern_c688 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern_c691 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern_c694 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFDFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000007FFFFFFL});
    public static final BitSet FOLLOW_set_in_extern_c696 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_extern_c701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_implementation737 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_implementation740 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x2130048006000101L,0x00000000000F3BC8L});
    public static final BitSet FOLLOW_category_in_implementation743 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x2130048006000101L,0x00000000000F3BC8L});
    public static final BitSet FOLLOW_implementation_body_in_implementation748 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x2130048006000101L,0x00000000000F3BC8L});
    public static final BitSet FOLLOW_154_in_implementation753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_implementation_body817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_synthesize850 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_153_in_synthesize854 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002100L});
    public static final BitSet FOLLOW_141_in_synthesize861 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synthesize863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synthesize867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_static_declaration_wrapper891 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call_predicate913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_block_call_predicate919 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call_predicate921 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call_predicate923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_block_call_predicate930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_block_call_predicate932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_type_decl_predicate948 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl_predicate951 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl_predicate952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_type_decl972 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl975 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl976 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_type_decl977 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_block_params_in_block_type_decl979 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_decl_predicate1004 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl_predicate1007 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_decl_predicate1009 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl_predicate1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_block_decl1029 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl1032 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_block_decl1034 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl1036 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_decl1037 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_block_params_in_block_decl1039 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl1042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002100L});
    public static final BitSet FOLLOW_141_in_block_decl1046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_block_call_in_block_decl1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_block_decl1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_block_call1096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_block_call1098 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x7B70874000400100L,0x00000000023E7FDEL});
    public static final BitSet FOLLOW_block_internal_in_block_call1100 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x7B70874000400100L,0x00000000023E7FDEL});
    public static final BitSet FOLLOW_217_in_block_call1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call1124 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_block_params_in_block_call1126 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_call1129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_block_call1140 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call1142 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call1144 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_block_params_in_block_call1146 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_call1149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_synchronized_call1189 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1191 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1193 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synchronized_call1195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1213 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_block_params1216 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_classical_param_in_block_params1218 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_block_multiline1281 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x7B71874000400100L,0x00000000023E7FDEL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1286 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x7B71874000400100L,0x00000000023E7FDEL});
    public static final BitSet FOLLOW_217_in_block_multiline1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externC_stmt_in_block_singleline1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_block_singleline1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1431 = new BitSet(new long[]{0x0000000000000002L,0x4840000000000000L,0x000000000004285CL,0x0000000000800000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_singleline1435 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_singleline1437 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x000000000004285CL,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_in_block_singleline1441 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_block_singleline1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_block_internal_macro1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1502 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externC_stmt_in_block_internal1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_block_internal1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1618 = new BitSet(new long[]{0x0000000000000002L,0x4840000000000000L,0x000000000004285CL,0x0000000000800000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_internal1622 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_internal1624 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x000000000004285CL,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_in_block_internal1628 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_block_internal1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_autorelease_stmt_in_block_internal1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_goto_stmt1656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_goto_stmt1658 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_goto_stmt1662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_while_stmt1708 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1710 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1712 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_while_stmt1714 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_while_stmt1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_for_in_stmt1731 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_for_classic_stmt1756 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200103L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_for_classic_stmt1761 = new BitSet(new long[]{0x0000400000010002L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1788 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1790 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1807 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1809 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1822 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1824 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1842 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1844 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1852 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000800020L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1856 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1860 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1865 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1868 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_stmt1883 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt1885 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L,0x2130040000000100L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_return_stmt1923 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200103L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_switch_stmt1948 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1950 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1952 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_switch_stmt1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_switch_stmt1956 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5EC0804000000100L,0x0000000002304416L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1959 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5EC0804000000100L,0x0000000002304416L});
    public static final BitSet FOLLOW_217_in_switch_stmt1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_autorelease_stmt2022 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_autorelease_stmt2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_case_stmt2039 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000008L,0x0000000000000001L});
    public static final BitSet FOLLOW_name_number_in_case_stmt2041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_case_stmt2043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_default_stmt2066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_default_stmt2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_do_stmt2089 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_do_stmt2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_do_stmt2093 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt2095 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_do_stmt2097 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_do_stmt2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_if_stmt2124 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt2126 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_if_stmt2128 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_if_stmt2130 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_if_stmt2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_else_stmt2155 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_else_stmt2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_try_stmt_wrapper2179 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper2182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008800000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper2185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008800000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_catch_stmt2214 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt2217 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2220 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_catch_stmt2223 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2225 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_catch_stmt2228 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_catch_stmt2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_finally_stmt2255 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_finally_stmt2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_throw_stmt2296 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_throw_stmt2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_externC_stmt2312 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_block_in_externC_stmt2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_name_number2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2437 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2439 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2462 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2470 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2487 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2502 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2504 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_implementation_common2506 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2508 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2571 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2574 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2576 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_clasical_method_call_predicate2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2595 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2598 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2600 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_classical_method_call2605 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2607 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_classical_method_call2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2625 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_classical_method_params_push2628 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2630 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2654 = new BitSet(new long[]{0x0000400000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_params_push2661 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_127_in_method_params_push2666 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2669 = new BitSet(new long[]{0x0000400000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2690 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_method_param_push2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_method_msg2724 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_method_msg2726 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000080L});
    public static final BitSet FOLLOW_135_in_method_msg2731 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_method_msg2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_questionmark_if_stmt2763 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2765 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_questionmark_if_stmt2786 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040001L,0x0000000000000080L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_questionmark_if_stmt2793 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2795 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_element_value_or_semicolon2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_array_init2874 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004208001L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2877 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_array_init2880 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004208001L});
    public static final BitSet FOLLOW_comments_in_array_init2882 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004208001L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2885 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_213_in_element_value_or_array_init2902 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000006208001L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_217_in_element_value_or_array_init2907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2928 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2966 = new BitSet(new long[]{0x0000000000000002L,0x143A000000000000L,0x00040000001BF621L,0x0000000001400000L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2968 = new BitSet(new long[]{0x0000000000000002L,0x143A000000000000L,0x00040000001BF621L,0x0000000001400000L});
    public static final BitSet FOLLOW_128_in_cast_unary_expression12983 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt3013 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3035 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression3037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression3044 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_cast_unary_expression3060 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression3076 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression3096 = new BitSet(new long[]{0x0000400000010000L,0x24A0000000800008L,0x000CD02400200002L,0x0000000000008001L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_expression3098 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_expression3120 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression3122 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3124 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_cast_expression3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression3129 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression3131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3160 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call3163 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3165 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_name_or_classical_function_call3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value_access3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access3202 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access3204 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3206 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_simple_expression_value_access3209 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_simple_expression_value_access3214 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_simple_expression_value_access3226 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access3228 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3230 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_access2_in_simple_expression_value_access3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23274 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access23277 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access23279 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access23284 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access23286 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access23289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access23296 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x000000000000001CL});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access23299 = new BitSet(new long[]{0x0000400000010000L,0x0420000000800008L,0x0000500000200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23301 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x000000000000001CL});
    public static final BitSet FOLLOW_set_in_simple_expression_value_access23306 = new BitSet(new long[]{0x0000400000010000L,0x0420000000800008L,0x0000500000200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_simple_expression_value3339 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_simple_expression_value3344 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_simple_expression_value3348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value3376 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_simple_expression_value3387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_objc_in_simple_expression_value3392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_in_simple_expression_value3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23462 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23464 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value23466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_selector3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_type_cast_name3714 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3716 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_cast_name3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3813 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3874 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3889 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3891 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3893 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_cast_lvalue3895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3898 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3927 = new BitSet(new long[]{0x0000400000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_lvalue_access3937 = new BitSet(new long[]{0x0000400000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3939 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_lvalue_access3941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3944 = new BitSet(new long[]{0x0000400000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_117_in_lvalue3973 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_lvalue3978 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_lvalue3980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_lvalue3982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3998 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue4010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_break_stmt4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_continue_stmt4047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_declaration4119 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_in_declarations4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations4167 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130041040000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4169 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_field_declaration_in_declarations4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_ns_inline4225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_property_prefix4237 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix4239 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4241 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_property_prefix4244 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4246 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_property_prefix4251 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4253 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_property_prefix4256 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4258 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix4260 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_property_prefix4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_typedef_declaration_wrapper4318 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_in_typedef_declaration4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration4380 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4382 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_127_in_typedef_declaration4385 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4387 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_typedef_declaration4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate4403 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_func_pointer_predicate4405 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0130040000000000L,0x00000000000C0BC8L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate4407 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer_predicate4409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer4424 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_func_pointer4426 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0130040000000000L,0x00000000000C0BC8L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4428 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4430 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer4432 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L,0x0130040000000000L,0x00000000000C0BC8L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4435 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_func_pointer4438 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0130040000000000L,0x00000000000C0BC8L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4440 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_forward_class_declaration4532 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_forward_class_declaration4549 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_protocol_declaration4638 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4640 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000201L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4642 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000001L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4664 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000001L});
    public static final BitSet FOLLOW_154_in_class_protocol_end4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_template4683 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_template_internal_in_template4685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_template4687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_implements_protocols4721 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4723 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_127_in_implements_protocols4726 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4728 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_implements_protocols4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4754 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_template_internal4757 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4759 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_template_type4779 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_interface_declaration4843 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4845 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000281L,0x0000000000200000L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4847 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4851 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000001L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4856 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000001144000001L});
    public static final BitSet FOLLOW_154_in_interface_declaration4861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_fields_body4878 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x2130040A80000000L,0x00000000020F2BC8L});
    public static final BitSet FOLLOW_body_item_in_fields_body4884 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x2130040A80000000L,0x00000000020F2BC8L});
    public static final BitSet FOLLOW_217_in_fields_body4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4904 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000F2BC8L});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4907 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000F2BC8L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_field_modifiers4980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4995 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_category5016 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_ID_in_category5018 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_category5021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_superclass_name5041 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name5043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name5047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations5076 = new BitSet(new long[]{0x0000400000000002L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_block_decl_in_field_declaration5103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration5111 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration5113 = new BitSet(new long[]{0x0000000000000000L,0xC8C0000000000000L,0x0000000000042944L,0x0000000000800000L});
    public static final BitSet FOLLOW_127_in_field_declaration5117 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration5119 = new BitSet(new long[]{0x0000000000000000L,0xC8C0000000000000L,0x0000000000042944L,0x0000000000800000L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000200000L});
    public static final BitSet FOLLOW_136_in_field_declaration5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration5133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration5140 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x000CD02400200003L,0x0000000004208001L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration5142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_field_declaration5144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_field_declaration5150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple5165 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classical_method_params5192 = new BitSet(new long[]{0x0000400000000000L,0x8280000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5194 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_classical_method_params5198 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5200 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_classical_method_params5204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param5229 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration5277 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_classical_type_declaration5287 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5289 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_classical_type_declaration5308 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5310 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_classical_type_declaration5329 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5331 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_in_type_declaration5384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration5390 = new BitSet(new long[]{0x0000000000000002L,0x0420000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5392 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration5394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration5401 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration5410 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration5419 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_type_declaration_plane5436 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0120040000000000L,0x00000000000C0BC8L});
    public static final BitSet FOLLOW_211_in_type_declaration_plane5439 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0120040000000000L,0x0000000000040BC8L});
    public static final BitSet FOLLOW_184_in_type_declaration_plane5442 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0020040000000000L,0x0000000000040BC8L});
    public static final BitSet FOLLOW_210_in_type_declaration_plane5445 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0020040000000000L,0x0000000000000BC8L});
    public static final BitSet FOLLOW_198_in_type_declaration_plane5448 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0020040000000000L,0x0000000000000B88L});
    public static final BitSet FOLLOW_181_in_type_declaration_plane5451 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000B88L});
    public static final BitSet FOLLOW_201_in_type_declaration_plane5454 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane5457 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration_plane5460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_type_declaration_plane5462 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration_plane5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_type_decl_protocol_predicate5496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_type_decl_protocol_predicate5499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_decl_protocol_predicate5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_type_declaration_protocol5517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_type_declaration_protocol5520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_declaration_protocol5522 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_type_declaration_protocol5526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_type_declaration_struct_simple5548 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_type_declaration_union_simple5570 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_type_declaration_enum_simple5596 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_type_declaration_struct_full5618 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_full5620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct_full5623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_type_declaration_union_full5647 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_full5649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union_full5652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_type_declaration_enum_full5676 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_full5678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum_full5681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_union5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_enum5776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_enum_wrapper5795 = new BitSet(new long[]{0x0000400000000000L,0x8000000000040001L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5805 = new BitSet(new long[]{0x0000400000000000L,0x8000000000040001L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_217_in_enum_wrapper5812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_enum_element5827 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_enum_element5830 = new BitSet(new long[]{0x0000000000000002L,0xC840000000000000L,0x0000000000042844L,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5833 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_enum_element5835 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_enum_element5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_struct5893 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_struct_internal_in_struct5902 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x2130040000000000L,0x00000000020E2BC8L});
    public static final BitSet FOLLOW_217_in_struct5909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_type_dec_template5979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_type_dec_template5982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_dec_template5984 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_type_dec_template5986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_type_dec_template5988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_137_in_type_dec_template6006 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ID_in_type_dec_template6009 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_dec_template6011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_type_dec_template6013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_170_in_type_dec6026 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000988L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec6029 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000800000000200L});
    public static final BitSet FOLLOW_type_dec_template_in_type_dec6031 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_122_in_type_dec6034 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec6038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal6064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_knownTypes6077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_knownTypes6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_knownTypes6089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_199_in_knownTypes6092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_knownTypes6096 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_knownTypes6098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_knownTypes6106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_199_in_knownTypes6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name6125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000080L});
    public static final BitSet FOLLOW_array_size_in_field_name6127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000080L});
    public static final BitSet FOLLOW_field_crap_in_field_name6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_array_size6162 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000008L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_array_size6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_field_crap6183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration6197 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper6211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_declaration_common6261 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common6263 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_declaration_common6265 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common6267 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common6270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_method_declaration_common6273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate6285 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate6288 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate6290 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_declaration_predicate6292 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params6335 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_prefix_in_method_param6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_param6358 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param6361 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x2130040000000000L,0x00000000000E2BC8L});
    public static final BitSet FOLLOW_type_declaration_in_method_param6363 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_param6365 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param6369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name6402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration6450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_line_in_define_declaration6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6473 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_declaration6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6498 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6500 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_define_declaration6502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6518 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_line6542 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_line6544 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_define_as_line6546 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_simple_expression_in_define_as_line6548 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_define_as_line6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function6579 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function6581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_define_as_function6584 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000304416L});
    public static final BitSet FOLLOW_213_in_define_as_function6586 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x5A40804000000100L,0x0000000000104416L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function6589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_217_in_define_as_function6591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string6618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_string_objc6641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_objc6643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred1_Objc507 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_synpred1_Objc509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1496 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred5_Objc1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred6_Objc1511 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_in_synpred6_Objc1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred7_Objc1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc1799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred8_Objc1801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_synpred9_Objc1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred10_Objc1833 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000800000L});
    public static final BitSet FOLLOW_op_assign_in_synpred10_Objc1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred11_Objc2455 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred11_Objc2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred12_Objc3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred13_Objc3108 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred13_Objc3110 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x000CD02400200000L,0x0000000000008001L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred13_Objc3112 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synpred13_Objc3114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred13_Objc3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc3153 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred14_Objc3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred15_Objc3191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred16_Objc3261 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred16_Objc3264 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred16_Objc3266 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_synpred16_Objc3270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred17_Objc3330 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred17_Objc3333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_synpred17_Objc3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred18_Objc3365 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred18_Objc3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred19_Objc3732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_synpred20_Objc3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred21_Objc3883 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_name_in_synpred21_Objc3885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred22_Objc3964 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred22_Objc3967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_synpred22_Objc3969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_predicate_in_synpred23_Objc4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred24_Objc4471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_predicate_in_synpred25_Objc5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred27_Objc5267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred28_Objc5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred29_Objc5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_predicate_in_synpred30_Objc5380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_synpred31_Objc5707 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred31_Objc5709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_synpred31_Objc5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_synpred32_Objc5737 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred32_Objc5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_synpred32_Objc5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred33_Objc5767 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred33_Objc5769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_synpred33_Objc5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred34_Objc5971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_synpred34_Objc5974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred35_Objc5996 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ID_in_synpred35_Objc5999 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_synpred35_Objc6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred36_Objc6441 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred36_Objc6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_synpred36_Objc6445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred37_Objc6457 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred37_Objc6459 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred37_Objc6461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred38_Objc6491 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred38_Objc6493 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x000CD02400200003L,0x0000000004008001L});
    public static final BitSet FOLLOW_element_value_in_synpred38_Objc6495 = new BitSet(new long[]{0x0000000000000002L});

}