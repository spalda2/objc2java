// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2013-01-30 19:22:46

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'NS_INLINE'", "'['", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CHAR=16;
    public static final int CHAR_LITERAL=17;
    public static final int CLASS_NAME=18;
    public static final int CODE=19;
    public static final int CONTINUE_STMT=20;
    public static final int DEFAULT_STMT=21;
    public static final int DEFINE=22;
    public static final int DEFINE_LITERAL=23;
    public static final int DIGIT=24;
    public static final int DIRECTIVE=25;
    public static final int DO_STMT=26;
    public static final int ELSE_STMT=27;
    public static final int ENUM=28;
    public static final int ENUM_DEC=29;
    public static final int ENUM_FIELD=30;
    public static final int EXPR_COMPLEMENT=31;
    public static final int EXPR_NEGATE=32;
    public static final int EXPR_NOT=33;
    public static final int EXTERN=34;
    public static final int EscapeSequence=35;
    public static final int FIELD=36;
    public static final int FIELDS=37;
    public static final int FIELD_NAME=38;
    public static final int FINALLY_STMT=39;
    public static final int FORWARD_DECLARATION=40;
    public static final int FOR_IN_STMT=41;
    public static final int FOR_STMT=42;
    public static final int FUNC_POINTER=43;
    public static final int GOTO=44;
    public static final int GROUP_MODIFIER=45;
    public static final int HexDigit=46;
    public static final int ID=47;
    public static final int IF0_COMMENT=48;
    public static final int IF_STMT=49;
    public static final int IMPLEMENTATION=50;
    public static final int IMPLEMENTS_INTERFACES=51;
    public static final int IMPLEMENTS_INTERFACE_NAME=52;
    public static final int INTERFACE=53;
    public static final int INTERFACE_NAME=54;
    public static final int LETTER=55;
    public static final int METHOD=56;
    public static final int METHOD_CALL=57;
    public static final int METHOD_IMPL=58;
    public static final int METHOD_MSG=59;
    public static final int METHOD_NAME=60;
    public static final int METHOD_PARAM=61;
    public static final int METHOD_PARAMS=62;
    public static final int MODIFIER=63;
    public static final int MULTI_COMMENT=64;
    public static final int MULTI_COMMENT_LIT=65;
    public static final int NAME=66;
    public static final int NUMBER=67;
    public static final int NUMBER_LITERAL=68;
    public static final int OBJECT_ACCESS=69;
    public static final int OP=70;
    public static final int PARAMS=71;
    public static final int PARAM_NAME=72;
    public static final int PARAM_PREFIX=73;
    public static final int PREFIX=74;
    public static final int PREPROCESSOR_DECLARATION=75;
    public static final int PROPERTY=76;
    public static final int PROTOCOL=77;
    public static final int PROTOCOL_NAME=78;
    public static final int QUESTION_MARK_IF=79;
    public static final int RETURN_STMT=80;
    public static final int SIMPLE_EXPR=81;
    public static final int SINGLE_COMMENT=82;
    public static final int SINGLE_COMMENT_LIT=83;
    public static final int STATIC=84;
    public static final int STATIC_METHOD=85;
    public static final int STATIC_VARIABLE=86;
    public static final int STRING=87;
    public static final int STRING_LITERAL=88;
    public static final int STRING_OBJC=89;
    public static final int STRUCT=90;
    public static final int STRUCT_DEC=91;
    public static final int SUPERCLASS_NAME=92;
    public static final int SWITCH_STMT=93;
    public static final int SYNCHRONIZED=94;
    public static final int SYNTHETIZE=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==118||LA1_0==134||LA1_0==147||(LA1_0 >= 151 && LA1_0 <= 152)||LA1_0==157||LA1_0==172||(LA1_0 >= 177 && LA1_0 <= 178)||LA1_0==181||(LA1_0 >= 184 && LA1_0 <= 185)||(LA1_0 >= 187 && LA1_0 <= 189)||(LA1_0 >= 191 && LA1_0 <= 194)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code478);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:1: code_internal : ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal12=null;
        ObjcParser.implementation_wrapper_return implementation_wrapper2 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration3 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper4 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper5 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper6 =null;

        ObjcParser.define_declaration_return define_declaration7 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper8 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper9 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper10 =null;

        ObjcParser.comments_return comments11 =null;


        Object char_literal12_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:2: ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt2=11;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt2=1;
                }
                break;
            case 147:
                {
                alt2=2;
                }
                break;
            case 157:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==ID) ) {
                    int LA2_24 = input.LA(3);

                    if ( (LA2_24==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_24==MULTI_COMMENT_LIT||LA2_24==SINGLE_COMMENT_LIT||LA2_24==122||LA2_24==126||LA2_24==135||LA2_24==149||LA2_24==153||LA2_24==155) ) {
                        alt2=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 24, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case 189:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==ID) ) {
                    int LA2_25 = input.LA(3);

                    if ( (LA2_25==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_25==ID||LA2_25==116||LA2_25==196) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 25, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_4==196) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case 192:
                {
                int LA2_5 = input.LA(2);

                if ( (LA2_5==ID) ) {
                    int LA2_27 = input.LA(3);

                    if ( (LA2_27==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_27==ID||LA2_27==116||LA2_27==196) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 27, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_5==196) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 5, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA2_6 = input.LA(2);

                if ( (LA2_6==ID) ) {
                    int LA2_29 = input.LA(3);

                    if ( (LA2_29==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_29==ID||LA2_29==116||LA2_29==196) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 29, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_6==196) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                alt2=4;
                }
                break;
            case 178:
                {
                alt2=5;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt2=6;
                }
                break;
            case 191:
                {
                alt2=7;
                }
                break;
            case 188:
                {
                alt2=8;
                }
                break;
            case ID:
            case 118:
            case 172:
            case 181:
            case 184:
            case 185:
            case 187:
            case 193:
            case 194:
                {
                alt2=9;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt2=10;
                }
                break;
            case 134:
                {
                alt2=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal500);
                    implementation_wrapper2=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal505);
                    forward_class_declaration3=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal511);
                    protocol_declaration_wrapper4=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal518);
                    interface_declaration_wrapper5=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal525);
                    extern_declaration_wrapper6=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal531);
                    define_declaration7=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal537);
                    typedef_declaration_wrapper8=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal543);
                    static_declaration_wrapper9=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal549);
                    variable_declaration_wrapper10=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal555);
                    comments11=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal12=(Token)match(input,134,FOLLOW_134_in_code_internal561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal12_tree = 
                    (Object)adaptor.create(char_literal12)
                    ;
                    adaptor.addChild(root_0, char_literal12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment13 =null;

        ObjcParser.multi_comment_return multi_comment14 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments573);
                    single_comment13=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment13.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments579);
                    multi_comment14=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment14.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT15=null;

        Object SINGLE_COMMENT_LIT15_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT15=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT15);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT16=null;

        Object MULTI_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT16=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT16);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern17 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper644);
            extern17=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern17.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal18=null;
        Token string_literal19=null;
        Token char_literal20=null;
        Token set21=null;
        Token char_literal22=null;

        Object string_literal18_tree=null;
        Object string_literal19_tree=null;
        Object char_literal20_tree=null;
        Object set21_tree=null;
        Object char_literal22_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal18=(Token)match(input,178,FOLLOW_178_in_extern663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal18_tree = 
            (Object)adaptor.create(string_literal18)
            ;
            adaptor.addChild(root_0, string_literal18_tree);
            }

            string_literal19=(Token)match(input,114,FOLLOW_114_in_extern666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            char_literal20=(Token)match(input,118,FOLLOW_118_in_extern669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = 
            (Object)adaptor.create(char_literal20)
            ;
            adaptor.addChild(root_0, char_literal20_tree);
            }

            set21=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 118)||(input.LA(1) >= 120 && input.LA(1) <= 201) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set21)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal22=(Token)match(input,119,FOLLOW_119_in_extern676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = 
            (Object)adaptor.create(char_literal22)
            ;
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation23 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper691);
            implementation23=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation23.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 159:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal24=null;
        Token string_literal28=null;
        ObjcParser.name_return name25 =null;

        ObjcParser.category_return category26 =null;

        ObjcParser.implementation_body_return implementation_body27 =null;


        Object string_literal24_tree=null;
        Object string_literal28_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal24=(Token)match(input,151,FOLLOW_151_in_implementation710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);
            }

            pushFollow(FOLLOW_name_in_implementation713);
            name25=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name25.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==118) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==119) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation716);
                    category26=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category26.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==118||LA5_0==122||LA5_0==126||LA5_0==134||LA5_0==148||LA5_0==161||LA5_0==172||LA5_0==177||LA5_0==181||(LA5_0 >= 184 && LA5_0 <= 185)||(LA5_0 >= 187 && LA5_0 <= 189)||(LA5_0 >= 191 && LA5_0 <= 194)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation721);
            	    implementation_body27=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body27.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal28=(Token)match(input,149,FOLLOW_149_in_implementation726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal28_tree = 
            (Object)adaptor.create(string_literal28)
            ;
            adaptor.addChild(root_0, string_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal37=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper29 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcParser.directives_return directives31 =null;

        ObjcParser.define_declaration_return define_declaration32 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper33 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper34 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper35 =null;

        ObjcParser.comments_return comments36 =null;


        Object char_literal37_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 129 && LA6_1 <= 130)) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==118) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==116||LA6_1==120||LA6_1==166||LA6_1==172) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 122:
            case 126:
                {
                alt6=2;
                }
                break;
            case 148:
            case 161:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 191:
                {
                alt6=5;
                }
                break;
            case 188:
                {
                alt6=6;
                }
                break;
            case 118:
            case 172:
            case 177:
            case 181:
            case 184:
            case 185:
            case 187:
            case 189:
            case 192:
            case 193:
            case 194:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 134:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body745);
                    classical_method_call_wrapper29=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper29.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body751);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body757);
                    directives31=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives31.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body763);
                    define_declaration32=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration32.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body768);
                    typedef_declaration_wrapper33=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body773);
                    static_declaration_wrapper34=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body779);
                    variable_declaration_wrapper35=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper35.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body785);
                    comments36=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments36.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal37=(Token)match(input,134,FOLLOW_134_in_implementation_body790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal37_tree = 
                    (Object)adaptor.create(char_literal37)
                    ;
                    adaptor.addChild(root_0, char_literal37_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize38 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives801);
            synthesize38=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize38.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal39=null;
        Token string_literal40=null;
        Token ID41=null;
        Token char_literal42=null;
        Token char_literal44=null;
        ObjcParser.name_return name43 =null;


        Object string_literal39_tree=null;
        Object string_literal40_tree=null;
        Object ID41_tree=null;
        Object char_literal42_tree=null;
        Object char_literal44_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==161) ) {
                alt7=1;
            }
            else if ( (LA7_0==148) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:5: '@synthesize'
                    {
                    string_literal39=(Token)match(input,161,FOLLOW_161_in_synthesize823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal39);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:21: '@dynamic'
                    {
                    string_literal40=(Token)match(input,148,FOLLOW_148_in_synthesize827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal40);


                    }
                    break;

            }


            ID41=(Token)match(input,ID,FOLLOW_ID_in_synthesize831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID41);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==139) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:38: '=' name
                    {
                    char_literal42=(Token)match(input,139,FOLLOW_139_in_synthesize834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal42);


                    pushFollow(FOLLOW_name_in_synthesize836);
                    name43=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name43.getTree());

                    }
                    break;

            }


            char_literal44=(Token)match(input,134,FOLLOW_134_in_synthesize840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal44);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal45=null;
        ObjcParser.field_declaration_return field_declaration46 =null;


        Object string_literal45_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:4: 'static' field_declaration
            {
            string_literal45=(Token)match(input,188,FOLLOW_188_in_static_declaration_wrapper864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal45);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper866);
            field_declaration46=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration46.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:1: block_call_predicate : ( '^(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal47=null;
        Token char_literal48=null;
        Token char_literal49=null;

        Object string_literal47_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:3: ( '^(' | ( '^' '{' ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==169) ) {
                alt9=1;
            }
            else if ( (LA9_0==168) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal47=(Token)match(input,169,FOLLOW_169_in_block_call_predicate886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal47_tree = 
                    (Object)adaptor.create(string_literal47)
                    ;
                    adaptor.addChild(root_0, string_literal47_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:6: '^' '{'
                    {
                    char_literal48=(Token)match(input,168,FOLLOW_168_in_block_call_predicate893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal48_tree = 
                    (Object)adaptor.create(char_literal48)
                    ;
                    adaptor.addChild(root_0, char_literal48_tree);
                    }

                    char_literal49=(Token)match(input,196,FOLLOW_196_in_block_call_predicate895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call50 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper911);
            block_call50=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call50.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 197:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal54=null;
        Token string_literal55=null;
        Token char_literal57=null;
        ObjcParser.block_internal_return block_internal53 =null;

        ObjcParser.block_params_return block_params56 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper58 =null;


        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal54_tree=null;
        Object string_literal55_tree=null;
        Object char_literal57_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==168) ) {
                alt12=1;
            }
            else if ( (LA12_0==169) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal51=(Token)match(input,168,FOLLOW_168_in_block_call933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal51);


                    char_literal52=(Token)match(input,196,FOLLOW_196_in_block_call935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(char_literal52);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: ( block_internal )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==ID||LA10_0==MULTI_COMMENT_LIT||LA10_0==SINGLE_COMMENT_LIT||LA10_0==116||LA10_0==118||LA10_0==120||LA10_0==134||LA10_0==160||(LA10_0 >= 162 && LA10_0 <= 163)||LA10_0==166||LA10_0==170||(LA10_0 >= 172 && LA10_0 <= 173)||(LA10_0 >= 175 && LA10_0 <= 177)||(LA10_0 >= 179 && LA10_0 <= 182)||(LA10_0 >= 184 && LA10_0 <= 190)||(LA10_0 >= 192 && LA10_0 <= 196)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call937);
                    	    block_internal53=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal53.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    char_literal54=(Token)match(input,200,FOLLOW_200_in_block_call940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(char_literal54);


                    }


                    // AST REWRITE
                    // elements: 196, 200, block_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 201:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_196.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_200.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:6: '^(' ( block_params )? ')'
                    {
                    string_literal55=(Token)match(input,169,FOLLOW_169_in_block_call961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = 
                    (Object)adaptor.create(string_literal55)
                    ;
                    adaptor.addChild(root_0, string_literal55_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: ( block_params )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ID||LA11_0==118||LA11_0==172||LA11_0==177||LA11_0==181||(LA11_0 >= 184 && LA11_0 <= 185)||LA11_0==187||LA11_0==189||(LA11_0 >= 192 && LA11_0 <= 194)) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call963);
                            block_params56=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params56.getTree());

                            }
                            break;

                    }


                    char_literal57=(Token)match(input,119,FOLLOW_119_in_block_call966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal57_tree = 
                    (Object)adaptor.create(char_literal57)
                    ;
                    adaptor.addChild(root_0, char_literal57_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call969);
                    block_multiline_wrapper58=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper58.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call59 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper983);
            synchronized_call59=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call59.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal60=null;
        Token char_literal61=null;
        Token char_literal63=null;
        ObjcParser.element_value_return element_value62 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper64 =null;


        Object string_literal60_tree=null;
        Object char_literal61_tree=null;
        Object char_literal63_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal60=(Token)match(input,160,FOLLOW_160_in_synchronized_call1006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal60_tree = 
            (Object)adaptor.create(string_literal60)
            ;
            adaptor.addChild(root_0, string_literal60_tree);
            }

            char_literal61=(Token)match(input,118,FOLLOW_118_in_synchronized_call1008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = 
            (Object)adaptor.create(char_literal61)
            ;
            adaptor.addChild(root_0, char_literal61_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1010);
            element_value62=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value62.getTree());

            char_literal63=(Token)match(input,119,FOLLOW_119_in_synchronized_call1012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal63_tree = 
            (Object)adaptor.create(char_literal63)
            ;
            adaptor.addChild(root_0, char_literal63_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1014);
            block_multiline_wrapper64=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper64.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal66=null;
        ObjcParser.classical_param_return classical_param65 =null;

        ObjcParser.classical_param_return classical_param67 =null;


        Object char_literal66_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1030);
            classical_param65=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param65.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:22: ( ',' classical_param )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==125) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:23: ',' classical_param
            	    {
            	    char_literal66=(Token)match(input,125,FOLLOW_125_in_block_params1033); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal66);


            	    pushFollow(FOLLOW_classical_param_in_block_params1035);
            	    classical_param67=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param67.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:218:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline68 =null;

        ObjcParser.block_singleline_return block_singleline69 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==196) ) {
                alt14=1;
            }
            else if ( (LA14_0==ID||LA14_0==MULTI_COMMENT_LIT||LA14_0==SINGLE_COMMENT_LIT||LA14_0==116||LA14_0==118||LA14_0==120||LA14_0==134||LA14_0==160||LA14_0==166||LA14_0==170||LA14_0==173||(LA14_0 >= 175 && LA14_0 <= 176)||(LA14_0 >= 179 && LA14_0 <= 180)||LA14_0==182||LA14_0==186||LA14_0==190||LA14_0==195) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1064);
                    block_multiline68=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline68.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 219:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1076);
                    block_singleline69=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline69.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:1: block_multiline : '{' ( block_internal )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal70=null;
        Token char_literal72=null;
        ObjcParser.block_internal_return block_internal71 =null;


        Object char_literal70_tree=null;
        Object char_literal72_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:224:2: ( '{' ( block_internal )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:3: '{' ( block_internal )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal70=(Token)match(input,196,FOLLOW_196_in_block_multiline1098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: ( block_internal )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==MULTI_COMMENT_LIT||LA15_0==SINGLE_COMMENT_LIT||LA15_0==116||LA15_0==118||LA15_0==120||LA15_0==134||LA15_0==160||(LA15_0 >= 162 && LA15_0 <= 163)||LA15_0==166||LA15_0==170||(LA15_0 >= 172 && LA15_0 <= 173)||(LA15_0 >= 175 && LA15_0 <= 177)||(LA15_0 >= 179 && LA15_0 <= 182)||(LA15_0 >= 184 && LA15_0 <= 190)||(LA15_0 >= 192 && LA15_0 <= 196)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: block_internal
            	    {
            	    pushFollow(FOLLOW_block_internal_in_block_multiline1103);
            	    block_internal71=block_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal71.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            char_literal72=(Token)match(input,200,FOLLOW_200_in_block_multiline1110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal72_tree = 
            (Object)adaptor.create(char_literal72)
            ;
            adaptor.addChild(root_0, char_literal72_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline73 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1122);
            block_multiline73=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline73.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline74 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1143);
            block_singleline74=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline74.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:238:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal84=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper75 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper76 =null;

        ObjcParser.do_stmt_return do_stmt77 =null;

        ObjcParser.if_stmt_return if_stmt78 =null;

        ObjcParser.else_stmt_return else_stmt79 =null;

        ObjcParser.switch_stmt_return switch_stmt80 =null;

        ObjcParser.return_stmt_return return_stmt81 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper82 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper83 =null;

        ObjcParser.break_stmt_return break_stmt85 =null;

        ObjcParser.continue_stmt_return continue_stmt86 =null;

        ObjcParser.goto_stmt_return goto_stmt87 =null;

        ObjcParser.method_msg_return method_msg88 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper89 =null;

        ObjcParser.comments_return comments90 =null;


        Object char_literal84_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt16=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA16_1 = input.LA(2);

                if ( ((LA16_1 >= 129 && LA16_1 <= 130)) ) {
                    int LA16_20 = input.LA(3);

                    if ( (LA16_20==ID) ) {
                        int LA16_24 = input.LA(4);

                        if ( (LA16_24==118) && (synpred2_Objc())) {
                            alt16=1;
                        }
                        else if ( ((LA16_24 >= 129 && LA16_24 <= 130)) ) {
                            int LA16_26 = input.LA(5);

                            if ( (synpred2_Objc()) ) {
                                alt16=1;
                            }
                            else if ( (true) ) {
                                alt16=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 16, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA16_24==117||LA16_24==121||LA16_24==124||LA16_24==128||LA16_24==132||LA16_24==137||LA16_24==139||LA16_24==144||LA16_24==198) ) {
                            alt16=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 16, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 16, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA16_1==118) && (synpred2_Objc())) {
                    alt16=1;
                }
                else if ( (LA16_1==117||LA16_1==121||LA16_1==124||LA16_1==128||LA16_1==132||LA16_1==137||LA16_1==139||LA16_1==144||LA16_1==166||LA16_1==198) ) {
                    alt16=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
                }
                break;
            case 160:
                {
                alt16=2;
                }
                break;
            case 175:
                {
                alt16=3;
                }
                break;
            case 182:
                {
                alt16=4;
                }
                break;
            case 176:
                {
                alt16=5;
                }
                break;
            case 190:
                {
                alt16=6;
                }
                break;
            case 186:
                {
                alt16=7;
                }
                break;
            case 179:
                {
                alt16=8;
                }
                break;
            case 195:
                {
                alt16=9;
                }
                break;
            case 134:
                {
                alt16=10;
                }
                break;
            case 170:
                {
                alt16=11;
                }
                break;
            case 173:
                {
                alt16=12;
                }
                break;
            case 180:
                {
                alt16=13;
                }
                break;
            case 166:
                {
                alt16=14;
                }
                break;
            case 116:
            case 118:
            case 120:
                {
                alt16=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt16=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1170);
                    classical_method_call_wrapper75=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper75.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1175);
                    synchronized_call_wrapper76=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper76.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1180);
                    do_stmt77=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt77.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1185);
                    if_stmt78=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt78.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1190);
                    else_stmt79=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt79.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1195);
                    switch_stmt80=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt80.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1200);
                    return_stmt81=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt81.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1205);
                    for_stmt_wrapper82=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper82.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1210);
                    while_stmt_wrapper83=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper83.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal84=(Token)match(input,134,FOLLOW_134_in_block_singleline1215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = 
                    (Object)adaptor.create(char_literal84)
                    ;
                    adaptor.addChild(root_0, char_literal84_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1221);
                    break_stmt85=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt85.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1227);
                    continue_stmt86=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt86.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1232);
                    goto_stmt87=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt87.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1237);
                    method_msg88=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg88.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1243);
                    variable_assignment_wrapper89=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper89.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1249);
                    comments90=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:257:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal107=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper91 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper92 =null;

        ObjcParser.increment_decrement_return increment_decrement93 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper94 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper95 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper96 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper97 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper98 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper99 =null;

        ObjcParser.do_stmt_return do_stmt100 =null;

        ObjcParser.if_stmt_return if_stmt101 =null;

        ObjcParser.else_stmt_return else_stmt102 =null;

        ObjcParser.switch_stmt_return switch_stmt103 =null;

        ObjcParser.return_stmt_return return_stmt104 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper105 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper106 =null;

        ObjcParser.break_stmt_return break_stmt108 =null;

        ObjcParser.continue_stmt_return continue_stmt109 =null;

        ObjcParser.goto_stmt_return goto_stmt110 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper111 =null;

        ObjcParser.method_msg_return method_msg112 =null;

        ObjcParser.comments_return comments113 =null;


        Object char_literal107_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments )
            int alt17=22;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1266);
                    classical_method_call_wrapper91=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper91.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1279);
                    object_access_simple_wrapper92=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper92.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1281);
                    increment_decrement93=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement93.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1295);
                    variable_assignment_wrapper94=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper94.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1301);
                    variable_declaration_wrapper95=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper95.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1307);
                    synchronized_call_wrapper96=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper96.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1313);
                    try_stmt_wrapper97=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper97.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1318);
                    throw_stmt_wrapper98=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper98.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1323);
                    static_declaration_wrapper99=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper99.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1328);
                    do_stmt100=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt100.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1333);
                    if_stmt101=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt101.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1338);
                    else_stmt102=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt102.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1343);
                    switch_stmt103=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt103.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1348);
                    return_stmt104=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt104.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1353);
                    for_stmt_wrapper105=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper105.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1358);
                    while_stmt_wrapper106=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper106.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal107=(Token)match(input,134,FOLLOW_134_in_block_internal1363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal107_tree = 
                    (Object)adaptor.create(char_literal107)
                    ;
                    adaptor.addChild(root_0, char_literal107_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1368);
                    break_stmt108=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt108.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1373);
                    continue_stmt109=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt109.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1378);
                    goto_stmt110=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt110.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1383);
                    block_multiline_wrapper111=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper111.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1389);
                    method_msg112=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg112.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1395);
                    comments113=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments113.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal114=null;
        Token char_literal115=null;
        Token ID116=null;
        Token char_literal117=null;

        Object string_literal114_tree=null;
        Object char_literal115_tree=null;
        Object ID116_tree=null;
        Object char_literal117_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:5: 'goto' ':' ID ';'
            {
            string_literal114=(Token)match(input,180,FOLLOW_180_in_goto_stmt1407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal114);


            char_literal115=(Token)match(input,133,FOLLOW_133_in_goto_stmt1409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal115);


            ID116=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID116);


            char_literal117=(Token)match(input,134,FOLLOW_134_in_goto_stmt1413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal117);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 283:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt118 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1436);
            while_stmt118=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt118.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal119=null;
        Token char_literal120=null;
        Token char_literal122=null;
        ObjcParser.element_value_return element_value121 =null;

        ObjcParser.block_return block123 =null;


        Object string_literal119_tree=null;
        Object char_literal120_tree=null;
        Object char_literal122_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal119=(Token)match(input,195,FOLLOW_195_in_while_stmt1459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal119_tree = 
            (Object)adaptor.create(string_literal119)
            ;
            adaptor.addChild(root_0, string_literal119_tree);
            }

            char_literal120=(Token)match(input,118,FOLLOW_118_in_while_stmt1461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal120_tree = 
            (Object)adaptor.create(char_literal120)
            ;
            adaptor.addChild(root_0, char_literal120_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1463);
            element_value121=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value121.getTree());

            char_literal122=(Token)match(input,119,FOLLOW_119_in_while_stmt1465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal122_tree = 
            (Object)adaptor.create(char_literal122)
            ;
            adaptor.addChild(root_0, char_literal122_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1467);
            block123=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block123.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal124=null;
        ObjcParser.element_value_return element_value125 =null;


        Object string_literal124_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:5: 'in' element_value
            {
            string_literal124=(Token)match(input,183,FOLLOW_183_in_for_in_stmt1482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal124);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1484);
            element_value125=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value125.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal126=null;
        Token char_literal128=null;
        ObjcParser.element_value_return element_value127 =null;

        ObjcParser.element_value_return element_value129 =null;


        Object char_literal126_tree=null;
        Object char_literal128_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal126=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal126_tree = 
            (Object)adaptor.create(char_literal126)
            ;
            adaptor.addChild(root_0, char_literal126_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:9: ( element_value )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==BOOL_LITERAL||LA18_0==CHAR_LITERAL||LA18_0==ID||LA18_0==NUMBER_LITERAL||(LA18_0 >= STRING_LITERAL && LA18_0 <= STRING_OBJC)||LA18_0==112||LA18_0==116||LA18_0==118||LA18_0==120||LA18_0==123||(LA18_0 >= 126 && LA18_0 <= 127)||LA18_0==159||LA18_0==166||(LA18_0 >= 168 && LA18_0 <= 169)||LA18_0==201) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1509);
                    element_value127=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value127.getTree());

                    }
                    break;

            }


            char_literal128=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal128_tree = 
            (Object)adaptor.create(char_literal128)
            ;
            adaptor.addChild(root_0, char_literal128_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:28: ( element_value )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BOOL_LITERAL||LA19_0==CHAR_LITERAL||LA19_0==ID||LA19_0==NUMBER_LITERAL||(LA19_0 >= STRING_LITERAL && LA19_0 <= STRING_OBJC)||LA19_0==112||LA19_0==116||LA19_0==118||LA19_0==120||LA19_0==123||(LA19_0 >= 126 && LA19_0 <= 127)||LA19_0==159||LA19_0==166||(LA19_0 >= 168 && LA19_0 <= 169)||LA19_0==201) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1514);
                    element_value129=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value129.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal132=null;
        Token char_literal136=null;
        Token char_literal140=null;
        Token char_literal147=null;
        ObjcParser.name_return name130 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt131 =null;

        ObjcParser.block_return block133 =null;

        ObjcParser.name_return name134 =null;

        ObjcParser.for_in_stmt_return for_in_stmt135 =null;

        ObjcParser.block_return block137 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper138 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt139 =null;

        ObjcParser.block_return block141 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple142 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper143 =null;

        ObjcParser.element_value_return element_value144 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt145 =null;

        ObjcParser.for_in_stmt_return for_in_stmt146 =null;

        ObjcParser.block_return block148 =null;


        Object char_literal132_tree=null;
        Object char_literal136_tree=null;
        Object char_literal140_tree=null;
        Object char_literal147_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt21=4;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1537);
                    name130=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name130.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1539);
                    for_classic_stmt131=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt131.getTree());

                    char_literal132=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal132_tree = 
                    (Object)adaptor.create(char_literal132)
                    ;
                    adaptor.addChild(root_0, char_literal132_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1543);
                    block133=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block133.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1556);
                    name134=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name134.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1558);
                    for_in_stmt135=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt135.getTree());

                    char_literal136=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal136_tree = 
                    (Object)adaptor.create(char_literal136)
                    ;
                    adaptor.addChild(root_0, char_literal136_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1562);
                    block137=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block137.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1576);
                    variable_assignment_wrapper138=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper138.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1578);
                    for_classic_stmt139=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt139.getTree());

                    char_literal140=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal140_tree = 
                    (Object)adaptor.create(char_literal140)
                    ;
                    adaptor.addChild(root_0, char_literal140_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1582);
                    block141=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block141.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1588);
                    field_declaration_simple142=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple142.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==117||LA20_0==121||LA20_0==124||LA20_0==128||LA20_0==132||LA20_0==137||LA20_0==139||LA20_0==144||LA20_0==198) ) {
                        alt20=1;
                    }
                    else if ( (LA20_0==183) ) {
                        alt20=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 20, 0, input);

                        throw nvae;

                    }
                    switch (alt20) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1592);
                            op_assign_wrapper143=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper143.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1594);
                            element_value144=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value144.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1596);
                            for_classic_stmt145=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt145.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1601);
                            for_in_stmt146=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt146.getTree());

                            }
                            break;

                    }


                    char_literal147=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal147_tree = 
                    (Object)adaptor.create(char_literal147)
                    ;
                    adaptor.addChild(root_0, char_literal147_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1606);
                    block148=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block148.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal149=null;
        Token char_literal150=null;
        ObjcParser.for_stmt_body_return for_stmt_body151 =null;


        Object string_literal149_tree=null;
        Object char_literal150_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal149=(Token)match(input,179,FOLLOW_179_in_for_stmt1619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal149_tree = 
            (Object)adaptor.create(string_literal149)
            ;
            adaptor.addChild(root_0, string_literal149_tree);
            }

            char_literal150=(Token)match(input,118,FOLLOW_118_in_for_stmt1621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal150_tree = 
            (Object)adaptor.create(char_literal150)
            ;
            adaptor.addChild(root_0, char_literal150_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1623);
            for_stmt_body151=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body151.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt152 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1636);
            for_stmt152=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt152.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal153=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon154 =null;


        Object string_literal153_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:5: 'return' element_value_or_semicolon
            {
            string_literal153=(Token)match(input,186,FOLLOW_186_in_return_stmt1659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal153);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1661);
            element_value_or_semicolon154=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon154.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal155=null;
        Token char_literal156=null;
        Token char_literal158=null;
        Token char_literal159=null;
        Token char_literal161=null;
        ObjcParser.element_value_return element_value157 =null;

        ObjcParser.switch_body_return switch_body160 =null;


        Object string_literal155_tree=null;
        Object char_literal156_tree=null;
        Object char_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal161_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal155=(Token)match(input,190,FOLLOW_190_in_switch_stmt1684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal155);


            char_literal156=(Token)match(input,118,FOLLOW_118_in_switch_stmt1686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal156);


            pushFollow(FOLLOW_element_value_in_switch_stmt1688);
            element_value157=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value157.getTree());

            char_literal158=(Token)match(input,119,FOLLOW_119_in_switch_stmt1690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal158);


            char_literal159=(Token)match(input,196,FOLLOW_196_in_switch_stmt1692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(char_literal159);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:41: ( switch_body )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==ID||LA22_0==MULTI_COMMENT_LIT||LA22_0==SINGLE_COMMENT_LIT||LA22_0==116||LA22_0==118||LA22_0==120||LA22_0==134||LA22_0==160||LA22_0==166||(LA22_0 >= 170 && LA22_0 <= 171)||(LA22_0 >= 173 && LA22_0 <= 176)||(LA22_0 >= 179 && LA22_0 <= 180)||LA22_0==182||LA22_0==186||LA22_0==190||(LA22_0 >= 195 && LA22_0 <= 196)) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1695);
            	    switch_body160=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body160.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }


            char_literal161=(Token)match(input,200,FOLLOW_200_in_switch_stmt1699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(char_literal161);


            // AST REWRITE
            // elements: element_value, switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt162 =null;

        ObjcParser.default_stmt_return default_stmt163 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper164 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper165 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt23=4;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt23=1;
                }
                break;
            case 174:
                {
                alt23=2;
                }
                break;
            case 196:
                {
                alt23=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 116:
            case 118:
            case 120:
            case 134:
            case 160:
            case 166:
            case 170:
            case 173:
            case 175:
            case 176:
            case 179:
            case 180:
            case 182:
            case 186:
            case 190:
            case 195:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1725);
                    case_stmt162=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt162.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1731);
                    default_stmt163=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt163.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1737);
                    block_multiline_wrapper164=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper164.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1743);
                    block_singleline_wrapper165=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper165.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal166=null;
        Token char_literal168=null;
        ObjcParser.name_number_return name_number167 =null;


        Object string_literal166_tree=null;
        Object char_literal168_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: 'case' name_number ':'
            {
            string_literal166=(Token)match(input,171,FOLLOW_171_in_case_stmt1758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal166);


            pushFollow(FOLLOW_name_number_in_case_stmt1760);
            name_number167=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number167.getTree());

            char_literal168=(Token)match(input,133,FOLLOW_133_in_case_stmt1762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal168);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal169=null;
        Token char_literal170=null;

        Object string_literal169_tree=null;
        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:5: 'default' ':'
            {
            string_literal169=(Token)match(input,174,FOLLOW_174_in_default_stmt1785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal169);


            char_literal170=(Token)match(input,133,FOLLOW_133_in_default_stmt1787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal170);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal171=null;
        Token string_literal173=null;
        Token char_literal174=null;
        Token char_literal176=null;
        ObjcParser.block_return block172 =null;

        ObjcParser.element_value_return element_value175 =null;


        Object string_literal171_tree=null;
        Object string_literal173_tree=null;
        Object char_literal174_tree=null;
        Object char_literal176_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal171=(Token)match(input,175,FOLLOW_175_in_do_stmt1808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal171);


            pushFollow(FOLLOW_block_in_do_stmt1810);
            block172=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block172.getTree());

            string_literal173=(Token)match(input,195,FOLLOW_195_in_do_stmt1812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal173);


            char_literal174=(Token)match(input,118,FOLLOW_118_in_do_stmt1814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal174);


            pushFollow(FOLLOW_element_value_in_do_stmt1816);
            element_value175=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value175.getTree());

            char_literal176=(Token)match(input,119,FOLLOW_119_in_do_stmt1818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal176);


            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal177=null;
        Token char_literal178=null;
        Token char_literal180=null;
        ObjcParser.element_value_return element_value179 =null;

        ObjcParser.block_return block181 =null;


        Object string_literal177_tree=null;
        Object char_literal178_tree=null;
        Object char_literal180_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:5: 'if' '(' element_value ')' block
            {
            string_literal177=(Token)match(input,182,FOLLOW_182_in_if_stmt1843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal177);


            char_literal178=(Token)match(input,118,FOLLOW_118_in_if_stmt1845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal178);


            pushFollow(FOLLOW_element_value_in_if_stmt1847);
            element_value179=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value179.getTree());

            char_literal180=(Token)match(input,119,FOLLOW_119_in_if_stmt1849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal180);


            pushFollow(FOLLOW_block_in_if_stmt1851);
            block181=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block181.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal182=null;
        ObjcParser.block_return block183 =null;


        Object string_literal182_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:5: 'else' block
            {
            string_literal182=(Token)match(input,176,FOLLOW_176_in_else_stmt1874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal182);


            pushFollow(FOLLOW_block_in_else_stmt1876);
            block183=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block183.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal184=null;
        ObjcParser.block_return block185 =null;

        ObjcParser.catch_stmt_return catch_stmt186 =null;

        ObjcParser.finally_stmt_return finally_stmt187 =null;


        Object string_literal184_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal184=(Token)match(input,163,FOLLOW_163_in_try_stmt_wrapper1898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal184);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1901);
            block185=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block185.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:19: ( catch_stmt )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==146) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1904);
            	    catch_stmt186=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt186.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:31: ( finally_stmt )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==150) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1907);
                    finally_stmt187=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt187.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: block, catch_stmt, finally_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal188=null;
        Token char_literal189=null;
        Token char_literal191=null;
        Token char_literal193=null;
        ObjcParser.name_return name190 =null;

        ObjcParser.name_return name192 =null;

        ObjcParser.block_return block194 =null;


        Object string_literal188_tree=null;
        Object char_literal189_tree=null;
        Object char_literal191_tree=null;
        Object char_literal193_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:4: '@catch' '(' name '*' name ')' block
            {
            string_literal188=(Token)match(input,146,FOLLOW_146_in_catch_stmt1933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal188);


            char_literal189=(Token)match(input,118,FOLLOW_118_in_catch_stmt1936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal189);


            pushFollow(FOLLOW_name_in_catch_stmt1939);
            name190=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name190.getTree());

            char_literal191=(Token)match(input,120,FOLLOW_120_in_catch_stmt1942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal191);


            pushFollow(FOLLOW_name_in_catch_stmt1944);
            name192=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name192.getTree());

            char_literal193=(Token)match(input,119,FOLLOW_119_in_catch_stmt1947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal193);


            pushFollow(FOLLOW_block_in_catch_stmt1950);
            block194=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block194.getTree());

            // AST REWRITE
            // elements: name, block, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal195=null;
        ObjcParser.block_return block196 =null;


        Object string_literal195_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:4: '@finally' block
            {
            string_literal195=(Token)match(input,150,FOLLOW_150_in_finally_stmt1974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal195);


            pushFollow(FOLLOW_block_in_finally_stmt1977);
            block196=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block196.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt197 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1996);
            throw_stmt197=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt197.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token char_literal200=null;
        ObjcParser.element_value_return element_value199 =null;


        Object string_literal198_tree=null;
        Object char_literal200_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:369:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:369:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,162,FOLLOW_162_in_throw_stmt2015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2017);
            element_value199=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value199.getTree());

            char_literal200=(Token)match(input,134,FOLLOW_134_in_throw_stmt2019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal200_tree = 
            (Object)adaptor.create(char_literal200)
            ;
            adaptor.addChild(root_0, char_literal200_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID201=null;

        Object ID201_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:4: ID
            {
            ID201=(Token)match(input,ID,FOLLOW_ID_in_name2030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID201);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:376:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID202=null;
        Token char_literal203=null;
        Token NUMBER_LITERAL204=null;

        Object ID202_tree=null;
        Object char_literal203_tree=null;
        Object NUMBER_LITERAL204_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID) ) {
                alt27=1;
            }
            else if ( (LA27_0==NUMBER_LITERAL||LA27_0==126) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:5: ID
                    {
                    ID202=(Token)match(input,ID,FOLLOW_ID_in_name_number2050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID202);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 377:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:5: ( '-' )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==126) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:5: '-'
                            {
                            char_literal203=(Token)match(input,126,FOLLOW_126_in_name_number2064); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal203);


                            }
                            break;

                    }


                    NUMBER_LITERAL204=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL204);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL, 126
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:37: ( '-' )?
                        if ( stream_126.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_126.nextNode()
                            );

                        }
                        stream_126.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper205 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2093);
            field_declaration_wrapper205=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper205.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment206 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2116);
            variable_assignment206=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment206.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper207 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper208 =null;

        ObjcParser.element_value_return element_value209 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2139);
            object_access_wrapper207=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper207.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2141);
            op_assign_wrapper208=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper208.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2143);
            element_value209=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value209.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper210 =null;

        ObjcParser.increment_decrement_return increment_decrement211 =null;

        ObjcParser.increment_decrement_return increment_decrement212 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper213 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==118) && (synpred9_Objc())) {
                alt28=1;
            }
            else if ( (LA28_0==116) && (synpred9_Objc())) {
                alt28=1;
            }
            else if ( (LA28_0==ID) && (synpred9_Objc())) {
                alt28=1;
            }
            else if ( (LA28_0==120) && (synpred9_Objc())) {
                alt28=1;
            }
            else if ( (LA28_0==123||LA28_0==127) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2164);
                    object_access_wrapper210=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper210.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2166);
                    increment_decrement211=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement211.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2172);
                    increment_decrement212=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement212.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2174);
                    object_access_wrapper213=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper213.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper214 =null;

        ObjcParser.method_implementation_common_return method_implementation_common215 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2189);
            method_modifier_wrapper214=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper214.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2191);
            method_implementation_common215=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common215.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal216=null;
        Token char_literal218=null;
        ObjcParser.type_declaration_return type_declaration217 =null;

        ObjcParser.method_name_return method_name219 =null;

        ObjcParser.method_params_return method_params220 =null;


        Object char_literal216_tree=null;
        Object char_literal218_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:6: '(' type_declaration ')' method_name
            {
            char_literal216=(Token)match(input,118,FOLLOW_118_in_method_implementation_common2204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal216_tree = 
            (Object)adaptor.create(char_literal216)
            ;
            adaptor.addChild(root_0, char_literal216_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2206);
            type_declaration217=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration217.getTree());

            char_literal218=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal218_tree = 
            (Object)adaptor.create(char_literal218)
            ;
            adaptor.addChild(root_0, char_literal218_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2210);
            method_name219=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name219.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:44: ( method_params )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==ID||LA29_0==133) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2213);
                    method_params220=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params220.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation221 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper222 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2225);
            method_implementation221=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation221.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2229);
            block_multiline_wrapper222=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper222.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call223 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2252);
            classical_method_call223=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call223.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:413:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal227=null;
        ObjcParser.name_return name224 =null;

        ObjcParser.access_wrapper_return access_wrapper225 =null;

        ObjcParser.name_return name226 =null;


        Object char_literal227_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2273);
            name224=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name224.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:10: ( access_wrapper name )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( ((LA30_0 >= 129 && LA30_0 <= 130)) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2276);
            	    access_wrapper225=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper225.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2278);
            	    name226=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name226.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            char_literal227=(Token)match(input,118,FOLLOW_118_in_clasical_method_call_predicate2282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal227_tree = 
            (Object)adaptor.create(char_literal227)
            ;
            adaptor.addChild(root_0, char_literal227_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal231=null;
        Token char_literal233=null;
        ObjcParser.name_return name228 =null;

        ObjcParser.access_wrapper_return access_wrapper229 =null;

        ObjcParser.name_return name230 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push232 =null;


        Object char_literal231_tree=null;
        Object char_literal233_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2297);
            name228=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name228.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:10: ( access_wrapper name )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0 >= 129 && LA31_0 <= 130)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2300);
            	    access_wrapper229=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper229.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2302);
            	    name230=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name230.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal231=(Token)match(input,118,FOLLOW_118_in_classical_method_call2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal231_tree = 
            (Object)adaptor.create(char_literal231)
            ;
            adaptor.addChild(root_0, char_literal231_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:38: ( classical_method_params_push )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BOOL_LITERAL||LA32_0==CHAR_LITERAL||LA32_0==ID||LA32_0==NUMBER_LITERAL||(LA32_0 >= STRING_LITERAL && LA32_0 <= STRING_OBJC)||LA32_0==112||LA32_0==116||LA32_0==118||LA32_0==120||LA32_0==123||(LA32_0 >= 126 && LA32_0 <= 127)||LA32_0==159||LA32_0==166||(LA32_0 >= 168 && LA32_0 <= 169)||LA32_0==201) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2309);
                    classical_method_params_push232=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push232.getTree());

                    }
                    break;

            }


            char_literal233=(Token)match(input,119,FOLLOW_119_in_classical_method_call2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal233_tree = 
            (Object)adaptor.create(char_literal233)
            ;
            adaptor.addChild(root_0, char_literal233_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal235=null;
        ObjcParser.method_param_push_return method_param_push234 =null;

        ObjcParser.method_param_push_return method_param_push236 =null;


        Object char_literal235_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2327);
            method_param_push234=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push234.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:24: ( ',' method_param_push )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==125) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:25: ',' method_param_push
            	    {
            	    char_literal235=(Token)match(input,125,FOLLOW_125_in_classical_method_params_push2330); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal235);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2332);
            	    method_param_push236=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push236.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal239=null;
        Token char_literal240=null;
        ObjcParser.method_param_push_return method_param_push237 =null;

        ObjcParser.prefix_return prefix238 =null;

        ObjcParser.method_param_push_return method_param_push241 =null;


        Object char_literal239_tree=null;
        Object char_literal240_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2356);
            method_param_push237=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push237.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ID||LA35_0==125) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:23: ( ( prefix ':' ) | ',' )
            	    int alt34=2;
            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0==ID) ) {
            	        alt34=1;
            	    }
            	    else if ( (LA34_0==125) ) {
            	        alt34=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 34, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt34) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2361);
            	            prefix238=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix238.getTree());

            	            char_literal239=(Token)match(input,133,FOLLOW_133_in_method_params_push2363); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_133.add(char_literal239);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:39: ','
            	            {
            	            char_literal240=(Token)match(input,125,FOLLOW_125_in_method_params_push2368); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_125.add(char_literal240);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2371);
            	    method_param_push241=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push241.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:1: method_param_push : element_value ( multi_comment )? -> ^( METHOD_PARAM element_value ( multi_comment )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.element_value_return element_value242 =null;

        ObjcParser.multi_comment_return multi_comment243 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_multi_comment=new RewriteRuleSubtreeStream(adaptor,"rule multi_comment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:3: ( element_value ( multi_comment )? -> ^( METHOD_PARAM element_value ( multi_comment )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:5: element_value ( multi_comment )?
            {
            pushFollow(FOLLOW_element_value_in_method_param_push2392);
            element_value242=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value242.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:19: ( multi_comment )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==MULTI_COMMENT_LIT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:19: multi_comment
                    {
                    pushFollow(FOLLOW_multi_comment_in_method_param_push2394);
                    multi_comment243=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_multi_comment.add(multi_comment243.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: multi_comment, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:34: -> ^( METHOD_PARAM element_value ( multi_comment )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:37: ^( METHOD_PARAM element_value ( multi_comment )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:66: ( multi_comment )?
                if ( stream_multi_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_comment.nextTree());

                }
                stream_multi_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal244=null;
        Token char_literal247=null;
        Token char_literal249=null;
        ObjcParser.element_value_return element_value245 =null;

        ObjcParser.method_name_return method_name246 =null;

        ObjcParser.method_params_push_return method_params_push248 =null;


        Object char_literal244_tree=null;
        Object char_literal247_tree=null;
        Object char_literal249_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal244=(Token)match(input,166,FOLLOW_166_in_method_msg2420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(char_literal244);


            pushFollow(FOLLOW_element_value_in_method_msg2422);
            element_value245=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value245.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2424);
            method_name246=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name246.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:35: ( ':' method_params_push )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==133) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:36: ':' method_params_push
                    {
                    char_literal247=(Token)match(input,133,FOLLOW_133_in_method_msg2427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal247);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2429);
                    method_params_push248=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push248.getTree());

                    }
                    break;

            }


            char_literal249=(Token)match(input,167,FOLLOW_167_in_method_msg2433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(char_literal249);


            // AST REWRITE
            // elements: method_name, method_params_push, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal250=null;
        Token char_literal252=null;
        ObjcParser.element_value_return element_value251 =null;

        ObjcParser.element_value_return element_value253 =null;


        Object char_literal250_tree=null;
        Object char_literal252_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:6: '?' element_value ':' element_value
            {
            char_literal250=(Token)match(input,145,FOLLOW_145_in_questionmark_if_stmt2459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(char_literal250);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2461);
            element_value251=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value251.getTree());

            char_literal252=(Token)match(input,133,FOLLOW_133_in_questionmark_if_stmt2463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal252);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2465);
            element_value253=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value253.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression254 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2490);
            simple_expression254=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression254.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal255=null;
        ObjcParser.element_value_return element_value256 =null;


        Object char_literal255_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:5: ( ';' | element_value )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==134) ) {
                alt38=1;
            }
            else if ( (LA38_0==BOOL_LITERAL||LA38_0==CHAR_LITERAL||LA38_0==ID||LA38_0==NUMBER_LITERAL||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_OBJC)||LA38_0==112||LA38_0==116||LA38_0==118||LA38_0==120||LA38_0==123||(LA38_0 >= 126 && LA38_0 <= 127)||LA38_0==159||LA38_0==166||(LA38_0 >= 168 && LA38_0 <= 169)||LA38_0==201) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:6: ';'
                    {
                    char_literal255=(Token)match(input,134,FOLLOW_134_in_element_value_or_semicolon2513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal255_tree = 
                    (Object)adaptor.create(char_literal255)
                    ;
                    adaptor.addChild(root_0, char_literal255_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2517);
                    element_value256=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value256.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:1: array_init : element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal258=null;
        ObjcParser.element_value_or_array_init_return element_value_or_array_init257 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init259 =null;


        Object char_literal258_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:3: ( element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2534);
            element_value_or_array_init257=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init257.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:33: ( ',' element_value_or_array_init )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==125) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:34: ',' element_value_or_array_init
            	    {
            	    char_literal258=(Token)match(input,125,FOLLOW_125_in_array_init2537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal258_tree = 
            	    (Object)adaptor.create(char_literal258)
            	    ;
            	    adaptor.addChild(root_0, char_literal258_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2539);
            	    element_value_or_array_init259=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init259.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:453:1: element_value_or_array_init : ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal260=null;
        Token char_literal262=null;
        ObjcParser.array_init_return array_init261 =null;

        ObjcParser.element_value_return element_value263 =null;


        Object char_literal260_tree=null;
        Object char_literal262_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:3: ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==196) ) {
                alt41=1;
            }
            else if ( (LA41_0==BOOL_LITERAL||LA41_0==CHAR_LITERAL||LA41_0==ID||LA41_0==NUMBER_LITERAL||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_OBJC)||LA41_0==112||LA41_0==116||LA41_0==118||LA41_0==120||LA41_0==123||(LA41_0 >= 126 && LA41_0 <= 127)||LA41_0==159||LA41_0==166||(LA41_0 >= 168 && LA41_0 <= 169)||LA41_0==201) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:5: '{' ( array_init )? '}'
                    {
                    char_literal260=(Token)match(input,196,FOLLOW_196_in_element_value_or_array_init2556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(char_literal260);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:9: ( array_init )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==BOOL_LITERAL||LA40_0==CHAR_LITERAL||LA40_0==ID||LA40_0==NUMBER_LITERAL||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_OBJC)||LA40_0==112||LA40_0==116||LA40_0==118||LA40_0==120||LA40_0==123||(LA40_0 >= 126 && LA40_0 <= 127)||LA40_0==159||LA40_0==166||(LA40_0 >= 168 && LA40_0 <= 169)||LA40_0==196||LA40_0==201) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2558);
                            array_init261=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init261.getTree());

                            }
                            break;

                    }


                    char_literal262=(Token)match(input,200,FOLLOW_200_in_element_value_or_array_init2561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(char_literal262);


                    // AST REWRITE
                    // elements: array_init
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 454:26: -> ^( ARRAY_INIT ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:29: ^( ARRAY_INIT ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:42: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2577);
                    element_value263=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value263.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:458:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set264=null;

        Object set264_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set264=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set264)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1265 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt266 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2612);
            cast_unary_expression1265=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1265.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop42:
            do {
                int alt42=2;
                switch ( input.LA(1) ) {
                case 116:
                    {
                    alt42=1;
                    }
                    break;
                case 120:
                    {
                    alt42=1;
                    }
                    break;
                case 122:
                case 126:
                    {
                    alt42=1;
                    }
                    break;
                case 145:
                    {
                    alt42=1;
                    }
                    break;
                case 113:
                case 115:
                case 131:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 168:
                case 197:
                case 199:
                    {
                    alt42=1;
                    }
                    break;

                }

                switch (alt42) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2614);
            	    op2_unary_expression_or_questionmark_if_stmt266=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt266.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal267=null;
        ObjcParser.cast_expression_return cast_expression268 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression269 =null;


        Object char_literal267_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==126) ) {
                alt43=1;
            }
            else if ( (LA43_0==BOOL_LITERAL||LA43_0==CHAR_LITERAL||LA43_0==ID||LA43_0==NUMBER_LITERAL||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_OBJC)||LA43_0==112||LA43_0==116||LA43_0==118||LA43_0==120||LA43_0==123||LA43_0==127||LA43_0==159||LA43_0==166||(LA43_0 >= 168 && LA43_0 <= 169)||LA43_0==201) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: '-' cast_expression
                    {
                    char_literal267=(Token)match(input,126,FOLLOW_126_in_cast_unary_expression12629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal267);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12631);
                    cast_expression268=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression268.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 467:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12645);
                    cast_unary_expression269=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression269.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper270 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1271 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt272 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==113||(LA44_0 >= 115 && LA44_0 <= 116)||LA44_0==120||LA44_0==122||LA44_0==126||LA44_0==131||(LA44_0 >= 135 && LA44_0 <= 136)||(LA44_0 >= 138 && LA44_0 <= 143)||LA44_0==168||LA44_0==197||LA44_0==199) ) {
                alt44=1;
            }
            else if ( (LA44_0==145) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2659);
                    op2_wrapper270=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper270.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2661);
                    cast_unary_expression1271=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1271.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2668);
                    questionmark_if_stmt272=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal275=null;
        Token char_literal277=null;
        ObjcParser.cast_expression_return cast_expression273 =null;

        ObjcParser.increment_decrement_return increment_decrement274 =null;

        ObjcParser.cast_expression_return cast_expression276 =null;

        ObjcParser.cast_expression_return cast_expression278 =null;

        ObjcParser.increment_decrement_return increment_decrement279 =null;

        ObjcParser.cast_expression_return cast_expression280 =null;


        Object char_literal275_tree=null;
        Object char_literal277_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt46=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 116:
            case 118:
            case 120:
            case 159:
            case 166:
            case 168:
            case 169:
                {
                alt46=1;
                }
                break;
            case 112:
                {
                alt46=2;
                }
                break;
            case 201:
                {
                alt46=3;
                }
                break;
            case 123:
            case 127:
                {
                alt46=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2681);
                    cast_expression273=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression273.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:21: ( increment_decrement )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==123||LA45_0==127) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2683);
                            increment_decrement274=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement274.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: '!' cast_expression
                    {
                    char_literal275=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal275);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2692);
                    cast_expression276=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression276.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 478:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:5: '~' cast_expression
                    {
                    char_literal277=(Token)match(input,201,FOLLOW_201_in_cast_unary_expression2706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal277);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2708);
                    cast_expression278=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression278.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 479:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2722);
                    increment_decrement279=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement279.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2724);
                    cast_expression280=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal283=null;
        Token char_literal286=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper281 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access282 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper284 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access285 =null;

        ObjcParser.access_wrapper_return access_wrapper287 =null;

        ObjcParser.name_return name288 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access289 =null;


        Object char_literal283_tree=null;
        Object char_literal286_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access )
            int alt48=3;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2742);
                    type_cast_wrapper281=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper281.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2744);
                    simple_expression_value_access282=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access282.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal283=(Token)match(input,118,FOLLOW_118_in_cast_expression2763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal283_tree = 
                    (Object)adaptor.create(char_literal283)
                    ;
                    adaptor.addChild(root_0, char_literal283_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2765);
                    type_cast_wrapper284=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper284.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2767);
                    simple_expression_value_access285=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access285.getTree());

                    char_literal286=(Token)match(input,119,FOLLOW_119_in_cast_expression2769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal286_tree = 
                    (Object)adaptor.create(char_literal286)
                    ;
                    adaptor.addChild(root_0, char_literal286_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:138: ( access_wrapper name )+
                    int cnt47=0;
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( ((LA47_0 >= 129 && LA47_0 <= 130)) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:139: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2772);
                    	    access_wrapper287=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper287.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_expression2774);
                    	    name288=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name288.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt47 >= 1 ) break loop47;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(47, input);
                                throw eee;
                        }
                        cnt47++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2782);
                    simple_expression_value_access289=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access289.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal291=null;
        Token char_literal293=null;
        Token char_literal295=null;
        Token char_literal296=null;
        Token char_literal300=null;
        Token char_literal302=null;
        ObjcParser.selector_wrapper_return selector_wrapper290 =null;

        ObjcParser.name_return name292 =null;

        ObjcParser.name_return name294 =null;

        ObjcParser.simple_expression_value_return simple_expression_value297 =null;

        ObjcParser.access_wrapper_return access_wrapper298 =null;

        ObjcParser.name_return name299 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push301 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2303 =null;

        ObjcParser.access_wrapper_return access_wrapper304 =null;

        ObjcParser.name_return name305 =null;


        Object char_literal291_tree=null;
        Object char_literal293_tree=null;
        Object char_literal295_tree=null;
        Object char_literal296_tree=null;
        Object char_literal300_tree=null;
        Object char_literal302_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:3: ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt54=3;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2795);
                    selector_wrapper290=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper290.getTree());

                    char_literal291=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal291_tree = 
                    (Object)adaptor.create(char_literal291)
                    ;
                    adaptor.addChild(root_0, char_literal291_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2799);
                    name292=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name292.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:31: ( ':' ( name ':' )* )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==133) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:32: ':' ( name ':' )*
                            {
                            char_literal293=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2802); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal293_tree = 
                            (Object)adaptor.create(char_literal293)
                            ;
                            adaptor.addChild(root_0, char_literal293_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:36: ( name ':' )*
                            loop49:
                            do {
                                int alt49=2;
                                int LA49_0 = input.LA(1);

                                if ( (LA49_0==ID) ) {
                                    alt49=1;
                                }


                                switch (alt49) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access2805);
                            	    name294=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name294.getTree());

                            	    char_literal295=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2807); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal295_tree = 
                            	    (Object)adaptor.create(char_literal295)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal295_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop49;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal296=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal296_tree = 
                    (Object)adaptor.create(char_literal296)
                    ;
                    adaptor.addChild(root_0, char_literal296_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2833);
                    simple_expression_value297=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value297.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:84: ( access_wrapper name )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( ((LA51_0 >= 129 && LA51_0 <= 130)) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2836);
                    	    access_wrapper298=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper298.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2838);
                    	    name299=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name299.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal300=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal300_tree = 
                    (Object)adaptor.create(char_literal300)
                    ;
                    adaptor.addChild(root_0, char_literal300_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:112: ( classical_method_params_push )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==BOOL_LITERAL||LA52_0==CHAR_LITERAL||LA52_0==ID||LA52_0==NUMBER_LITERAL||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_OBJC)||LA52_0==112||LA52_0==116||LA52_0==118||LA52_0==120||LA52_0==123||(LA52_0 >= 126 && LA52_0 <= 127)||LA52_0==159||LA52_0==166||(LA52_0 >= 168 && LA52_0 <= 169)||LA52_0==201) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2845);
                            classical_method_params_push301=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push301.getTree());

                            }
                            break;

                    }


                    char_literal302=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal302_tree = 
                    (Object)adaptor.create(char_literal302)
                    ;
                    adaptor.addChild(root_0, char_literal302_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2855);
                    simple_expression_value2303=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2303.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:30: ( access_wrapper name )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( ((LA53_0 >= 129 && LA53_0 <= 130)) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2858);
                    	    access_wrapper304=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper304.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2860);
                    	    name305=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name305.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal306=null;
        Token char_literal308=null;
        Token char_literal310=null;
        Token set311=null;
        Token STRING_LITERAL313=null;
        Token STRING_OBJC314=null;
        Token CHAR_LITERAL315=null;
        Token NUMBER_LITERAL316=null;
        Token BOOL_LITERAL317=null;
        ObjcParser.name_return name307 =null;

        ObjcParser.element_value_return element_value309 =null;

        ObjcParser.name_return name312 =null;

        ObjcParser.name_return name318 =null;


        Object char_literal306_tree=null;
        Object char_literal308_tree=null;
        Object char_literal310_tree=null;
        Object set311_tree=null;
        Object STRING_LITERAL313_tree=null;
        Object STRING_OBJC314_tree=null;
        Object CHAR_LITERAL315_tree=null;
        Object NUMBER_LITERAL316_tree=null;
        Object BOOL_LITERAL317_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name )
            int alt56=8;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:23: ( '&' )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==116) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:23: '&'
                            {
                            char_literal306=(Token)match(input,116,FOLLOW_116_in_simple_expression_value2887); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal306);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2890);
                    name307=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name307.getTree());

                    char_literal308=(Token)match(input,166,FOLLOW_166_in_simple_expression_value2892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal308);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value2894);
                    element_value309=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value309.getTree());

                    char_literal310=(Token)match(input,167,FOLLOW_167_in_simple_expression_value2896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal310);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 496:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set311=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set311)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2930);
                    name312=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name312.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:4: STRING_LITERAL
                    {
                    STRING_LITERAL313=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value2935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL313);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 498:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:4: STRING_OBJC
                    {
                    STRING_OBJC314=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value2948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC314);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 499:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL315=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value2961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL315);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 500:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL316=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value2974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL316);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 501:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL317=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value2987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL317);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 502:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3001);
                    name318=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name318.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:1: simple_expression_value2 : ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal322=null;
        Token char_literal324=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper319 =null;

        ObjcParser.simple_expression_value_return simple_expression_value320 =null;

        ObjcParser.method_msg_return method_msg321 =null;

        ObjcParser.element_value_return element_value323 =null;


        Object char_literal322_tree=null;
        Object char_literal324_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:3: ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt57=4;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==168) && (synpred15_Objc())) {
                alt57=1;
            }
            else if ( (LA57_0==169) && (synpred15_Objc())) {
                alt57=1;
            }
            else if ( (LA57_0==BOOL_LITERAL||LA57_0==CHAR_LITERAL||LA57_0==ID||LA57_0==NUMBER_LITERAL||(LA57_0 >= STRING_LITERAL && LA57_0 <= STRING_OBJC)||LA57_0==116||LA57_0==120) ) {
                alt57=2;
            }
            else if ( (LA57_0==166) ) {
                alt57=3;
            }
            else if ( (LA57_0==118) ) {
                alt57=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value23019);
                    block_call_wrapper319=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper319.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23025);
                    simple_expression_value320=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value320.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23031);
                    method_msg321=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg321.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal322=(Token)match(input,118,FOLLOW_118_in_simple_expression_value23037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal322_tree = 
                    (Object)adaptor.create(char_literal322)
                    ;
                    adaptor.addChild(root_0, char_literal322_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23039);
                    element_value323=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value323.getTree());

                    char_literal324=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal324_tree = 
                    (Object)adaptor.create(char_literal324)
                    ;
                    adaptor.addChild(root_0, char_literal324_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2325 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3055);
            op2325=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2325.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set326=null;

        Object set326_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set326=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 116)||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==131||(input.LA(1) >= 135 && input.LA(1) <= 136)||(input.LA(1) >= 138 && input.LA(1) <= 143)||input.LA(1)==168||input.LA(1)==197||input.LA(1)==199 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set326)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign327 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3156);
            op_assign327=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign327.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set328=null;

        Object set328_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set328=(Token)input.LT(1);

            if ( input.LA(1)==117||input.LA(1)==121||input.LA(1)==124||input.LA(1)==128||input.LA(1)==132||input.LA(1)==137||input.LA(1)==139||input.LA(1)==144||input.LA(1)==198 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set328)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector329 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3224);
            selector329=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector329.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal330=null;

        Object string_literal330_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:532:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:532:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal330=(Token)match(input,159,FOLLOW_159_in_selector3247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal330_tree = 
            (Object)adaptor.create(string_literal330)
            ;
            adaptor.addChild(root_0, string_literal330_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name331 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3262);
            type_cast_name331=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name331.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal332=null;
        Token char_literal334=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration333 =null;


        Object char_literal332_tree=null;
        Object char_literal334_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal332=(Token)match(input,118,FOLLOW_118_in_type_cast_name3285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal332_tree = 
            (Object)adaptor.create(char_literal332)
            ;
            adaptor.addChild(root_0, char_literal332_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3287);
            type_cast_declaration333=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration333.getTree());

            char_literal334=(Token)match(input,119,FOLLOW_119_in_type_cast_name3289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal334_tree = 
            (Object)adaptor.create(char_literal334)
            ;
            adaptor.addChild(root_0, char_literal334_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol335 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration336 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==181) ) {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==135) ) {
                    switch ( input.LA(3) ) {
                    case 184:
                        {
                        int LA58_19 = input.LA(4);

                        if ( (LA58_19==141) ) {
                            int LA58_24 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 181:
                        {
                        int LA58_20 = input.LA(4);

                        if ( (LA58_20==141) ) {
                            int LA58_25 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 185:
                        {
                        switch ( input.LA(4) ) {
                        case 184:
                            {
                            int LA58_26 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA58_27 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 185:
                            {
                            int LA58_28 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 187:
                        {
                        switch ( input.LA(4) ) {
                        case 184:
                            {
                            int LA58_29 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA58_30 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 187:
                            {
                            int LA58_31 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA58_23 = input.LA(4);

                        if ( (LA58_23==141) ) {
                            int LA58_32 = input.LA(5);

                            if ( (synpred16_Objc()) ) {
                                alt58=1;
                            }
                            else if ( (true) ) {
                                alt58=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 58, 32, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 23, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 58, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA58_1==116||(LA58_1 >= 119 && LA58_1 <= 120)||LA58_1==166||LA58_1==172) ) {
                    alt58=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==ID||LA58_0==118||LA58_0==172||LA58_0==177||(LA58_0 >= 184 && LA58_0 <= 185)||LA58_0==187||LA58_0==189||(LA58_0 >= 192 && LA58_0 <= 194)) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3307);
                    type_declaration_protocol335=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol335.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3313);
                    classical_type_declaration336=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration336.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set337=null;

        Object set337_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set337=(Token)input.LT(1);

            if ( (input.LA(1) >= 129 && input.LA(1) <= 130) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set337)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:553:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access338 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3341);
            access338=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access338.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple339 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3360);
            object_access_simple339=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple339.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:561:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name340 =null;

        ObjcParser.access_wrapper_return access_wrapper341 =null;

        ObjcParser.name_return name342 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3381);
            name340=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name340.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:10: ( access_wrapper name )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( ((LA59_0 >= 129 && LA59_0 <= 130)) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3384);
            	    access_wrapper341=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper341.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3386);
            	    name342=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name342.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access343 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3403);
            object_access343=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access343.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue344 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3423);
            cast_lvalue344=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue344.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal347=null;
        Token char_literal350=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper345 =null;

        ObjcParser.lvalue_access_return lvalue_access346 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper348 =null;

        ObjcParser.lvalue_access_return lvalue_access349 =null;

        ObjcParser.access_wrapper_return access_wrapper351 =null;

        ObjcParser.name_return name352 =null;

        ObjcParser.lvalue_access_return lvalue_access353 =null;


        Object char_literal347_tree=null;
        Object char_literal350_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==118) ) {
                int LA61_1 = input.LA(2);

                if ( (LA61_1==181) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==118) ) {
                    int LA61_6 = input.LA(3);

                    if ( (LA61_6==120) && (synpred17_Objc())) {
                        alt61=1;
                    }
                    else if ( (LA61_6==181) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==118) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==194) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==172) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==193) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==184) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==185) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==187) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==ID) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==189) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==192) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else if ( (LA61_6==177) && (synpred18_Objc())) {
                        alt61=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 6, input);

                        throw nvae;

                    }
                }
                else if ( (LA61_1==194) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==172) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==193) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==184) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==185) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==187) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==ID) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==189) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==192) && (synpred17_Objc())) {
                    alt61=1;
                }
                else if ( (LA61_1==177) && (synpred17_Objc())) {
                    alt61=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==ID||LA61_0==116||LA61_0==120) ) {
                alt61=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3441);
                    type_cast_wrapper345=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper345.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3443);
                    lvalue_access346=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access346.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal347=(Token)match(input,118,FOLLOW_118_in_cast_lvalue3456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal347_tree = 
                    (Object)adaptor.create(char_literal347)
                    ;
                    adaptor.addChild(root_0, char_literal347_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3458);
                    type_cast_wrapper348=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper348.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3460);
                    lvalue_access349=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access349.getTree());

                    char_literal350=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal350_tree = 
                    (Object)adaptor.create(char_literal350)
                    ;
                    adaptor.addChild(root_0, char_literal350_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:71: ( access_wrapper name )+
                    int cnt60=0;
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( ((LA60_0 >= 129 && LA60_0 <= 130)) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3465);
                    	    access_wrapper351=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper351.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3467);
                    	    name352=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name352.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt60 >= 1 ) break loop60;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(60, input);
                                throw eee;
                        }
                        cnt60++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3475);
                    lvalue_access353=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access353.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:1: lvalue_access : lvalue ( access_wrapper name )* ;
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.lvalue_return lvalue354 =null;

        ObjcParser.access_wrapper_return access_wrapper355 =null;

        ObjcParser.name_return name356 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:3: ( lvalue ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:5: lvalue ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalue_access3488);
            lvalue354=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue354.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:12: ( access_wrapper name )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0 >= 129 && LA62_0 <= 130)) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:13: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3491);
            	    access_wrapper355=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper355.getTree());

            	    pushFollow(FOLLOW_name_in_lvalue_access3493);
            	    name356=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name356.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:583:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal357=null;
        Token char_literal359=null;
        Token char_literal361=null;
        Token set362=null;
        ObjcParser.name_return name358 =null;

        ObjcParser.element_value_return element_value360 =null;

        ObjcParser.name_return name363 =null;

        ObjcParser.name_return name364 =null;


        Object char_literal357_tree=null;
        Object char_literal359_tree=null;
        Object char_literal361_tree=null;
        Object set362_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt64=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==ID) ) {
                    int LA64_4 = input.LA(3);

                    if ( (LA64_4==166) && (synpred19_Objc())) {
                        alt64=1;
                    }
                    else if ( (LA64_4==EOF||LA64_4==117||LA64_4==119||LA64_4==121||(LA64_4 >= 123 && LA64_4 <= 124)||(LA64_4 >= 127 && LA64_4 <= 130)||LA64_4==132||LA64_4==137||LA64_4==139||LA64_4==144||LA64_4==198) ) {
                        alt64=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA64_2 = input.LA(2);

                if ( (LA64_2==166) && (synpred19_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_2==EOF||LA64_2==117||LA64_2==119||LA64_2==121||(LA64_2 >= 123 && LA64_2 <= 124)||(LA64_2 >= 127 && LA64_2 <= 130)||LA64_2==132||LA64_2==137||LA64_2==139||LA64_2==144||LA64_2==198) ) {
                    alt64=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 2, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                alt64=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:23: ( '&' )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==116) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:23: '&'
                            {
                            char_literal357=(Token)match(input,116,FOLLOW_116_in_lvalue3520); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal357);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3523);
                    name358=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name358.getTree());

                    char_literal359=(Token)match(input,166,FOLLOW_166_in_lvalue3525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal359);


                    pushFollow(FOLLOW_element_value_in_lvalue3527);
                    element_value360=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value360.getTree());

                    char_literal361=(Token)match(input,167,FOLLOW_167_in_lvalue3529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(char_literal361);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 584:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set362=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set362)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3551);
                    name363=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name363.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3557);
                    name364=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name364.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:1: break_stmt : 'break' ';' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal365=null;
        Token char_literal366=null;

        Object string_literal365_tree=null;
        Object char_literal366_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:3: ( 'break' ';' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:5: 'break' ';'
            {
            string_literal365=(Token)match(input,170,FOLLOW_170_in_break_stmt3573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal365);


            char_literal366=(Token)match(input,134,FOLLOW_134_in_break_stmt3575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal366);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:17: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:20: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:1: continue_stmt : 'continue' ';' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal367=null;
        Token char_literal368=null;

        Object string_literal367_tree=null;
        Object char_literal368_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:3: ( 'continue' ';' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: 'continue' ';'
            {
            string_literal367=(Token)match(input,173,FOLLOW_173_in_continue_stmt3596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal367);


            char_literal368=(Token)match(input,134,FOLLOW_134_in_continue_stmt3598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal368);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:20: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:22: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration369 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3624);
            extern_declaration369=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration369.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal370=null;
        ObjcParser.field_declaration_return field_declaration371 =null;


        Object string_literal370_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal370=(Token)match(input,178,FOLLOW_178_in_extern_declaration3645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal370_tree = 
            (Object)adaptor.create(string_literal370)
            ;
            adaptor.addChild(root_0, string_literal370_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3647);
            field_declaration371=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration371.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix372 =null;

        ObjcParser.method_declaration_return method_declaration373 =null;

        ObjcParser.property_prefix_return property_prefix374 =null;

        ObjcParser.optional_prefix_return optional_prefix375 =null;

        ObjcParser.field_declaration_return field_declaration376 =null;

        ObjcParser.comments_return comments377 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt67=3;
            switch ( input.LA(1) ) {
            case 122:
            case 126:
            case 153:
                {
                alt67=1;
                }
                break;
            case 155:
                {
                alt67=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: ( optional_prefix )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==153) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3659);
                            optional_prefix372=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix372.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3662);
                    method_declaration373=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration373.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 608:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3676);
                    property_prefix374=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix374.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:21: ( optional_prefix )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==153) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3678);
                            optional_prefix375=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix375.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3681);
                    field_declaration376=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration376.getTree());

                    // AST REWRITE
                    // elements: property_prefix, field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 609:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:609:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:610:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3697);
                    comments377=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments377.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration378 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3712);
            field_declaration378=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration378.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal379=null;

        Object string_literal379_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal379=(Token)match(input,153,FOLLOW_153_in_optional_prefix3735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal379_tree = 
            (Object)adaptor.create(string_literal379)
            ;
            adaptor.addChild(root_0, string_literal379_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal380=null;

        Object string_literal380_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:621:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:621:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal380=(Token)match(input,165,FOLLOW_165_in_ns_inline3747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal380_tree = 
            (Object)adaptor.create(string_literal380)
            ;
            adaptor.addChild(root_0, string_literal380_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal381=null;
        Token char_literal382=null;
        Token char_literal384=null;
        Token char_literal386=null;
        Token char_literal388=null;
        Token char_literal390=null;
        Token char_literal391=null;
        ObjcParser.name_return name383 =null;

        ObjcParser.name_return name385 =null;

        ObjcParser.name_return name387 =null;

        ObjcParser.name_return name389 =null;


        Object string_literal381_tree=null;
        Object char_literal382_tree=null;
        Object char_literal384_tree=null;
        Object char_literal386_tree=null;
        Object char_literal388_tree=null;
        Object char_literal390_tree=null;
        Object char_literal391_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal381=(Token)match(input,155,FOLLOW_155_in_property_prefix3759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal381_tree = 
            (Object)adaptor.create(string_literal381)
            ;
            adaptor.addChild(root_0, string_literal381_tree);
            }

            char_literal382=(Token)match(input,118,FOLLOW_118_in_property_prefix3761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal382_tree = 
            (Object)adaptor.create(char_literal382)
            ;
            adaptor.addChild(root_0, char_literal382_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3763);
            name383=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name383.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:26: ( '=' name )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==139) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:27: '=' name
                    {
                    char_literal384=(Token)match(input,139,FOLLOW_139_in_property_prefix3766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal384_tree = 
                    (Object)adaptor.create(char_literal384)
                    ;
                    adaptor.addChild(root_0, char_literal384_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3768);
                    name385=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name385.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==125) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal386=(Token)match(input,125,FOLLOW_125_in_property_prefix3773); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal386_tree = 
            	    (Object)adaptor.create(char_literal386)
            	    ;
            	    adaptor.addChild(root_0, char_literal386_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3775);
            	    name387=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name387.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:48: ( '=' name ( ':' )? )?
            	    int alt70=2;
            	    int LA70_0 = input.LA(1);

            	    if ( (LA70_0==139) ) {
            	        alt70=1;
            	    }
            	    switch (alt70) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:49: '=' name ( ':' )?
            	            {
            	            char_literal388=(Token)match(input,139,FOLLOW_139_in_property_prefix3778); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal388_tree = 
            	            (Object)adaptor.create(char_literal388)
            	            ;
            	            adaptor.addChild(root_0, char_literal388_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3780);
            	            name389=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name389.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:58: ( ':' )?
            	            int alt69=2;
            	            int LA69_0 = input.LA(1);

            	            if ( (LA69_0==133) ) {
            	                alt69=1;
            	            }
            	            switch (alt69) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:58: ':'
            	                    {
            	                    char_literal390=(Token)match(input,133,FOLLOW_133_in_property_prefix3782); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal390_tree = 
            	                    (Object)adaptor.create(char_literal390)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal390_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            char_literal391=(Token)match(input,119,FOLLOW_119_in_property_prefix3789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal391_tree = 
            (Object)adaptor.create(char_literal391)
            ;
            adaptor.addChild(root_0, char_literal391_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration392 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3802);
            interface_declaration392=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration392.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 635:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration393 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3822);
            protocol_declaration393=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration393.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:640:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal394=null;
        ObjcParser.typedef_declaration_return typedef_declaration395 =null;


        Object string_literal394_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:5: 'typedef' typedef_declaration
            {
            string_literal394=(Token)match(input,191,FOLLOW_191_in_typedef_declaration_wrapper3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal394);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3842);
            typedef_declaration395=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration395.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 641:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:643:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal398=null;
        Token char_literal400=null;
        ObjcParser.typedef_internal_return typedef_internal396 =null;

        ObjcParser.typedef_name_return typedef_name397 =null;

        ObjcParser.typedef_name_return typedef_name399 =null;


        Object char_literal398_tree=null;
        Object char_literal400_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3860);
            typedef_internal396=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal396.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3862);
            typedef_name397=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name397.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:35: ( ',' typedef_name )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==125) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:36: ',' typedef_name
            	    {
            	    char_literal398=(Token)match(input,125,FOLLOW_125_in_typedef_declaration3865); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal398_tree = 
            	    (Object)adaptor.create(char_literal398)
            	    ;
            	    adaptor.addChild(root_0, char_literal398_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3867);
            	    typedef_name399=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name399.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            char_literal400=(Token)match(input,134,FOLLOW_134_in_typedef_declaration3871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal400_tree = 
            (Object)adaptor.create(char_literal400)
            ;
            adaptor.addChild(root_0, char_literal400_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal401=null;
        Token char_literal402=null;
        Token char_literal404=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane403 =null;


        Object char_literal401_tree=null;
        Object char_literal402_tree=null;
        Object char_literal404_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal401=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal401_tree = 
            (Object)adaptor.create(char_literal401)
            ;
            adaptor.addChild(root_0, char_literal401_tree);
            }

            char_literal402=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate3885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal402_tree = 
            (Object)adaptor.create(char_literal402)
            ;
            adaptor.addChild(root_0, char_literal402_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3887);
            type_declaration_plane403=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane403.getTree());

            char_literal404=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate3889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal404_tree = 
            (Object)adaptor.create(char_literal404)
            ;
            adaptor.addChild(root_0, char_literal404_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal405=null;
        Token char_literal406=null;
        Token char_literal408=null;
        Token char_literal409=null;
        Token char_literal411=null;
        Token char_literal413=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane407 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane410 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane412 =null;


        Object char_literal405_tree=null;
        Object char_literal406_tree=null;
        Object char_literal408_tree=null;
        Object char_literal409_tree=null;
        Object char_literal411_tree=null;
        Object char_literal413_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal405=(Token)match(input,118,FOLLOW_118_in_func_pointer3904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal405);


            char_literal406=(Token)match(input,120,FOLLOW_120_in_func_pointer3906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal406);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3908);
            type_declaration_plane407=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane407.getTree());

            char_literal408=(Token)match(input,119,FOLLOW_119_in_func_pointer3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal408);


            char_literal409=(Token)match(input,118,FOLLOW_118_in_func_pointer3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal409);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID||LA74_0==172||LA74_0==181||(LA74_0 >= 184 && LA74_0 <= 185)||LA74_0==187||(LA74_0 >= 193 && LA74_0 <= 194)) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3915);
                    type_declaration_plane410=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane410.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:68: ( ',' type_declaration_plane )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==125) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:69: ',' type_declaration_plane
                    	    {
                    	    char_literal411=(Token)match(input,125,FOLLOW_125_in_func_pointer3918); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_125.add(char_literal411);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3920);
                    	    type_declaration_plane412=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane412.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal413=(Token)match(input,119,FOLLOW_119_in_func_pointer3926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal413);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer414 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct415 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum416 =null;

        ObjcParser.type_declaration_union_return type_declaration_union417 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane418 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt75=5;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==118) && (synpred20_Objc())) {
                alt75=1;
            }
            else if ( (LA75_0==189) ) {
                alt75=2;
            }
            else if ( (LA75_0==177) ) {
                alt75=3;
            }
            else if ( (LA75_0==192) ) {
                alt75=4;
            }
            else if ( (LA75_0==ID||LA75_0==172||LA75_0==181||(LA75_0 >= 184 && LA75_0 <= 185)||LA75_0==187||(LA75_0 >= 193 && LA75_0 <= 194)) ) {
                alt75=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal3955);
                    func_pointer414=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer414.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal3961);
                    type_declaration_struct415=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct415.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal3967);
                    type_declaration_enum416=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum416.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal3973);
                    type_declaration_union417=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union417.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal3979);
                    type_declaration_plane418=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane418.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID419=null;

        Object ID419_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:5: ID
            {
            ID419=(Token)match(input,ID,FOLLOW_ID_in_typedef_name3994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID419);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal420=null;
        Token char_literal422=null;
        Token string_literal423=null;
        Token char_literal425=null;
        Token char_literal427=null;
        Token char_literal429=null;
        Token char_literal431=null;
        ObjcParser.class_name_return class_name421 =null;

        ObjcParser.protocol_name_return protocol_name424 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple426 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple428 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple430 =null;


        Object string_literal420_tree=null;
        Object char_literal422_tree=null;
        Object string_literal423_tree=null;
        Object char_literal425_tree=null;
        Object char_literal427_tree=null;
        Object char_literal429_tree=null;
        Object char_literal431_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt76=5;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt76=1;
                }
                break;
            case 157:
                {
                alt76=2;
                }
                break;
            case 189:
                {
                alt76=3;
                }
                break;
            case 192:
                {
                alt76=4;
                }
                break;
            case 177:
                {
                alt76=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }

            switch (alt76) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: '@class' class_name ';'
                    {
                    string_literal420=(Token)match(input,147,FOLLOW_147_in_forward_class_declaration4012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(string_literal420);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4014);
                    class_name421=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name421.getTree());

                    char_literal422=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal422);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: '@protocol' protocol_name ';'
                    {
                    string_literal423=(Token)match(input,157,FOLLOW_157_in_forward_class_declaration4029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal423);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4031);
                    protocol_name424=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name424.getTree());

                    char_literal425=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal425);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4046);
                    type_declaration_struct_simple426=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple426.getTree());

                    char_literal427=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal427);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 668:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4061);
                    type_declaration_union_simple428=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple428.getTree());

                    char_literal429=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal429);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 669:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4076);
                    type_declaration_enum_simple430=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple430.getTree());

                    char_literal431=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal431);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 670:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID432=null;

        Object ID432_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:5: ID
            {
            ID432=(Token)match(input,ID,FOLLOW_ID_in_class_name4098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID432);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 674:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal433=null;
        ObjcParser.protocol_name_return protocol_name434 =null;

        ObjcParser.implements_interfaces_return implements_interfaces435 =null;

        ObjcParser.class_protocol_end_return class_protocol_end436 =null;


        Object string_literal433_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal433=(Token)match(input,157,FOLLOW_157_in_protocol_declaration4118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal433_tree = 
            (Object)adaptor.create(string_literal433)
            ;
            adaptor.addChild(root_0, string_literal433_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4120);
            protocol_name434=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name434.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:31: ( implements_interfaces )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==135) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4122);
                    implements_interfaces435=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces435.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4130);
            class_protocol_end436=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end436.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal438=null;
        ObjcParser.declarations_return declarations437 =null;


        Object string_literal438_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: ( declarations )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==MULTI_COMMENT_LIT||LA78_0==SINGLE_COMMENT_LIT||LA78_0==122||LA78_0==126||LA78_0==153||LA78_0==155) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4144);
            	    declarations437=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations437.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            string_literal438=(Token)match(input,149,FOLLOW_149_in_class_protocol_end4151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = 
            (Object)adaptor.create(string_literal438)
            ;
            adaptor.addChild(root_0, string_literal438_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal439=null;
        Token char_literal441=null;
        ObjcParser.template_internal_return template_internal440 =null;


        Object char_literal439_tree=null;
        Object char_literal441_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal439=(Token)match(input,135,FOLLOW_135_in_template4163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal439_tree = 
            (Object)adaptor.create(char_literal439)
            ;
            adaptor.addChild(root_0, char_literal439_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4165);
            template_internal440=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal440.getTree());

            char_literal441=(Token)match(input,141,FOLLOW_141_in_template4167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal441_tree = 
            (Object)adaptor.create(char_literal441)
            ;
            adaptor.addChild(root_0, char_literal441_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols442 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4176);
            implements_protocols442=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols442.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 689:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal443=null;
        Token char_literal445=null;
        Token char_literal447=null;
        ObjcParser.type_dec_internal_return type_dec_internal444 =null;

        ObjcParser.type_dec_internal_return type_dec_internal446 =null;


        Object char_literal443_tree=null;
        Object char_literal445_tree=null;
        Object char_literal447_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal443=(Token)match(input,135,FOLLOW_135_in_implements_protocols4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal443);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4203);
            type_dec_internal444=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal444.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:27: ( ',' type_dec_internal )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==125) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:28: ',' type_dec_internal
            	    {
            	    char_literal445=(Token)match(input,125,FOLLOW_125_in_implements_protocols4206); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal445);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4208);
            	    type_dec_internal446=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal446.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            char_literal447=(Token)match(input,141,FOLLOW_141_in_implements_protocols4212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal447);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal449=null;
        ObjcParser.template_type_return template_type448 =null;

        ObjcParser.template_type_return template_type450 =null;


        Object char_literal449_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4234);
            template_type448=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type448.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:19: ( ',' template_type )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==125) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:20: ',' template_type
            	    {
            	    char_literal449=(Token)match(input,125,FOLLOW_125_in_template_internal4237); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal449_tree = 
            	    (Object)adaptor.create(char_literal449)
            	    ;
            	    adaptor.addChild(root_0, char_literal449_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4239);
            	    template_type450=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type450.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal452=null;
        ObjcParser.template_name_return template_name451 =null;

        ObjcParser.template_name_return template_name453 =null;


        Object string_literal452_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:3: ( template_name | 'struct' template_name )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ID) ) {
                alt81=1;
            }
            else if ( (LA81_0==189) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4253);
                    template_name451=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name451.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal452=(Token)match(input,189,FOLLOW_189_in_template_type4259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal452_tree = 
                    (Object)adaptor.create(string_literal452)
                    ;
                    adaptor.addChild(root_0, string_literal452_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4261);
                    template_name453=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name453.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:704:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID454=null;

        Object ID454_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:5: ID
            {
            ID454=(Token)match(input,ID,FOLLOW_ID_in_template_name4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID454);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:708:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID455=null;

        Object ID455_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:5: ID
            {
            ID455=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID455);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal456=null;
        Token string_literal461=null;
        ObjcParser.interface_name_return interface_name457 =null;

        ObjcParser.superclass_name_return superclass_name458 =null;

        ObjcParser.fields_body_return fields_body459 =null;

        ObjcParser.declarations_return declarations460 =null;


        Object string_literal456_tree=null;
        Object string_literal461_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal456=(Token)match(input,152,FOLLOW_152_in_interface_declaration4323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = 
            (Object)adaptor.create(string_literal456)
            ;
            adaptor.addChild(root_0, string_literal456_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4325);
            interface_name457=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name457.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4327);
            superclass_name458=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name458.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:3: ( fields_body )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==196) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4331);
                    fields_body459=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body459.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:3: ( declarations )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==MULTI_COMMENT_LIT||LA83_0==SINGLE_COMMENT_LIT||LA83_0==122||LA83_0==126||LA83_0==153||LA83_0==155) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4336);
            	    declarations460=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations460.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            string_literal461=(Token)match(input,149,FOLLOW_149_in_interface_declaration4341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = 
            (Object)adaptor.create(string_literal461)
            ;
            adaptor.addChild(root_0, string_literal461_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal462=null;
        Token char_literal464=null;
        ObjcParser.body_item_return body_item463 =null;


        Object char_literal462_tree=null;
        Object char_literal464_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal462=(Token)match(input,196,FOLLOW_196_in_fields_body4358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal462_tree = 
            (Object)adaptor.create(char_literal462)
            ;
            adaptor.addChild(root_0, char_literal462_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: ( body_item )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==ID||LA84_0==MULTI_COMMENT_LIT||LA84_0==SINGLE_COMMENT_LIT||LA84_0==118||LA84_0==154||LA84_0==156||LA84_0==158||LA84_0==164||LA84_0==172||LA84_0==177||LA84_0==181||(LA84_0 >= 184 && LA84_0 <= 185)||LA84_0==187||LA84_0==189||(LA84_0 >= 191 && LA84_0 <= 194)) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4364);
            	    body_item463=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item463.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            char_literal464=(Token)match(input,200,FOLLOW_200_in_fields_body4369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal464_tree = 
            (Object)adaptor.create(char_literal464)
            ;
            adaptor.addChild(root_0, char_literal464_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper465 =null;

        ObjcParser.field_modifiers_return field_modifiers466 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper467 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper468 =null;

        ObjcParser.comments_return comments469 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==ID||LA88_0==118||LA88_0==154||LA88_0==156||LA88_0==158||LA88_0==164||LA88_0==172||LA88_0==177||LA88_0==181||(LA88_0 >= 184 && LA88_0 <= 185)||LA88_0==187||LA88_0==189||(LA88_0 >= 191 && LA88_0 <= 194)) ) {
                alt88=1;
            }
            else if ( (LA88_0==MULTI_COMMENT_LIT||LA88_0==SINGLE_COMMENT_LIT) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: ( group_modifier_wrapper )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==154||LA85_0==156||LA85_0==158) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4384);
                            group_modifier_wrapper465=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper465.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:29: ( field_modifiers )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==164) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4387);
                            field_modifiers466=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers466.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==191) ) {
                        alt87=1;
                    }
                    else if ( (LA87_0==ID||LA87_0==118||LA87_0==172||LA87_0==177||LA87_0==181||(LA87_0 >= 184 && LA87_0 <= 185)||LA87_0==187||LA87_0==189||(LA87_0 >= 192 && LA87_0 <= 194)) ) {
                        alt87=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 0, input);

                        throw nvae;

                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4391);
                            typedef_declaration_wrapper467=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper467.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4395);
                            field_declaration_wrapper468=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper468.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4402);
                    comments469=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments469.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier470 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4415);
            group_modifier470=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier470.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 731:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set471=null;

        Object set471_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set471=(Token)input.LT(1);

            if ( input.LA(1)==154||input.LA(1)==156||input.LA(1)==158 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set471)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal472=null;

        Object string_literal472_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal472=(Token)match(input,164,FOLLOW_164_in_field_modifiers4460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = 
            (Object)adaptor.create(string_literal472)
            ;
            adaptor.addChild(root_0, string_literal472_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID473=null;
        ObjcParser.category_return category474 =null;


        Object ID473_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: ID ( category )?
            {
            ID473=(Token)match(input,ID,FOLLOW_ID_in_interface_name4475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID473);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:8: ( category )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==118) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4477);
                    category474=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category474.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, category
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 741:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal475=null;
        Token ID476=null;
        Token char_literal477=null;

        Object char_literal475_tree=null;
        Object ID476_tree=null;
        Object char_literal477_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:11: '(' ( ID )? ')'
            {
            char_literal475=(Token)match(input,118,FOLLOW_118_in_category4496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal475);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:15: ( ID )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==ID) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:15: ID
                    {
                    ID476=(Token)match(input,ID,FOLLOW_ID_in_category4498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID476);


                    }
                    break;

            }


            char_literal477=(Token)match(input,119,FOLLOW_119_in_category4501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal477);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 743:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal478=null;
        Token ID479=null;
        ObjcParser.implements_interfaces_return implements_interfaces480 =null;


        Object char_literal478_tree=null;
        Object ID479_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:5: ( ':' ID )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==133) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:6: ':' ID
                    {
                    char_literal478=(Token)match(input,133,FOLLOW_133_in_superclass_name4521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal478);


                    ID479=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID479);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:15: ( implements_interfaces )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==135) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4527);
                    implements_interfaces480=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces480.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 746:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration481 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:5: ( field_declaration )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==ID||LA93_0==118||LA93_0==172||LA93_0==177||LA93_0==181||(LA93_0 >= 184 && LA93_0 <= 185)||LA93_0==187||LA93_0==189||(LA93_0 >= 192 && LA93_0 <= 194)) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4556);
            	    field_declaration481=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration481.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 750:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal484=null;
        Token char_literal487=null;
        Token char_literal491=null;
        Token char_literal492=null;
        ObjcParser.type_declaration_return type_declaration482 =null;

        ObjcParser.field_name_return field_name483 =null;

        ObjcParser.field_name_return field_name485 =null;

        ObjcParser.classical_method_params_return classical_method_params486 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper488 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper489 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init490 =null;


        Object char_literal484_tree=null;
        Object char_literal487_tree=null;
        Object char_literal491_tree=null;
        Object char_literal492_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4580);
            type_declaration482=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration482.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4582);
            field_name483=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name483.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:36: ( ',' field_name )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==125) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:37: ',' field_name
            	    {
            	    char_literal484=(Token)match(input,125,FOLLOW_125_in_field_declaration4586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal484_tree = 
            	    (Object)adaptor.create(char_literal484)
            	    ;
            	    adaptor.addChild(root_0, char_literal484_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4588);
            	    field_name485=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name485.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( ((LA97_0 >= 117 && LA97_0 <= 118)||LA97_0==121||LA97_0==124||LA97_0==128||LA97_0==132||LA97_0==137||LA97_0==139||LA97_0==144||LA97_0==198) ) {
                alt97=1;
            }
            else if ( (LA97_0==134) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==118) ) {
                        alt96=1;
                    }
                    else if ( (LA96_0==117||LA96_0==121||LA96_0==124||LA96_0==128||LA96_0==132||LA96_0==137||LA96_0==139||LA96_0==144||LA96_0==198) ) {
                        alt96=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 0, input);

                        throw nvae;

                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4595);
                            classical_method_params486=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params486.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:81: ( ';' | block_multiline_wrapper )
                            int alt95=2;
                            int LA95_0 = input.LA(1);

                            if ( (LA95_0==134) ) {
                                alt95=1;
                            }
                            else if ( (LA95_0==196) ) {
                                alt95=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 95, 0, input);

                                throw nvae;

                            }
                            switch (alt95) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:82: ';'
                                    {
                                    char_literal487=(Token)match(input,134,FOLLOW_134_in_field_declaration4598); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal487_tree = 
                                    (Object)adaptor.create(char_literal487)
                                    ;
                                    adaptor.addChild(root_0, char_literal487_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4602);
                                    block_multiline_wrapper488=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper488.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4609);
                            op_assign_wrapper489=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper489.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4611);
                            element_value_or_array_init490=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init490.getTree());

                            char_literal491=(Token)match(input,134,FOLLOW_134_in_field_declaration4613); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal491_tree = 
                            (Object)adaptor.create(char_literal491)
                            ;
                            adaptor.addChild(root_0, char_literal491_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:171: ';'
                    {
                    char_literal492=(Token)match(input,134,FOLLOW_134_in_field_declaration4619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal492_tree = 
                    (Object)adaptor.create(char_literal492)
                    ;
                    adaptor.addChild(root_0, char_literal492_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration493 =null;

        ObjcParser.field_name_return field_name494 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4634);
            type_declaration493=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration493.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4636);
            field_name494=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name494.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 757:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal495=null;
        Token char_literal497=null;
        Token char_literal499=null;
        ObjcParser.classical_param_return classical_param496 =null;

        ObjcParser.classical_param_return classical_param498 =null;


        Object char_literal495_tree=null;
        Object char_literal497_tree=null;
        Object char_literal499_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal495=(Token)match(input,118,FOLLOW_118_in_classical_method_params4661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal495);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:9: ( classical_param )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ID||LA98_0==118||LA98_0==172||LA98_0==177||LA98_0==181||(LA98_0 >= 184 && LA98_0 <= 185)||LA98_0==187||LA98_0==189||(LA98_0 >= 192 && LA98_0 <= 194)) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4663);
                    classical_param496=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param496.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:26: ( ',' classical_param )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==125) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:27: ',' classical_param
            	    {
            	    char_literal497=(Token)match(input,125,FOLLOW_125_in_classical_method_params4667); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal497);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4669);
            	    classical_param498=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param498.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            char_literal499=(Token)match(input,119,FOLLOW_119_in_classical_method_params4673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal499);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 761:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration500 =null;

        ObjcParser.param_name_return param_name501 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:765:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:765:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4698);
            classical_type_declaration500=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration500.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4700);
            param_name501=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name501.getTree());

            // AST REWRITE
            // elements: param_name, classical_type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 765:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:765:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal505=null;
        Token string_literal506=null;
        Token char_literal508=null;
        Token string_literal509=null;
        Token char_literal511=null;
        Token string_literal512=null;
        Token char_literal514=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol502 =null;

        ObjcParser.func_pointer_return func_pointer503 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane504 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper507 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper510 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper513 =null;


        Object char_literal505_tree=null;
        Object string_literal506_tree=null;
        Object char_literal508_tree=null;
        Object string_literal509_tree=null;
        Object char_literal511_tree=null;
        Object string_literal512_tree=null;
        Object char_literal514_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt104=6;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==181) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==135) && (synpred21_Objc())) {
                    alt104=1;
                }
                else if ( (LA104_1==ID||LA104_1==116||(LA104_1 >= 119 && LA104_1 <= 120)||LA104_1==166||LA104_1==172) ) {
                    alt104=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA104_0==118) && (synpred22_Objc())) {
                alt104=2;
            }
            else if ( (LA104_0==ID||LA104_0==172||(LA104_0 >= 184 && LA104_0 <= 185)||LA104_0==187||(LA104_0 >= 193 && LA104_0 <= 194)) ) {
                alt104=3;
            }
            else if ( (LA104_0==189) ) {
                alt104=4;
            }
            else if ( (LA104_0==192) ) {
                alt104=5;
            }
            else if ( (LA104_0==177) ) {
                alt104=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4729);
                    type_declaration_protocol502=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol502.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4740);
                    func_pointer503=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer503.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4746);
                    type_declaration_plane504=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane504.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:28: ( '&' )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==116) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:28: '&'
                            {
                            char_literal505=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4748); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal505_tree = 
                            (Object)adaptor.create(char_literal505)
                            ;
                            adaptor.addChild(root_0, char_literal505_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal506=(Token)match(input,189,FOLLOW_189_in_classical_type_declaration4756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal506);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4758);
                    type_dec_wrapper507=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper507.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:32: ( '&' )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==116) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:32: '&'
                            {
                            char_literal508=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4760); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal508);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 772:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal509=(Token)match(input,192,FOLLOW_192_in_classical_type_declaration4777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(string_literal509);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4779);
                    type_dec_wrapper510=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper510.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:31: ( '&' )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==116) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:31: '&'
                            {
                            char_literal511=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal511);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 773:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal512=(Token)match(input,177,FOLLOW_177_in_classical_type_declaration4798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(string_literal512);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4800);
                    type_dec_wrapper513=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper513.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:30: ( '&' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==116) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:30: '&'
                            {
                            char_literal514=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4802); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal514);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 774:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal518=null;
        Token char_literal520=null;
        Token char_literal522=null;
        Token char_literal524=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol515 =null;

        ObjcParser.func_pointer_return func_pointer516 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct517 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum519 =null;

        ObjcParser.type_declaration_union_return type_declaration_union521 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane523 =null;


        Object char_literal518_tree=null;
        Object char_literal520_tree=null;
        Object char_literal522_tree=null;
        Object char_literal524_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt109=6;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==181) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==135) && (synpred23_Objc())) {
                    alt109=1;
                }
                else if ( (LA109_1==ID||LA109_1==116||(LA109_1 >= 119 && LA109_1 <= 120)||LA109_1==166||LA109_1==172) ) {
                    alt109=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==118) && (synpred24_Objc())) {
                alt109=2;
            }
            else if ( (LA109_0==189) ) {
                alt109=3;
            }
            else if ( (LA109_0==177) ) {
                alt109=4;
            }
            else if ( (LA109_0==192) ) {
                alt109=5;
            }
            else if ( (LA109_0==ID||LA109_0==172||(LA109_0 >= 184 && LA109_0 <= 185)||LA109_0==187||(LA109_0 >= 193 && LA109_0 <= 194)) ) {
                alt109=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4831);
                    type_declaration_protocol515=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol515.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4842);
                    func_pointer516=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer516.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: type_declaration_struct ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4848);
                    type_declaration_struct517=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct517.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:29: ( '&' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==116) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:29: '&'
                            {
                            char_literal518=(Token)match(input,116,FOLLOW_116_in_type_declaration4850); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal518_tree = 
                            (Object)adaptor.create(char_literal518)
                            ;
                            adaptor.addChild(root_0, char_literal518_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4857);
                    type_declaration_enum519=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum519.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:27: ( '&' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==116) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:27: '&'
                            {
                            char_literal520=(Token)match(input,116,FOLLOW_116_in_type_declaration4859); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal520_tree = 
                            (Object)adaptor.create(char_literal520)
                            ;
                            adaptor.addChild(root_0, char_literal520_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4866);
                    type_declaration_union521=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union521.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:28: ( '&' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==116) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:28: '&'
                            {
                            char_literal522=(Token)match(input,116,FOLLOW_116_in_type_declaration4868); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal522_tree = 
                            (Object)adaptor.create(char_literal522)
                            ;
                            adaptor.addChild(root_0, char_literal522_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4875);
                    type_declaration_plane523=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane523.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:28: ( '&' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==116) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:28: '&'
                            {
                            char_literal524=(Token)match(input,116,FOLLOW_116_in_type_declaration4877); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal524_tree = 
                            (Object)adaptor.create(char_literal524)
                            ;
                            adaptor.addChild(root_0, char_literal524_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:1: type_declaration_plane : ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal525=null;
        Token string_literal526=null;
        Token string_literal527=null;
        Token string_literal529=null;
        Token char_literal530=null;
        ObjcParser.type_dec_return type_dec528 =null;


        Object string_literal525_tree=null;
        Object string_literal526_tree=null;
        Object string_literal527_tree=null;
        Object string_literal529_tree=null;
        Object char_literal530_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:3: ( ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:5: ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:5: ( 'volatile' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==194) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:5: 'volatile'
                    {
                    string_literal525=(Token)match(input,194,FOLLOW_194_in_type_declaration_plane4892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal525);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:17: ( 'const' )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==172) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:17: 'const'
                    {
                    string_literal526=(Token)match(input,172,FOLLOW_172_in_type_declaration_plane4895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal526);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:26: ( 'unsigned' )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==193) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:26: 'unsigned'
                    {
                    string_literal527=(Token)match(input,193,FOLLOW_193_in_type_declaration_plane4898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal527);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane4901);
            type_dec528=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec528.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:47: ( 'const' ( '*' )? )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==172) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:48: 'const' ( '*' )?
                    {
                    string_literal529=(Token)match(input,172,FOLLOW_172_in_type_declaration_plane4904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal529);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:56: ( '*' )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==120) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:56: '*'
                            {
                            char_literal530=(Token)match(input,120,FOLLOW_120_in_type_declaration_plane4906); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(char_literal530);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 194, type_dec, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 787:63: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:66: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:79: ( 'volatile' )?
                if ( stream_194.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_194.nextNode()
                    );

                }
                stream_194.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:100: ( 'const' )?
                if ( stream_172.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_172.nextNode()
                    );

                }
                stream_172.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal531=null;
        Token char_literal532=null;

        Object string_literal531_tree=null;
        Object char_literal532_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:6: 'id' '<'
            {
            string_literal531=(Token)match(input,181,FOLLOW_181_in_type_decl_protocol_predicate4938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal531_tree = 
            (Object)adaptor.create(string_literal531)
            ;
            adaptor.addChild(root_0, string_literal531_tree);
            }

            char_literal532=(Token)match(input,135,FOLLOW_135_in_type_decl_protocol_predicate4940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal532_tree = 
            (Object)adaptor.create(char_literal532)
            ;
            adaptor.addChild(root_0, char_literal532_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal533=null;
        Token char_literal534=null;
        Token char_literal536=null;
        ObjcParser.type_dec_internal_return type_dec_internal535 =null;


        Object string_literal533_tree=null;
        Object char_literal534_tree=null;
        Object char_literal536_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:5: 'id' '<' type_dec_internal '>'
            {
            string_literal533=(Token)match(input,181,FOLLOW_181_in_type_declaration_protocol4956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal533);


            char_literal534=(Token)match(input,135,FOLLOW_135_in_type_declaration_protocol4958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal534);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol4960);
            type_dec_internal535=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal535.getTree());

            char_literal536=(Token)match(input,141,FOLLOW_141_in_type_declaration_protocol4962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal536);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 795:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal537=null;
        ObjcParser.typedef_name_return typedef_name538 =null;


        Object string_literal537_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:5: 'struct' typedef_name
            {
            string_literal537=(Token)match(input,189,FOLLOW_189_in_type_declaration_struct_simple4984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal537);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple4986);
            typedef_name538=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name538.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 799:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal539=null;
        ObjcParser.typedef_name_return typedef_name540 =null;


        Object string_literal539_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:5: 'union' typedef_name
            {
            string_literal539=(Token)match(input,192,FOLLOW_192_in_type_declaration_union_simple5006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal539);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5008);
            typedef_name540=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name540.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 803:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal541=null;
        ObjcParser.typedef_name_return typedef_name542 =null;


        Object string_literal541_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:5: 'enum' typedef_name
            {
            string_literal541=(Token)match(input,177,FOLLOW_177_in_type_declaration_enum_simple5032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal541);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5034);
            typedef_name542=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name542.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 807:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal543=null;
        ObjcParser.typedef_name_return typedef_name544 =null;

        ObjcParser.struct_wrapper_return struct_wrapper545 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple546 =null;


        Object string_literal543_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:3: ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==189) ) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==ID) ) {
                    int LA116_2 = input.LA(3);

                    if ( (LA116_2==196) && (synpred25_Objc())) {
                        alt116=1;
                    }
                    else if ( (LA116_2==ID||LA116_2==116||LA116_2==119) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA116_1==196) && (synpred25_Objc())) {
                    alt116=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper
                    {
                    string_literal543=(Token)match(input,189,FOLLOW_189_in_type_declaration_struct5064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal543);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:45: ( typedef_name )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==ID) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:45: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct5066);
                            typedef_name544=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name544.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct5069);
                    struct_wrapper545=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper545.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 811:74: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:76: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:89: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5085);
                    type_declaration_struct_simple546=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal547=null;
        ObjcParser.typedef_name_return typedef_name548 =null;

        ObjcParser.struct_wrapper_return struct_wrapper549 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple550 =null;


        Object string_literal547_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:3: ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==192) ) {
                int LA118_1 = input.LA(2);

                if ( (LA118_1==ID) ) {
                    int LA118_2 = input.LA(3);

                    if ( (LA118_2==196) && (synpred26_Objc())) {
                        alt118=1;
                    }
                    else if ( (LA118_2==ID||LA118_2==116||LA118_2==119) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA118_1==196) && (synpred26_Objc())) {
                    alt118=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper
                    {
                    string_literal547=(Token)match(input,192,FOLLOW_192_in_type_declaration_union5109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(string_literal547);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:43: ( typedef_name )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==ID) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:43: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_union5111);
                            typedef_name548=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name548.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union5114);
                    struct_wrapper549=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper549.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 816:72: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:74: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:86: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5130);
                    type_declaration_union_simple550=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple550.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal551=null;
        ObjcParser.typedef_name_return typedef_name552 =null;

        ObjcParser.enum_wrapper_return enum_wrapper553 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple554 =null;


        Object string_literal551_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==177) ) {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==ID) ) {
                    int LA120_2 = input.LA(3);

                    if ( (LA120_2==196) && (synpred27_Objc())) {
                        alt120=1;
                    }
                    else if ( (LA120_2==ID||LA120_2==116||LA120_2==119) ) {
                        alt120=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA120_1==196) && (synpred27_Objc())) {
                    alt120=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper
                    {
                    string_literal551=(Token)match(input,177,FOLLOW_177_in_type_declaration_enum5154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_177.add(string_literal551);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:41: ( typedef_name )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==ID) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:41: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum5156);
                            typedef_name552=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name552.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum5159);
                    enum_wrapper553=enum_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper553.getTree());

                    // AST REWRITE
                    // elements: typedef_name, enum_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:68: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:70: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:81: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5175);
                    type_declaration_enum_simple554=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple554.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal555=null;
        Token char_literal557=null;
        ObjcParser.enum_element_return enum_element556 =null;


        Object char_literal555_tree=null;
        Object char_literal557_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal555=(Token)match(input,196,FOLLOW_196_in_enum_wrapper5188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal555_tree = 
            (Object)adaptor.create(char_literal555)
            ;
            adaptor.addChild(root_0, char_literal555_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:9: ( enum_element )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==ID||LA121_0==MULTI_COMMENT_LIT||LA121_0==SINGLE_COMMENT_LIT) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5198);
            	    enum_element556=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element556.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);


            char_literal557=(Token)match(input,200,FOLLOW_200_in_enum_wrapper5205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal557_tree = 
            (Object)adaptor.create(char_literal557)
            ;
            adaptor.addChild(root_0, char_literal557_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal561=null;
        ObjcParser.name_return name558 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper559 =null;

        ObjcParser.element_value_return element_value560 =null;

        ObjcParser.comments_return comments562 =null;


        Object char_literal561_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ID) ) {
                alt124=1;
            }
            else if ( (LA124_0==MULTI_COMMENT_LIT||LA124_0==SINGLE_COMMENT_LIT) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element5220);
                    name558=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name558.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:10: ( op_assign_wrapper element_value )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==117||LA122_0==121||LA122_0==124||LA122_0==128||LA122_0==132||LA122_0==137||LA122_0==139||LA122_0==144||LA122_0==198) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5223);
                            op_assign_wrapper559=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper559.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5225);
                            element_value560=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value560.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:45: ( ',' )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==125) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:45: ','
                            {
                            char_literal561=(Token)match(input,125,FOLLOW_125_in_enum_element5229); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(char_literal561);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 832:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5250);
                    comments562=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments562.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct563 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5265);
            struct563=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct563.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 837:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal564=null;
        Token char_literal566=null;
        ObjcParser.struct_internal_return struct_internal565 =null;


        Object char_literal564_tree=null;
        Object char_literal566_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal564=(Token)match(input,196,FOLLOW_196_in_struct5283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal564_tree = 
            (Object)adaptor.create(char_literal564)
            ;
            adaptor.addChild(root_0, char_literal564_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:7: ( struct_internal )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==ID||LA125_0==MULTI_COMMENT_LIT||LA125_0==SINGLE_COMMENT_LIT||LA125_0==118||LA125_0==172||LA125_0==177||LA125_0==181||(LA125_0 >= 184 && LA125_0 <= 185)||LA125_0==187||LA125_0==189||(LA125_0 >= 192 && LA125_0 <= 194)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5292);
            	    struct_internal565=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal565.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            char_literal566=(Token)match(input,200,FOLLOW_200_in_struct5299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal566_tree = 
            (Object)adaptor.create(char_literal566)
            ;
            adaptor.addChild(root_0, char_literal566_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper567 =null;

        ObjcParser.comments_return comments568 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:3: ( field_declaration_wrapper | comments )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ID||LA126_0==118||LA126_0==172||LA126_0==177||LA126_0==181||(LA126_0 >= 184 && LA126_0 <= 185)||LA126_0==187||LA126_0==189||(LA126_0 >= 192 && LA126_0 <= 194)) ) {
                alt126=1;
            }
            else if ( (LA126_0==MULTI_COMMENT_LIT||LA126_0==SINGLE_COMMENT_LIT) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5313);
                    field_declaration_wrapper567=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper567.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5319);
                    comments568=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec569 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5334);
            type_dec569=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec569.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 851:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:1: type_dec : type_dec_internal ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal571=null;
        ObjcParser.type_dec_internal_return type_dec_internal570 =null;

        ObjcParser.array_size_return array_size572 =null;


        Object char_literal571_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:9: ( type_dec_internal ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:11: type_dec_internal ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5354);
            type_dec_internal570=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal570.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:29: ( '*' )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==120) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:29: '*'
            	    {
            	    char_literal571=(Token)match(input,120,FOLLOW_120_in_type_dec5356); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal571_tree = 
            	    (Object)adaptor.create(char_literal571)
            	    ;
            	    adaptor.addChild(root_0, char_literal571_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:34: ( array_size )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==166) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:35: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5360);
            	    array_size572=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size572.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID574=null;
        ObjcParser.knownTypes_return knownTypes573 =null;


        Object ID574_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:3: ( knownTypes | ID )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==181||(LA129_0 >= 184 && LA129_0 <= 185)||LA129_0==187) ) {
                alt129=1;
            }
            else if ( (LA129_0==ID) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }
            switch (alt129) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5377);
                    knownTypes573=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes573.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID574=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID574_tree = 
                    (Object)adaptor.create(ID574)
                    ;
                    adaptor.addChild(root_0, ID574_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal575=null;
        Token string_literal576=null;
        Token string_literal577=null;
        Token string_literal578=null;
        Token string_literal579=null;
        Token string_literal580=null;

        Object string_literal575_tree=null;
        Object string_literal576_tree=null;
        Object string_literal577_tree=null;
        Object string_literal578_tree=null;
        Object string_literal579_tree=null;
        Object string_literal580_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt134=4;
            switch ( input.LA(1) ) {
            case 184:
                {
                alt134=1;
                }
                break;
            case 181:
                {
                alt134=2;
                }
                break;
            case 185:
                {
                alt134=3;
                }
                break;
            case 187:
                {
                alt134=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }

            switch (alt134) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal575=(Token)match(input,184,FOLLOW_184_in_knownTypes5399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal575_tree = 
                    (Object)adaptor.create(string_literal575)
                    ;
                    adaptor.addChild(root_0, string_literal575_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal576=(Token)match(input,181,FOLLOW_181_in_knownTypes5405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal576_tree = 
                    (Object)adaptor.create(string_literal576)
                    ;
                    adaptor.addChild(root_0, string_literal576_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: ( 'long' )+
                    int cnt130=0;
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==185) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: 'long'
                    	    {
                    	    string_literal577=(Token)match(input,185,FOLLOW_185_in_knownTypes5411); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal577_tree = 
                    	    (Object)adaptor.create(string_literal577)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal577_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt130 >= 1 ) break loop130;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(130, input);
                                throw eee;
                        }
                        cnt130++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:13: ( 'int' )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==184) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:13: 'int'
                            {
                            string_literal578=(Token)match(input,184,FOLLOW_184_in_knownTypes5414); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal578_tree = 
                            (Object)adaptor.create(string_literal578)
                            ;
                            adaptor.addChild(root_0, string_literal578_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:5: ( 'short' )+
                    int cnt132=0;
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==187) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:5: 'short'
                    	    {
                    	    string_literal579=(Token)match(input,187,FOLLOW_187_in_knownTypes5421); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal579_tree = 
                    	    (Object)adaptor.create(string_literal579)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal579_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt132 >= 1 ) break loop132;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(132, input);
                                throw eee;
                        }
                        cnt132++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:14: ( 'int' )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==184) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:14: 'int'
                            {
                            string_literal580=(Token)match(input,184,FOLLOW_184_in_knownTypes5424); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal580_tree = 
                            (Object)adaptor.create(string_literal580)
                            ;
                            adaptor.addChild(root_0, string_literal580_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID581=null;
        ObjcParser.array_size_return array_size582 =null;

        ObjcParser.field_crap_return field_crap583 =null;


        Object ID581_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:5: ID ( array_size )* ( field_crap )?
            {
            ID581=(Token)match(input,ID,FOLLOW_ID_in_field_name5440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID581);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:8: ( array_size )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==166) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5442);
            	    array_size582=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size582.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:20: ( field_crap )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==133) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5446);
                    field_crap583=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap583.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, array_size
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 870:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal584=null;
        Token set585=null;
        Token char_literal586=null;

        Object char_literal584_tree=null;
        Object set585_tree=null;
        Object char_literal586_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal584=(Token)match(input,166,FOLLOW_166_in_array_size5474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal584_tree = 
            (Object)adaptor.create(char_literal584)
            ;
            adaptor.addChild(root_0, char_literal584_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:9: ( NUMBER_LITERAL | ID )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ID||LA137_0==NUMBER_LITERAL) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set585=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set585)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal586=(Token)match(input,167,FOLLOW_167_in_array_size5485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal586_tree = 
            (Object)adaptor.create(char_literal586)
            ;
            adaptor.addChild(root_0, char_literal586_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal587=null;
        Token NUMBER_LITERAL588=null;

        Object char_literal587_tree=null;
        Object NUMBER_LITERAL588_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal587=(Token)match(input,133,FOLLOW_133_in_field_crap5495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal587_tree = 
            (Object)adaptor.create(char_literal587)
            ;
            adaptor.addChild(root_0, char_literal587_tree);
            }

            NUMBER_LITERAL588=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL588_tree = 
            (Object)adaptor.create(NUMBER_LITERAL588)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL588_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper589 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants590 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5509);
            method_modifier_wrapper589=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper589.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5511);
            method_declaration_variants590=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants590.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:881:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier591 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5523);
            method_modifier591=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier591.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 882:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set592=null;

        Object set592_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:885:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set592=(Token)input.LT(1);

            if ( input.LA(1)==122||input.LA(1)==126 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set592)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common593 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5560);
            method_declaration_common593=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common593.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:890:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal594=null;
        Token char_literal596=null;
        Token char_literal599=null;
        ObjcParser.type_declaration_return type_declaration595 =null;

        ObjcParser.method_name_return method_name597 =null;

        ObjcParser.method_params_return method_params598 =null;


        Object char_literal594_tree=null;
        Object char_literal596_tree=null;
        Object char_literal599_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:6: '(' type_declaration ')' method_name
            {
            char_literal594=(Token)match(input,118,FOLLOW_118_in_method_declaration_common5573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal594_tree = 
            (Object)adaptor.create(char_literal594)
            ;
            adaptor.addChild(root_0, char_literal594_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5575);
            type_declaration595=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration595.getTree());

            char_literal596=(Token)match(input,119,FOLLOW_119_in_method_declaration_common5577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal596_tree = 
            (Object)adaptor.create(char_literal596)
            ;
            adaptor.addChild(root_0, char_literal596_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5579);
            method_name597=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name597.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:44: ( method_params )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ID||LA138_0==133) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5582);
                    method_params598=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params598.getTree());

                    }
                    break;

            }


            char_literal599=(Token)match(input,134,FOLLOW_134_in_method_declaration_common5585); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal599_tree = 
            (Object)adaptor.create(char_literal599)
            ;
            adaptor.addChild(root_0, char_literal599_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal601=null;
        Token char_literal603=null;
        ObjcParser.method_modifier_return method_modifier600 =null;

        ObjcParser.type_declaration_return type_declaration602 =null;

        ObjcParser.method_name_return method_name604 =null;


        Object char_literal601_tree=null;
        Object char_literal603_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5597);
            method_modifier600=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier600.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:22: '(' type_declaration ')' method_name
            {
            char_literal601=(Token)match(input,118,FOLLOW_118_in_method_declaration_predicate5600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal601_tree = 
            (Object)adaptor.create(char_literal601)
            ;
            adaptor.addChild(root_0, char_literal601_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5602);
            type_declaration602=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration602.getTree());

            char_literal603=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate5604); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal603_tree = 
            (Object)adaptor.create(char_literal603)
            ;
            adaptor.addChild(root_0, char_literal603_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5606);
            method_name604=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name604.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID605=null;

        Object ID605_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: ID
            {
            ID605=(Token)match(input,ID,FOLLOW_ID_in_method_name5624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID605);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 898:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param606 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:5: ( method_param )+
            int cnt139=0;
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==ID||LA139_0==133) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5647);
            	    method_param606=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param606.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 902:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal608=null;
        Token char_literal609=null;
        Token char_literal611=null;
        ObjcParser.prefix_return prefix607 =null;

        ObjcParser.type_declaration_return type_declaration610 =null;

        ObjcParser.param_name_return param_name612 =null;


        Object char_literal608_tree=null;
        Object char_literal609_tree=null;
        Object char_literal611_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:5: ( prefix )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==ID) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5667);
                    prefix607=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix607.getTree());

                    }
                    break;

            }


            char_literal608=(Token)match(input,133,FOLLOW_133_in_method_param5670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal608);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:17: ( '(' type_declaration ')' )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==118) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:18: '(' type_declaration ')'
                    {
                    char_literal609=(Token)match(input,118,FOLLOW_118_in_method_param5673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal609);


                    pushFollow(FOLLOW_type_declaration_in_method_param5675);
                    type_declaration610=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration610.getTree());

                    char_literal611=(Token)match(input,119,FOLLOW_119_in_method_param5677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal611);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5681);
            param_name612=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name612.getTree());

            // AST REWRITE
            // elements: prefix, 119, 118, 133, type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 905:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:905:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_133.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID613=null;

        Object ID613_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ID
            {
            ID613=(Token)match(input,ID,FOLLOW_ID_in_param_name5714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID613);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID614=null;

        Object ID614_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:11: ID
            {
            ID614=(Token)match(input,ID,FOLLOW_ID_in_prefix5733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID614);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 910:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:1: define_declaration : ( ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL615=null;
        Token DEFINE_LITERAL618=null;
        ObjcParser.name_return name616 =null;

        ObjcParser.element_value_return element_value617 =null;

        ObjcParser.name_return name619 =null;


        Object DEFINE_LITERAL615_tree=null;
        Object DEFINE_LITERAL618_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:3: ( ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL615=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL615);


                    pushFollow(FOLLOW_name_in_define_declaration5762);
                    name616=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name616.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration5764);
                    element_value617=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value617.getTree());

                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 914:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL618=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL618);


                    pushFollow(FOLLOW_name_in_define_declaration5782);
                    name619=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name619.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 915:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1262);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1273);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred4_Objc1275);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred5_Objc1288);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred5_Objc1290);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred6_Objc1531);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,134,FOLLOW_134_in_synpred6_Objc1533); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1550);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,183,FOLLOW_183_in_synpred7_Objc1552); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred8_Objc1569);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred8_Objc1571);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred9_Objc2157);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred9_Objc2159);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred10_Objc2738);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred11_Objc2751); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2753);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred11_Objc2755);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred11_Objc2757); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred11_Objc2759);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred12_Objc2820);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:30: ( access_wrapper name )*
        loop143:
        do {
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( ((LA143_0 >= 129 && LA143_0 <= 130)) ) {
                alt143=1;
            }


            switch (alt143) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred12_Objc2823);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred12_Objc2825);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop143;
            }
        } while (true);


        match(input,118,FOLLOW_118_in_synpred12_Objc2829); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:6: ( '&' )?
        int alt144=2;
        int LA144_0 = input.LA(1);

        if ( (LA144_0==116) ) {
            alt144=1;
        }
        switch (alt144) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred13_Objc2878); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred13_Objc2881);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred13_Objc2883); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==116||input.LA(1)==120 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred14_Objc2919);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred15_Objc3014);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred16_Objc3303);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred17_Objc3437);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:6: '(' type_cast_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred18_Objc3450); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred18_Objc3452);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:6: ( '&' )?
        int alt145=2;
        int LA145_0 = input.LA(1);

        if ( (LA145_0==116) ) {
            alt145=1;
        }
        switch (alt145) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred19_Objc3511); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred19_Objc3514);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred19_Objc3516); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred20_Objc3951);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred21_Objc4725);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred22_Objc4736);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4827);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred24_Objc4838);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:6: 'struct' ( typedef_name )? '{'
        {
        match(input,189,FOLLOW_189_in_synpred25_Objc5055); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:15: ( typedef_name )?
        int alt146=2;
        int LA146_0 = input.LA(1);

        if ( (LA146_0==ID) ) {
            alt146=1;
        }
        switch (alt146) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred25_Objc5057);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,196,FOLLOW_196_in_synpred25_Objc5060); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:6: 'union' ( typedef_name )? '{'
        {
        match(input,192,FOLLOW_192_in_synpred26_Objc5100); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:14: ( typedef_name )?
        int alt147=2;
        int LA147_0 = input.LA(1);

        if ( (LA147_0==ID) ) {
            alt147=1;
        }
        switch (alt147) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred26_Objc5102);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,196,FOLLOW_196_in_synpred26_Objc5105); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:6: 'enum' ( typedef_name )? '{'
        {
        match(input,177,FOLLOW_177_in_synpred27_Objc5145); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:13: ( typedef_name )?
        int alt148=2;
        int LA148_0 = input.LA(1);

        if ( (LA148_0==ID) ) {
            alt148=1;
        }
        switch (alt148) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred27_Objc5147);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,196,FOLLOW_196_in_synpred27_Objc5150); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred28_Objc5753); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred28_Objc5755);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred28_Objc5757);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // Delegated rules

    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA17 dfa17 = new DFA17(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA142 dfa142 = new DFA142(this);
    static final String DFA17_eotS =
        "\134\uffff";
    static final String DFA17_eofS =
        "\134\uffff";
    static final String DFA17_minS =
        "\3\57\37\uffff\1\57\2\uffff\1\13\22\uffff\1\165\4\uffff\1\161\4"+
        "\uffff\1\161\11\uffff\1\0\10\uffff\1\0\5\uffff\1\0";
    static final String DFA17_maxS =
        "\1\u00c4\1\u00c6\1\u00c2\37\uffff\1\57\2\uffff\1\u00c9\22\uffff"+
        "\1\u00c6\4\uffff\1\u00c7\4\uffff\1\u00c7\11\uffff\1\0\10\uffff\1"+
        "\0\5\uffff\1\0";
    static final String DFA17_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\5\uffff\14\3\1\uffff\4\3\1\uffff\4\3\1\uffff\7\3\1"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\1\uffff";
    static final String DFA17_specialS =
        "\1\0\1\1\1\2\42\uffff\1\3\22\uffff\1\4\4\uffff\1\5\4\uffff\1\6\11"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11}>";
    static final String[] DFA17_transitionS = {
            "\1\1\21\uffff\1\40\21\uffff\1\40\40\uffff\1\3\1\uffff\1\2\1"+
            "\uffff\1\4\15\uffff\1\32\31\uffff\1\17\1\uffff\1\21\1\20\2\uffff"+
            "\1\37\3\uffff\1\33\1\uffff\1\5\1\34\1\uffff\1\23\1\25\1\5\1"+
            "\uffff\1\30\1\35\1\5\1\24\1\uffff\2\5\1\27\1\5\1\22\1\5\1\26"+
            "\1\uffff\3\5\1\31\1\36",
            "\1\5\104\uffff\1\5\1\46\1\43\1\uffff\1\5\1\46\1\uffff\1\44"+
            "\1\46\2\uffff\1\44\1\46\2\42\1\uffff\1\46\4\uffff\1\46\1\uffff"+
            "\1\46\4\uffff\1\46\25\uffff\1\45\5\uffff\1\5\31\uffff\1\46",
            "\1\64\106\uffff\1\55\1\uffff\1\5\63\uffff\1\57\4\uffff\1\67"+
            "\3\uffff\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1\uffff\1\65\2"+
            "\uffff\1\66\1\60\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\70",
            "",
            "",
            "\1\103\5\uffff\1\101\35\uffff\1\75\24\uffff\1\102\23\uffff"+
            "\1\77\1\100\26\uffff\1\107\3\uffff\1\74\1\uffff\1\72\1\uffff"+
            "\1\76\2\uffff\1\111\2\uffff\1\71\1\111\37\uffff\1\73\6\uffff"+
            "\1\106\1\5\1\104\1\105\37\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\116\1\113\2\uffff\1\116\1\uffff\1\115\1\116\2\uffff\1\115"+
            "\1\116\2\114\1\uffff\1\116\4\uffff\1\116\1\uffff\1\116\4\uffff"+
            "\1\116\65\uffff\1\116",
            "",
            "",
            "",
            "",
            "\1\123\1\uffff\2\123\1\uffff\1\121\1\uffff\1\123\1\uffff\1"+
            "\123\1\122\2\uffff\1\123\1\122\1\uffff\2\120\1\123\3\uffff\2"+
            "\123\1\uffff\6\123\1\uffff\1\124\24\uffff\1\117\1\125\1\123"+
            "\34\uffff\1\123\1\uffff\1\123",
            "",
            "",
            "",
            "",
            "\1\131\1\uffff\2\131\1\uffff\1\127\1\uffff\1\131\1\uffff\1"+
            "\131\1\130\2\uffff\1\131\1\130\1\uffff\2\126\1\131\3\uffff\2"+
            "\131\1\uffff\6\131\1\uffff\1\132\25\uffff\1\133\1\131\34\uffff"+
            "\1\131\1\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "257:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_0 = input.LA(1);

                         
                        int index17_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_0==ID) ) {s = 1;}

                        else if ( (LA17_0==118) ) {s = 2;}

                        else if ( (LA17_0==116) && (synpred5_Objc())) {s = 3;}

                        else if ( (LA17_0==120) && (synpred5_Objc())) {s = 4;}

                        else if ( (LA17_0==172||LA17_0==177||LA17_0==181||(LA17_0 >= 184 && LA17_0 <= 185)||LA17_0==187||LA17_0==189||(LA17_0 >= 192 && LA17_0 <= 194)) ) {s = 5;}

                        else if ( (LA17_0==160) ) {s = 15;}

                        else if ( (LA17_0==163) ) {s = 16;}

                        else if ( (LA17_0==162) ) {s = 17;}

                        else if ( (LA17_0==188) ) {s = 18;}

                        else if ( (LA17_0==175) ) {s = 19;}

                        else if ( (LA17_0==182) ) {s = 20;}

                        else if ( (LA17_0==176) ) {s = 21;}

                        else if ( (LA17_0==190) ) {s = 22;}

                        else if ( (LA17_0==186) ) {s = 23;}

                        else if ( (LA17_0==179) ) {s = 24;}

                        else if ( (LA17_0==195) ) {s = 25;}

                        else if ( (LA17_0==134) ) {s = 26;}

                        else if ( (LA17_0==170) ) {s = 27;}

                        else if ( (LA17_0==173) ) {s = 28;}

                        else if ( (LA17_0==180) ) {s = 29;}

                        else if ( (LA17_0==196) ) {s = 30;}

                        else if ( (LA17_0==166) ) {s = 31;}

                        else if ( (LA17_0==MULTI_COMMENT_LIT||LA17_0==SINGLE_COMMENT_LIT) ) {s = 32;}

                         
                        input.seek(index17_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA17_1 = input.LA(1);

                         
                        int index17_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA17_1 >= 129 && LA17_1 <= 130)) ) {s = 34;}

                        else if ( (LA17_1==118) && (synpred3_Objc())) {s = 35;}

                        else if ( (LA17_1==123||LA17_1==127) && (synpred4_Objc())) {s = 36;}

                        else if ( (LA17_1==166) ) {s = 37;}

                        else if ( (LA17_1==117||LA17_1==121||LA17_1==124||LA17_1==128||LA17_1==132||LA17_1==137||LA17_1==139||LA17_1==144||LA17_1==198) && (synpred5_Objc())) {s = 38;}

                        else if ( (LA17_1==ID||LA17_1==116||LA17_1==120||LA17_1==172) ) {s = 5;}

                         
                        input.seek(index17_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA17_2 = input.LA(1);

                         
                        int index17_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_2==120) ) {s = 5;}

                        else if ( (LA17_2==181) && (synpred5_Objc())) {s = 44;}

                        else if ( (LA17_2==118) && (synpred5_Objc())) {s = 45;}

                        else if ( (LA17_2==194) && (synpred5_Objc())) {s = 46;}

                        else if ( (LA17_2==172) && (synpred5_Objc())) {s = 47;}

                        else if ( (LA17_2==193) && (synpred5_Objc())) {s = 48;}

                        else if ( (LA17_2==184) && (synpred5_Objc())) {s = 49;}

                        else if ( (LA17_2==185) && (synpred5_Objc())) {s = 50;}

                        else if ( (LA17_2==187) && (synpred5_Objc())) {s = 51;}

                        else if ( (LA17_2==ID) && (synpred5_Objc())) {s = 52;}

                        else if ( (LA17_2==189) && (synpred5_Objc())) {s = 53;}

                        else if ( (LA17_2==192) && (synpred5_Objc())) {s = 54;}

                        else if ( (LA17_2==177) && (synpred5_Objc())) {s = 55;}

                         
                        input.seek(index17_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA17_37 = input.LA(1);

                         
                        int index17_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_37==126) && (synpred5_Objc())) {s = 57;}

                        else if ( (LA17_37==118) && (synpred5_Objc())) {s = 58;}

                        else if ( (LA17_37==159) && (synpred5_Objc())) {s = 59;}

                        else if ( (LA17_37==116) && (synpred5_Objc())) {s = 60;}

                        else if ( (LA17_37==ID) ) {s = 61;}

                        else if ( (LA17_37==120) && (synpred5_Objc())) {s = 62;}

                        else if ( (LA17_37==STRING_LITERAL) && (synpred5_Objc())) {s = 63;}

                        else if ( (LA17_37==STRING_OBJC) && (synpred5_Objc())) {s = 64;}

                        else if ( (LA17_37==CHAR_LITERAL) && (synpred5_Objc())) {s = 65;}

                        else if ( (LA17_37==NUMBER_LITERAL) ) {s = 66;}

                        else if ( (LA17_37==BOOL_LITERAL) && (synpred5_Objc())) {s = 67;}

                        else if ( (LA17_37==168) && (synpred5_Objc())) {s = 68;}

                        else if ( (LA17_37==169) && (synpred5_Objc())) {s = 69;}

                        else if ( (LA17_37==166) && (synpred5_Objc())) {s = 70;}

                        else if ( (LA17_37==112) && (synpred5_Objc())) {s = 71;}

                        else if ( (LA17_37==201) && (synpred5_Objc())) {s = 72;}

                        else if ( (LA17_37==123||LA17_37==127) && (synpred5_Objc())) {s = 73;}

                        else if ( (LA17_37==167) ) {s = 5;}

                         
                        input.seek(index17_37);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA17_56 = input.LA(1);

                         
                        int index17_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_56==118) && (synpred3_Objc())) {s = 75;}

                        else if ( ((LA17_56 >= 129 && LA17_56 <= 130)) ) {s = 76;}

                        else if ( (LA17_56==123||LA17_56==127) && (synpred4_Objc())) {s = 77;}

                        else if ( (LA17_56==117||LA17_56==121||LA17_56==124||LA17_56==128||LA17_56==132||LA17_56==137||LA17_56==139||LA17_56==144||LA17_56==198) && (synpred5_Objc())) {s = 78;}

                         
                        input.seek(index17_56);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA17_61 = input.LA(1);

                         
                        int index17_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_61==166) && (synpred5_Objc())) {s = 79;}

                        else if ( ((LA17_61 >= 129 && LA17_61 <= 130)) && (synpred5_Objc())) {s = 80;}

                        else if ( (LA17_61==118) && (synpred5_Objc())) {s = 81;}

                        else if ( (LA17_61==123||LA17_61==127) && (synpred5_Objc())) {s = 82;}

                        else if ( (LA17_61==113||(LA17_61 >= 115 && LA17_61 <= 116)||LA17_61==120||LA17_61==122||LA17_61==126||LA17_61==131||(LA17_61 >= 135 && LA17_61 <= 136)||(LA17_61 >= 138 && LA17_61 <= 143)||LA17_61==168||LA17_61==197||LA17_61==199) && (synpred5_Objc())) {s = 83;}

                        else if ( (LA17_61==145) && (synpred5_Objc())) {s = 84;}

                        else if ( (LA17_61==167) ) {s = 85;}

                         
                        input.seek(index17_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA17_66 = input.LA(1);

                         
                        int index17_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA17_66 >= 129 && LA17_66 <= 130)) && (synpred5_Objc())) {s = 86;}

                        else if ( (LA17_66==118) && (synpred5_Objc())) {s = 87;}

                        else if ( (LA17_66==123||LA17_66==127) && (synpred5_Objc())) {s = 88;}

                        else if ( (LA17_66==113||(LA17_66 >= 115 && LA17_66 <= 116)||LA17_66==120||LA17_66==122||LA17_66==126||LA17_66==131||(LA17_66 >= 135 && LA17_66 <= 136)||(LA17_66 >= 138 && LA17_66 <= 143)||LA17_66==168||LA17_66==197||LA17_66==199) && (synpred5_Objc())) {s = 89;}

                        else if ( (LA17_66==145) && (synpred5_Objc())) {s = 90;}

                        else if ( (LA17_66==167) ) {s = 91;}

                         
                        input.seek(index17_66);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA17_76 = input.LA(1);

                         
                        int index17_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_Objc()) ) {s = 75;}

                        else if ( (synpred4_Objc()) ) {s = 77;}

                        else if ( (synpred5_Objc()) ) {s = 90;}

                         
                        input.seek(index17_76);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA17_85 = input.LA(1);

                         
                        int index17_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index17_85);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA17_91 = input.LA(1);

                         
                        int index17_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index17_91);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA21_eotS =
        "\104\uffff";
    static final String DFA21_eofS =
        "\104\uffff";
    static final String DFA21_minS =
        "\3\57\16\uffff\1\13\27\uffff\1\161\4\uffff\1\161\16\uffff\1\0\5"+
        "\uffff\1\0";
    static final String DFA21_maxS =
        "\1\u00c2\1\u00c6\1\u00c2\16\uffff\1\u00c9\27\uffff\1\u00c7\4\uffff"+
        "\1\u00c7\16\uffff\1\0\5\uffff\1\0";
    static final String DFA21_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\1\1\2\1\uffff\2\3\5\uffff\20\3\1\uffff"+
        "\4\3\1\uffff\7\3\1\uffff\6\3\1\uffff\5\3\1\uffff";
    static final String DFA21_specialS =
        "\1\0\1\1\1\2\16\uffff\1\3\27\uffff\1\4\4\uffff\1\5\16\uffff\1\6"+
        "\5\uffff\1\7}>";
    static final String[] DFA21_transitionS = {
            "\1\1\104\uffff\1\3\1\uffff\1\2\1\uffff\1\4\63\uffff\1\5\4\uffff"+
            "\1\5\3\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff\1\5\2\uffff"+
            "\3\5",
            "\1\5\104\uffff\1\5\1\23\2\uffff\1\5\1\23\2\uffff\1\23\3\uffff"+
            "\1\23\2\22\1\uffff\1\23\1\uffff\1\17\2\uffff\1\23\1\uffff\1"+
            "\23\4\uffff\1\23\25\uffff\1\21\5\uffff\1\5\12\uffff\1\20\16"+
            "\uffff\1\23",
            "\1\41\106\uffff\1\32\1\uffff\1\5\63\uffff\1\34\4\uffff\1\44"+
            "\3\uffff\1\31\2\uffff\1\36\1\37\1\uffff\1\40\1\uffff\1\42\2"+
            "\uffff\1\43\1\35\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\5\uffff\1\55\35\uffff\1\51\24\uffff\1\56\23\uffff\1\53"+
            "\1\54\26\uffff\1\63\3\uffff\1\50\1\uffff\1\46\1\uffff\1\52\2"+
            "\uffff\1\65\2\uffff\1\45\1\65\37\uffff\1\47\6\uffff\1\62\1\5"+
            "\1\60\1\61\37\uffff\1\64",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\73\1\uffff\2\73\1\uffff\1\71\1\uffff\1\73\1\uffff\1\73\1"+
            "\72\2\uffff\1\73\1\72\1\uffff\2\70\1\73\3\uffff\2\73\1\uffff"+
            "\6\73\1\uffff\1\74\24\uffff\1\67\1\75\1\73\34\uffff\1\73\1\uffff"+
            "\1\73",
            "",
            "",
            "",
            "",
            "\1\101\1\uffff\2\101\1\uffff\1\77\1\uffff\1\101\1\uffff\1\101"+
            "\1\100\2\uffff\1\101\1\100\1\uffff\2\76\1\101\3\uffff\2\101"+
            "\1\uffff\6\101\1\uffff\1\102\25\uffff\1\103\1\101\34\uffff\1"+
            "\101\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "302:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_0 = input.LA(1);

                         
                        int index21_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA21_0==ID) ) {s = 1;}

                        else if ( (LA21_0==118) ) {s = 2;}

                        else if ( (LA21_0==116) && (synpred8_Objc())) {s = 3;}

                        else if ( (LA21_0==120) && (synpred8_Objc())) {s = 4;}

                        else if ( (LA21_0==172||LA21_0==177||LA21_0==181||(LA21_0 >= 184 && LA21_0 <= 185)||LA21_0==187||LA21_0==189||(LA21_0 >= 192 && LA21_0 <= 194)) ) {s = 5;}

                         
                        input.seek(index21_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA21_1==134) && (synpred6_Objc())) {s = 15;}

                        else if ( (LA21_1==183) && (synpred7_Objc())) {s = 16;}

                        else if ( (LA21_1==166) ) {s = 17;}

                        else if ( ((LA21_1 >= 129 && LA21_1 <= 130)) && (synpred8_Objc())) {s = 18;}

                        else if ( (LA21_1==117||LA21_1==121||LA21_1==124||LA21_1==128||LA21_1==132||LA21_1==137||LA21_1==139||LA21_1==144||LA21_1==198) && (synpred8_Objc())) {s = 19;}

                        else if ( (LA21_1==ID||LA21_1==116||LA21_1==120||LA21_1==172) ) {s = 5;}

                         
                        input.seek(index21_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA21_2==120) ) {s = 5;}

                        else if ( (LA21_2==181) && (synpred8_Objc())) {s = 25;}

                        else if ( (LA21_2==118) && (synpred8_Objc())) {s = 26;}

                        else if ( (LA21_2==194) && (synpred8_Objc())) {s = 27;}

                        else if ( (LA21_2==172) && (synpred8_Objc())) {s = 28;}

                        else if ( (LA21_2==193) && (synpred8_Objc())) {s = 29;}

                        else if ( (LA21_2==184) && (synpred8_Objc())) {s = 30;}

                        else if ( (LA21_2==185) && (synpred8_Objc())) {s = 31;}

                        else if ( (LA21_2==187) && (synpred8_Objc())) {s = 32;}

                        else if ( (LA21_2==ID) && (synpred8_Objc())) {s = 33;}

                        else if ( (LA21_2==189) && (synpred8_Objc())) {s = 34;}

                        else if ( (LA21_2==192) && (synpred8_Objc())) {s = 35;}

                        else if ( (LA21_2==177) && (synpred8_Objc())) {s = 36;}

                         
                        input.seek(index21_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA21_17==126) && (synpred8_Objc())) {s = 37;}

                        else if ( (LA21_17==118) && (synpred8_Objc())) {s = 38;}

                        else if ( (LA21_17==159) && (synpred8_Objc())) {s = 39;}

                        else if ( (LA21_17==116) && (synpred8_Objc())) {s = 40;}

                        else if ( (LA21_17==ID) ) {s = 41;}

                        else if ( (LA21_17==120) && (synpred8_Objc())) {s = 42;}

                        else if ( (LA21_17==STRING_LITERAL) && (synpred8_Objc())) {s = 43;}

                        else if ( (LA21_17==STRING_OBJC) && (synpred8_Objc())) {s = 44;}

                        else if ( (LA21_17==CHAR_LITERAL) && (synpred8_Objc())) {s = 45;}

                        else if ( (LA21_17==NUMBER_LITERAL) ) {s = 46;}

                        else if ( (LA21_17==BOOL_LITERAL) && (synpred8_Objc())) {s = 47;}

                        else if ( (LA21_17==168) && (synpred8_Objc())) {s = 48;}

                        else if ( (LA21_17==169) && (synpred8_Objc())) {s = 49;}

                        else if ( (LA21_17==166) && (synpred8_Objc())) {s = 50;}

                        else if ( (LA21_17==112) && (synpred8_Objc())) {s = 51;}

                        else if ( (LA21_17==201) && (synpred8_Objc())) {s = 52;}

                        else if ( (LA21_17==123||LA21_17==127) && (synpred8_Objc())) {s = 53;}

                        else if ( (LA21_17==167) ) {s = 5;}

                         
                        input.seek(index21_17);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA21_41==166) && (synpred8_Objc())) {s = 55;}

                        else if ( ((LA21_41 >= 129 && LA21_41 <= 130)) && (synpred8_Objc())) {s = 56;}

                        else if ( (LA21_41==118) && (synpred8_Objc())) {s = 57;}

                        else if ( (LA21_41==123||LA21_41==127) && (synpred8_Objc())) {s = 58;}

                        else if ( (LA21_41==113||(LA21_41 >= 115 && LA21_41 <= 116)||LA21_41==120||LA21_41==122||LA21_41==126||LA21_41==131||(LA21_41 >= 135 && LA21_41 <= 136)||(LA21_41 >= 138 && LA21_41 <= 143)||LA21_41==168||LA21_41==197||LA21_41==199) && (synpred8_Objc())) {s = 59;}

                        else if ( (LA21_41==145) && (synpred8_Objc())) {s = 60;}

                        else if ( (LA21_41==167) ) {s = 61;}

                         
                        input.seek(index21_41);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA21_46 >= 129 && LA21_46 <= 130)) && (synpred8_Objc())) {s = 62;}

                        else if ( (LA21_46==118) && (synpred8_Objc())) {s = 63;}

                        else if ( (LA21_46==123||LA21_46==127) && (synpred8_Objc())) {s = 64;}

                        else if ( (LA21_46==113||(LA21_46 >= 115 && LA21_46 <= 116)||LA21_46==120||LA21_46==122||LA21_46==126||LA21_46==131||(LA21_46 >= 135 && LA21_46 <= 136)||(LA21_46 >= 138 && LA21_46 <= 143)||LA21_46==168||LA21_46==197||LA21_46==199) && (synpred8_Objc())) {s = 65;}

                        else if ( (LA21_46==145) && (synpred8_Objc())) {s = 66;}

                        else if ( (LA21_46==167) ) {s = 67;}

                         
                        input.seek(index21_46);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_61);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA21_67 = input.LA(1);

                         
                        int index21_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_67);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA48_eotS =
        "\u012f\uffff";
    static final String DFA48_eofS =
        "\110\uffff\1\2\u00e6\uffff";
    static final String DFA48_minS =
        "\2\13\15\uffff\1\13\6\uffff\1\161\22\uffff\1\57\1\164\1\13\3\57"+
        "\3\164\1\161\3\57\16\uffff\2\13\1\uffff\2\13\14\uffff\10\0\32\uffff"+
        "\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\66\uffff";
    static final String DFA48_maxS =
        "\1\u00a9\1\u00c9\15\uffff\1\u00c9\6\uffff\1\u00c7\22\uffff\1\u00c2"+
        "\1\u00ac\1\u00c9\2\u00c1\1\u00bb\1\u00ac\1\u00b9\1\u00bb\1\u00c7"+
        "\3\u00bb\16\uffff\2\u00c9\1\uffff\1\u00c9\1\u00c8\14\uffff\10\0"+
        "\32\uffff\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0"+
        "\5\uffff\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\66\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\3\13\uffff\1\1\1\uffff\6\1\1\uffff\3\1\54\uffff\1\1\7"+
        "\uffff\7\1\141\uffff\1\1\1\uffff\1\1\20\uffff\1\1\20\uffff\1\1\21"+
        "\uffff\1\1\3\uffff\5\1\1\uffff\1\1\67\uffff\1\2";
    static final String DFA48_specialS =
        "\1\uffff\1\0\24\uffff\1\1\22\uffff\1\2\32\uffff\1\3\1\4\1\uffff"+
        "\1\5\1\6\14\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\32\uffff"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\5\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\uffff\1\111\1"+
        "\uffff\1\112\16\uffff\1\113\5\uffff\1\114\36\uffff\1\115\1\116\1"+
        "\117\5\uffff\1\120\1\uffff\1\121\1\122\66\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff"+
            "\1\2\1\uffff\1\1\1\uffff\1\2\46\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2",
            "\1\2\5\uffff\1\2\35\uffff\1\26\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\17\1\uffff\1\2\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\2\2\2\uffff\1"+
            "\21\4\uffff\1\31\3\uffff\1\16\2\uffff\1\23\1\24\1\uffff\1\25"+
            "\1\uffff\1\27\2\uffff\1\30\1\22\1\20\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\62\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\53\1\uffff\1\51\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\2\2\2\uffff\1"+
            "\55\4\uffff\1\65\3\uffff\1\52\2\uffff\1\57\1\60\1\uffff\1\61"+
            "\1\uffff\1\63\2\uffff\1\64\1\56\1\54\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\107\1\uffff\1\2\1\110\1\104\1\uffff\2\2"+
            "\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff\1\2"+
            "\24\uffff\1\105\1\uffff\1\2\3\uffff\1\106\30\uffff\1\2\1\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\125\174\uffff\1\117\10\uffff\1\122\2\uffff\1\121\1\123\1"+
            "\uffff\1\124\5\uffff\1\120\1\116",
            "\1\132\2\uffff\1\133\1\127\16\uffff\1\126\36\uffff\1\130\5"+
            "\uffff\1\131",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\134\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\2\2\2\uffff\1"+
            "\2\4\uffff\1\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\3\2\6\uffff\1\2",
            "\1\175\174\uffff\1\167\10\uffff\1\172\2\uffff\1\171\1\173\1"+
            "\uffff\1\174\5\uffff\1\170",
            "\1\u0083\u0085\uffff\1\u0080\2\uffff\1\177\1\u0081\1\uffff"+
            "\1\u0082\5\uffff\1\176",
            "\1\u0088\u0085\uffff\1\u0085\2\uffff\1\u0084\1\u0086\1\uffff"+
            "\1\u0087",
            "\1\u008c\2\uffff\1\u008d\1\u0089\55\uffff\1\u008a\5\uffff\1"+
            "\u008b",
            "\1\u0092\2\uffff\1\u0093\1\u008f\55\uffff\1\u0090\5\uffff\1"+
            "\u0091\13\uffff\1\u008e\1\u0094",
            "\1\u0099\2\uffff\1\u009a\1\u0096\55\uffff\1\u0097\5\uffff\1"+
            "\u0098\13\uffff\1\u0095\2\uffff\1\u009b",
            "\1\2\1\uffff\1\2\1\u009f\1\uffff\1\2\1\u00a0\1\u009c\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\24\uffff\1\u009d\1\uffff\1\2\3\uffff\1\u009e\30\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u00aa\u0085\uffff\1\u00a7\2\uffff\1\u00a6\1\u00a8\1\uffff"+
            "\1\u00a9",
            "\1\u00af\u0085\uffff\1\u00ac\2\uffff\1\u00ab\1\u00ad\1\uffff"+
            "\1\u00ae",
            "\1\u00b4\u0085\uffff\1\u00b1\2\uffff\1\u00b0\1\u00b2\1\uffff"+
            "\1\u00b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\u00b7\1\uffff\1\2\1\u00b8\1\u00b9\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\u00b5\1\uffff\2\2\2"+
            "\uffff\1\u00b6\34\uffff\1\2",
            "\1\2\5\uffff\1\2\35\uffff\1\u00c8\24\uffff\1\u00ce\23\uffff"+
            "\2\2\26\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\u00c9\2\2\37\uffff"+
            "\1\2",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\u00da\1\2\2\uffff\1\2\2"+
            "\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\2\2\37\uffff\1\2",
            "\1\u00f4\5\uffff\1\u00f2\5\uffff\1\2\27\uffff\1\u00ee\21\uffff"+
            "\1\2\2\uffff\1\u00f3\16\uffff\1\2\4\uffff\1\u00f0\1\u00f1\27"+
            "\uffff\1\2\1\uffff\1\2\1\u00ed\1\uffff\1\u00f8\1\2\1\u00ef\1"+
            "\uffff\2\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\1"+
            "\uffff\10\2\4\uffff\1\2\1\uffff\1\u00ec\4\2\2\uffff\1\u00f7"+
            "\1\2\1\u00f5\1\u00f6\15\2\1\uffff\16\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "483:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_1==181) && (synpred10_Objc())) {s = 14;}

                        else if ( (LA48_1==118) ) {s = 15;}

                        else if ( (LA48_1==194) && (synpred10_Objc())) {s = 16;}

                        else if ( (LA48_1==172) && (synpred10_Objc())) {s = 17;}

                        else if ( (LA48_1==193) && (synpred10_Objc())) {s = 18;}

                        else if ( (LA48_1==184) && (synpred10_Objc())) {s = 19;}

                        else if ( (LA48_1==185) && (synpred10_Objc())) {s = 20;}

                        else if ( (LA48_1==187) && (synpred10_Objc())) {s = 21;}

                        else if ( (LA48_1==ID) ) {s = 22;}

                        else if ( (LA48_1==189) && (synpred10_Objc())) {s = 23;}

                        else if ( (LA48_1==192) && (synpred10_Objc())) {s = 24;}

                        else if ( (LA48_1==177) && (synpred10_Objc())) {s = 25;}

                        else if ( (LA48_1==BOOL_LITERAL||LA48_1==CHAR_LITERAL||LA48_1==NUMBER_LITERAL||(LA48_1 >= STRING_LITERAL && LA48_1 <= STRING_OBJC)||LA48_1==112||LA48_1==116||LA48_1==120||LA48_1==123||(LA48_1 >= 126 && LA48_1 <= 127)||LA48_1==159||LA48_1==166||(LA48_1 >= 168 && LA48_1 <= 169)||LA48_1==201) ) {s = 2;}

                         
                        input.seek(index48_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_22 = input.LA(1);

                         
                        int index48_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_22==120) ) {s = 68;}

                        else if ( (LA48_22==166) ) {s = 69;}

                        else if ( (LA48_22==172) && (synpred10_Objc())) {s = 70;}

                        else if ( (LA48_22==116) ) {s = 71;}

                        else if ( (LA48_22==119) ) {s = 72;}

                        else if ( (LA48_22==113||LA48_22==115||LA48_22==118||(LA48_22 >= 122 && LA48_22 <= 123)||(LA48_22 >= 126 && LA48_22 <= 127)||(LA48_22 >= 129 && LA48_22 <= 131)||(LA48_22 >= 135 && LA48_22 <= 136)||(LA48_22 >= 138 && LA48_22 <= 143)||LA48_22==145||LA48_22==168||LA48_22==197||LA48_22==199) ) {s = 2;}

                         
                        input.seek(index48_22);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_41 = input.LA(1);

                         
                        int index48_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_41==194) && (synpred10_Objc())) {s = 78;}

                        else if ( (LA48_41==172) && (synpred10_Objc())) {s = 79;}

                        else if ( (LA48_41==193) && (synpred10_Objc())) {s = 80;}

                        else if ( (LA48_41==184) && (synpred10_Objc())) {s = 81;}

                        else if ( (LA48_41==181) && (synpred10_Objc())) {s = 82;}

                        else if ( (LA48_41==185) && (synpred10_Objc())) {s = 83;}

                        else if ( (LA48_41==187) && (synpred10_Objc())) {s = 84;}

                        else if ( (LA48_41==ID) ) {s = 85;}

                         
                        input.seek(index48_41);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_68 = input.LA(1);

                         
                        int index48_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_68==166) ) {s = 181;}

                        else if ( (LA48_68==172) && (synpred10_Objc())) {s = 182;}

                        else if ( (LA48_68==116) ) {s = 183;}

                        else if ( (LA48_68==119) && (synpred10_Objc())) {s = 184;}

                        else if ( (LA48_68==120) ) {s = 185;}

                        else if ( (LA48_68==BOOL_LITERAL||LA48_68==CHAR_LITERAL||LA48_68==ID||LA48_68==NUMBER_LITERAL||(LA48_68 >= STRING_LITERAL && LA48_68 <= STRING_OBJC)||LA48_68==112||LA48_68==118||LA48_68==123||(LA48_68 >= 126 && LA48_68 <= 127)||LA48_68==159||(LA48_68 >= 168 && LA48_68 <= 169)||LA48_68==201) ) {s = 2;}

                         
                        input.seek(index48_68);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_69 = input.LA(1);

                         
                        int index48_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_69==ID) ) {s = 200;}

                        else if ( (LA48_69==167) && (synpred10_Objc())) {s = 201;}

                        else if ( (LA48_69==BOOL_LITERAL||LA48_69==CHAR_LITERAL||(LA48_69 >= STRING_LITERAL && LA48_69 <= STRING_OBJC)||LA48_69==112||LA48_69==116||LA48_69==118||LA48_69==120||LA48_69==123||(LA48_69 >= 126 && LA48_69 <= 127)||LA48_69==159||LA48_69==166||(LA48_69 >= 168 && LA48_69 <= 169)||LA48_69==201) ) {s = 2;}

                        else if ( (LA48_69==NUMBER_LITERAL) ) {s = 206;}

                         
                        input.seek(index48_69);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_71 = input.LA(1);

                         
                        int index48_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_71==119) && (synpred10_Objc())) {s = 218;}

                        else if ( (LA48_71==BOOL_LITERAL||LA48_71==CHAR_LITERAL||LA48_71==ID||LA48_71==NUMBER_LITERAL||(LA48_71 >= STRING_LITERAL && LA48_71 <= STRING_OBJC)||LA48_71==112||LA48_71==116||LA48_71==118||LA48_71==120||LA48_71==123||(LA48_71 >= 126 && LA48_71 <= 127)||LA48_71==159||LA48_71==166||(LA48_71 >= 168 && LA48_71 <= 169)||LA48_71==201) ) {s = 2;}

                         
                        input.seek(index48_71);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_72 = input.LA(1);

                         
                        int index48_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_72==159) && (synpred10_Objc())) {s = 236;}

                        else if ( (LA48_72==116) ) {s = 237;}

                        else if ( (LA48_72==ID) ) {s = 238;}

                        else if ( (LA48_72==120) ) {s = 239;}

                        else if ( (LA48_72==STRING_LITERAL) && (synpred10_Objc())) {s = 240;}

                        else if ( (LA48_72==STRING_OBJC) && (synpred10_Objc())) {s = 241;}

                        else if ( (LA48_72==CHAR_LITERAL) && (synpred10_Objc())) {s = 242;}

                        else if ( (LA48_72==NUMBER_LITERAL) && (synpred10_Objc())) {s = 243;}

                        else if ( (LA48_72==BOOL_LITERAL) && (synpred10_Objc())) {s = 244;}

                        else if ( (LA48_72==168) ) {s = 245;}

                        else if ( (LA48_72==169) && (synpred10_Objc())) {s = 246;}

                        else if ( (LA48_72==166) ) {s = 247;}

                        else if ( (LA48_72==118) ) {s = 248;}

                        else if ( (LA48_72==EOF||LA48_72==DEFINE_LITERAL||LA48_72==MULTI_COMMENT_LIT||LA48_72==SINGLE_COMMENT_LIT||LA48_72==113||LA48_72==115||LA48_72==119||(LA48_72 >= 122 && LA48_72 <= 123)||(LA48_72 >= 125 && LA48_72 <= 127)||(LA48_72 >= 129 && LA48_72 <= 131)||(LA48_72 >= 133 && LA48_72 <= 136)||(LA48_72 >= 138 && LA48_72 <= 143)||(LA48_72 >= 145 && LA48_72 <= 152)||LA48_72==157||(LA48_72 >= 160 && LA48_72 <= 163)||LA48_72==167||(LA48_72 >= 170 && LA48_72 <= 182)||(LA48_72 >= 184 && LA48_72 <= 197)||(LA48_72 >= 199 && LA48_72 <= 200)) ) {s = 2;}

                         
                        input.seek(index48_72);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_85 = input.LA(1);

                         
                        int index48_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_85);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_86 = input.LA(1);

                         
                        int index48_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_86);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_87 = input.LA(1);

                         
                        int index48_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_87);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_88 = input.LA(1);

                         
                        int index48_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_88);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_89 = input.LA(1);

                         
                        int index48_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_89);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_90 = input.LA(1);

                         
                        int index48_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_90);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_91 = input.LA(1);

                         
                        int index48_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_91);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_92 = input.LA(1);

                         
                        int index48_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_92);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_119 = input.LA(1);

                         
                        int index48_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_119);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_120 = input.LA(1);

                         
                        int index48_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_120);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA48_121 = input.LA(1);

                         
                        int index48_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_121);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA48_122 = input.LA(1);

                         
                        int index48_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_122);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA48_123 = input.LA(1);

                         
                        int index48_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_123);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA48_124 = input.LA(1);

                         
                        int index48_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_124);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA48_125 = input.LA(1);

                         
                        int index48_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_125);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA48_126 = input.LA(1);

                         
                        int index48_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_126);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA48_127 = input.LA(1);

                         
                        int index48_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_127);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA48_128 = input.LA(1);

                         
                        int index48_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_128);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA48_129 = input.LA(1);

                         
                        int index48_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_129);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA48_130 = input.LA(1);

                         
                        int index48_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_130);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA48_131 = input.LA(1);

                         
                        int index48_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_131);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA48_132 = input.LA(1);

                         
                        int index48_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_132);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA48_133 = input.LA(1);

                         
                        int index48_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_133);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA48_134 = input.LA(1);

                         
                        int index48_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_134);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA48_135 = input.LA(1);

                         
                        int index48_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_135);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA48_136 = input.LA(1);

                         
                        int index48_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_136);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA48_137 = input.LA(1);

                         
                        int index48_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_137);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA48_138 = input.LA(1);

                         
                        int index48_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_138);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA48_139 = input.LA(1);

                         
                        int index48_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_139);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA48_140 = input.LA(1);

                         
                        int index48_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_140);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA48_141 = input.LA(1);

                         
                        int index48_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_141);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA48_142 = input.LA(1);

                         
                        int index48_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_142);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA48_143 = input.LA(1);

                         
                        int index48_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_143);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA48_144 = input.LA(1);

                         
                        int index48_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_144);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA48_145 = input.LA(1);

                         
                        int index48_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_145);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA48_146 = input.LA(1);

                         
                        int index48_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_146);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA48_147 = input.LA(1);

                         
                        int index48_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_147);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA48_148 = input.LA(1);

                         
                        int index48_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA48_149 = input.LA(1);

                         
                        int index48_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_149);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA48_150 = input.LA(1);

                         
                        int index48_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_150);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA48_151 = input.LA(1);

                         
                        int index48_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_151);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA48_152 = input.LA(1);

                         
                        int index48_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_152);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA48_153 = input.LA(1);

                         
                        int index48_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_153);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA48_154 = input.LA(1);

                         
                        int index48_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_154);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA48_155 = input.LA(1);

                         
                        int index48_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_155);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA48_156 = input.LA(1);

                         
                        int index48_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_156);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA48_157 = input.LA(1);

                         
                        int index48_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_157);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA48_158 = input.LA(1);

                         
                        int index48_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_158);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA48_159 = input.LA(1);

                         
                        int index48_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_159);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA48_160 = input.LA(1);

                         
                        int index48_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_160);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA48_166 = input.LA(1);

                         
                        int index48_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_166);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA48_167 = input.LA(1);

                         
                        int index48_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_167);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA48_168 = input.LA(1);

                         
                        int index48_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_168);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA48_169 = input.LA(1);

                         
                        int index48_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_169);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA48_170 = input.LA(1);

                         
                        int index48_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_170);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA48_171 = input.LA(1);

                         
                        int index48_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_171);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA48_172 = input.LA(1);

                         
                        int index48_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_172);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA48_173 = input.LA(1);

                         
                        int index48_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_173);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA48_174 = input.LA(1);

                         
                        int index48_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_174);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA48_175 = input.LA(1);

                         
                        int index48_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_175);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA48_176 = input.LA(1);

                         
                        int index48_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_176);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA48_177 = input.LA(1);

                         
                        int index48_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_177);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA48_178 = input.LA(1);

                         
                        int index48_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_178);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA48_179 = input.LA(1);

                         
                        int index48_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_179);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA48_180 = input.LA(1);

                         
                        int index48_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 302;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_180);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA48_181 = input.LA(1);

                         
                        int index48_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_181);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA48_183 = input.LA(1);

                         
                        int index48_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_183);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA48_185 = input.LA(1);

                         
                        int index48_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_185);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA48_200 = input.LA(1);

                         
                        int index48_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_200);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA48_206 = input.LA(1);

                         
                        int index48_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_206);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA48_237 = input.LA(1);

                         
                        int index48_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_237);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA48_238 = input.LA(1);

                         
                        int index48_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_238);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA48_239 = input.LA(1);

                         
                        int index48_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_239);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA48_245 = input.LA(1);

                         
                        int index48_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_245);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA48_247 = input.LA(1);

                         
                        int index48_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_247);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA48_248 = input.LA(1);

                         
                        int index48_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index48_248);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA54_eotS =
        "\u05fc\uffff";
    static final String DFA54_eofS =
        "\3\uffff\1\12\1\uffff\5\12\4\uffff\1\12\72\uffff\1\12\u016d\uffff"+
        "\1\12\126\uffff\1\12\34\uffff\1\12\34\uffff\1\12\34\uffff\1\12\34"+
        "\uffff\1\12\u0379\uffff";
    static final String DFA54_minS =
        "\1\13\1\uffff\1\57\1\27\1\57\5\27\4\uffff\1\27\1\13\1\57\1\13\67"+
        "\uffff\1\27\1\57\1\13\70\uffff\1\57\1\13\70\uffff\1\57\1\13\70\uffff"+
        "\1\57\1\13\70\uffff\1\57\1\13\70\uffff\1\13\1\57\1\13\67\uffff\2"+
        "\13\1\166\10\57\1\u00c4\1\57\4\13\1\27\1\57\1\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\57\1\13\70\uffff\1\27\1\57\1\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\27\1\57\1\uffff\1\13\2\uffff\1\101\26\uffff\1"+
        "\27\1\57\1\uffff\1\13\2\uffff\1\101\26\uffff\1\27\1\57\1\uffff\1"+
        "\13\2\uffff\1\101\26\uffff\1\27\1\57\1\uffff\1\13\2\uffff\1\101"+
        "\26\uffff\23\0\1\uffff\1\0\2\uffff\1\0\26\uffff\61\0\1\uffff\7\0"+
        "\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\110\0\77"+
        "\uffff\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\1\uffff"+
        "\1\0\2\uffff\1\0\26\uffff\2\0\77\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff";
    static final String DFA54_maxS =
        "\1\u00a9\1\uffff\1\57\1\u00c8\1\57\5\u00c8\4\uffff\1\u00c8\1\u00c9"+
        "\1\57\1\u00c9\67\uffff\1\u00c8\1\57\1\u00c9\70\uffff\1\57\1\u00c9"+
        "\70\uffff\1\57\1\u00c9\70\uffff\1\57\1\u00c9\70\uffff\1\57\1\u00c9"+
        "\70\uffff\1\u00c9\1\57\1\u00c9\67\uffff\1\u00a9\1\u00c9\1\166\1"+
        "\57\1\u00c7\1\57\5\u00c7\1\u00c4\1\u00c2\1\u00c9\3\u00a9\1\u00c8"+
        "\1\u00c2\1\uffff\1\u00c9\2\uffff\1\u00c7\26\uffff\1\57\1\u00c9\70"+
        "\uffff\1\u00c8\1\u00c2\1\uffff\1\u00c9\2\uffff\1\u00c7\26\uffff"+
        "\1\u00c8\1\u00c2\1\uffff\1\u00c9\2\uffff\1\u00c7\26\uffff\1\u00c8"+
        "\1\u00c2\1\uffff\1\u00c9\2\uffff\1\u00c7\26\uffff\1\u00c8\1\u00c2"+
        "\1\uffff\1\u00c9\2\uffff\1\u00c7\26\uffff\1\u00c8\1\u00c2\1\uffff"+
        "\1\u00c9\2\uffff\1\u00c7\26\uffff\23\0\1\uffff\1\0\2\uffff\1\0\26"+
        "\uffff\61\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff"+
        "\6\0\1\uffff\110\0\77\uffff\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff"+
        "\2\0\2\uffff\2\0\1\uffff\1\0\2\uffff\1\0\26\uffff\2\0\77\uffff\16"+
        "\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16"+
        "\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16"+
        "\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16"+
        "\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\77\uffff\16"+
        "\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\10\uffff\1\3\u01ae\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\106\uffff\1\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2"+
        "\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1"+
        "\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\35\uffff\1\2\1\uffff\2\2\1\uffff\14\2\u00f5\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\131\uffff\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff\1\2\117\uffff"+
        "\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff\1\2\117\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\3\2\3\uffff\1\2\117\uffff\16\2\1\uffff\3\2\1\uffff"+
        "\3\2\3\uffff\1\2\117\uffff\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff"+
        "\1\2";
    static final String DFA54_specialS =
        "\21\uffff\1\0\71\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1"+
        "\4\71\uffff\1\5\72\uffff\1\6\113\uffff\1\7\2\uffff\1\10\27\uffff"+
        "\1\11\73\uffff\1\12\2\uffff\1\13\31\uffff\1\14\2\uffff\1\15\31\uffff"+
        "\1\16\2\uffff\1\17\31\uffff\1\20\2\uffff\1\21\31\uffff\1\22\2\uffff"+
        "\1\23\26\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\uffff\1\47\2\uffff"+
        "\1\50\26\uffff\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\uffff\1\132\1\133\1\134\1\135\1\136\1"+
        "\137\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145\1\146\1\uffff\1"+
        "\147\1\150\1\151\1\152\1\153\1\154\1\uffff\1\155\1\156\1\157\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\164\1\165\1\166\1\167\1\170\1\uffff"+
        "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082"+
        "\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092"+
        "\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a"+
        "\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa"+
        "\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba"+
        "\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\77\uffff\1\u00c1"+
        "\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\16\uffff\1\u00cf\3\uffff"+
        "\1\u00d0\3\uffff\1\u00d1\1\u00d2\2\uffff\1\u00d3\1\u00d4\1\uffff"+
        "\1\u00d5\2\uffff\1\u00d6\26\uffff\1\u00d7\1\u00d8\77\uffff\1\u00d9"+
        "\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1"+
        "\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\16\uffff\1\u00e7\3\uffff"+
        "\1\u00e8\3\uffff\1\u00e9\1\u00ea\2\uffff\1\u00eb\1\u00ec\77\uffff"+
        "\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4"+
        "\1\u00f5\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\16\uffff\1\u00fb"+
        "\3\uffff\1\u00fc\3\uffff\1\u00fd\1\u00fe\2\uffff\1\u00ff\1\u0100"+
        "\77\uffff\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
        "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\16\uffff"+
        "\1\u010f\3\uffff\1\u0110\3\uffff\1\u0111\1\u0112\2\uffff\1\u0113"+
        "\1\u0114\77\uffff\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a"+
        "\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122"+
        "\16\uffff\1\u0123\3\uffff\1\u0124\3\uffff\1\u0125\1\u0126\2\uffff"+
        "\1\u0127\1\u0128\77\uffff\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\16\uffff\1\u0137\3\uffff\1\u0138\3\uffff\1\u0139\1\u013a"+
        "\2\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\11\5\uffff\1\7\35\uffff\1\3\24\uffff\1\10\23\uffff\1\5\1"+
            "\6\32\uffff\1\2\1\uffff\1\12\1\uffff\1\4\46\uffff\1\1\6\uffff"+
            "\1\12\1\uffff\2\12",
            "",
            "\1\16",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\21\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\20\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12\4"+
            "\uffff\1\12\2\uffff\4\12\2\uffff\1\17\2\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\111",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\113\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\112\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12"+
            "\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0085\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0084\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00bf\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00be\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00f9\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00f8\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0133\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0132\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u016e\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u016d\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\1\u016c\2\12\1\uffff\15"+
            "\12\1\uffff\16\12\1\uffff\2\12",
            "\1\u01b0\5\uffff\1\u01ae\35\uffff\1\u01aa\24\uffff\1\u01af"+
            "\23\uffff\1\u01ac\1\u01ad\26\uffff\1\u01b4\3\uffff\1\u01a9\1"+
            "\uffff\1\u01a7\1\uffff\1\u01ab\2\uffff\1\u01b6\2\uffff\1\u01a6"+
            "\1\u01b6\37\uffff\1\u01a8\6\uffff\1\u01b3\1\uffff\1\u01b1\1"+
            "\u01b2\37\uffff\1\u01b5",
            "\1\u01b7",
            "\1\u01c2\5\uffff\1\u01c0\35\uffff\1\u01bd\24\uffff\1\u01c1"+
            "\23\uffff\1\u01be\1\u01bf\26\uffff\1\u01c6\3\uffff\1\u01bc\1"+
            "\uffff\1\u01ba\1\u01c9\1\u01b8\2\uffff\1\u01c8\2\uffff\1\u01b9"+
            "\1\u01c8\37\uffff\1\u01bb\6\uffff\1\u01c5\1\uffff\1\u01c3\1"+
            "\u01c4\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u01c7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u01d5\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u01d4\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u020e",
            "\1\u0219\5\uffff\1\u0217\35\uffff\1\u0214\24\uffff\1\u0218"+
            "\23\uffff\1\u0215\1\u0216\26\uffff\1\u021d\3\uffff\1\u0213\1"+
            "\uffff\1\u0211\1\u0220\1\u020f\2\uffff\1\u021f\2\uffff\1\u0210"+
            "\1\u021f\37\uffff\1\u0212\6\uffff\1\u021c\1\uffff\1\u021a\1"+
            "\u021b\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u021e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u022b",
            "\1\u0236\5\uffff\1\u0234\35\uffff\1\u0231\24\uffff\1\u0235"+
            "\23\uffff\1\u0232\1\u0233\26\uffff\1\u023a\3\uffff\1\u0230\1"+
            "\uffff\1\u022e\1\u023d\1\u022c\2\uffff\1\u023c\2\uffff\1\u022d"+
            "\1\u023c\37\uffff\1\u022f\6\uffff\1\u0239\1\uffff\1\u0237\1"+
            "\u0238\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u023b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0248",
            "\1\u0253\5\uffff\1\u0251\35\uffff\1\u024e\24\uffff\1\u0252"+
            "\23\uffff\1\u024f\1\u0250\26\uffff\1\u0257\3\uffff\1\u024d\1"+
            "\uffff\1\u024b\1\u025a\1\u0249\2\uffff\1\u0259\2\uffff\1\u024a"+
            "\1\u0259\37\uffff\1\u024c\6\uffff\1\u0256\1\uffff\1\u0254\1"+
            "\u0255\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0258",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0265",
            "\1\u0270\5\uffff\1\u026e\35\uffff\1\u026b\24\uffff\1\u026f"+
            "\23\uffff\1\u026c\1\u026d\26\uffff\1\u0274\3\uffff\1\u026a\1"+
            "\uffff\1\u0268\1\u0277\1\u0266\2\uffff\1\u0276\2\uffff\1\u0267"+
            "\1\u0276\37\uffff\1\u0269\6\uffff\1\u0273\1\uffff\1\u0271\1"+
            "\u0272\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0275",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0282",
            "\1\u028d\5\uffff\1\u028b\35\uffff\1\u0288\24\uffff\1\u028c"+
            "\23\uffff\1\u0289\1\u028a\26\uffff\1\u0291\3\uffff\1\u0287\1"+
            "\uffff\1\u0285\1\u0294\1\u0283\2\uffff\1\u0293\2\uffff\1\u0284"+
            "\1\u0293\37\uffff\1\u0286\6\uffff\1\u0290\1\uffff\1\u028e\1"+
            "\u028f\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0292",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02a9\5\uffff\1\u02a7\35\uffff\1\u02a3\24\uffff\1\u02a8"+
            "\23\uffff\1\u02a5\1\u02a6\26\uffff\1\u02ad\3\uffff\1\u02a2\1"+
            "\uffff\1\u02a0\1\uffff\1\u02a4\2\uffff\1\u02af\2\uffff\1\u029f"+
            "\1\u02af\37\uffff\1\u02a1\6\uffff\1\u02ac\1\uffff\1\u02aa\1"+
            "\u02ab\37\uffff\1\u02ae",
            "\1\u02b0",
            "\1\u02bb\5\uffff\1\u02b9\35\uffff\1\u02b6\24\uffff\1\u02ba"+
            "\23\uffff\1\u02b7\1\u02b8\26\uffff\1\u02bf\3\uffff\1\u02b5\1"+
            "\uffff\1\u02b3\1\u02c2\1\u02b1\2\uffff\1\u02c1\2\uffff\1\u02b2"+
            "\1\u02c1\37\uffff\1\u02b4\6\uffff\1\u02be\1\uffff\1\u02bc\1"+
            "\u02bd\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u02c0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d6\5\uffff\1\u02d4\35\uffff\1\u02d0\24\uffff\1\u02d5"+
            "\23\uffff\1\u02d2\1\u02d3\32\uffff\1\u02cf\1\uffff\1\u02cd\1"+
            "\uffff\1\u02d1\46\uffff\1\u02ce\6\uffff\1\u02d9\1\uffff\1\u02d7"+
            "\1\u02d8",
            "\1\u02ee\5\uffff\1\u02ec\35\uffff\1\u02e2\24\uffff\1\u02ed"+
            "\23\uffff\1\u02ea\1\u02eb\26\uffff\1\u02f2\3\uffff\1\u02e8\1"+
            "\uffff\1\u02db\1\uffff\1\u02e9\2\uffff\1\u02f4\2\uffff\1\u02e6"+
            "\1\u02f4\37\uffff\1\u02e7\6\uffff\1\u02f1\1\uffff\1\u02ef\1"+
            "\u02f0\2\uffff\1\u02dd\4\uffff\1\u02e5\3\uffff\1\u02da\2\uffff"+
            "\1\u02df\1\u02e0\1\uffff\1\u02e1\1\uffff\1\u02e3\2\uffff\1\u02e4"+
            "\1\u02de\1\u02dc\6\uffff\1\u02f3",
            "\1\u02f5",
            "\1\u02f6",
            "\1\12\101\uffff\1\u02fb\1\uffff\2\u02fb\1\uffff\1\u02f9\1\uffff"+
            "\1\u02fb\1\uffff\1\u02fb\1\u02fa\2\uffff\1\u02fb\1\u02fa\1\uffff"+
            "\2\u02f8\1\u02fb\3\uffff\2\u02fb\1\uffff\6\u02fb\1\uffff\1\u02fc"+
            "\24\uffff\1\u02f7\1\u02fd\1\u02fb\34\uffff\1\u02fb\1\uffff\1"+
            "\u02fb",
            "\1\u02ff",
            "\1\12\101\uffff\1\u0303\1\uffff\2\u0303\1\uffff\1\u0301\1\uffff"+
            "\1\u0303\1\uffff\1\u0303\1\u0302\2\uffff\1\u0303\1\u0302\1\uffff"+
            "\2\u0300\1\u0303\3\uffff\2\u0303\1\uffff\6\u0303\1\uffff\1\u0304"+
            "\25\uffff\1\u0305\1\u0303\34\uffff\1\u0303\1\uffff\1\u0303",
            "\1\12\101\uffff\1\u030a\1\uffff\2\u030a\1\uffff\1\u0308\1\uffff"+
            "\1\u030a\1\uffff\1\u030a\1\u0309\2\uffff\1\u030a\1\u0309\1\uffff"+
            "\2\u0307\1\u030a\3\uffff\2\u030a\1\uffff\6\u030a\1\uffff\1\u030b"+
            "\25\uffff\1\u030c\1\u030a\34\uffff\1\u030a\1\uffff\1\u030a",
            "\1\12\101\uffff\1\u0311\1\uffff\2\u0311\1\uffff\1\u030f\1\uffff"+
            "\1\u0311\1\uffff\1\u0311\1\u0310\2\uffff\1\u0311\1\u0310\1\uffff"+
            "\2\u030e\1\u0311\3\uffff\2\u0311\1\uffff\6\u0311\1\uffff\1\u0312"+
            "\25\uffff\1\u0313\1\u0311\34\uffff\1\u0311\1\uffff\1\u0311",
            "\1\12\101\uffff\1\u0318\1\uffff\2\u0318\1\uffff\1\u0316\1\uffff"+
            "\1\u0318\1\uffff\1\u0318\1\u0317\2\uffff\1\u0318\1\u0317\1\uffff"+
            "\2\u0315\1\u0318\3\uffff\2\u0318\1\uffff\6\u0318\1\uffff\1\u0319"+
            "\25\uffff\1\u031a\1\u0318\34\uffff\1\u0318\1\uffff\1\u0318",
            "\1\12\101\uffff\1\u031f\1\uffff\2\u031f\1\uffff\1\u031d\1\uffff"+
            "\1\u031f\1\uffff\1\u031f\1\u031e\2\uffff\1\u031f\1\u031e\1\uffff"+
            "\2\u031c\1\u031f\3\uffff\2\u031f\1\uffff\6\u031f\1\uffff\1\u0320"+
            "\25\uffff\1\u0321\1\u031f\34\uffff\1\u031f\1\uffff\1\u031f",
            "\1\u0323",
            "\1\u032c\106\uffff\1\u0325\1\u0330\64\uffff\1\u0327\4\uffff"+
            "\1\u032f\3\uffff\1\u0324\2\uffff\1\u0329\1\u032a\1\uffff\1\u032b"+
            "\1\uffff\1\u032d\2\uffff\1\u032e\1\u0328\1\u0326",
            "\1\u033b\5\uffff\1\u0339\35\uffff\1\u0335\24\uffff\1\u033a"+
            "\23\uffff\1\u0337\1\u0338\26\uffff\1\u033f\3\uffff\1\u0334\1"+
            "\uffff\1\u0332\1\uffff\1\u0336\2\uffff\1\u0341\2\uffff\1\u0331"+
            "\1\u0341\37\uffff\1\u0333\6\uffff\1\u033e\1\uffff\1\u033c\1"+
            "\u033d\37\uffff\1\u0340",
            "\1\u034b\5\uffff\1\u0349\35\uffff\1\u0345\24\uffff\1\u034a"+
            "\23\uffff\1\u0347\1\u0348\32\uffff\1\u0344\1\uffff\1\u0342\1"+
            "\uffff\1\u0346\46\uffff\1\u0343\6\uffff\1\u034e\1\uffff\1\u034c"+
            "\1\u034d",
            "\1\u0358\5\uffff\1\u0356\35\uffff\1\u0352\24\uffff\1\u0357"+
            "\23\uffff\1\u0354\1\u0355\32\uffff\1\u0351\1\uffff\1\u034f\1"+
            "\uffff\1\u0353\46\uffff\1\u0350\6\uffff\1\u035b\1\uffff\1\u0359"+
            "\1\u035a",
            "\1\u0365\5\uffff\1\u0363\35\uffff\1\u035f\24\uffff\1\u0364"+
            "\23\uffff\1\u0361\1\u0362\32\uffff\1\u035e\1\uffff\1\u035c\1"+
            "\uffff\1\u0360\46\uffff\1\u035d\6\uffff\1\u0368\1\uffff\1\u0366"+
            "\1\u0367",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0369\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u036a\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u03aa\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u03bf\5\uffff\1\u03bd\35\uffff\1\u03b4\24\uffff\1\u03be"+
            "\23\uffff\1\u03bb\1\u03bc\26\uffff\1\u03c3\3\uffff\1\u03ba\1"+
            "\uffff\1\u03ad\1\uffff\1\u03ab\2\uffff\1\u03c5\2\uffff\1\u03b8"+
            "\1\u03c5\37\uffff\1\u03b9\6\uffff\1\u03c2\1\uffff\1\u03c0\1"+
            "\u03c1\2\uffff\1\u03af\4\uffff\1\u03b7\3\uffff\1\u03ac\2\uffff"+
            "\1\u03b1\1\u03b2\1\uffff\1\u03b3\1\uffff\1\u03b5\2\uffff\1\u03b6"+
            "\1\u03b0\1\u03ae\6\uffff\1\u03c4",
            "",
            "",
            "\1\u03cc\57\uffff\1\u03d1\1\uffff\1\u03d1\1\u03cf\1\uffff\1"+
            "\u03c8\1\u03ce\1\u03ca\1\uffff\1\u03d1\1\u03c9\1\uffff\1\u03cd"+
            "\1\u03d1\1\u03c9\1\uffff\2\u03c7\1\u03d1\3\uffff\2\u03d1\1\uffff"+
            "\6\u03d1\1\uffff\1\u03cb\24\uffff\1\u03c6\1\uffff\1\u03d1\3"+
            "\uffff\1\12\30\uffff\1\u03d1\1\uffff\1\u03d1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03d2",
            "\1\u03dd\5\uffff\1\u03db\35\uffff\1\u03d8\24\uffff\1\u03dc"+
            "\23\uffff\1\u03d9\1\u03da\26\uffff\1\u03e1\3\uffff\1\u03d7\1"+
            "\uffff\1\u03d5\1\u03e4\1\u03d3\2\uffff\1\u03e3\2\uffff\1\u03d4"+
            "\1\u03e3\37\uffff\1\u03d6\6\uffff\1\u03e0\1\uffff\1\u03de\1"+
            "\u03df\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u03e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u03ef\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u03f0\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0430\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u0445\5\uffff\1\u0443\35\uffff\1\u043a\24\uffff\1\u0444"+
            "\23\uffff\1\u0441\1\u0442\26\uffff\1\u0449\3\uffff\1\u0440\1"+
            "\uffff\1\u0433\1\uffff\1\u0431\2\uffff\1\u044b\2\uffff\1\u043e"+
            "\1\u044b\37\uffff\1\u043f\6\uffff\1\u0448\1\uffff\1\u0446\1"+
            "\u0447\2\uffff\1\u0435\4\uffff\1\u043d\3\uffff\1\u0432\2\uffff"+
            "\1\u0437\1\u0438\1\uffff\1\u0439\1\uffff\1\u043b\2\uffff\1\u043c"+
            "\1\u0436\1\u0434\6\uffff\1\u044a",
            "",
            "",
            "\1\u0452\57\uffff\1\u0457\1\uffff\1\u0457\1\u0455\1\uffff\1"+
            "\u044e\1\u0454\1\u0450\1\uffff\1\u0457\1\u044f\1\uffff\1\u0453"+
            "\1\u0457\1\u044f\1\uffff\2\u044d\1\u0457\3\uffff\2\u0457\1\uffff"+
            "\6\u0457\1\uffff\1\u0451\24\uffff\1\u044c\1\uffff\1\u0457\3"+
            "\uffff\1\12\30\uffff\1\u0457\1\uffff\1\u0457",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0458\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0459\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0499\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u04ae\5\uffff\1\u04ac\35\uffff\1\u04a3\24\uffff\1\u04ad"+
            "\23\uffff\1\u04aa\1\u04ab\26\uffff\1\u04b2\3\uffff\1\u04a9\1"+
            "\uffff\1\u049c\1\uffff\1\u049a\2\uffff\1\u04b4\2\uffff\1\u04a7"+
            "\1\u04b4\37\uffff\1\u04a8\6\uffff\1\u04b1\1\uffff\1\u04af\1"+
            "\u04b0\2\uffff\1\u049e\4\uffff\1\u04a6\3\uffff\1\u049b\2\uffff"+
            "\1\u04a0\1\u04a1\1\uffff\1\u04a2\1\uffff\1\u04a4\2\uffff\1\u04a5"+
            "\1\u049f\1\u049d\6\uffff\1\u04b3",
            "",
            "",
            "\1\u04bb\57\uffff\1\u04c0\1\uffff\1\u04c0\1\u04be\1\uffff\1"+
            "\u04b7\1\u04bd\1\u04b9\1\uffff\1\u04c0\1\u04b8\1\uffff\1\u04bc"+
            "\1\u04c0\1\u04b8\1\uffff\2\u04b6\1\u04c0\3\uffff\2\u04c0\1\uffff"+
            "\6\u04c0\1\uffff\1\u04ba\24\uffff\1\u04b5\1\uffff\1\u04c0\3"+
            "\uffff\1\12\30\uffff\1\u04c0\1\uffff\1\u04c0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u04c1\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u04c2\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0502\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u0517\5\uffff\1\u0515\35\uffff\1\u050c\24\uffff\1\u0516"+
            "\23\uffff\1\u0513\1\u0514\26\uffff\1\u051b\3\uffff\1\u0512\1"+
            "\uffff\1\u0505\1\uffff\1\u0503\2\uffff\1\u051d\2\uffff\1\u0510"+
            "\1\u051d\37\uffff\1\u0511\6\uffff\1\u051a\1\uffff\1\u0518\1"+
            "\u0519\2\uffff\1\u0507\4\uffff\1\u050f\3\uffff\1\u0504\2\uffff"+
            "\1\u0509\1\u050a\1\uffff\1\u050b\1\uffff\1\u050d\2\uffff\1\u050e"+
            "\1\u0508\1\u0506\6\uffff\1\u051c",
            "",
            "",
            "\1\u0524\57\uffff\1\u0529\1\uffff\1\u0529\1\u0527\1\uffff\1"+
            "\u0520\1\u0526\1\u0522\1\uffff\1\u0529\1\u0521\1\uffff\1\u0525"+
            "\1\u0529\1\u0521\1\uffff\2\u051f\1\u0529\3\uffff\2\u0529\1\uffff"+
            "\6\u0529\1\uffff\1\u0523\24\uffff\1\u051e\1\uffff\1\u0529\3"+
            "\uffff\1\12\30\uffff\1\u0529\1\uffff\1\u0529",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u052a\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u052b\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u056b\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u0580\5\uffff\1\u057e\35\uffff\1\u0575\24\uffff\1\u057f"+
            "\23\uffff\1\u057c\1\u057d\26\uffff\1\u0584\3\uffff\1\u057b\1"+
            "\uffff\1\u056e\1\uffff\1\u056c\2\uffff\1\u0586\2\uffff\1\u0579"+
            "\1\u0586\37\uffff\1\u057a\6\uffff\1\u0583\1\uffff\1\u0581\1"+
            "\u0582\2\uffff\1\u0570\4\uffff\1\u0578\3\uffff\1\u056d\2\uffff"+
            "\1\u0572\1\u0573\1\uffff\1\u0574\1\uffff\1\u0576\2\uffff\1\u0577"+
            "\1\u0571\1\u056f\6\uffff\1\u0585",
            "",
            "",
            "\1\u058d\57\uffff\1\u0592\1\uffff\1\u0592\1\u0590\1\uffff\1"+
            "\u0589\1\u058f\1\u058b\1\uffff\1\u0592\1\u058a\1\uffff\1\u058e"+
            "\1\u0592\1\u058a\1\uffff\2\u0588\1\u0592\3\uffff\2\u0592\1\uffff"+
            "\6\u0592\1\uffff\1\u058c\24\uffff\1\u0587\1\uffff\1\u0592\3"+
            "\uffff\1\12\30\uffff\1\u0592\1\uffff\1\u0592",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0593\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0594\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u05d4\174\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u05e9\5\uffff\1\u05e7\35\uffff\1\u05de\24\uffff\1\u05e8"+
            "\23\uffff\1\u05e5\1\u05e6\26\uffff\1\u05ed\3\uffff\1\u05e4\1"+
            "\uffff\1\u05d7\1\uffff\1\u05d5\2\uffff\1\u05ef\2\uffff\1\u05e2"+
            "\1\u05ef\37\uffff\1\u05e3\6\uffff\1\u05ec\1\uffff\1\u05ea\1"+
            "\u05eb\2\uffff\1\u05d9\4\uffff\1\u05e1\3\uffff\1\u05d6\2\uffff"+
            "\1\u05db\1\u05dc\1\uffff\1\u05dd\1\uffff\1\u05df\2\uffff\1\u05e0"+
            "\1\u05da\1\u05d8\6\uffff\1\u05ee",
            "",
            "",
            "\1\u05f6\57\uffff\1\u05fb\1\uffff\1\u05fb\1\u05f9\1\uffff\1"+
            "\u05f2\1\u05f8\1\u05f4\1\uffff\1\u05fb\1\u05f3\1\uffff\1\u05f7"+
            "\1\u05fb\1\u05f3\1\uffff\2\u05f1\1\u05fb\3\uffff\2\u05fb\1\uffff"+
            "\6\u05fb\1\uffff\1\u05f5\24\uffff\1\u05f0\1\uffff\1\u05fb\3"+
            "\uffff\1\12\30\uffff\1\u05fb\1\uffff\1\u05fb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "489:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_17==120) ) {s = 440;}

                        else if ( (LA54_17==126) && (synpred12_Objc())) {s = 441;}

                        else if ( (LA54_17==118) ) {s = 442;}

                        else if ( (LA54_17==159) && (synpred12_Objc())) {s = 443;}

                        else if ( (LA54_17==116) && (synpred12_Objc())) {s = 444;}

                        else if ( (LA54_17==ID) ) {s = 445;}

                        else if ( (LA54_17==STRING_LITERAL) && (synpred12_Objc())) {s = 446;}

                        else if ( (LA54_17==STRING_OBJC) && (synpred12_Objc())) {s = 447;}

                        else if ( (LA54_17==CHAR_LITERAL) && (synpred12_Objc())) {s = 448;}

                        else if ( (LA54_17==NUMBER_LITERAL) && (synpred12_Objc())) {s = 449;}

                        else if ( (LA54_17==BOOL_LITERAL) && (synpred12_Objc())) {s = 450;}

                        else if ( (LA54_17==168) && (synpred12_Objc())) {s = 451;}

                        else if ( (LA54_17==169) && (synpred12_Objc())) {s = 452;}

                        else if ( (LA54_17==166) && (synpred12_Objc())) {s = 453;}

                        else if ( (LA54_17==112) && (synpred12_Objc())) {s = 454;}

                        else if ( (LA54_17==201) && (synpred12_Objc())) {s = 455;}

                        else if ( (LA54_17==123||LA54_17==127) && (synpred12_Objc())) {s = 456;}

                        else if ( (LA54_17==119) && (synpred12_Objc())) {s = 457;}

                        else if ( (LA54_17==172||LA54_17==177||LA54_17==181||(LA54_17 >= 184 && LA54_17 <= 185)||LA54_17==187||LA54_17==189||(LA54_17 >= 192 && LA54_17 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_17);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_75 = input.LA(1);

                         
                        int index54_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_75==120) ) {s = 527;}

                        else if ( (LA54_75==126) && (synpred12_Objc())) {s = 528;}

                        else if ( (LA54_75==118) ) {s = 529;}

                        else if ( (LA54_75==159) && (synpred12_Objc())) {s = 530;}

                        else if ( (LA54_75==116) && (synpred12_Objc())) {s = 531;}

                        else if ( (LA54_75==ID) ) {s = 532;}

                        else if ( (LA54_75==STRING_LITERAL) && (synpred12_Objc())) {s = 533;}

                        else if ( (LA54_75==STRING_OBJC) && (synpred12_Objc())) {s = 534;}

                        else if ( (LA54_75==CHAR_LITERAL) && (synpred12_Objc())) {s = 535;}

                        else if ( (LA54_75==NUMBER_LITERAL) && (synpred12_Objc())) {s = 536;}

                        else if ( (LA54_75==BOOL_LITERAL) && (synpred12_Objc())) {s = 537;}

                        else if ( (LA54_75==168) && (synpred12_Objc())) {s = 538;}

                        else if ( (LA54_75==169) && (synpred12_Objc())) {s = 539;}

                        else if ( (LA54_75==166) && (synpred12_Objc())) {s = 540;}

                        else if ( (LA54_75==112) && (synpred12_Objc())) {s = 541;}

                        else if ( (LA54_75==201) && (synpred12_Objc())) {s = 542;}

                        else if ( (LA54_75==123||LA54_75==127) && (synpred12_Objc())) {s = 543;}

                        else if ( (LA54_75==119) && (synpred12_Objc())) {s = 544;}

                        else if ( (LA54_75==172||LA54_75==177||LA54_75==181||(LA54_75 >= 184 && LA54_75 <= 185)||LA54_75==187||LA54_75==189||(LA54_75 >= 192 && LA54_75 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_75);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_133 = input.LA(1);

                         
                        int index54_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_133==120) ) {s = 556;}

                        else if ( (LA54_133==126) && (synpred12_Objc())) {s = 557;}

                        else if ( (LA54_133==118) ) {s = 558;}

                        else if ( (LA54_133==159) && (synpred12_Objc())) {s = 559;}

                        else if ( (LA54_133==116) && (synpred12_Objc())) {s = 560;}

                        else if ( (LA54_133==ID) ) {s = 561;}

                        else if ( (LA54_133==STRING_LITERAL) && (synpred12_Objc())) {s = 562;}

                        else if ( (LA54_133==STRING_OBJC) && (synpred12_Objc())) {s = 563;}

                        else if ( (LA54_133==CHAR_LITERAL) && (synpred12_Objc())) {s = 564;}

                        else if ( (LA54_133==NUMBER_LITERAL) && (synpred12_Objc())) {s = 565;}

                        else if ( (LA54_133==BOOL_LITERAL) && (synpred12_Objc())) {s = 566;}

                        else if ( (LA54_133==168) && (synpred12_Objc())) {s = 567;}

                        else if ( (LA54_133==169) && (synpred12_Objc())) {s = 568;}

                        else if ( (LA54_133==166) && (synpred12_Objc())) {s = 569;}

                        else if ( (LA54_133==112) && (synpred12_Objc())) {s = 570;}

                        else if ( (LA54_133==201) && (synpred12_Objc())) {s = 571;}

                        else if ( (LA54_133==123||LA54_133==127) && (synpred12_Objc())) {s = 572;}

                        else if ( (LA54_133==119) && (synpred12_Objc())) {s = 573;}

                        else if ( (LA54_133==172||LA54_133==177||LA54_133==181||(LA54_133 >= 184 && LA54_133 <= 185)||LA54_133==187||LA54_133==189||(LA54_133 >= 192 && LA54_133 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_133);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA54_191 = input.LA(1);

                         
                        int index54_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_191==120) ) {s = 585;}

                        else if ( (LA54_191==126) && (synpred12_Objc())) {s = 586;}

                        else if ( (LA54_191==118) ) {s = 587;}

                        else if ( (LA54_191==159) && (synpred12_Objc())) {s = 588;}

                        else if ( (LA54_191==116) && (synpred12_Objc())) {s = 589;}

                        else if ( (LA54_191==ID) ) {s = 590;}

                        else if ( (LA54_191==STRING_LITERAL) && (synpred12_Objc())) {s = 591;}

                        else if ( (LA54_191==STRING_OBJC) && (synpred12_Objc())) {s = 592;}

                        else if ( (LA54_191==CHAR_LITERAL) && (synpred12_Objc())) {s = 593;}

                        else if ( (LA54_191==NUMBER_LITERAL) && (synpred12_Objc())) {s = 594;}

                        else if ( (LA54_191==BOOL_LITERAL) && (synpred12_Objc())) {s = 595;}

                        else if ( (LA54_191==168) && (synpred12_Objc())) {s = 596;}

                        else if ( (LA54_191==169) && (synpred12_Objc())) {s = 597;}

                        else if ( (LA54_191==166) && (synpred12_Objc())) {s = 598;}

                        else if ( (LA54_191==112) && (synpred12_Objc())) {s = 599;}

                        else if ( (LA54_191==201) && (synpred12_Objc())) {s = 600;}

                        else if ( (LA54_191==123||LA54_191==127) && (synpred12_Objc())) {s = 601;}

                        else if ( (LA54_191==119) && (synpred12_Objc())) {s = 602;}

                        else if ( (LA54_191==172||LA54_191==177||LA54_191==181||(LA54_191 >= 184 && LA54_191 <= 185)||LA54_191==187||LA54_191==189||(LA54_191 >= 192 && LA54_191 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_191);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA54_249 = input.LA(1);

                         
                        int index54_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_249==120) ) {s = 614;}

                        else if ( (LA54_249==126) && (synpred12_Objc())) {s = 615;}

                        else if ( (LA54_249==118) ) {s = 616;}

                        else if ( (LA54_249==159) && (synpred12_Objc())) {s = 617;}

                        else if ( (LA54_249==116) && (synpred12_Objc())) {s = 618;}

                        else if ( (LA54_249==ID) ) {s = 619;}

                        else if ( (LA54_249==STRING_LITERAL) && (synpred12_Objc())) {s = 620;}

                        else if ( (LA54_249==STRING_OBJC) && (synpred12_Objc())) {s = 621;}

                        else if ( (LA54_249==CHAR_LITERAL) && (synpred12_Objc())) {s = 622;}

                        else if ( (LA54_249==NUMBER_LITERAL) && (synpred12_Objc())) {s = 623;}

                        else if ( (LA54_249==BOOL_LITERAL) && (synpred12_Objc())) {s = 624;}

                        else if ( (LA54_249==168) && (synpred12_Objc())) {s = 625;}

                        else if ( (LA54_249==169) && (synpred12_Objc())) {s = 626;}

                        else if ( (LA54_249==166) && (synpred12_Objc())) {s = 627;}

                        else if ( (LA54_249==112) && (synpred12_Objc())) {s = 628;}

                        else if ( (LA54_249==201) && (synpred12_Objc())) {s = 629;}

                        else if ( (LA54_249==123||LA54_249==127) && (synpred12_Objc())) {s = 630;}

                        else if ( (LA54_249==119) && (synpred12_Objc())) {s = 631;}

                        else if ( (LA54_249==172||LA54_249==177||LA54_249==181||(LA54_249 >= 184 && LA54_249 <= 185)||LA54_249==187||LA54_249==189||(LA54_249 >= 192 && LA54_249 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_249);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA54_307 = input.LA(1);

                         
                        int index54_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_307==120) ) {s = 643;}

                        else if ( (LA54_307==126) && (synpred12_Objc())) {s = 644;}

                        else if ( (LA54_307==118) ) {s = 645;}

                        else if ( (LA54_307==159) && (synpred12_Objc())) {s = 646;}

                        else if ( (LA54_307==116) && (synpred12_Objc())) {s = 647;}

                        else if ( (LA54_307==ID) ) {s = 648;}

                        else if ( (LA54_307==STRING_LITERAL) && (synpred12_Objc())) {s = 649;}

                        else if ( (LA54_307==STRING_OBJC) && (synpred12_Objc())) {s = 650;}

                        else if ( (LA54_307==CHAR_LITERAL) && (synpred12_Objc())) {s = 651;}

                        else if ( (LA54_307==NUMBER_LITERAL) && (synpred12_Objc())) {s = 652;}

                        else if ( (LA54_307==BOOL_LITERAL) && (synpred12_Objc())) {s = 653;}

                        else if ( (LA54_307==168) && (synpred12_Objc())) {s = 654;}

                        else if ( (LA54_307==169) && (synpred12_Objc())) {s = 655;}

                        else if ( (LA54_307==166) && (synpred12_Objc())) {s = 656;}

                        else if ( (LA54_307==112) && (synpred12_Objc())) {s = 657;}

                        else if ( (LA54_307==201) && (synpred12_Objc())) {s = 658;}

                        else if ( (LA54_307==123||LA54_307==127) && (synpred12_Objc())) {s = 659;}

                        else if ( (LA54_307==119) && (synpred12_Objc())) {s = 660;}

                        else if ( (LA54_307==172||LA54_307==177||LA54_307==181||(LA54_307 >= 184 && LA54_307 <= 185)||LA54_307==187||LA54_307==189||(LA54_307 >= 192 && LA54_307 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_307);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA54_366 = input.LA(1);

                         
                        int index54_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_366==120) ) {s = 689;}

                        else if ( (LA54_366==126) && (synpred12_Objc())) {s = 690;}

                        else if ( (LA54_366==118) ) {s = 691;}

                        else if ( (LA54_366==159) && (synpred12_Objc())) {s = 692;}

                        else if ( (LA54_366==116) && (synpred12_Objc())) {s = 693;}

                        else if ( (LA54_366==ID) ) {s = 694;}

                        else if ( (LA54_366==STRING_LITERAL) && (synpred12_Objc())) {s = 695;}

                        else if ( (LA54_366==STRING_OBJC) && (synpred12_Objc())) {s = 696;}

                        else if ( (LA54_366==CHAR_LITERAL) && (synpred12_Objc())) {s = 697;}

                        else if ( (LA54_366==NUMBER_LITERAL) && (synpred12_Objc())) {s = 698;}

                        else if ( (LA54_366==BOOL_LITERAL) && (synpred12_Objc())) {s = 699;}

                        else if ( (LA54_366==168) && (synpred12_Objc())) {s = 700;}

                        else if ( (LA54_366==169) && (synpred12_Objc())) {s = 701;}

                        else if ( (LA54_366==166) && (synpred12_Objc())) {s = 702;}

                        else if ( (LA54_366==112) && (synpred12_Objc())) {s = 703;}

                        else if ( (LA54_366==201) && (synpred12_Objc())) {s = 704;}

                        else if ( (LA54_366==123||LA54_366==127) && (synpred12_Objc())) {s = 705;}

                        else if ( (LA54_366==119) && (synpred12_Objc())) {s = 706;}

                        else if ( (LA54_366==172||LA54_366==177||LA54_366==181||(LA54_366 >= 184 && LA54_366 <= 185)||LA54_366==187||LA54_366==189||(LA54_366 >= 192 && LA54_366 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_366);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA54_442 = input.LA(1);

                         
                        int index54_442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_442==120) ) {s = 939;}

                        else if ( (LA54_442==181) ) {s = 940;}

                        else if ( (LA54_442==118) ) {s = 941;}

                        else if ( (LA54_442==194) ) {s = 942;}

                        else if ( (LA54_442==172) ) {s = 943;}

                        else if ( (LA54_442==193) ) {s = 944;}

                        else if ( (LA54_442==184) ) {s = 945;}

                        else if ( (LA54_442==185) ) {s = 946;}

                        else if ( (LA54_442==187) ) {s = 947;}

                        else if ( (LA54_442==ID) ) {s = 948;}

                        else if ( (LA54_442==189) ) {s = 949;}

                        else if ( (LA54_442==192) ) {s = 950;}

                        else if ( (LA54_442==177) ) {s = 951;}

                        else if ( (LA54_442==126) && (synpred12_Objc())) {s = 952;}

                        else if ( (LA54_442==159) && (synpred12_Objc())) {s = 953;}

                        else if ( (LA54_442==116) && (synpred12_Objc())) {s = 954;}

                        else if ( (LA54_442==STRING_LITERAL) && (synpred12_Objc())) {s = 955;}

                        else if ( (LA54_442==STRING_OBJC) && (synpred12_Objc())) {s = 956;}

                        else if ( (LA54_442==CHAR_LITERAL) && (synpred12_Objc())) {s = 957;}

                        else if ( (LA54_442==NUMBER_LITERAL) && (synpred12_Objc())) {s = 958;}

                        else if ( (LA54_442==BOOL_LITERAL) && (synpred12_Objc())) {s = 959;}

                        else if ( (LA54_442==168) && (synpred12_Objc())) {s = 960;}

                        else if ( (LA54_442==169) && (synpred12_Objc())) {s = 961;}

                        else if ( (LA54_442==166) && (synpred12_Objc())) {s = 962;}

                        else if ( (LA54_442==112) && (synpred12_Objc())) {s = 963;}

                        else if ( (LA54_442==201) && (synpred12_Objc())) {s = 964;}

                        else if ( (LA54_442==123||LA54_442==127) && (synpred12_Objc())) {s = 965;}

                         
                        input.seek(index54_442);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA54_445 = input.LA(1);

                         
                        int index54_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_445==166) ) {s = 966;}

                        else if ( ((LA54_445 >= 129 && LA54_445 <= 130)) && (synpred12_Objc())) {s = 967;}

                        else if ( (LA54_445==118) && (synpred12_Objc())) {s = 968;}

                        else if ( (LA54_445==123||LA54_445==127) && (synpred12_Objc())) {s = 969;}

                        else if ( (LA54_445==120) ) {s = 970;}

                        else if ( (LA54_445==145) && (synpred12_Objc())) {s = 971;}

                        else if ( (LA54_445==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 972;}

                        else if ( (LA54_445==125) && (synpred12_Objc())) {s = 973;}

                        else if ( (LA54_445==119) ) {s = 974;}

                        else if ( (LA54_445==116) ) {s = 975;}

                        else if ( (LA54_445==172) ) {s = 10;}

                        else if ( (LA54_445==113||LA54_445==115||LA54_445==122||LA54_445==126||LA54_445==131||(LA54_445 >= 135 && LA54_445 <= 136)||(LA54_445 >= 138 && LA54_445 <= 143)||LA54_445==168||LA54_445==197||LA54_445==199) && (synpred12_Objc())) {s = 977;}

                         
                        input.seek(index54_445);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA54_469 = input.LA(1);

                         
                        int index54_469 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_469==120) ) {s = 979;}

                        else if ( (LA54_469==126) && (synpred12_Objc())) {s = 980;}

                        else if ( (LA54_469==118) ) {s = 981;}

                        else if ( (LA54_469==159) && (synpred12_Objc())) {s = 982;}

                        else if ( (LA54_469==116) && (synpred12_Objc())) {s = 983;}

                        else if ( (LA54_469==ID) ) {s = 984;}

                        else if ( (LA54_469==STRING_LITERAL) && (synpred12_Objc())) {s = 985;}

                        else if ( (LA54_469==STRING_OBJC) && (synpred12_Objc())) {s = 986;}

                        else if ( (LA54_469==CHAR_LITERAL) && (synpred12_Objc())) {s = 987;}

                        else if ( (LA54_469==NUMBER_LITERAL) && (synpred12_Objc())) {s = 988;}

                        else if ( (LA54_469==BOOL_LITERAL) && (synpred12_Objc())) {s = 989;}

                        else if ( (LA54_469==168) && (synpred12_Objc())) {s = 990;}

                        else if ( (LA54_469==169) && (synpred12_Objc())) {s = 991;}

                        else if ( (LA54_469==166) && (synpred12_Objc())) {s = 992;}

                        else if ( (LA54_469==112) && (synpred12_Objc())) {s = 993;}

                        else if ( (LA54_469==201) && (synpred12_Objc())) {s = 994;}

                        else if ( (LA54_469==123||LA54_469==127) && (synpred12_Objc())) {s = 995;}

                        else if ( (LA54_469==119) && (synpred12_Objc())) {s = 996;}

                        else if ( (LA54_469==172||LA54_469==177||LA54_469==181||(LA54_469 >= 184 && LA54_469 <= 185)||LA54_469==187||LA54_469==189||(LA54_469 >= 192 && LA54_469 <= 194)) ) {s = 10;}

                         
                        input.seek(index54_469);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA54_529 = input.LA(1);

                         
                        int index54_529 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_529==120) ) {s = 1073;}

                        else if ( (LA54_529==181) ) {s = 1074;}

                        else if ( (LA54_529==118) ) {s = 1075;}

                        else if ( (LA54_529==194) ) {s = 1076;}

                        else if ( (LA54_529==172) ) {s = 1077;}

                        else if ( (LA54_529==193) ) {s = 1078;}

                        else if ( (LA54_529==184) ) {s = 1079;}

                        else if ( (LA54_529==185) ) {s = 1080;}

                        else if ( (LA54_529==187) ) {s = 1081;}

                        else if ( (LA54_529==ID) ) {s = 1082;}

                        else if ( (LA54_529==189) ) {s = 1083;}

                        else if ( (LA54_529==192) ) {s = 1084;}

                        else if ( (LA54_529==177) ) {s = 1085;}

                        else if ( (LA54_529==126) && (synpred12_Objc())) {s = 1086;}

                        else if ( (LA54_529==159) && (synpred12_Objc())) {s = 1087;}

                        else if ( (LA54_529==116) && (synpred12_Objc())) {s = 1088;}

                        else if ( (LA54_529==STRING_LITERAL) && (synpred12_Objc())) {s = 1089;}

                        else if ( (LA54_529==STRING_OBJC) && (synpred12_Objc())) {s = 1090;}

                        else if ( (LA54_529==CHAR_LITERAL) && (synpred12_Objc())) {s = 1091;}

                        else if ( (LA54_529==NUMBER_LITERAL) && (synpred12_Objc())) {s = 1092;}

                        else if ( (LA54_529==BOOL_LITERAL) && (synpred12_Objc())) {s = 1093;}

                        else if ( (LA54_529==168) && (synpred12_Objc())) {s = 1094;}

                        else if ( (LA54_529==169) && (synpred12_Objc())) {s = 1095;}

                        else if ( (LA54_529==166) && (synpred12_Objc())) {s = 1096;}

                        else if ( (LA54_529==112) && (synpred12_Objc())) {s = 1097;}

                        else if ( (LA54_529==201) && (synpred12_Objc())) {s = 1098;}

                        else if ( (LA54_529==123||LA54_529==127) && (synpred12_Objc())) {s = 1099;}

                         
                        input.seek(index54_529);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA54_532 = input.LA(1);

                         
                        int index54_532 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_532==166) ) {s = 1100;}

                        else if ( ((LA54_532 >= 129 && LA54_532 <= 130)) && (synpred12_Objc())) {s = 1101;}

                        else if ( (LA54_532==118) && (synpred12_Objc())) {s = 1102;}

                        else if ( (LA54_532==123||LA54_532==127) && (synpred12_Objc())) {s = 1103;}

                        else if ( (LA54_532==120) ) {s = 1104;}

                        else if ( (LA54_532==145) && (synpred12_Objc())) {s = 1105;}

                        else if ( (LA54_532==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 1106;}

                        else if ( (LA54_532==125) && (synpred12_Objc())) {s = 1107;}

                        else if ( (LA54_532==119) ) {s = 1108;}

                        else if ( (LA54_532==116) ) {s = 1109;}

                        else if ( (LA54_532==172) ) {s = 10;}

                        else if ( (LA54_532==113||LA54_532==115||LA54_532==122||LA54_532==126||LA54_532==131||(LA54_532 >= 135 && LA54_532 <= 136)||(LA54_532 >= 138 && LA54_532 <= 143)||LA54_532==168||LA54_532==197||LA54_532==199) && (synpred12_Objc())) {s = 1111;}

                         
                        input.seek(index54_532);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA54_558 = input.LA(1);

                         
                        int index54_558 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_558==120) ) {s = 1178;}

                        else if ( (LA54_558==181) ) {s = 1179;}

                        else if ( (LA54_558==118) ) {s = 1180;}

                        else if ( (LA54_558==194) ) {s = 1181;}

                        else if ( (LA54_558==172) ) {s = 1182;}

                        else if ( (LA54_558==193) ) {s = 1183;}

                        else if ( (LA54_558==184) ) {s = 1184;}

                        else if ( (LA54_558==185) ) {s = 1185;}

                        else if ( (LA54_558==187) ) {s = 1186;}

                        else if ( (LA54_558==ID) ) {s = 1187;}

                        else if ( (LA54_558==189) ) {s = 1188;}

                        else if ( (LA54_558==192) ) {s = 1189;}

                        else if ( (LA54_558==177) ) {s = 1190;}

                        else if ( (LA54_558==126) && (synpred12_Objc())) {s = 1191;}

                        else if ( (LA54_558==159) && (synpred12_Objc())) {s = 1192;}

                        else if ( (LA54_558==116) && (synpred12_Objc())) {s = 1193;}

                        else if ( (LA54_558==STRING_LITERAL) && (synpred12_Objc())) {s = 1194;}

                        else if ( (LA54_558==STRING_OBJC) && (synpred12_Objc())) {s = 1195;}

                        else if ( (LA54_558==CHAR_LITERAL) && (synpred12_Objc())) {s = 1196;}

                        else if ( (LA54_558==NUMBER_LITERAL) && (synpred12_Objc())) {s = 1197;}

                        else if ( (LA54_558==BOOL_LITERAL) && (synpred12_Objc())) {s = 1198;}

                        else if ( (LA54_558==168) && (synpred12_Objc())) {s = 1199;}

                        else if ( (LA54_558==169) && (synpred12_Objc())) {s = 1200;}

                        else if ( (LA54_558==166) && (synpred12_Objc())) {s = 1201;}

                        else if ( (LA54_558==112) && (synpred12_Objc())) {s = 1202;}

                        else if ( (LA54_558==201) && (synpred12_Objc())) {s = 1203;}

                        else if ( (LA54_558==123||LA54_558==127) && (synpred12_Objc())) {s = 1204;}

                         
                        input.seek(index54_558);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA54_561 = input.LA(1);

                         
                        int index54_561 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_561==166) ) {s = 1205;}

                        else if ( ((LA54_561 >= 129 && LA54_561 <= 130)) && (synpred12_Objc())) {s = 1206;}

                        else if ( (LA54_561==118) && (synpred12_Objc())) {s = 1207;}

                        else if ( (LA54_561==123||LA54_561==127) && (synpred12_Objc())) {s = 1208;}

                        else if ( (LA54_561==120) ) {s = 1209;}

                        else if ( (LA54_561==145) && (synpred12_Objc())) {s = 1210;}

                        else if ( (LA54_561==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 1211;}

                        else if ( (LA54_561==125) && (synpred12_Objc())) {s = 1212;}

                        else if ( (LA54_561==119) ) {s = 1213;}

                        else if ( (LA54_561==116) ) {s = 1214;}

                        else if ( (LA54_561==172) ) {s = 10;}

                        else if ( (LA54_561==113||LA54_561==115||LA54_561==122||LA54_561==126||LA54_561==131||(LA54_561 >= 135 && LA54_561 <= 136)||(LA54_561 >= 138 && LA54_561 <= 143)||LA54_561==168||LA54_561==197||LA54_561==199) && (synpred12_Objc())) {s = 1216;}

                         
                        input.seek(index54_561);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA54_587 = input.LA(1);

                         
                        int index54_587 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_587==120) ) {s = 1283;}

                        else if ( (LA54_587==181) ) {s = 1284;}

                        else if ( (LA54_587==118) ) {s = 1285;}

                        else if ( (LA54_587==194) ) {s = 1286;}

                        else if ( (LA54_587==172) ) {s = 1287;}

                        else if ( (LA54_587==193) ) {s = 1288;}

                        else if ( (LA54_587==184) ) {s = 1289;}

                        else if ( (LA54_587==185) ) {s = 1290;}

                        else if ( (LA54_587==187) ) {s = 1291;}

                        else if ( (LA54_587==ID) ) {s = 1292;}

                        else if ( (LA54_587==189) ) {s = 1293;}

                        else if ( (LA54_587==192) ) {s = 1294;}

                        else if ( (LA54_587==177) ) {s = 1295;}

                        else if ( (LA54_587==126) && (synpred12_Objc())) {s = 1296;}

                        else if ( (LA54_587==159) && (synpred12_Objc())) {s = 1297;}

                        else if ( (LA54_587==116) && (synpred12_Objc())) {s = 1298;}

                        else if ( (LA54_587==STRING_LITERAL) && (synpred12_Objc())) {s = 1299;}

                        else if ( (LA54_587==STRING_OBJC) && (synpred12_Objc())) {s = 1300;}

                        else if ( (LA54_587==CHAR_LITERAL) && (synpred12_Objc())) {s = 1301;}

                        else if ( (LA54_587==NUMBER_LITERAL) && (synpred12_Objc())) {s = 1302;}

                        else if ( (LA54_587==BOOL_LITERAL) && (synpred12_Objc())) {s = 1303;}

                        else if ( (LA54_587==168) && (synpred12_Objc())) {s = 1304;}

                        else if ( (LA54_587==169) && (synpred12_Objc())) {s = 1305;}

                        else if ( (LA54_587==166) && (synpred12_Objc())) {s = 1306;}

                        else if ( (LA54_587==112) && (synpred12_Objc())) {s = 1307;}

                        else if ( (LA54_587==201) && (synpred12_Objc())) {s = 1308;}

                        else if ( (LA54_587==123||LA54_587==127) && (synpred12_Objc())) {s = 1309;}

                         
                        input.seek(index54_587);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA54_590 = input.LA(1);

                         
                        int index54_590 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_590==166) ) {s = 1310;}

                        else if ( ((LA54_590 >= 129 && LA54_590 <= 130)) && (synpred12_Objc())) {s = 1311;}

                        else if ( (LA54_590==118) && (synpred12_Objc())) {s = 1312;}

                        else if ( (LA54_590==123||LA54_590==127) && (synpred12_Objc())) {s = 1313;}

                        else if ( (LA54_590==120) ) {s = 1314;}

                        else if ( (LA54_590==145) && (synpred12_Objc())) {s = 1315;}

                        else if ( (LA54_590==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 1316;}

                        else if ( (LA54_590==125) && (synpred12_Objc())) {s = 1317;}

                        else if ( (LA54_590==119) ) {s = 1318;}

                        else if ( (LA54_590==116) ) {s = 1319;}

                        else if ( (LA54_590==172) ) {s = 10;}

                        else if ( (LA54_590==113||LA54_590==115||LA54_590==122||LA54_590==126||LA54_590==131||(LA54_590 >= 135 && LA54_590 <= 136)||(LA54_590 >= 138 && LA54_590 <= 143)||LA54_590==168||LA54_590==197||LA54_590==199) && (synpred12_Objc())) {s = 1321;}

                         
                        input.seek(index54_590);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA54_616 = input.LA(1);

                         
                        int index54_616 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_616==120) ) {s = 1388;}

                        else if ( (LA54_616==181) ) {s = 1389;}

                        else if ( (LA54_616==118) ) {s = 1390;}

                        else if ( (LA54_616==194) ) {s = 1391;}

                        else if ( (LA54_616==172) ) {s = 1392;}

                        else if ( (LA54_616==193) ) {s = 1393;}

                        else if ( (LA54_616==184) ) {s = 1394;}

                        else if ( (LA54_616==185) ) {s = 1395;}

                        else if ( (LA54_616==187) ) {s = 1396;}

                        else if ( (LA54_616==ID) ) {s = 1397;}

                        else if ( (LA54_616==189) ) {s = 1398;}

                        else if ( (LA54_616==192) ) {s = 1399;}

                        else if ( (LA54_616==177) ) {s = 1400;}

                        else if ( (LA54_616==126) && (synpred12_Objc())) {s = 1401;}

                        else if ( (LA54_616==159) && (synpred12_Objc())) {s = 1402;}

                        else if ( (LA54_616==116) && (synpred12_Objc())) {s = 1403;}

                        else if ( (LA54_616==STRING_LITERAL) && (synpred12_Objc())) {s = 1404;}

                        else if ( (LA54_616==STRING_OBJC) && (synpred12_Objc())) {s = 1405;}

                        else if ( (LA54_616==CHAR_LITERAL) && (synpred12_Objc())) {s = 1406;}

                        else if ( (LA54_616==NUMBER_LITERAL) && (synpred12_Objc())) {s = 1407;}

                        else if ( (LA54_616==BOOL_LITERAL) && (synpred12_Objc())) {s = 1408;}

                        else if ( (LA54_616==168) && (synpred12_Objc())) {s = 1409;}

                        else if ( (LA54_616==169) && (synpred12_Objc())) {s = 1410;}

                        else if ( (LA54_616==166) && (synpred12_Objc())) {s = 1411;}

                        else if ( (LA54_616==112) && (synpred12_Objc())) {s = 1412;}

                        else if ( (LA54_616==201) && (synpred12_Objc())) {s = 1413;}

                        else if ( (LA54_616==123||LA54_616==127) && (synpred12_Objc())) {s = 1414;}

                         
                        input.seek(index54_616);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA54_619 = input.LA(1);

                         
                        int index54_619 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_619==166) ) {s = 1415;}

                        else if ( ((LA54_619 >= 129 && LA54_619 <= 130)) && (synpred12_Objc())) {s = 1416;}

                        else if ( (LA54_619==118) && (synpred12_Objc())) {s = 1417;}

                        else if ( (LA54_619==123||LA54_619==127) && (synpred12_Objc())) {s = 1418;}

                        else if ( (LA54_619==120) ) {s = 1419;}

                        else if ( (LA54_619==145) && (synpred12_Objc())) {s = 1420;}

                        else if ( (LA54_619==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 1421;}

                        else if ( (LA54_619==125) && (synpred12_Objc())) {s = 1422;}

                        else if ( (LA54_619==119) ) {s = 1423;}

                        else if ( (LA54_619==116) ) {s = 1424;}

                        else if ( (LA54_619==172) ) {s = 10;}

                        else if ( (LA54_619==113||LA54_619==115||LA54_619==122||LA54_619==126||LA54_619==131||(LA54_619 >= 135 && LA54_619 <= 136)||(LA54_619 >= 138 && LA54_619 <= 143)||LA54_619==168||LA54_619==197||LA54_619==199) && (synpred12_Objc())) {s = 1426;}

                         
                        input.seek(index54_619);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA54_645 = input.LA(1);

                         
                        int index54_645 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_645==120) ) {s = 1493;}

                        else if ( (LA54_645==181) ) {s = 1494;}

                        else if ( (LA54_645==118) ) {s = 1495;}

                        else if ( (LA54_645==194) ) {s = 1496;}

                        else if ( (LA54_645==172) ) {s = 1497;}

                        else if ( (LA54_645==193) ) {s = 1498;}

                        else if ( (LA54_645==184) ) {s = 1499;}

                        else if ( (LA54_645==185) ) {s = 1500;}

                        else if ( (LA54_645==187) ) {s = 1501;}

                        else if ( (LA54_645==ID) ) {s = 1502;}

                        else if ( (LA54_645==189) ) {s = 1503;}

                        else if ( (LA54_645==192) ) {s = 1504;}

                        else if ( (LA54_645==177) ) {s = 1505;}

                        else if ( (LA54_645==126) && (synpred12_Objc())) {s = 1506;}

                        else if ( (LA54_645==159) && (synpred12_Objc())) {s = 1507;}

                        else if ( (LA54_645==116) && (synpred12_Objc())) {s = 1508;}

                        else if ( (LA54_645==STRING_LITERAL) && (synpred12_Objc())) {s = 1509;}

                        else if ( (LA54_645==STRING_OBJC) && (synpred12_Objc())) {s = 1510;}

                        else if ( (LA54_645==CHAR_LITERAL) && (synpred12_Objc())) {s = 1511;}

                        else if ( (LA54_645==NUMBER_LITERAL) && (synpred12_Objc())) {s = 1512;}

                        else if ( (LA54_645==BOOL_LITERAL) && (synpred12_Objc())) {s = 1513;}

                        else if ( (LA54_645==168) && (synpred12_Objc())) {s = 1514;}

                        else if ( (LA54_645==169) && (synpred12_Objc())) {s = 1515;}

                        else if ( (LA54_645==166) && (synpred12_Objc())) {s = 1516;}

                        else if ( (LA54_645==112) && (synpred12_Objc())) {s = 1517;}

                        else if ( (LA54_645==201) && (synpred12_Objc())) {s = 1518;}

                        else if ( (LA54_645==123||LA54_645==127) && (synpred12_Objc())) {s = 1519;}

                         
                        input.seek(index54_645);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA54_648 = input.LA(1);

                         
                        int index54_648 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA54_648==166) ) {s = 1520;}

                        else if ( ((LA54_648 >= 129 && LA54_648 <= 130)) && (synpred12_Objc())) {s = 1521;}

                        else if ( (LA54_648==118) && (synpred12_Objc())) {s = 1522;}

                        else if ( (LA54_648==123||LA54_648==127) && (synpred12_Objc())) {s = 1523;}

                        else if ( (LA54_648==120) ) {s = 1524;}

                        else if ( (LA54_648==145) && (synpred12_Objc())) {s = 1525;}

                        else if ( (LA54_648==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 1526;}

                        else if ( (LA54_648==125) && (synpred12_Objc())) {s = 1527;}

                        else if ( (LA54_648==119) ) {s = 1528;}

                        else if ( (LA54_648==116) ) {s = 1529;}

                        else if ( (LA54_648==172) ) {s = 10;}

                        else if ( (LA54_648==113||LA54_648==115||LA54_648==122||LA54_648==126||LA54_648==131||(LA54_648 >= 135 && LA54_648 <= 136)||(LA54_648 >= 138 && LA54_648 <= 143)||LA54_648==168||LA54_648==197||LA54_648==199) && (synpred12_Objc())) {s = 1531;}

                         
                        input.seek(index54_648);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA54_671 = input.LA(1);

                         
                        int index54_671 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_671);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA54_672 = input.LA(1);

                         
                        int index54_672 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_672);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA54_673 = input.LA(1);

                         
                        int index54_673 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_673);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA54_674 = input.LA(1);

                         
                        int index54_674 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_674);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA54_675 = input.LA(1);

                         
                        int index54_675 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_675);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA54_676 = input.LA(1);

                         
                        int index54_676 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_676);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA54_677 = input.LA(1);

                         
                        int index54_677 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_677);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA54_678 = input.LA(1);

                         
                        int index54_678 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_678);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA54_679 = input.LA(1);

                         
                        int index54_679 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_679);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA54_680 = input.LA(1);

                         
                        int index54_680 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_680);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA54_681 = input.LA(1);

                         
                        int index54_681 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_681);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA54_682 = input.LA(1);

                         
                        int index54_682 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_682);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA54_683 = input.LA(1);

                         
                        int index54_683 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_683);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA54_684 = input.LA(1);

                         
                        int index54_684 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_684);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA54_685 = input.LA(1);

                         
                        int index54_685 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_685);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA54_686 = input.LA(1);

                         
                        int index54_686 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_686);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA54_687 = input.LA(1);

                         
                        int index54_687 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_687);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA54_688 = input.LA(1);

                         
                        int index54_688 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_688);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA54_689 = input.LA(1);

                         
                        int index54_689 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_689);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA54_691 = input.LA(1);

                         
                        int index54_691 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_691);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA54_694 = input.LA(1);

                         
                        int index54_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_694);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA54_717 = input.LA(1);

                         
                        int index54_717 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_717);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA54_718 = input.LA(1);

                         
                        int index54_718 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_718);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA54_719 = input.LA(1);

                         
                        int index54_719 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_719);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA54_720 = input.LA(1);

                         
                        int index54_720 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_720);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA54_721 = input.LA(1);

                         
                        int index54_721 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_721);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA54_722 = input.LA(1);

                         
                        int index54_722 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_722);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA54_723 = input.LA(1);

                         
                        int index54_723 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_723);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA54_724 = input.LA(1);

                         
                        int index54_724 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_724);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA54_725 = input.LA(1);

                         
                        int index54_725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_725);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA54_726 = input.LA(1);

                         
                        int index54_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_726);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA54_727 = input.LA(1);

                         
                        int index54_727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_727);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA54_728 = input.LA(1);

                         
                        int index54_728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_728);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA54_729 = input.LA(1);

                         
                        int index54_729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_729);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA54_730 = input.LA(1);

                         
                        int index54_730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_730);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA54_731 = input.LA(1);

                         
                        int index54_731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_731);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA54_732 = input.LA(1);

                         
                        int index54_732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_732);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA54_733 = input.LA(1);

                         
                        int index54_733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_733);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA54_734 = input.LA(1);

                         
                        int index54_734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_734);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA54_735 = input.LA(1);

                         
                        int index54_735 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_735);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA54_736 = input.LA(1);

                         
                        int index54_736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_736);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA54_737 = input.LA(1);

                         
                        int index54_737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_737);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA54_738 = input.LA(1);

                         
                        int index54_738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_738);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA54_739 = input.LA(1);

                         
                        int index54_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_739);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA54_740 = input.LA(1);

                         
                        int index54_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_740);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA54_741 = input.LA(1);

                         
                        int index54_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_741);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA54_742 = input.LA(1);

                         
                        int index54_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_742);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA54_743 = input.LA(1);

                         
                        int index54_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_743);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA54_744 = input.LA(1);

                         
                        int index54_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_744);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA54_745 = input.LA(1);

                         
                        int index54_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_745);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA54_746 = input.LA(1);

                         
                        int index54_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_746);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA54_747 = input.LA(1);

                         
                        int index54_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_747);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA54_748 = input.LA(1);

                         
                        int index54_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_748);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA54_749 = input.LA(1);

                         
                        int index54_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_749);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA54_750 = input.LA(1);

                         
                        int index54_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_750);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA54_751 = input.LA(1);

                         
                        int index54_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_751);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA54_752 = input.LA(1);

                         
                        int index54_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_752);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA54_753 = input.LA(1);

                         
                        int index54_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_753);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA54_754 = input.LA(1);

                         
                        int index54_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_754);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA54_755 = input.LA(1);

                         
                        int index54_755 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_755);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA54_756 = input.LA(1);

                         
                        int index54_756 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_756);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA54_757 = input.LA(1);

                         
                        int index54_757 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_757);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA54_758 = input.LA(1);

                         
                        int index54_758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_758);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA54_759 = input.LA(1);

                         
                        int index54_759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_759);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA54_760 = input.LA(1);

                         
                        int index54_760 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_760);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA54_761 = input.LA(1);

                         
                        int index54_761 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_761);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA54_762 = input.LA(1);

                         
                        int index54_762 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_762);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA54_763 = input.LA(1);

                         
                        int index54_763 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_763);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA54_764 = input.LA(1);

                         
                        int index54_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_764);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA54_765 = input.LA(1);

                         
                        int index54_765 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_765);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA54_767 = input.LA(1);

                         
                        int index54_767 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_767);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA54_768 = input.LA(1);

                         
                        int index54_768 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_768);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA54_769 = input.LA(1);

                         
                        int index54_769 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_769);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA54_770 = input.LA(1);

                         
                        int index54_770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_770);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA54_771 = input.LA(1);

                         
                        int index54_771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_771);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA54_772 = input.LA(1);

                         
                        int index54_772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_772);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA54_773 = input.LA(1);

                         
                        int index54_773 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_773);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA54_775 = input.LA(1);

                         
                        int index54_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_775);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA54_776 = input.LA(1);

                         
                        int index54_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_776);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA54_777 = input.LA(1);

                         
                        int index54_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_777);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA54_778 = input.LA(1);

                         
                        int index54_778 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_778);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA54_779 = input.LA(1);

                         
                        int index54_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_779);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA54_780 = input.LA(1);

                         
                        int index54_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_780);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA54_782 = input.LA(1);

                         
                        int index54_782 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_782);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA54_783 = input.LA(1);

                         
                        int index54_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_783);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA54_784 = input.LA(1);

                         
                        int index54_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_784);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA54_785 = input.LA(1);

                         
                        int index54_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_785);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA54_786 = input.LA(1);

                         
                        int index54_786 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_786);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA54_787 = input.LA(1);

                         
                        int index54_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_787);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA54_789 = input.LA(1);

                         
                        int index54_789 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_789);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA54_790 = input.LA(1);

                         
                        int index54_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_790);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA54_791 = input.LA(1);

                         
                        int index54_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_791);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA54_792 = input.LA(1);

                         
                        int index54_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_792);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA54_793 = input.LA(1);

                         
                        int index54_793 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_793);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA54_794 = input.LA(1);

                         
                        int index54_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_794);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA54_796 = input.LA(1);

                         
                        int index54_796 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_796);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA54_797 = input.LA(1);

                         
                        int index54_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_797);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA54_798 = input.LA(1);

                         
                        int index54_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_798);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA54_799 = input.LA(1);

                         
                        int index54_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_799);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA54_800 = input.LA(1);

                         
                        int index54_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_800);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA54_801 = input.LA(1);

                         
                        int index54_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_801);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA54_803 = input.LA(1);

                         
                        int index54_803 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_803);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA54_804 = input.LA(1);

                         
                        int index54_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_804);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA54_805 = input.LA(1);

                         
                        int index54_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_805);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA54_806 = input.LA(1);

                         
                        int index54_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_806);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA54_807 = input.LA(1);

                         
                        int index54_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_807);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA54_808 = input.LA(1);

                         
                        int index54_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_808);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA54_809 = input.LA(1);

                         
                        int index54_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_809);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA54_810 = input.LA(1);

                         
                        int index54_810 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_810);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA54_811 = input.LA(1);

                         
                        int index54_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_811);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA54_812 = input.LA(1);

                         
                        int index54_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_812);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA54_813 = input.LA(1);

                         
                        int index54_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_813);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA54_814 = input.LA(1);

                         
                        int index54_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_814);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA54_815 = input.LA(1);

                         
                        int index54_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_815);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA54_816 = input.LA(1);

                         
                        int index54_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_816);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA54_817 = input.LA(1);

                         
                        int index54_817 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_817);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA54_818 = input.LA(1);

                         
                        int index54_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_818);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA54_819 = input.LA(1);

                         
                        int index54_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_819);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA54_820 = input.LA(1);

                         
                        int index54_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_820);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA54_821 = input.LA(1);

                         
                        int index54_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_821);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA54_822 = input.LA(1);

                         
                        int index54_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_822);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA54_823 = input.LA(1);

                         
                        int index54_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_823);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA54_824 = input.LA(1);

                         
                        int index54_824 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_824);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA54_825 = input.LA(1);

                         
                        int index54_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_825);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA54_826 = input.LA(1);

                         
                        int index54_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_826);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA54_827 = input.LA(1);

                         
                        int index54_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_827);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA54_828 = input.LA(1);

                         
                        int index54_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_828);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA54_829 = input.LA(1);

                         
                        int index54_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_829);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA54_830 = input.LA(1);

                         
                        int index54_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_830);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA54_831 = input.LA(1);

                         
                        int index54_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_831);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA54_832 = input.LA(1);

                         
                        int index54_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_832);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA54_833 = input.LA(1);

                         
                        int index54_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_833);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA54_834 = input.LA(1);

                         
                        int index54_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_834);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA54_835 = input.LA(1);

                         
                        int index54_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_835);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA54_836 = input.LA(1);

                         
                        int index54_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_836);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA54_837 = input.LA(1);

                         
                        int index54_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_837);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA54_838 = input.LA(1);

                         
                        int index54_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_838);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA54_839 = input.LA(1);

                         
                        int index54_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_839);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA54_840 = input.LA(1);

                         
                        int index54_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_840);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA54_841 = input.LA(1);

                         
                        int index54_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_841);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA54_842 = input.LA(1);

                         
                        int index54_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_842);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA54_843 = input.LA(1);

                         
                        int index54_843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_843);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA54_844 = input.LA(1);

                         
                        int index54_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_844);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA54_845 = input.LA(1);

                         
                        int index54_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_845);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA54_846 = input.LA(1);

                         
                        int index54_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_846);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA54_847 = input.LA(1);

                         
                        int index54_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_847);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA54_848 = input.LA(1);

                         
                        int index54_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_848);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA54_849 = input.LA(1);

                         
                        int index54_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_849);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA54_850 = input.LA(1);

                         
                        int index54_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_850);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA54_851 = input.LA(1);

                         
                        int index54_851 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_851);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA54_852 = input.LA(1);

                         
                        int index54_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_852);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA54_853 = input.LA(1);

                         
                        int index54_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_853);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA54_854 = input.LA(1);

                         
                        int index54_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_854);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA54_855 = input.LA(1);

                         
                        int index54_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_855);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA54_856 = input.LA(1);

                         
                        int index54_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_856);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA54_857 = input.LA(1);

                         
                        int index54_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_857);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA54_858 = input.LA(1);

                         
                        int index54_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_858);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA54_859 = input.LA(1);

                         
                        int index54_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_859);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA54_860 = input.LA(1);

                         
                        int index54_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_860);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA54_861 = input.LA(1);

                         
                        int index54_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_861);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA54_862 = input.LA(1);

                         
                        int index54_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_862);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA54_863 = input.LA(1);

                         
                        int index54_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_863);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA54_864 = input.LA(1);

                         
                        int index54_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_864);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA54_865 = input.LA(1);

                         
                        int index54_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_865);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA54_866 = input.LA(1);

                         
                        int index54_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_866);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA54_867 = input.LA(1);

                         
                        int index54_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_867);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA54_868 = input.LA(1);

                         
                        int index54_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_868);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA54_869 = input.LA(1);

                         
                        int index54_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_869);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA54_870 = input.LA(1);

                         
                        int index54_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_870);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA54_871 = input.LA(1);

                         
                        int index54_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_871);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA54_872 = input.LA(1);

                         
                        int index54_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_872);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA54_873 = input.LA(1);

                         
                        int index54_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_873);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA54_874 = input.LA(1);

                         
                        int index54_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_874);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA54_938 = input.LA(1);

                         
                        int index54_938 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_938);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA54_939 = input.LA(1);

                         
                        int index54_939 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_939);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA54_940 = input.LA(1);

                         
                        int index54_940 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_940);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA54_941 = input.LA(1);

                         
                        int index54_941 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_941);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA54_942 = input.LA(1);

                         
                        int index54_942 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_942);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA54_943 = input.LA(1);

                         
                        int index54_943 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_943);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA54_944 = input.LA(1);

                         
                        int index54_944 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_944);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA54_945 = input.LA(1);

                         
                        int index54_945 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_945);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA54_946 = input.LA(1);

                         
                        int index54_946 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_946);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA54_947 = input.LA(1);

                         
                        int index54_947 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_947);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA54_948 = input.LA(1);

                         
                        int index54_948 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_948);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA54_949 = input.LA(1);

                         
                        int index54_949 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_949);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA54_950 = input.LA(1);

                         
                        int index54_950 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_950);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA54_951 = input.LA(1);

                         
                        int index54_951 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_951);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA54_966 = input.LA(1);

                         
                        int index54_966 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_966);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA54_970 = input.LA(1);

                         
                        int index54_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_970);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA54_974 = input.LA(1);

                         
                        int index54_974 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_974);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA54_975 = input.LA(1);

                         
                        int index54_975 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_975);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA54_978 = input.LA(1);

                         
                        int index54_978 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_978);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA54_979 = input.LA(1);

                         
                        int index54_979 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_979);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA54_981 = input.LA(1);

                         
                        int index54_981 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_981);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA54_984 = input.LA(1);

                         
                        int index54_984 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_984);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA54_1007 = input.LA(1);

                         
                        int index54_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA54_1008 = input.LA(1);

                         
                        int index54_1008 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1008);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA54_1072 = input.LA(1);

                         
                        int index54_1072 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1072);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA54_1073 = input.LA(1);

                         
                        int index54_1073 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1073);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA54_1074 = input.LA(1);

                         
                        int index54_1074 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1074);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA54_1075 = input.LA(1);

                         
                        int index54_1075 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1075);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA54_1076 = input.LA(1);

                         
                        int index54_1076 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1076);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA54_1077 = input.LA(1);

                         
                        int index54_1077 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1077);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA54_1078 = input.LA(1);

                         
                        int index54_1078 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1078);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA54_1079 = input.LA(1);

                         
                        int index54_1079 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1079);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA54_1080 = input.LA(1);

                         
                        int index54_1080 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1080);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA54_1081 = input.LA(1);

                         
                        int index54_1081 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1081);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA54_1082 = input.LA(1);

                         
                        int index54_1082 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1082);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA54_1083 = input.LA(1);

                         
                        int index54_1083 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1083);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA54_1084 = input.LA(1);

                         
                        int index54_1084 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1084);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA54_1085 = input.LA(1);

                         
                        int index54_1085 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1085);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA54_1100 = input.LA(1);

                         
                        int index54_1100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1100);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA54_1104 = input.LA(1);

                         
                        int index54_1104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1104);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA54_1108 = input.LA(1);

                         
                        int index54_1108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1108);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA54_1109 = input.LA(1);

                         
                        int index54_1109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1109);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA54_1112 = input.LA(1);

                         
                        int index54_1112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1112);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA54_1113 = input.LA(1);

                         
                        int index54_1113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1113);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA54_1177 = input.LA(1);

                         
                        int index54_1177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1177);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA54_1178 = input.LA(1);

                         
                        int index54_1178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1178);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA54_1179 = input.LA(1);

                         
                        int index54_1179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1179);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA54_1180 = input.LA(1);

                         
                        int index54_1180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1180);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA54_1181 = input.LA(1);

                         
                        int index54_1181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1181);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA54_1182 = input.LA(1);

                         
                        int index54_1182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1182);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA54_1183 = input.LA(1);

                         
                        int index54_1183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1183);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA54_1184 = input.LA(1);

                         
                        int index54_1184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1184);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA54_1185 = input.LA(1);

                         
                        int index54_1185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1185);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA54_1186 = input.LA(1);

                         
                        int index54_1186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1186);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA54_1187 = input.LA(1);

                         
                        int index54_1187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1187);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA54_1188 = input.LA(1);

                         
                        int index54_1188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1188);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA54_1189 = input.LA(1);

                         
                        int index54_1189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1189);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA54_1190 = input.LA(1);

                         
                        int index54_1190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1190);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA54_1205 = input.LA(1);

                         
                        int index54_1205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1205);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA54_1209 = input.LA(1);

                         
                        int index54_1209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1209);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA54_1213 = input.LA(1);

                         
                        int index54_1213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1213);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA54_1214 = input.LA(1);

                         
                        int index54_1214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1214);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA54_1217 = input.LA(1);

                         
                        int index54_1217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1217);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA54_1218 = input.LA(1);

                         
                        int index54_1218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1218);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA54_1282 = input.LA(1);

                         
                        int index54_1282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1282);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA54_1283 = input.LA(1);

                         
                        int index54_1283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1283);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA54_1284 = input.LA(1);

                         
                        int index54_1284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1284);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA54_1285 = input.LA(1);

                         
                        int index54_1285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1285);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA54_1286 = input.LA(1);

                         
                        int index54_1286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1286);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA54_1287 = input.LA(1);

                         
                        int index54_1287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1287);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA54_1288 = input.LA(1);

                         
                        int index54_1288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1288);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA54_1289 = input.LA(1);

                         
                        int index54_1289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1289);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA54_1290 = input.LA(1);

                         
                        int index54_1290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1290);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA54_1291 = input.LA(1);

                         
                        int index54_1291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1291);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA54_1292 = input.LA(1);

                         
                        int index54_1292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1292);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA54_1293 = input.LA(1);

                         
                        int index54_1293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1293);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA54_1294 = input.LA(1);

                         
                        int index54_1294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1294);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA54_1295 = input.LA(1);

                         
                        int index54_1295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1295);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA54_1310 = input.LA(1);

                         
                        int index54_1310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1310);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA54_1314 = input.LA(1);

                         
                        int index54_1314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1314);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA54_1318 = input.LA(1);

                         
                        int index54_1318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1318);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA54_1319 = input.LA(1);

                         
                        int index54_1319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1319);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA54_1322 = input.LA(1);

                         
                        int index54_1322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1322);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA54_1323 = input.LA(1);

                         
                        int index54_1323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1323);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA54_1387 = input.LA(1);

                         
                        int index54_1387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1387);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA54_1388 = input.LA(1);

                         
                        int index54_1388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1388);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA54_1389 = input.LA(1);

                         
                        int index54_1389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1389);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA54_1390 = input.LA(1);

                         
                        int index54_1390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1390);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA54_1391 = input.LA(1);

                         
                        int index54_1391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1391);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA54_1392 = input.LA(1);

                         
                        int index54_1392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1392);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA54_1393 = input.LA(1);

                         
                        int index54_1393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1393);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA54_1394 = input.LA(1);

                         
                        int index54_1394 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1394);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA54_1395 = input.LA(1);

                         
                        int index54_1395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1395);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA54_1396 = input.LA(1);

                         
                        int index54_1396 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1396);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA54_1397 = input.LA(1);

                         
                        int index54_1397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1397);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA54_1398 = input.LA(1);

                         
                        int index54_1398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1398);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA54_1399 = input.LA(1);

                         
                        int index54_1399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1399);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA54_1400 = input.LA(1);

                         
                        int index54_1400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1400);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA54_1415 = input.LA(1);

                         
                        int index54_1415 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1415);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA54_1419 = input.LA(1);

                         
                        int index54_1419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1419);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA54_1423 = input.LA(1);

                         
                        int index54_1423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1423);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA54_1424 = input.LA(1);

                         
                        int index54_1424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1424);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA54_1427 = input.LA(1);

                         
                        int index54_1427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1427);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA54_1428 = input.LA(1);

                         
                        int index54_1428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1428);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA54_1492 = input.LA(1);

                         
                        int index54_1492 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1492);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA54_1493 = input.LA(1);

                         
                        int index54_1493 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1493);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA54_1494 = input.LA(1);

                         
                        int index54_1494 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1494);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA54_1495 = input.LA(1);

                         
                        int index54_1495 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1495);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA54_1496 = input.LA(1);

                         
                        int index54_1496 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1496);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA54_1497 = input.LA(1);

                         
                        int index54_1497 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1497);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA54_1498 = input.LA(1);

                         
                        int index54_1498 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1498);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA54_1499 = input.LA(1);

                         
                        int index54_1499 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1499);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA54_1500 = input.LA(1);

                         
                        int index54_1500 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1500);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA54_1501 = input.LA(1);

                         
                        int index54_1501 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1501);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA54_1502 = input.LA(1);

                         
                        int index54_1502 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1502);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA54_1503 = input.LA(1);

                         
                        int index54_1503 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1503);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA54_1504 = input.LA(1);

                         
                        int index54_1504 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1504);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA54_1505 = input.LA(1);

                         
                        int index54_1505 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1505);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA54_1520 = input.LA(1);

                         
                        int index54_1520 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1520);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA54_1524 = input.LA(1);

                         
                        int index54_1524 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1524);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA54_1528 = input.LA(1);

                         
                        int index54_1528 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1528);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA54_1529 = input.LA(1);

                         
                        int index54_1529 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 1531;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index54_1529);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA56_eotS =
        "\u013c\uffff";
    static final String DFA56_eofS =
        "\2\uffff\1\13\6\uffff\1\161\u0132\uffff";
    static final String DFA56_minS =
        "\1\13\1\57\1\27\6\uffff\1\27\1\13\71\uffff\1\13\71\uffff\2\13\1"+
        "\166\10\57\1\u00c4\1\57\4\13\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA56_maxS =
        "\1\170\1\57\1\u00c8\6\uffff\1\u00c8\1\u00c9\71\uffff\1\u00c9\71"+
        "\uffff\1\u00a9\1\u00c9\1\166\1\57\1\u00c7\1\57\5\u00c7\1\u00c4\1"+
        "\u00c2\1\u00c9\3\u00a9\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff\5\0"+
        "\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA56_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\71\uffff\71\2\122"+
        "\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\107\uffff";
    static final String DFA56_specialS =
        "\1\0\10\uffff\1\1\170\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\6\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\2\uffff\1\111\1\112\1\113\1\114\1\115\1\116\2\uffff\1"+
        "\117\1\120\1\121\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\1\130"+
        "\2\uffff\1\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
        "\1\141\1\142\2\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1"+
        "\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
        "\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
        "\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087"+
        "\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
        "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097"+
        "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8}>";
    static final String[] DFA56_transitionS = {
            "\1\10\5\uffff\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\1\5"+
            "\32\uffff\1\1\3\uffff\1\3",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\35\uffff\1"+
            "\13\1\uffff\2\13\1\uffff\3\13\1\uffff\2\13\1\uffff\3\13\1\uffff"+
            "\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\10\13\4\uffff\1\13\2"+
            "\uffff\4\13\2\uffff\1\12\2\13\1\uffff\15\13\1\uffff\16\13\1"+
            "\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\167\27\uffff\1\114\21\uffff\1\151\21\uffff\1\150\35\uffff"+
            "\1\172\1\uffff\1\172\1\107\1\uffff\1\106\1\111\1\115\1\uffff"+
            "\1\116\1\175\1\uffff\1\156\1\116\1\175\1\uffff\2\105\1\172\1"+
            "\uffff\1\160\1\112\2\172\1\uffff\6\172\1\uffff\1\110\1\152\1"+
            "\163\1\174\1\171\1\153\1\162\1\165\4\uffff\1\164\2\uffff\1\131"+
            "\1\173\1\133\1\132\2\uffff\1\104\1\157\1\172\1\uffff\1\144\1"+
            "\154\1\124\1\145\1\155\1\135\1\137\1\121\1\166\1\142\1\146\1"+
            "\117\1\136\1\uffff\1\126\1\127\1\141\1\130\1\134\1\120\1\140"+
            "\1\170\1\122\1\125\1\123\1\143\1\147\1\172\1\uffff\1\172\1\113",
            "\1\u0088\5\uffff\1\u0086\35\uffff\1\u0082\24\uffff\1\u0087"+
            "\23\uffff\1\u0084\1\u0085\26\uffff\1\u008c\3\uffff\1\u0081\1"+
            "\uffff\1\177\1\uffff\1\u0083\2\uffff\1\u008e\2\uffff\1\176\1"+
            "\u008e\37\uffff\1\u0080\6\uffff\1\u008b\1\uffff\1\u0089\1\u008a"+
            "\37\uffff\1\u008d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0099\5\uffff\1\u0097\35\uffff\1\u0093\24\uffff\1\u0098"+
            "\23\uffff\1\u0095\1\u0096\26\uffff\1\u009d\3\uffff\1\u0092\1"+
            "\uffff\1\u0090\1\uffff\1\u0094\2\uffff\1\u009f\2\uffff\1\u008f"+
            "\1\u009f\37\uffff\1\u0091\6\uffff\1\u009c\1\uffff\1\u009a\1"+
            "\u009b\37\uffff\1\u009e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a9\5\uffff\1\u00a7\35\uffff\1\u00a3\24\uffff\1\u00a8"+
            "\23\uffff\1\u00a5\1\u00a6\32\uffff\1\u00a2\1\uffff\1\u00a0\1"+
            "\uffff\1\u00a4\46\uffff\1\u00a1\6\uffff\1\u00ac\1\uffff\1\u00aa"+
            "\1\u00ab",
            "\1\u00c1\5\uffff\1\u00bf\35\uffff\1\u00b5\24\uffff\1\u00c0"+
            "\23\uffff\1\u00bd\1\u00be\26\uffff\1\u00c5\3\uffff\1\u00bb\1"+
            "\uffff\1\u00ae\1\uffff\1\u00bc\2\uffff\1\u00c7\2\uffff\1\u00b9"+
            "\1\u00c7\37\uffff\1\u00ba\6\uffff\1\u00c4\1\uffff\1\u00c2\1"+
            "\u00c3\2\uffff\1\u00b0\4\uffff\1\u00b8\3\uffff\1\u00ad\2\uffff"+
            "\1\u00b2\1\u00b3\1\uffff\1\u00b4\1\uffff\1\u00b6\2\uffff\1\u00b7"+
            "\1\u00b1\1\u00af\6\uffff\1\u00c6",
            "\1\u00c8",
            "\1\u00c9",
            "\1\13\101\uffff\1\u00ce\1\uffff\2\u00ce\1\uffff\1\u00cc\1\uffff"+
            "\1\u00ce\1\uffff\1\u00ce\1\u00cd\2\uffff\1\u00ce\1\u00cd\1\uffff"+
            "\2\u00cb\1\u00ce\3\uffff\2\u00ce\1\uffff\6\u00ce\1\uffff\1\u00cf"+
            "\24\uffff\1\u00ca\1\u00d0\1\u00ce\34\uffff\1\u00ce\1\uffff\1"+
            "\u00ce",
            "\1\u00d2",
            "\1\13\101\uffff\1\u00d6\1\uffff\2\u00d6\1\uffff\1\u00d4\1\uffff"+
            "\1\u00d6\1\uffff\1\u00d6\1\u00d5\2\uffff\1\u00d6\1\u00d5\1\uffff"+
            "\2\u00d3\1\u00d6\3\uffff\2\u00d6\1\uffff\6\u00d6\1\uffff\1\u00d7"+
            "\25\uffff\1\u00d8\1\u00d6\34\uffff\1\u00d6\1\uffff\1\u00d6",
            "\1\13\101\uffff\1\u00dd\1\uffff\2\u00dd\1\uffff\1\u00db\1\uffff"+
            "\1\u00dd\1\uffff\1\u00dd\1\u00dc\2\uffff\1\u00dd\1\u00dc\1\uffff"+
            "\2\u00da\1\u00dd\3\uffff\2\u00dd\1\uffff\6\u00dd\1\uffff\1\u00de"+
            "\25\uffff\1\u00df\1\u00dd\34\uffff\1\u00dd\1\uffff\1\u00dd",
            "\1\13\101\uffff\1\u00e4\1\uffff\2\u00e4\1\uffff\1\u00e2\1\uffff"+
            "\1\u00e4\1\uffff\1\u00e4\1\u00e3\2\uffff\1\u00e4\1\u00e3\1\uffff"+
            "\2\u00e1\1\u00e4\3\uffff\2\u00e4\1\uffff\6\u00e4\1\uffff\1\u00e5"+
            "\25\uffff\1\u00e6\1\u00e4\34\uffff\1\u00e4\1\uffff\1\u00e4",
            "\1\13\101\uffff\1\u00eb\1\uffff\2\u00eb\1\uffff\1\u00e9\1\uffff"+
            "\1\u00eb\1\uffff\1\u00eb\1\u00ea\2\uffff\1\u00eb\1\u00ea\1\uffff"+
            "\2\u00e8\1\u00eb\3\uffff\2\u00eb\1\uffff\6\u00eb\1\uffff\1\u00ec"+
            "\25\uffff\1\u00ed\1\u00eb\34\uffff\1\u00eb\1\uffff\1\u00eb",
            "\1\13\101\uffff\1\u00f2\1\uffff\2\u00f2\1\uffff\1\u00f0\1\uffff"+
            "\1\u00f2\1\uffff\1\u00f2\1\u00f1\2\uffff\1\u00f2\1\u00f1\1\uffff"+
            "\2\u00ef\1\u00f2\3\uffff\2\u00f2\1\uffff\6\u00f2\1\uffff\1\u00f3"+
            "\25\uffff\1\u00f4\1\u00f2\34\uffff\1\u00f2\1\uffff\1\u00f2",
            "\1\u00f6",
            "\1\u00ff\106\uffff\1\u00f8\1\u0103\64\uffff\1\u00fa\4\uffff"+
            "\1\u0102\3\uffff\1\u00f7\2\uffff\1\u00fc\1\u00fd\1\uffff\1\u00fe"+
            "\1\uffff\1\u0100\2\uffff\1\u0101\1\u00fb\1\u00f9",
            "\1\u010e\5\uffff\1\u010c\35\uffff\1\u0108\24\uffff\1\u010d"+
            "\23\uffff\1\u010a\1\u010b\26\uffff\1\u0112\3\uffff\1\u0107\1"+
            "\uffff\1\u0105\1\uffff\1\u0109\2\uffff\1\u0114\2\uffff\1\u0104"+
            "\1\u0114\37\uffff\1\u0106\6\uffff\1\u0111\1\uffff\1\u010f\1"+
            "\u0110\37\uffff\1\u0113",
            "\1\u011e\5\uffff\1\u011c\35\uffff\1\u0118\24\uffff\1\u011d"+
            "\23\uffff\1\u011a\1\u011b\32\uffff\1\u0117\1\uffff\1\u0115\1"+
            "\uffff\1\u0119\46\uffff\1\u0116\6\uffff\1\u0121\1\uffff\1\u011f"+
            "\1\u0120",
            "\1\u012b\5\uffff\1\u0129\35\uffff\1\u0125\24\uffff\1\u012a"+
            "\23\uffff\1\u0127\1\u0128\32\uffff\1\u0124\1\uffff\1\u0122\1"+
            "\uffff\1\u0126\46\uffff\1\u0123\6\uffff\1\u012e\1\uffff\1\u012c"+
            "\1\u012d",
            "\1\u0138\5\uffff\1\u0136\35\uffff\1\u0132\24\uffff\1\u0137"+
            "\23\uffff\1\u0134\1\u0135\32\uffff\1\u0131\1\uffff\1\u012f\1"+
            "\uffff\1\u0133\46\uffff\1\u0130\6\uffff\1\u013b\1\uffff\1\u0139"+
            "\1\u013a",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "495:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_0 = input.LA(1);

                         
                        int index56_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_0==116) ) {s = 1;}

                        else if ( (LA56_0==ID) ) {s = 2;}

                        else if ( (LA56_0==120) && (synpred14_Objc())) {s = 3;}

                        else if ( (LA56_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA56_0==STRING_OBJC) ) {s = 5;}

                        else if ( (LA56_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA56_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA56_0==BOOL_LITERAL) ) {s = 8;}

                         
                        input.seek(index56_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_9==166) ) {s = 68;}

                        else if ( ((LA56_9 >= 129 && LA56_9 <= 130)) && (synpred14_Objc())) {s = 69;}

                        else if ( (LA56_9==118) && (synpred14_Objc())) {s = 70;}

                        else if ( (LA56_9==116) && (synpred14_Objc())) {s = 71;}

                        else if ( (LA56_9==145) && (synpred14_Objc())) {s = 72;}

                        else if ( (LA56_9==119) && (synpred14_Objc())) {s = 73;}

                        else if ( (LA56_9==134) && (synpred14_Objc())) {s = 74;}

                        else if ( (LA56_9==200) && (synpred14_Objc())) {s = 75;}

                        else if ( (LA56_9==ID) && (synpred14_Objc())) {s = 76;}

                        else if ( (LA56_9==120) && (synpred14_Objc())) {s = 77;}

                        else if ( (LA56_9==122||LA56_9==126) && (synpred14_Objc())) {s = 78;}

                        else if ( (LA56_9==181) && (synpred14_Objc())) {s = 79;}

                        else if ( (LA56_9==189) && (synpred14_Objc())) {s = 80;}

                        else if ( (LA56_9==177) && (synpred14_Objc())) {s = 81;}

                        else if ( (LA56_9==192) && (synpred14_Objc())) {s = 82;}

                        else if ( (LA56_9==194) && (synpred14_Objc())) {s = 83;}

                        else if ( (LA56_9==172) && (synpred14_Objc())) {s = 84;}

                        else if ( (LA56_9==193) && (synpred14_Objc())) {s = 85;}

                        else if ( (LA56_9==184) && (synpred14_Objc())) {s = 86;}

                        else if ( (LA56_9==185) && (synpred14_Objc())) {s = 87;}

                        else if ( (LA56_9==187) && (synpred14_Objc())) {s = 88;}

                        else if ( (LA56_9==160) && (synpred14_Objc())) {s = 89;}

                        else if ( (LA56_9==163) && (synpred14_Objc())) {s = 90;}

                        else if ( (LA56_9==162) && (synpred14_Objc())) {s = 91;}

                        else if ( (LA56_9==188) && (synpred14_Objc())) {s = 92;}

                        else if ( (LA56_9==175) && (synpred14_Objc())) {s = 93;}

                        else if ( (LA56_9==182) && (synpred14_Objc())) {s = 94;}

                        else if ( (LA56_9==176) && (synpred14_Objc())) {s = 95;}

                        else if ( (LA56_9==190) && (synpred14_Objc())) {s = 96;}

                        else if ( (LA56_9==186) && (synpred14_Objc())) {s = 97;}

                        else if ( (LA56_9==179) && (synpred14_Objc())) {s = 98;}

                        else if ( (LA56_9==195) && (synpred14_Objc())) {s = 99;}

                        else if ( (LA56_9==170) && (synpred14_Objc())) {s = 100;}

                        else if ( (LA56_9==173) && (synpred14_Objc())) {s = 101;}

                        else if ( (LA56_9==180) && (synpred14_Objc())) {s = 102;}

                        else if ( (LA56_9==196) && (synpred14_Objc())) {s = 103;}

                        else if ( (LA56_9==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 104;}

                        else if ( (LA56_9==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 105;}

                        else if ( (LA56_9==146) && (synpred14_Objc())) {s = 106;}

                        else if ( (LA56_9==150) && (synpred14_Objc())) {s = 107;}

                        else if ( (LA56_9==171) && (synpred14_Objc())) {s = 108;}

                        else if ( (LA56_9==174) && (synpred14_Objc())) {s = 109;}

                        else if ( (LA56_9==125) && (synpred14_Objc())) {s = 110;}

                        else if ( (LA56_9==167) && (synpred14_Objc())) {s = 111;}

                        else if ( (LA56_9==133) && (synpred14_Objc())) {s = 112;}

                        else if ( (LA56_9==EOF) && (synpred14_Objc())) {s = 113;}

                        else if ( (LA56_9==151) && (synpred14_Objc())) {s = 114;}

                        else if ( (LA56_9==147) && (synpred14_Objc())) {s = 115;}

                        else if ( (LA56_9==157) && (synpred14_Objc())) {s = 116;}

                        else if ( (LA56_9==152) && (synpred14_Objc())) {s = 117;}

                        else if ( (LA56_9==178) && (synpred14_Objc())) {s = 118;}

                        else if ( (LA56_9==DEFINE_LITERAL) && (synpred14_Objc())) {s = 119;}

                        else if ( (LA56_9==191) && (synpred14_Objc())) {s = 120;}

                        else if ( (LA56_9==149) && (synpred14_Objc())) {s = 121;}

                        else if ( (LA56_9==113||LA56_9==115||LA56_9==131||(LA56_9 >= 135 && LA56_9 <= 136)||(LA56_9 >= 138 && LA56_9 <= 143)||LA56_9==168||LA56_9==197||LA56_9==199) && (synpred14_Objc())) {s = 122;}

                        else if ( (LA56_9==161) && (synpred14_Objc())) {s = 123;}

                        else if ( (LA56_9==148) && (synpred14_Objc())) {s = 124;}

                        else if ( (LA56_9==123||LA56_9==127) && (synpred14_Objc())) {s = 125;}

                         
                        input.seek(index56_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_130 = input.LA(1);

                         
                        int index56_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA56_130==166) ) {s = 202;}

                        else if ( ((LA56_130 >= 129 && LA56_130 <= 130)) ) {s = 203;}

                        else if ( (LA56_130==118) ) {s = 204;}

                        else if ( (LA56_130==123||LA56_130==127) ) {s = 205;}

                        else if ( (LA56_130==113||(LA56_130 >= 115 && LA56_130 <= 116)||LA56_130==120||LA56_130==122||LA56_130==126||LA56_130==131||(LA56_130 >= 135 && LA56_130 <= 136)||(LA56_130 >= 138 && LA56_130 <= 143)||LA56_130==168||LA56_130==197||LA56_130==199) ) {s = 206;}

                        else if ( (LA56_130==145) ) {s = 207;}

                        else if ( (LA56_130==167) && (synpred13_Objc())) {s = 208;}

                        else if ( (LA56_130==ID) ) {s = 11;}

                         
                        input.seek(index56_130);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_132 = input.LA(1);

                         
                        int index56_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA56_132 >= 129 && LA56_132 <= 130)) ) {s = 211;}

                        else if ( (LA56_132==118) ) {s = 212;}

                        else if ( (LA56_132==123||LA56_132==127) ) {s = 213;}

                        else if ( (LA56_132==113||(LA56_132 >= 115 && LA56_132 <= 116)||LA56_132==120||LA56_132==122||LA56_132==126||LA56_132==131||(LA56_132 >= 135 && LA56_132 <= 136)||(LA56_132 >= 138 && LA56_132 <= 143)||LA56_132==168||LA56_132==197||LA56_132==199) ) {s = 214;}

                        else if ( (LA56_132==145) ) {s = 215;}

                        else if ( (LA56_132==167) && (synpred13_Objc())) {s = 216;}

                        else if ( (LA56_132==ID) ) {s = 11;}

                         
                        input.seek(index56_132);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_133 = input.LA(1);

                         
                        int index56_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA56_133 >= 129 && LA56_133 <= 130)) ) {s = 218;}

                        else if ( (LA56_133==118) ) {s = 219;}

                        else if ( (LA56_133==123||LA56_133==127) ) {s = 220;}

                        else if ( (LA56_133==113||(LA56_133 >= 115 && LA56_133 <= 116)||LA56_133==120||LA56_133==122||LA56_133==126||LA56_133==131||(LA56_133 >= 135 && LA56_133 <= 136)||(LA56_133 >= 138 && LA56_133 <= 143)||LA56_133==168||LA56_133==197||LA56_133==199) ) {s = 221;}

                        else if ( (LA56_133==145) ) {s = 222;}

                        else if ( (LA56_133==167) && (synpred13_Objc())) {s = 223;}

                        else if ( (LA56_133==ID) ) {s = 11;}

                         
                        input.seek(index56_133);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_134 = input.LA(1);

                         
                        int index56_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA56_134 >= 129 && LA56_134 <= 130)) ) {s = 225;}

                        else if ( (LA56_134==118) ) {s = 226;}

                        else if ( (LA56_134==123||LA56_134==127) ) {s = 227;}

                        else if ( (LA56_134==113||(LA56_134 >= 115 && LA56_134 <= 116)||LA56_134==120||LA56_134==122||LA56_134==126||LA56_134==131||(LA56_134 >= 135 && LA56_134 <= 136)||(LA56_134 >= 138 && LA56_134 <= 143)||LA56_134==168||LA56_134==197||LA56_134==199) ) {s = 228;}

                        else if ( (LA56_134==145) ) {s = 229;}

                        else if ( (LA56_134==167) && (synpred13_Objc())) {s = 230;}

                        else if ( (LA56_134==ID) ) {s = 11;}

                         
                        input.seek(index56_134);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_135 = input.LA(1);

                         
                        int index56_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA56_135 >= 129 && LA56_135 <= 130)) ) {s = 232;}

                        else if ( (LA56_135==118) ) {s = 233;}

                        else if ( (LA56_135==123||LA56_135==127) ) {s = 234;}

                        else if ( (LA56_135==113||(LA56_135 >= 115 && LA56_135 <= 116)||LA56_135==120||LA56_135==122||LA56_135==126||LA56_135==131||(LA56_135 >= 135 && LA56_135 <= 136)||(LA56_135 >= 138 && LA56_135 <= 143)||LA56_135==168||LA56_135==197||LA56_135==199) ) {s = 235;}

                        else if ( (LA56_135==145) ) {s = 236;}

                        else if ( (LA56_135==167) && (synpred13_Objc())) {s = 237;}

                        else if ( (LA56_135==ID) ) {s = 11;}

                         
                        input.seek(index56_135);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_136 = input.LA(1);

                         
                        int index56_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA56_136 >= 129 && LA56_136 <= 130)) ) {s = 239;}

                        else if ( (LA56_136==118) ) {s = 240;}

                        else if ( (LA56_136==123||LA56_136==127) ) {s = 241;}

                        else if ( (LA56_136==113||(LA56_136 >= 115 && LA56_136 <= 116)||LA56_136==120||LA56_136==122||LA56_136==126||LA56_136==131||(LA56_136 >= 135 && LA56_136 <= 136)||(LA56_136 >= 138 && LA56_136 <= 143)||LA56_136==168||LA56_136==197||LA56_136==199) ) {s = 242;}

                        else if ( (LA56_136==145) ) {s = 243;}

                        else if ( (LA56_136==167) && (synpred13_Objc())) {s = 244;}

                        else if ( (LA56_136==ID) ) {s = 11;}

                         
                        input.seek(index56_136);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_143 = input.LA(1);

                         
                        int index56_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_143);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_144 = input.LA(1);

                         
                        int index56_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_144);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_145 = input.LA(1);

                         
                        int index56_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_145);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_146 = input.LA(1);

                         
                        int index56_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_146);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_147 = input.LA(1);

                         
                        int index56_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_147);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_148 = input.LA(1);

                         
                        int index56_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_148);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_149 = input.LA(1);

                         
                        int index56_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_149);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_150 = input.LA(1);

                         
                        int index56_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_150);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_151 = input.LA(1);

                         
                        int index56_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_151);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_152 = input.LA(1);

                         
                        int index56_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_152);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_153 = input.LA(1);

                         
                        int index56_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_153);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_154 = input.LA(1);

                         
                        int index56_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_154);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_155 = input.LA(1);

                         
                        int index56_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_155);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_156 = input.LA(1);

                         
                        int index56_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_156);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_157 = input.LA(1);

                         
                        int index56_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_157);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA56_158 = input.LA(1);

                         
                        int index56_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_158);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA56_159 = input.LA(1);

                         
                        int index56_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (synpred14_Objc()) ) {s = 125;}

                         
                        input.seek(index56_159);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA56_160 = input.LA(1);

                         
                        int index56_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_160);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA56_161 = input.LA(1);

                         
                        int index56_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_161);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA56_162 = input.LA(1);

                         
                        int index56_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_162);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA56_163 = input.LA(1);

                         
                        int index56_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_163);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA56_164 = input.LA(1);

                         
                        int index56_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_164);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA56_165 = input.LA(1);

                         
                        int index56_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_165);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA56_166 = input.LA(1);

                         
                        int index56_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_166);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA56_167 = input.LA(1);

                         
                        int index56_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_167);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA56_168 = input.LA(1);

                         
                        int index56_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_168);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA56_169 = input.LA(1);

                         
                        int index56_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_169);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA56_170 = input.LA(1);

                         
                        int index56_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_170);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA56_171 = input.LA(1);

                         
                        int index56_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_171);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA56_172 = input.LA(1);

                         
                        int index56_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_172);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA56_173 = input.LA(1);

                         
                        int index56_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_173);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA56_174 = input.LA(1);

                         
                        int index56_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_174);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA56_175 = input.LA(1);

                         
                        int index56_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_175);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA56_176 = input.LA(1);

                         
                        int index56_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_176);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA56_177 = input.LA(1);

                         
                        int index56_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_177);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA56_178 = input.LA(1);

                         
                        int index56_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_178);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA56_179 = input.LA(1);

                         
                        int index56_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_179);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA56_180 = input.LA(1);

                         
                        int index56_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_180);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA56_181 = input.LA(1);

                         
                        int index56_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_181);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA56_182 = input.LA(1);

                         
                        int index56_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_182);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA56_183 = input.LA(1);

                         
                        int index56_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_183);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA56_184 = input.LA(1);

                         
                        int index56_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_184);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA56_185 = input.LA(1);

                         
                        int index56_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_185);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA56_186 = input.LA(1);

                         
                        int index56_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_186);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA56_187 = input.LA(1);

                         
                        int index56_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_187);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA56_188 = input.LA(1);

                         
                        int index56_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_188);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA56_189 = input.LA(1);

                         
                        int index56_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_189);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA56_190 = input.LA(1);

                         
                        int index56_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_190);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA56_191 = input.LA(1);

                         
                        int index56_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_191);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA56_192 = input.LA(1);

                         
                        int index56_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_192);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA56_193 = input.LA(1);

                         
                        int index56_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_193);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA56_194 = input.LA(1);

                         
                        int index56_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_194);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA56_195 = input.LA(1);

                         
                        int index56_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_195);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA56_196 = input.LA(1);

                         
                        int index56_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_196);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA56_197 = input.LA(1);

                         
                        int index56_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_197);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA56_198 = input.LA(1);

                         
                        int index56_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_198);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA56_199 = input.LA(1);

                         
                        int index56_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_199);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA56_200 = input.LA(1);

                         
                        int index56_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_200);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA56_201 = input.LA(1);

                         
                        int index56_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_201);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA56_202 = input.LA(1);

                         
                        int index56_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_202);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA56_203 = input.LA(1);

                         
                        int index56_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_203);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA56_204 = input.LA(1);

                         
                        int index56_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_204);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA56_205 = input.LA(1);

                         
                        int index56_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_205);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA56_206 = input.LA(1);

                         
                        int index56_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_206);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA56_207 = input.LA(1);

                         
                        int index56_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_207);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA56_210 = input.LA(1);

                         
                        int index56_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_210);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA56_211 = input.LA(1);

                         
                        int index56_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_211);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA56_212 = input.LA(1);

                         
                        int index56_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_212);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA56_213 = input.LA(1);

                         
                        int index56_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_213);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA56_214 = input.LA(1);

                         
                        int index56_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_214);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA56_215 = input.LA(1);

                         
                        int index56_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_215);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA56_218 = input.LA(1);

                         
                        int index56_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_218);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA56_219 = input.LA(1);

                         
                        int index56_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_219);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA56_220 = input.LA(1);

                         
                        int index56_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_220);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA56_221 = input.LA(1);

                         
                        int index56_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_221);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA56_222 = input.LA(1);

                         
                        int index56_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_222);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA56_225 = input.LA(1);

                         
                        int index56_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_225);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA56_226 = input.LA(1);

                         
                        int index56_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_226);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA56_227 = input.LA(1);

                         
                        int index56_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_227);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA56_228 = input.LA(1);

                         
                        int index56_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_228);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA56_229 = input.LA(1);

                         
                        int index56_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_229);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA56_232 = input.LA(1);

                         
                        int index56_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_232);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA56_233 = input.LA(1);

                         
                        int index56_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_233);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA56_234 = input.LA(1);

                         
                        int index56_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_234);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA56_235 = input.LA(1);

                         
                        int index56_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_235);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA56_236 = input.LA(1);

                         
                        int index56_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_236);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA56_239 = input.LA(1);

                         
                        int index56_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_239);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA56_240 = input.LA(1);

                         
                        int index56_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_240);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA56_241 = input.LA(1);

                         
                        int index56_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_241);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA56_242 = input.LA(1);

                         
                        int index56_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_242);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA56_243 = input.LA(1);

                         
                        int index56_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_243);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA56_246 = input.LA(1);

                         
                        int index56_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_246);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA56_247 = input.LA(1);

                         
                        int index56_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_247);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA56_248 = input.LA(1);

                         
                        int index56_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_248);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA56_249 = input.LA(1);

                         
                        int index56_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_249);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA56_250 = input.LA(1);

                         
                        int index56_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_250);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA56_251 = input.LA(1);

                         
                        int index56_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_251);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA56_252 = input.LA(1);

                         
                        int index56_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_252);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA56_253 = input.LA(1);

                         
                        int index56_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_253);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA56_254 = input.LA(1);

                         
                        int index56_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_254);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA56_255 = input.LA(1);

                         
                        int index56_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_255);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA56_256 = input.LA(1);

                         
                        int index56_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_256);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA56_257 = input.LA(1);

                         
                        int index56_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_257);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA56_258 = input.LA(1);

                         
                        int index56_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_258);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA56_259 = input.LA(1);

                         
                        int index56_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_259);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA56_260 = input.LA(1);

                         
                        int index56_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_260);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA56_261 = input.LA(1);

                         
                        int index56_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_261);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA56_262 = input.LA(1);

                         
                        int index56_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_262);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA56_263 = input.LA(1);

                         
                        int index56_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_263);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA56_264 = input.LA(1);

                         
                        int index56_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_264);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA56_265 = input.LA(1);

                         
                        int index56_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_265);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA56_266 = input.LA(1);

                         
                        int index56_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_266);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA56_267 = input.LA(1);

                         
                        int index56_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_267);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA56_268 = input.LA(1);

                         
                        int index56_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_268);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA56_269 = input.LA(1);

                         
                        int index56_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_269);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA56_270 = input.LA(1);

                         
                        int index56_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_270);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA56_271 = input.LA(1);

                         
                        int index56_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_271);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA56_272 = input.LA(1);

                         
                        int index56_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_272);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA56_273 = input.LA(1);

                         
                        int index56_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_273);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA56_274 = input.LA(1);

                         
                        int index56_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_274);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA56_275 = input.LA(1);

                         
                        int index56_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_275);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA56_276 = input.LA(1);

                         
                        int index56_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_276);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA56_277 = input.LA(1);

                         
                        int index56_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_277);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA56_278 = input.LA(1);

                         
                        int index56_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_278);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA56_279 = input.LA(1);

                         
                        int index56_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_279);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA56_280 = input.LA(1);

                         
                        int index56_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_280);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA56_281 = input.LA(1);

                         
                        int index56_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_281);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA56_282 = input.LA(1);

                         
                        int index56_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_282);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA56_283 = input.LA(1);

                         
                        int index56_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_283);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA56_284 = input.LA(1);

                         
                        int index56_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_284);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA56_285 = input.LA(1);

                         
                        int index56_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_285);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA56_286 = input.LA(1);

                         
                        int index56_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_286);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA56_287 = input.LA(1);

                         
                        int index56_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_287);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA56_288 = input.LA(1);

                         
                        int index56_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_288);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA56_289 = input.LA(1);

                         
                        int index56_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_289);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA56_290 = input.LA(1);

                         
                        int index56_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_290);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA56_291 = input.LA(1);

                         
                        int index56_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_291);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA56_292 = input.LA(1);

                         
                        int index56_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_292);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA56_293 = input.LA(1);

                         
                        int index56_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_293);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA56_294 = input.LA(1);

                         
                        int index56_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_294);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA56_295 = input.LA(1);

                         
                        int index56_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_295);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA56_296 = input.LA(1);

                         
                        int index56_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_296);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA56_297 = input.LA(1);

                         
                        int index56_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_297);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA56_298 = input.LA(1);

                         
                        int index56_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_298);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA56_299 = input.LA(1);

                         
                        int index56_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_299);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA56_300 = input.LA(1);

                         
                        int index56_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_300);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA56_301 = input.LA(1);

                         
                        int index56_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_301);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA56_302 = input.LA(1);

                         
                        int index56_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_302);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA56_303 = input.LA(1);

                         
                        int index56_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_303);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA56_304 = input.LA(1);

                         
                        int index56_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_304);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA56_305 = input.LA(1);

                         
                        int index56_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_305);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA56_306 = input.LA(1);

                         
                        int index56_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_306);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA56_307 = input.LA(1);

                         
                        int index56_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_307);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA56_308 = input.LA(1);

                         
                        int index56_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_308);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA56_309 = input.LA(1);

                         
                        int index56_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_309);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA56_310 = input.LA(1);

                         
                        int index56_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_310);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA56_311 = input.LA(1);

                         
                        int index56_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_311);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA56_312 = input.LA(1);

                         
                        int index56_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_312);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA56_313 = input.LA(1);

                         
                        int index56_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_313);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA56_314 = input.LA(1);

                         
                        int index56_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_314);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA56_315 = input.LA(1);

                         
                        int index56_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 244;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index56_315);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA142_eotS =
        "\171\uffff";
    static final String DFA142_eofS =
        "\2\uffff\1\24\4\uffff\1\134\161\uffff";
    static final String DFA142_minS =
        "\1\27\1\57\3\13\2\uffff\1\27\46\uffff\1\0\14\uffff\1\0\32\uffff"+
        "\3\0\21\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA142_maxS =
        "\1\27\1\57\1\u00c9\1\u00a9\1\u00c9\2\uffff\1\u00c7\46\uffff\1\0"+
        "\14\uffff\1\0\32\uffff\3\0\21\uffff\1\0\4\uffff\1\0\4\uffff\1\0"+
        "\2\uffff\1\0\1\uffff";
    static final String DFA142_acceptS =
        "\5\uffff\2\1\1\uffff\14\1\1\2\32\uffff\14\1\1\uffff\32\1\3\uffff"+
        "\21\1\1\uffff\4\1\1\uffff\4\1\1\uffff\2\1\1\uffff\1\1";
    static final String DFA142_specialS =
        "\2\uffff\1\0\1\1\1\2\2\uffff\1\3\46\uffff\1\4\14\uffff\1\5\32\uffff"+
        "\1\6\1\7\1\10\21\uffff\1\11\4\uffff\1\12\4\uffff\1\13\2\uffff\1"+
        "\14\1\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\1",
            "\1\2",
            "\1\15\5\uffff\1\13\5\uffff\1\24\27\uffff\1\7\21\uffff\1\24"+
            "\2\uffff\1\14\16\uffff\1\24\4\uffff\1\11\1\12\26\uffff\1\21"+
            "\3\uffff\1\6\1\uffff\1\4\1\uffff\1\10\1\uffff\1\24\1\23\2\uffff"+
            "\1\3\1\23\6\uffff\1\24\14\uffff\3\24\1\uffff\2\24\4\uffff\1"+
            "\24\1\uffff\1\5\1\uffff\1\24\4\uffff\1\20\1\uffff\1\16\1\17"+
            "\2\uffff\1\24\4\uffff\2\24\2\uffff\1\24\2\uffff\2\24\1\uffff"+
            "\3\24\1\uffff\4\24\6\uffff\1\22",
            "\1\67\5\uffff\1\65\35\uffff\1\61\24\uffff\1\66\23\uffff\1\63"+
            "\1\64\32\uffff\1\60\1\uffff\1\56\1\uffff\1\62\46\uffff\1\57"+
            "\6\uffff\1\72\1\uffff\1\70\1\71",
            "\1\117\5\uffff\1\115\35\uffff\1\104\24\uffff\1\116\23\uffff"+
            "\1\113\1\114\26\uffff\1\123\3\uffff\1\112\1\uffff\1\75\1\uffff"+
            "\1\73\2\uffff\1\125\2\uffff\1\110\1\125\37\uffff\1\111\6\uffff"+
            "\1\122\1\uffff\1\120\1\121\2\uffff\1\77\4\uffff\1\107\3\uffff"+
            "\1\74\2\uffff\1\101\1\102\1\uffff\1\103\1\uffff\1\105\2\uffff"+
            "\1\106\1\100\1\76\6\uffff\1\124",
            "",
            "",
            "\1\145\27\uffff\1\157\21\uffff\1\161\21\uffff\1\160\35\uffff"+
            "\1\170\1\uffff\1\170\1\167\1\uffff\1\130\1\uffff\1\164\1\uffff"+
            "\1\132\1\131\2\uffff\1\132\1\131\1\uffff\2\127\1\170\2\uffff"+
            "\1\162\2\170\1\uffff\6\170\1\uffff\1\133\1\uffff\1\136\1\166"+
            "\1\163\1\uffff\1\135\1\143\4\uffff\1\137\3\uffff\1\165\4\uffff"+
            "\1\126\1\uffff\1\170\3\uffff\1\152\4\uffff\1\142\1\144\2\uffff"+
            "\1\150\2\uffff\1\154\1\155\1\uffff\1\156\1\147\1\140\1\uffff"+
            "\1\146\1\141\1\153\1\151\2\uffff\1\170\1\uffff\1\170",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "913:1: define_declaration : ( ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_2 = input.LA(1);

                         
                        int index142_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA142_2==126) ) {s = 3;}

                        else if ( (LA142_2==118) ) {s = 4;}

                        else if ( (LA142_2==159) && (synpred28_Objc())) {s = 5;}

                        else if ( (LA142_2==116) && (synpred28_Objc())) {s = 6;}

                        else if ( (LA142_2==ID) ) {s = 7;}

                        else if ( (LA142_2==120) && (synpred28_Objc())) {s = 8;}

                        else if ( (LA142_2==STRING_LITERAL) && (synpred28_Objc())) {s = 9;}

                        else if ( (LA142_2==STRING_OBJC) && (synpred28_Objc())) {s = 10;}

                        else if ( (LA142_2==CHAR_LITERAL) && (synpred28_Objc())) {s = 11;}

                        else if ( (LA142_2==NUMBER_LITERAL) && (synpred28_Objc())) {s = 12;}

                        else if ( (LA142_2==BOOL_LITERAL) && (synpred28_Objc())) {s = 13;}

                        else if ( (LA142_2==168) && (synpred28_Objc())) {s = 14;}

                        else if ( (LA142_2==169) && (synpred28_Objc())) {s = 15;}

                        else if ( (LA142_2==166) && (synpred28_Objc())) {s = 16;}

                        else if ( (LA142_2==112) && (synpred28_Objc())) {s = 17;}

                        else if ( (LA142_2==201) && (synpred28_Objc())) {s = 18;}

                        else if ( (LA142_2==123||LA142_2==127) && (synpred28_Objc())) {s = 19;}

                        else if ( (LA142_2==EOF||LA142_2==DEFINE_LITERAL||LA142_2==MULTI_COMMENT_LIT||LA142_2==SINGLE_COMMENT_LIT||LA142_2==122||LA142_2==134||(LA142_2 >= 147 && LA142_2 <= 149)||(LA142_2 >= 151 && LA142_2 <= 152)||LA142_2==157||LA142_2==161||LA142_2==172||(LA142_2 >= 177 && LA142_2 <= 178)||LA142_2==181||(LA142_2 >= 184 && LA142_2 <= 185)||(LA142_2 >= 187 && LA142_2 <= 189)||(LA142_2 >= 191 && LA142_2 <= 194)) ) {s = 20;}

                         
                        input.seek(index142_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_3 = input.LA(1);

                         
                        int index142_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA142_3==118) ) {s = 46;}

                        else if ( (LA142_3==159) && (synpred28_Objc())) {s = 47;}

                        else if ( (LA142_3==116) && (synpred28_Objc())) {s = 48;}

                        else if ( (LA142_3==ID) && (synpred28_Objc())) {s = 49;}

                        else if ( (LA142_3==120) && (synpred28_Objc())) {s = 50;}

                        else if ( (LA142_3==STRING_LITERAL) && (synpred28_Objc())) {s = 51;}

                        else if ( (LA142_3==STRING_OBJC) && (synpred28_Objc())) {s = 52;}

                        else if ( (LA142_3==CHAR_LITERAL) && (synpred28_Objc())) {s = 53;}

                        else if ( (LA142_3==NUMBER_LITERAL) && (synpred28_Objc())) {s = 54;}

                        else if ( (LA142_3==BOOL_LITERAL) && (synpred28_Objc())) {s = 55;}

                        else if ( (LA142_3==168) && (synpred28_Objc())) {s = 56;}

                        else if ( (LA142_3==169) && (synpred28_Objc())) {s = 57;}

                        else if ( (LA142_3==166) && (synpred28_Objc())) {s = 58;}

                         
                        input.seek(index142_3);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_4 = input.LA(1);

                         
                        int index142_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA142_4==120) ) {s = 59;}

                        else if ( (LA142_4==181) && (synpred28_Objc())) {s = 60;}

                        else if ( (LA142_4==118) && (synpred28_Objc())) {s = 61;}

                        else if ( (LA142_4==194) && (synpred28_Objc())) {s = 62;}

                        else if ( (LA142_4==172) && (synpred28_Objc())) {s = 63;}

                        else if ( (LA142_4==193) && (synpred28_Objc())) {s = 64;}

                        else if ( (LA142_4==184) && (synpred28_Objc())) {s = 65;}

                        else if ( (LA142_4==185) && (synpred28_Objc())) {s = 66;}

                        else if ( (LA142_4==187) && (synpred28_Objc())) {s = 67;}

                        else if ( (LA142_4==ID) && (synpred28_Objc())) {s = 68;}

                        else if ( (LA142_4==189) && (synpred28_Objc())) {s = 69;}

                        else if ( (LA142_4==192) && (synpred28_Objc())) {s = 70;}

                        else if ( (LA142_4==177) && (synpred28_Objc())) {s = 71;}

                        else if ( (LA142_4==126) && (synpred28_Objc())) {s = 72;}

                        else if ( (LA142_4==159) && (synpred28_Objc())) {s = 73;}

                        else if ( (LA142_4==116) && (synpred28_Objc())) {s = 74;}

                        else if ( (LA142_4==STRING_LITERAL) && (synpred28_Objc())) {s = 75;}

                        else if ( (LA142_4==STRING_OBJC) && (synpred28_Objc())) {s = 76;}

                        else if ( (LA142_4==CHAR_LITERAL) && (synpred28_Objc())) {s = 77;}

                        else if ( (LA142_4==NUMBER_LITERAL) && (synpred28_Objc())) {s = 78;}

                        else if ( (LA142_4==BOOL_LITERAL) && (synpred28_Objc())) {s = 79;}

                        else if ( (LA142_4==168) && (synpred28_Objc())) {s = 80;}

                        else if ( (LA142_4==169) && (synpred28_Objc())) {s = 81;}

                        else if ( (LA142_4==166) && (synpred28_Objc())) {s = 82;}

                        else if ( (LA142_4==112) && (synpred28_Objc())) {s = 83;}

                        else if ( (LA142_4==201) && (synpred28_Objc())) {s = 84;}

                        else if ( (LA142_4==123||LA142_4==127) && (synpred28_Objc())) {s = 85;}

                         
                        input.seek(index142_4);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_7 = input.LA(1);

                         
                        int index142_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA142_7==166) ) {s = 86;}

                        else if ( ((LA142_7 >= 129 && LA142_7 <= 130)) ) {s = 87;}

                        else if ( (LA142_7==118) ) {s = 88;}

                        else if ( (LA142_7==123||LA142_7==127) && (synpred28_Objc())) {s = 89;}

                        else if ( (LA142_7==122||LA142_7==126) && (synpred28_Objc())) {s = 90;}

                        else if ( (LA142_7==145) && (synpred28_Objc())) {s = 91;}

                        else if ( (LA142_7==EOF) && (synpred28_Objc())) {s = 92;}

                        else if ( (LA142_7==151) && (synpred28_Objc())) {s = 93;}

                        else if ( (LA142_7==147) && (synpred28_Objc())) {s = 94;}

                        else if ( (LA142_7==157) && (synpred28_Objc())) {s = 95;}

                        else if ( (LA142_7==189) && (synpred28_Objc())) {s = 96;}

                        else if ( (LA142_7==192) && (synpred28_Objc())) {s = 97;}

                        else if ( (LA142_7==177) && (synpred28_Objc())) {s = 98;}

                        else if ( (LA142_7==152) && (synpred28_Objc())) {s = 99;}

                        else if ( (LA142_7==178) && (synpred28_Objc())) {s = 100;}

                        else if ( (LA142_7==DEFINE_LITERAL) && (synpred28_Objc())) {s = 101;}

                        else if ( (LA142_7==191) && (synpred28_Objc())) {s = 102;}

                        else if ( (LA142_7==188) && (synpred28_Objc())) {s = 103;}

                        else if ( (LA142_7==181) && (synpred28_Objc())) {s = 104;}

                        else if ( (LA142_7==194) && (synpred28_Objc())) {s = 105;}

                        else if ( (LA142_7==172) ) {s = 106;}

                        else if ( (LA142_7==193) && (synpred28_Objc())) {s = 107;}

                        else if ( (LA142_7==184) && (synpred28_Objc())) {s = 108;}

                        else if ( (LA142_7==185) && (synpred28_Objc())) {s = 109;}

                        else if ( (LA142_7==187) && (synpred28_Objc())) {s = 110;}

                        else if ( (LA142_7==ID) ) {s = 111;}

                        else if ( (LA142_7==SINGLE_COMMENT_LIT) && (synpred28_Objc())) {s = 112;}

                        else if ( (LA142_7==MULTI_COMMENT_LIT) && (synpred28_Objc())) {s = 113;}

                        else if ( (LA142_7==134) && (synpred28_Objc())) {s = 114;}

                        else if ( (LA142_7==149) && (synpred28_Objc())) {s = 115;}

                        else if ( (LA142_7==120) ) {s = 116;}

                        else if ( (LA142_7==161) && (synpred28_Objc())) {s = 117;}

                        else if ( (LA142_7==148) && (synpred28_Objc())) {s = 118;}

                        else if ( (LA142_7==116) ) {s = 119;}

                        else if ( (LA142_7==113||LA142_7==115||LA142_7==131||(LA142_7 >= 135 && LA142_7 <= 136)||(LA142_7 >= 138 && LA142_7 <= 143)||LA142_7==168||LA142_7==197||LA142_7==199) && (synpred28_Objc())) {s = 120;}

                         
                        input.seek(index142_7);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_46 = input.LA(1);

                         
                        int index142_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_46);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_59 = input.LA(1);

                         
                        int index142_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_59);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA142_86 = input.LA(1);

                         
                        int index142_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_86);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA142_87 = input.LA(1);

                         
                        int index142_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_87);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA142_88 = input.LA(1);

                         
                        int index142_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_88);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA142_106 = input.LA(1);

                         
                        int index142_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_106);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA142_111 = input.LA(1);

                         
                        int index142_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_111);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA142_116 = input.LA(1);

                         
                        int index142_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_116);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA142_119 = input.LA(1);

                         
                        int index142_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 120;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index142_119);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code478 = new BitSet(new long[]{0x0000800000800002L,0x0040000000080002L,0xBB26100021880040L,0x0000000000000007L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_code_internal561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_extern663 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern666 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_extern669 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_set_in_extern671 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_implementation710 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_implementation713 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0xBB22100200300040L,0x0000000000000007L});
    public static final BitSet FOLLOW_category_in_implementation716 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0xBB22100200300040L,0x0000000000000007L});
    public static final BitSet FOLLOW_implementation_body_in_implementation721 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0xBB22100200300040L,0x0000000000000007L});
    public static final BitSet FOLLOW_149_in_implementation726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synthesize823 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_148_in_synthesize827 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_139_in_synthesize834 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synthesize836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synthesize840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_static_declaration_wrapper864 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call_predicate886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_block_call_predicate893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_block_call_predicate895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_block_call933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_block_call935 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x7F7BB44D00000040L,0x000000000000011FL});
    public static final BitSet FOLLOW_block_internal_in_block_call937 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x7F7BB44D00000040L,0x000000000000011FL});
    public static final BitSet FOLLOW_200_in_block_call940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call961 = new BitSet(new long[]{0x0000800000000000L,0x00C0000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_block_params_in_block_call963 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_synchronized_call1006 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synchronized_call1008 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1010 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1030 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_block_params1033 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_classical_param_in_block_params1035 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_block_multiline1098 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x7F7BB44D00000040L,0x000000000000011FL});
    public static final BitSet FOLLOW_block_internal_in_block_multiline1103 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x7F7BB44D00000040L,0x000000000000011FL});
    public static final BitSet FOLLOW_200_in_block_multiline1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_singleline1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1279 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_internal1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_goto_stmt1407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_goto_stmt1409 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_while_stmt1459 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_while_stmt1461 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1463 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1465 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_while_stmt1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_for_in_stmt1482 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1507 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000040L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1512 = new BitSet(new long[]{0x0000800000020802L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1539 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1541 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1558 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1560 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1578 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1580 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1588 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0080000000010A11L,0x0000000000000040L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1592 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1596 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1601 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1604 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_for_stmt1619 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_for_stmt1621 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_return_stmt1659 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000040L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_switch_stmt1684 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_switch_stmt1686 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1688 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_switch_stmt1692 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459EC4100000040L,0x0000000000000118L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1695 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459EC4100000040L,0x0000000000000118L});
    public static final BitSet FOLLOW_200_in_switch_stmt1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_case_stmt1758 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_case_stmt1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_default_stmt1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_default_stmt1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_do_stmt1808 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_do_stmt1810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_do_stmt1812 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_do_stmt1814 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1816 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_if_stmt1843 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_if_stmt1845 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1847 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt1849 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_if_stmt1851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_else_stmt1874 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_else_stmt1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_try_stmt_wrapper1898 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_catch_stmt1933 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1936 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1939 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt1942 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1944 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt1947 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_catch_stmt1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_finally_stmt1974 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x4459A44100000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_block_in_finally_stmt1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_throw_stmt2015 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_throw_stmt2019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_name_number2064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2139 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000040L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2141 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2164 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2172 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2189 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_implementation_common2204 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2206 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2208 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2210 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2273 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2276 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2278 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_clasical_method_call_predicate2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2297 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2300 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2302 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_classical_method_call2307 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2309 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_call2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2327 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params_push2330 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2332 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2356 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_params_push2363 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_125_in_method_params_push2368 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2371 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_method_param_push2394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_method_msg2420 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_method_msg2422 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000020L});
    public static final BitSet FOLLOW_133_in_method_msg2427 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_method_msg2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_questionmark_if_stmt2459 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_questionmark_if_stmt2463 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_element_value_or_semicolon2513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2534 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_array_init2537 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000210L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2539 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_196_in_element_value_or_array_init2556 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000310L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_element_value_or_array_init2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2612 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000001000002FD88L,0x00000000000000A0L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2614 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000001000002FD88L,0x00000000000000A0L});
    public static final BitSet FOLLOW_126_in_cast_unary_expression12629 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2659 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2681 = new BitSet(new long[]{0x0000000000000002L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2690 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_cast_unary_expression2706 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2722 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2742 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_expression2763 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2765 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2767 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_expression2769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2772 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_cast_expression2774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2795 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2797 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2799 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2802 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2807 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2833 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2836 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2838 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2843 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2845 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2858 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_simple_expression_value2887 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_simple_expression_value2892 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value2894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_simple_expression_value2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value2924 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value2987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value23019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_simple_expression_value23037 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23039 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_selector3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_type_cast_name3285 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3287 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_type_cast_name3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3384 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3441 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_lvalue3456 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3458 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3460 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3465 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3491 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_lvalue3520 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_lvalue3525 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_lvalue3527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_lvalue3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3545 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_break_stmt3573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_break_stmt3575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_continue_stmt3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_continue_stmt3598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_extern_declaration3645 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3659 = new BitSet(new long[]{0x0000000000000000L,0x4400000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3676 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100002000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3678 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_field_declaration_in_declarations3681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_optional_prefix3735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ns_inline3747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_property_prefix3759 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_property_prefix3761 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3763 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3766 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3768 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_property_prefix3773 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3775 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3778 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3780 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_property_prefix3782 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_typedef_declaration_wrapper3840 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3860 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3862 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_125_in_typedef_declaration3865 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3867 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_typedef_declaration3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3883 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate3885 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20100000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3887 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate3889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer3904 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer3906 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20100000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3908 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3910 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer3912 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L,0x0B20100000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3915 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_func_pointer3918 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20100000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3920 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal3955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal3961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name3994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_forward_class_declaration4012 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_forward_class_declaration4029 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_protocol_declaration4118 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4120 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200080L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4122 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4144 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_class_protocol_end4151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_template4163 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template4165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_template4167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implements_protocols4201 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4203 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_125_in_implements_protocols4206 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4208 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_implements_protocols4212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4234 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_template_internal4237 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4239 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_template_type4259 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_interface_declaration4323 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4325 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A2000A0L,0x0000000000000010L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4327 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L,0x0000000000000010L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4331 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4336 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_interface_declaration4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_fields_body4358 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0xAB22101054000000L,0x0000000000000107L});
    public static final BitSet FOLLOW_body_item_in_fields_body4364 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0xAB22101054000000L,0x0000000000000107L});
    public static final BitSet FOLLOW_200_in_fields_body4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4384 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0xAB22101000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4387 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0xAB22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_field_modifiers4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4475 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_category4496 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_category4498 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_category4501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_superclass_name4521 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4556 = new BitSet(new long[]{0x0000800000000002L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4580 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4582 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000040L});
    public static final BitSet FOLLOW_125_in_field_declaration4586 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4588 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000040L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_134_in_field_declaration4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4609 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000210L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_field_declaration4613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_declaration4619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4634 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classical_method_params4661 = new BitSet(new long[]{0x0000800000000000L,0x20C0000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4663 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params4667 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4669 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_params4673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4698 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4746 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_classical_type_declaration4756 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4758 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_classical_type_declaration4777 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4779 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_classical_type_declaration4798 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4800 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4848 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4857 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4866 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4875 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_type_declaration_plane4892 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20100000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_type_declaration_plane4895 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_plane4898 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane4901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_type_declaration_plane4904 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration_plane4906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_type_decl_protocol_predicate4938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_decl_protocol_predicate4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_type_declaration_protocol4956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_declaration_protocol4958 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0B20000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol4960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_type_declaration_protocol4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_type_declaration_struct_simple4984 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple4986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_type_declaration_union_simple5006 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_type_declaration_enum_simple5032 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_type_declaration_struct5064 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct5066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_type_declaration_union5109 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union5111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_type_declaration_enum5154 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum5156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_enum_wrapper5188 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5198 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_enum_wrapper5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element5220 = new BitSet(new long[]{0x0000000000000002L,0x3220000000000000L,0x0000000000010A11L,0x0000000000000040L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5223 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_enum_element5225 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_enum_element5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_struct5283 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_struct_internal_in_struct5292 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x2B22100000000000L,0x0000000000000107L});
    public static final BitSet FOLLOW_200_in_struct5299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5354 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_120_in_type_dec5356 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_knownTypes5399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_knownTypes5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_knownTypes5411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0300000000000000L});
    public static final BitSet FOLLOW_184_in_knownTypes5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_knownTypes5421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0900000000000000L});
    public static final BitSet FOLLOW_184_in_knownTypes5424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_array_size_in_field_name5442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_field_crap_in_field_name5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_array_size5474 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000010L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_array_size5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_field_crap5495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5509 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_declaration_common5573 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5575 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_common5577 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5579 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_declaration_common5585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5597 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_declaration_predicate5600 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5602 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate5604 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5647 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_prefix_in_method_param5667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_param5670 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_param5673 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x2B22100000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_type_declaration_in_method_param5675 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param5677 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5760 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5762 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5780 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1273 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred4_Objc1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred5_Objc1288 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000040L});
    public static final BitSet FOLLOW_op_assign_in_synpred5_Objc1290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred6_Objc1531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred6_Objc1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_183_in_synpred7_Objc1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred8_Objc1569 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000040L});
    public static final BitSet FOLLOW_op_assign_in_synpred8_Objc1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred9_Objc2157 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred9_Objc2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred10_Objc2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred11_Objc2751 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2753 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000034080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred11_Objc2755 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred11_Objc2757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred11_Objc2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred12_Objc2820 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred12_Objc2823 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred12_Objc2825 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_synpred12_Objc2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred13_Objc2878 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc2881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred13_Objc2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred14_Objc2913 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred15_Objc3014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred16_Objc3303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred17_Objc3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred18_Objc3450 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred18_Objc3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred19_Objc3511 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred19_Objc3514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred19_Objc3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred20_Objc3951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred21_Objc4725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred22_Objc4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred24_Objc4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred25_Objc5055 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_synpred25_Objc5057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred25_Objc5060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_synpred26_Objc5100 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_synpred26_Objc5102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred26_Objc5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred27_Objc5145 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_typedef_name_in_synpred27_Objc5147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred27_Objc5150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred28_Objc5753 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred28_Objc5755 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000034080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_value_in_synpred28_Objc5757 = new BitSet(new long[]{0x0000000000000002L});

}