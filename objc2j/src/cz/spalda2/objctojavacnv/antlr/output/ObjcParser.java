// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2013-02-05 00:31:06

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'NS_INLINE'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CHAR=16;
    public static final int CHAR_LITERAL=17;
    public static final int CLASS_NAME=18;
    public static final int CODE=19;
    public static final int CONTINUE_STMT=20;
    public static final int DEFAULT_STMT=21;
    public static final int DEFINE=22;
    public static final int DEFINE_LITERAL=23;
    public static final int DIGIT=24;
    public static final int DIRECTIVE=25;
    public static final int DO_STMT=26;
    public static final int ELSE_STMT=27;
    public static final int ENUM=28;
    public static final int ENUM_DEC=29;
    public static final int ENUM_FIELD=30;
    public static final int EXPR_COMPLEMENT=31;
    public static final int EXPR_NEGATE=32;
    public static final int EXPR_NOT=33;
    public static final int EXTERN=34;
    public static final int EscapeSequence=35;
    public static final int FIELD=36;
    public static final int FIELDS=37;
    public static final int FIELD_NAME=38;
    public static final int FINALLY_STMT=39;
    public static final int FORWARD_DECLARATION=40;
    public static final int FOR_IN_STMT=41;
    public static final int FOR_STMT=42;
    public static final int FUNC_POINTER=43;
    public static final int GOTO=44;
    public static final int GROUP_MODIFIER=45;
    public static final int HexDigit=46;
    public static final int ID=47;
    public static final int IF0_COMMENT=48;
    public static final int IF_STMT=49;
    public static final int IMPLEMENTATION=50;
    public static final int IMPLEMENTS_INTERFACES=51;
    public static final int IMPLEMENTS_INTERFACE_NAME=52;
    public static final int INTERFACE=53;
    public static final int INTERFACE_NAME=54;
    public static final int LETTER=55;
    public static final int METHOD=56;
    public static final int METHOD_CALL=57;
    public static final int METHOD_IMPL=58;
    public static final int METHOD_MSG=59;
    public static final int METHOD_NAME=60;
    public static final int METHOD_PARAM=61;
    public static final int METHOD_PARAMS=62;
    public static final int MODIFIER=63;
    public static final int MULTI_COMMENT=64;
    public static final int MULTI_COMMENT_LIT=65;
    public static final int NAME=66;
    public static final int NUMBER=67;
    public static final int NUMBER_LITERAL=68;
    public static final int OBJECT_ACCESS=69;
    public static final int OP=70;
    public static final int PARAMS=71;
    public static final int PARAM_NAME=72;
    public static final int PARAM_PREFIX=73;
    public static final int PREFIX=74;
    public static final int PREPROCESSOR_DECLARATION=75;
    public static final int PROPERTY=76;
    public static final int PROTOCOL=77;
    public static final int PROTOCOL_NAME=78;
    public static final int QUESTION_MARK_IF=79;
    public static final int RETURN_STMT=80;
    public static final int SIMPLE_EXPR=81;
    public static final int SINGLE_COMMENT=82;
    public static final int SINGLE_COMMENT_LIT=83;
    public static final int STATIC=84;
    public static final int STATIC_METHOD=85;
    public static final int STATIC_VARIABLE=86;
    public static final int STRING=87;
    public static final int STRING_LITERAL=88;
    public static final int STRING_OBJC=89;
    public static final int STRUCT=90;
    public static final int STRUCT_DEC=91;
    public static final int SUPERCLASS_NAME=92;
    public static final int SWITCH_STMT=93;
    public static final int SYNCHRONIZED=94;
    public static final int SYNTHETIZE=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==118||LA1_0==134||LA1_0==147||(LA1_0 >= 151 && LA1_0 <= 152)||LA1_0==157||LA1_0==173||(LA1_0 >= 178 && LA1_0 <= 179)||LA1_0==182||(LA1_0 >= 185 && LA1_0 <= 186)||(LA1_0 >= 188 && LA1_0 <= 190)||(LA1_0 >= 192 && LA1_0 <= 195)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code478);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal13=null;
        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper2 =null;

        ObjcParser.implementation_wrapper_return implementation_wrapper3 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration4 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper5 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper6 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper7 =null;

        ObjcParser.define_declaration_return define_declaration8 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper9 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper10 =null;

        ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous11 =null;

        ObjcParser.comments_return comments12 =null;


        Object char_literal13_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:3: ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' )
            int alt2=12;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:5: ( type_declaration field_name )=> variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal509);
                    variable_declaration_wrapper2=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal514);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal519);
                    forward_class_declaration4=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal525);
                    protocol_declaration_wrapper5=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal532);
                    interface_declaration_wrapper6=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal539);
                    extern_declaration_wrapper7=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal545);
                    define_declaration8=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal551);
                    typedef_declaration_wrapper9=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal557);
                    static_declaration_wrapper10=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: type_declaration_struct_enum_union_anonymous
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal563);
                    type_declaration_struct_enum_union_anonymous11=type_declaration_struct_enum_union_anonymous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_enum_union_anonymous11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal569);
                    comments12=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments12.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal13=(Token)match(input,134,FOLLOW_134_in_code_internal575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = 
                    (Object)adaptor.create(char_literal13)
                    ;
                    adaptor.addChild(root_0, char_literal13_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment14 =null;

        ObjcParser.multi_comment_return multi_comment15 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments587);
                    single_comment14=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment14.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments593);
                    multi_comment15=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment15.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT16=null;

        Object SINGLE_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT16=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT16);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 141:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT17=null;

        Object MULTI_COMMENT_LIT17_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT17=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT17);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 145:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern18 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper658);
            extern18=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern18.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 153:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:156:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token set22=null;
        Token char_literal23=null;

        Object string_literal19_tree=null;
        Object string_literal20_tree=null;
        Object char_literal21_tree=null;
        Object set22_tree=null;
        Object char_literal23_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:156:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:156:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,179,FOLLOW_179_in_extern677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            string_literal20=(Token)match(input,114,FOLLOW_114_in_extern680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = 
            (Object)adaptor.create(string_literal20)
            ;
            adaptor.addChild(root_0, string_literal20_tree);
            }

            char_literal21=(Token)match(input,118,FOLLOW_118_in_extern683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            set22=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 118)||(input.LA(1) >= 120 && input.LA(1) <= 202) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set22)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal23=(Token)match(input,119,FOLLOW_119_in_extern690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation24 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper705);
            implementation24=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation24.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal25=null;
        Token string_literal29=null;
        ObjcParser.name_return name26 =null;

        ObjcParser.category_return category27 =null;

        ObjcParser.implementation_body_return implementation_body28 =null;


        Object string_literal25_tree=null;
        Object string_literal29_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal25=(Token)match(input,151,FOLLOW_151_in_implementation724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal25_tree = 
            (Object)adaptor.create(string_literal25)
            ;
            adaptor.addChild(root_0, string_literal25_tree);
            }

            pushFollow(FOLLOW_name_in_implementation727);
            name26=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name26.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==118) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==119) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation730);
                    category27=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category27.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==118||LA5_0==122||LA5_0==126||LA5_0==134||LA5_0==148||LA5_0==161||LA5_0==173||LA5_0==178||LA5_0==182||(LA5_0 >= 185 && LA5_0 <= 186)||(LA5_0 >= 188 && LA5_0 <= 190)||(LA5_0 >= 192 && LA5_0 <= 195)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation735);
            	    implementation_body28=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body28.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal29=(Token)match(input,149,FOLLOW_149_in_implementation740); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal29_tree = 
            (Object)adaptor.create(string_literal29)
            ;
            adaptor.addChild(root_0, string_literal29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal38=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper30 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper31 =null;

        ObjcParser.directives_return directives32 =null;

        ObjcParser.define_declaration_return define_declaration33 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper34 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper35 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper36 =null;

        ObjcParser.comments_return comments37 =null;


        Object char_literal38_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 129 && LA6_1 <= 130)) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==118) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==116||LA6_1==120||LA6_1==166||LA6_1==173) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 122:
            case 126:
                {
                alt6=2;
                }
                break;
            case 148:
            case 161:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 192:
                {
                alt6=5;
                }
                break;
            case 189:
                {
                alt6=6;
                }
                break;
            case 118:
            case 173:
            case 178:
            case 182:
            case 185:
            case 186:
            case 188:
            case 190:
            case 193:
            case 194:
            case 195:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 134:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body759);
                    classical_method_call_wrapper30=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body765);
                    implementation_method_wrapper31=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body771);
                    directives32=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body777);
                    define_declaration33=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body782);
                    typedef_declaration_wrapper34=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper34.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body787);
                    static_declaration_wrapper35=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper35.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body793);
                    variable_declaration_wrapper36=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper36.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body799);
                    comments37=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments37.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal38=(Token)match(input,134,FOLLOW_134_in_implementation_body804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal38_tree = 
                    (Object)adaptor.create(char_literal38)
                    ;
                    adaptor.addChild(root_0, char_literal38_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize39 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives815);
            synthesize39=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize39.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 181:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal40=null;
        Token string_literal41=null;
        Token ID42=null;
        Token char_literal43=null;
        Token char_literal45=null;
        ObjcParser.name_return name44 =null;


        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object ID42_tree=null;
        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==161) ) {
                alt7=1;
            }
            else if ( (LA7_0==148) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:5: '@synthesize'
                    {
                    string_literal40=(Token)match(input,161,FOLLOW_161_in_synthesize837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal40);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:21: '@dynamic'
                    {
                    string_literal41=(Token)match(input,148,FOLLOW_148_in_synthesize841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal41);


                    }
                    break;

            }


            ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID42);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==139) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:38: '=' name
                    {
                    char_literal43=(Token)match(input,139,FOLLOW_139_in_synthesize848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal43);


                    pushFollow(FOLLOW_name_in_synthesize850);
                    name44=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name44.getTree());

                    }
                    break;

            }


            char_literal45=(Token)match(input,134,FOLLOW_134_in_synthesize854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal45);


            // AST REWRITE
            // elements: ID, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcParser.field_declaration_return field_declaration47 =null;


        Object string_literal46_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:4: 'static' field_declaration
            {
            string_literal46=(Token)match(input,189,FOLLOW_189_in_static_declaration_wrapper878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal46);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper880);
            field_declaration47=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration47.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:1: block_call_predicate : ( '^(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal49=null;
        Token char_literal50=null;

        Object string_literal48_tree=null;
        Object char_literal49_tree=null;
        Object char_literal50_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:3: ( '^(' | ( '^' '{' ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==170) ) {
                alt9=1;
            }
            else if ( (LA9_0==169) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal48=(Token)match(input,170,FOLLOW_170_in_block_call_predicate900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = 
                    (Object)adaptor.create(string_literal48)
                    ;
                    adaptor.addChild(root_0, string_literal48_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:6: '^' '{'
                    {
                    char_literal49=(Token)match(input,169,FOLLOW_169_in_block_call_predicate907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    char_literal50=(Token)match(input,197,FOLLOW_197_in_block_call_predicate909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal50_tree = 
                    (Object)adaptor.create(char_literal50)
                    ;
                    adaptor.addChild(root_0, char_literal50_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call51 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper925);
            block_call51=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call51.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal52=null;
        Token char_literal53=null;
        Token char_literal55=null;
        Token string_literal56=null;
        Token char_literal58=null;
        ObjcParser.block_internal_return block_internal54 =null;

        ObjcParser.block_params_return block_params57 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper59 =null;


        Object char_literal52_tree=null;
        Object char_literal53_tree=null;
        Object char_literal55_tree=null;
        Object string_literal56_tree=null;
        Object char_literal58_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==169) ) {
                alt12=1;
            }
            else if ( (LA12_0==170) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal52=(Token)match(input,169,FOLLOW_169_in_block_call947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(char_literal52);


                    char_literal53=(Token)match(input,197,FOLLOW_197_in_block_call949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal53);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:14: ( block_internal )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==ID||LA10_0==MULTI_COMMENT_LIT||LA10_0==SINGLE_COMMENT_LIT||LA10_0==116||LA10_0==118||LA10_0==120||LA10_0==134||LA10_0==160||(LA10_0 >= 162 && LA10_0 <= 163)||LA10_0==166||LA10_0==171||(LA10_0 >= 173 && LA10_0 <= 174)||(LA10_0 >= 176 && LA10_0 <= 178)||(LA10_0 >= 180 && LA10_0 <= 183)||(LA10_0 >= 185 && LA10_0 <= 191)||(LA10_0 >= 193 && LA10_0 <= 197)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call951);
                    	    block_internal54=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal54.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    char_literal55=(Token)match(input,201,FOLLOW_201_in_block_call954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal55);


                    }


                    // AST REWRITE
                    // elements: 197, block_internal, 201
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 202:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_197.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_201.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:6: '^(' ( block_params )? ')'
                    {
                    string_literal56=(Token)match(input,170,FOLLOW_170_in_block_call975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal56_tree = 
                    (Object)adaptor.create(string_literal56)
                    ;
                    adaptor.addChild(root_0, string_literal56_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:11: ( block_params )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ID||LA11_0==118||LA11_0==173||LA11_0==178||LA11_0==182||(LA11_0 >= 185 && LA11_0 <= 186)||LA11_0==188||LA11_0==190||(LA11_0 >= 193 && LA11_0 <= 195)) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:203:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call977);
                            block_params57=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params57.getTree());

                            }
                            break;

                    }


                    char_literal58=(Token)match(input,119,FOLLOW_119_in_block_call980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal58_tree = 
                    (Object)adaptor.create(char_literal58)
                    ;
                    adaptor.addChild(root_0, char_literal58_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call983);
                    block_multiline_wrapper59=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper59.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call60 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:207:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:207:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper997);
            synchronized_call60=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call60.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 207:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:207:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal61=null;
        Token char_literal62=null;
        Token char_literal64=null;
        ObjcParser.element_value_return element_value63 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper65 =null;


        Object string_literal61_tree=null;
        Object char_literal62_tree=null;
        Object char_literal64_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:211:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:211:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal61=(Token)match(input,160,FOLLOW_160_in_synchronized_call1020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal61_tree = 
            (Object)adaptor.create(string_literal61)
            ;
            adaptor.addChild(root_0, string_literal61_tree);
            }

            char_literal62=(Token)match(input,118,FOLLOW_118_in_synchronized_call1022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal62_tree = 
            (Object)adaptor.create(char_literal62)
            ;
            adaptor.addChild(root_0, char_literal62_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1024);
            element_value63=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value63.getTree());

            char_literal64=(Token)match(input,119,FOLLOW_119_in_synchronized_call1026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal64_tree = 
            (Object)adaptor.create(char_literal64)
            ;
            adaptor.addChild(root_0, char_literal64_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1028);
            block_multiline_wrapper65=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper65.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal67=null;
        ObjcParser.classical_param_return classical_param66 =null;

        ObjcParser.classical_param_return classical_param68 =null;


        Object char_literal67_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1044);
            classical_param66=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param66.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:22: ( ',' classical_param )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==125) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:23: ',' classical_param
            	    {
            	    char_literal67=(Token)match(input,125,FOLLOW_125_in_block_params1047); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal67);


            	    pushFollow(FOLLOW_classical_param_in_block_params1049);
            	    classical_param68=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param68.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline69 =null;

        ObjcParser.block_singleline_return block_singleline70 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==197) ) {
                alt14=1;
            }
            else if ( (LA14_0==ID||LA14_0==MULTI_COMMENT_LIT||LA14_0==SINGLE_COMMENT_LIT||LA14_0==116||LA14_0==118||LA14_0==120||LA14_0==134||LA14_0==160||LA14_0==166||LA14_0==171||LA14_0==174||(LA14_0 >= 176 && LA14_0 <= 177)||(LA14_0 >= 180 && LA14_0 <= 181)||LA14_0==183||LA14_0==187||LA14_0==191||LA14_0==196) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1078);
                    block_multiline69=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline69.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1090);
                    block_singleline70=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline70.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:224:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal71=null;
        Token char_literal73=null;
        ObjcParser.block_internal_macro_return block_internal_macro72 =null;


        Object char_literal71_tree=null;
        Object char_literal73_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal71=(Token)match(input,197,FOLLOW_197_in_block_multiline1112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = 
            (Object)adaptor.create(char_literal71)
            ;
            adaptor.addChild(root_0, char_literal71_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:4: ( block_internal_macro )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==MULTI_COMMENT_LIT||LA15_0==SINGLE_COMMENT_LIT||LA15_0==116||LA15_0==118||LA15_0==120||LA15_0==134||LA15_0==160||(LA15_0 >= 162 && LA15_0 <= 163)||(LA15_0 >= 166 && LA15_0 <= 167)||LA15_0==171||(LA15_0 >= 173 && LA15_0 <= 174)||(LA15_0 >= 176 && LA15_0 <= 178)||(LA15_0 >= 180 && LA15_0 <= 183)||(LA15_0 >= 185 && LA15_0 <= 191)||(LA15_0 >= 193 && LA15_0 <= 197)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1117);
            	    block_internal_macro72=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro72.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            char_literal73=(Token)match(input,201,FOLLOW_201_in_block_multiline1124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = 
            (Object)adaptor.create(char_literal73)
            ;
            adaptor.addChild(root_0, char_literal73_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline74 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:232:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:232:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1136);
            block_multiline74=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline74.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 232:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:232:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline75 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1157);
            block_singleline75=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline75.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal85=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper76 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper77 =null;

        ObjcParser.do_stmt_return do_stmt78 =null;

        ObjcParser.if_stmt_return if_stmt79 =null;

        ObjcParser.else_stmt_return else_stmt80 =null;

        ObjcParser.switch_stmt_return switch_stmt81 =null;

        ObjcParser.return_stmt_return return_stmt82 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper83 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper84 =null;

        ObjcParser.break_stmt_return break_stmt86 =null;

        ObjcParser.continue_stmt_return continue_stmt87 =null;

        ObjcParser.goto_stmt_return goto_stmt88 =null;

        ObjcParser.method_msg_return method_msg89 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper90 =null;

        ObjcParser.comments_return comments91 =null;


        Object char_literal85_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt16=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA16_1 = input.LA(2);

                if ( ((LA16_1 >= 129 && LA16_1 <= 130)) ) {
                    int LA16_20 = input.LA(3);

                    if ( (LA16_20==ID) ) {
                        int LA16_24 = input.LA(4);

                        if ( (LA16_24==118) && (synpred3_Objc())) {
                            alt16=1;
                        }
                        else if ( ((LA16_24 >= 129 && LA16_24 <= 130)) ) {
                            int LA16_26 = input.LA(5);

                            if ( (synpred3_Objc()) ) {
                                alt16=1;
                            }
                            else if ( (true) ) {
                                alt16=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 16, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA16_24==117||LA16_24==121||LA16_24==124||LA16_24==128||LA16_24==132||LA16_24==137||LA16_24==139||LA16_24==144||LA16_24==199) ) {
                            alt16=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 16, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 16, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA16_1==118) && (synpred3_Objc())) {
                    alt16=1;
                }
                else if ( (LA16_1==117||LA16_1==121||LA16_1==124||LA16_1==128||LA16_1==132||LA16_1==137||LA16_1==139||LA16_1==144||LA16_1==166||LA16_1==199) ) {
                    alt16=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
                }
                break;
            case 160:
                {
                alt16=2;
                }
                break;
            case 176:
                {
                alt16=3;
                }
                break;
            case 183:
                {
                alt16=4;
                }
                break;
            case 177:
                {
                alt16=5;
                }
                break;
            case 191:
                {
                alt16=6;
                }
                break;
            case 187:
                {
                alt16=7;
                }
                break;
            case 180:
                {
                alt16=8;
                }
                break;
            case 196:
                {
                alt16=9;
                }
                break;
            case 134:
                {
                alt16=10;
                }
                break;
            case 171:
                {
                alt16=11;
                }
                break;
            case 174:
                {
                alt16=12;
                }
                break;
            case 181:
                {
                alt16=13;
                }
                break;
            case 166:
                {
                alt16=14;
                }
                break;
            case 116:
            case 118:
            case 120:
                {
                alt16=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt16=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1184);
                    classical_method_call_wrapper76=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper76.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1189);
                    synchronized_call_wrapper77=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper77.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1194);
                    do_stmt78=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt78.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1199);
                    if_stmt79=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt79.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1204);
                    else_stmt80=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt80.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1209);
                    switch_stmt81=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt81.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1214);
                    return_stmt82=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt82.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1219);
                    for_stmt_wrapper83=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper83.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1224);
                    while_stmt_wrapper84=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper84.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal85=(Token)match(input,134,FOLLOW_134_in_block_singleline1229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal85_tree = 
                    (Object)adaptor.create(char_literal85)
                    ;
                    adaptor.addChild(root_0, char_literal85_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1235);
                    break_stmt86=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt86.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1241);
                    continue_stmt87=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt87.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1246);
                    goto_stmt88=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt88.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1251);
                    method_msg89=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg89.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1257);
                    variable_assignment_wrapper90=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper90.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1263);
                    comments91=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments91.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal92=null;
        ObjcParser.block_internal_return block_internal93 =null;


        Object char_literal92_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:3: ( '\\\\' | block_internal )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==167) ) {
                alt17=1;
            }
            else if ( (LA17_0==ID||LA17_0==MULTI_COMMENT_LIT||LA17_0==SINGLE_COMMENT_LIT||LA17_0==116||LA17_0==118||LA17_0==120||LA17_0==134||LA17_0==160||(LA17_0 >= 162 && LA17_0 <= 163)||LA17_0==166||LA17_0==171||(LA17_0 >= 173 && LA17_0 <= 174)||(LA17_0 >= 176 && LA17_0 <= 178)||(LA17_0 >= 180 && LA17_0 <= 183)||(LA17_0 >= 185 && LA17_0 <= 191)||(LA17_0 >= 193 && LA17_0 <= 197)) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal92=(Token)match(input,167,FOLLOW_167_in_block_internal_macro1275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal92_tree = 
                    (Object)adaptor.create(char_literal92)
                    ;
                    adaptor.addChild(root_0, char_literal92_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1281);
                    block_internal93=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal93.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal110=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper94 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper95 =null;

        ObjcParser.increment_decrement_return increment_decrement96 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper97 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper98 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper99 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper100 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper101 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper102 =null;

        ObjcParser.do_stmt_return do_stmt103 =null;

        ObjcParser.if_stmt_return if_stmt104 =null;

        ObjcParser.else_stmt_return else_stmt105 =null;

        ObjcParser.switch_stmt_return switch_stmt106 =null;

        ObjcParser.return_stmt_return return_stmt107 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper108 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper109 =null;

        ObjcParser.break_stmt_return break_stmt111 =null;

        ObjcParser.continue_stmt_return continue_stmt112 =null;

        ObjcParser.goto_stmt_return goto_stmt113 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper114 =null;

        ObjcParser.method_msg_return method_msg115 =null;

        ObjcParser.comments_return comments116 =null;


        Object char_literal110_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments )
            int alt18=22;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1301);
                    classical_method_call_wrapper94=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper94.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1314);
                    object_access_simple_wrapper95=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper95.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1316);
                    increment_decrement96=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement96.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1330);
                    variable_assignment_wrapper97=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper97.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1336);
                    variable_declaration_wrapper98=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper98.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1342);
                    synchronized_call_wrapper99=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper99.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1348);
                    try_stmt_wrapper100=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper100.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1353);
                    throw_stmt_wrapper101=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper101.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1358);
                    static_declaration_wrapper102=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper102.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1363);
                    do_stmt103=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt103.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1368);
                    if_stmt104=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt104.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1373);
                    else_stmt105=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt105.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1378);
                    switch_stmt106=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt106.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1383);
                    return_stmt107=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt107.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1388);
                    for_stmt_wrapper108=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper108.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1393);
                    while_stmt_wrapper109=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper109.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal110=(Token)match(input,134,FOLLOW_134_in_block_internal1398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal110_tree = 
                    (Object)adaptor.create(char_literal110)
                    ;
                    adaptor.addChild(root_0, char_literal110_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1403);
                    break_stmt111=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt111.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1408);
                    continue_stmt112=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt112.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1413);
                    goto_stmt113=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt113.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1418);
                    block_multiline_wrapper114=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper114.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1424);
                    method_msg115=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg115.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1430);
                    comments116=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal117=null;
        Token char_literal118=null;
        Token ID119=null;
        Token char_literal120=null;

        Object string_literal117_tree=null;
        Object char_literal118_tree=null;
        Object ID119_tree=null;
        Object char_literal120_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:5: 'goto' ':' ID ';'
            {
            string_literal117=(Token)match(input,181,FOLLOW_181_in_goto_stmt1442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal117);


            char_literal118=(Token)match(input,133,FOLLOW_133_in_goto_stmt1444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal118);


            ID119=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID119);


            char_literal120=(Token)match(input,134,FOLLOW_134_in_goto_stmt1448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal120);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt121 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1471);
            while_stmt121=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt121.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal122=null;
        Token char_literal123=null;
        Token char_literal125=null;
        ObjcParser.element_value_return element_value124 =null;

        ObjcParser.block_return block126 =null;


        Object string_literal122_tree=null;
        Object char_literal123_tree=null;
        Object char_literal125_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal122=(Token)match(input,196,FOLLOW_196_in_while_stmt1494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal122_tree = 
            (Object)adaptor.create(string_literal122)
            ;
            adaptor.addChild(root_0, string_literal122_tree);
            }

            char_literal123=(Token)match(input,118,FOLLOW_118_in_while_stmt1496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal123_tree = 
            (Object)adaptor.create(char_literal123)
            ;
            adaptor.addChild(root_0, char_literal123_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1498);
            element_value124=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value124.getTree());

            char_literal125=(Token)match(input,119,FOLLOW_119_in_while_stmt1500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal125_tree = 
            (Object)adaptor.create(char_literal125)
            ;
            adaptor.addChild(root_0, char_literal125_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1502);
            block126=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block126.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal127=null;
        ObjcParser.element_value_return element_value128 =null;


        Object string_literal127_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:5: 'in' element_value
            {
            string_literal127=(Token)match(input,184,FOLLOW_184_in_for_in_stmt1517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal127);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1519);
            element_value128=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value128.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal129=null;
        Token char_literal131=null;
        ObjcParser.element_value_return element_value130 =null;

        ObjcParser.element_value_return element_value132 =null;


        Object char_literal129_tree=null;
        Object char_literal131_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal129=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal129_tree = 
            (Object)adaptor.create(char_literal129)
            ;
            adaptor.addChild(root_0, char_literal129_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:9: ( element_value )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BOOL_LITERAL||LA19_0==CHAR_LITERAL||LA19_0==ID||LA19_0==NUMBER_LITERAL||(LA19_0 >= STRING_LITERAL && LA19_0 <= STRING_OBJC)||LA19_0==112||LA19_0==116||LA19_0==118||LA19_0==120||LA19_0==123||(LA19_0 >= 126 && LA19_0 <= 127)||LA19_0==159||LA19_0==166||(LA19_0 >= 169 && LA19_0 <= 170)||LA19_0==202) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1544);
                    element_value130=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value130.getTree());

                    }
                    break;

            }


            char_literal131=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal131_tree = 
            (Object)adaptor.create(char_literal131)
            ;
            adaptor.addChild(root_0, char_literal131_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:28: ( element_value )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==BOOL_LITERAL||LA20_0==CHAR_LITERAL||LA20_0==ID||LA20_0==NUMBER_LITERAL||(LA20_0 >= STRING_LITERAL && LA20_0 <= STRING_OBJC)||LA20_0==112||LA20_0==116||LA20_0==118||LA20_0==120||LA20_0==123||(LA20_0 >= 126 && LA20_0 <= 127)||LA20_0==159||LA20_0==166||(LA20_0 >= 169 && LA20_0 <= 170)||LA20_0==202) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1549);
                    element_value132=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value132.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal135=null;
        Token char_literal139=null;
        Token char_literal143=null;
        Token char_literal150=null;
        ObjcParser.name_return name133 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt134 =null;

        ObjcParser.block_return block136 =null;

        ObjcParser.name_return name137 =null;

        ObjcParser.for_in_stmt_return for_in_stmt138 =null;

        ObjcParser.block_return block140 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper141 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt142 =null;

        ObjcParser.block_return block144 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple145 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper146 =null;

        ObjcParser.element_value_return element_value147 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt148 =null;

        ObjcParser.for_in_stmt_return for_in_stmt149 =null;

        ObjcParser.block_return block151 =null;


        Object char_literal135_tree=null;
        Object char_literal139_tree=null;
        Object char_literal143_tree=null;
        Object char_literal150_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt22=4;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1572);
                    name133=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name133.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1574);
                    for_classic_stmt134=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt134.getTree());

                    char_literal135=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal135_tree = 
                    (Object)adaptor.create(char_literal135)
                    ;
                    adaptor.addChild(root_0, char_literal135_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1578);
                    block136=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block136.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1591);
                    name137=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name137.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1593);
                    for_in_stmt138=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt138.getTree());

                    char_literal139=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal139_tree = 
                    (Object)adaptor.create(char_literal139)
                    ;
                    adaptor.addChild(root_0, char_literal139_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1597);
                    block140=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block140.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1611);
                    variable_assignment_wrapper141=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper141.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1613);
                    for_classic_stmt142=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt142.getTree());

                    char_literal143=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal143_tree = 
                    (Object)adaptor.create(char_literal143)
                    ;
                    adaptor.addChild(root_0, char_literal143_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1617);
                    block144=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block144.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1623);
                    field_declaration_simple145=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple145.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==117||LA21_0==121||LA21_0==124||LA21_0==128||LA21_0==132||LA21_0==137||LA21_0==139||LA21_0==144||LA21_0==199) ) {
                        alt21=1;
                    }
                    else if ( (LA21_0==184) ) {
                        alt21=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1627);
                            op_assign_wrapper146=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper146.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1629);
                            element_value147=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value147.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1631);
                            for_classic_stmt148=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt148.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1636);
                            for_in_stmt149=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt149.getTree());

                            }
                            break;

                    }


                    char_literal150=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal150_tree = 
                    (Object)adaptor.create(char_literal150)
                    ;
                    adaptor.addChild(root_0, char_literal150_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1641);
                    block151=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block151.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal152=null;
        Token char_literal153=null;
        ObjcParser.for_stmt_body_return for_stmt_body154 =null;


        Object string_literal152_tree=null;
        Object char_literal153_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal152=(Token)match(input,180,FOLLOW_180_in_for_stmt1654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal152_tree = 
            (Object)adaptor.create(string_literal152)
            ;
            adaptor.addChild(root_0, string_literal152_tree);
            }

            char_literal153=(Token)match(input,118,FOLLOW_118_in_for_stmt1656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal153_tree = 
            (Object)adaptor.create(char_literal153)
            ;
            adaptor.addChild(root_0, char_literal153_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1658);
            for_stmt_body154=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body154.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt155 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1671);
            for_stmt155=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt155.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal156=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon157 =null;


        Object string_literal156_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:5: 'return' element_value_or_semicolon
            {
            string_literal156=(Token)match(input,187,FOLLOW_187_in_return_stmt1694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal156);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1696);
            element_value_or_semicolon157=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon157.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal158=null;
        Token char_literal159=null;
        Token char_literal161=null;
        Token char_literal162=null;
        Token char_literal164=null;
        ObjcParser.element_value_return element_value160 =null;

        ObjcParser.switch_body_return switch_body163 =null;


        Object string_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal164_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal158=(Token)match(input,191,FOLLOW_191_in_switch_stmt1719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal158);


            char_literal159=(Token)match(input,118,FOLLOW_118_in_switch_stmt1721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal159);


            pushFollow(FOLLOW_element_value_in_switch_stmt1723);
            element_value160=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value160.getTree());

            char_literal161=(Token)match(input,119,FOLLOW_119_in_switch_stmt1725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal161);


            char_literal162=(Token)match(input,197,FOLLOW_197_in_switch_stmt1727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(char_literal162);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:41: ( switch_body )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==ID||LA23_0==MULTI_COMMENT_LIT||LA23_0==SINGLE_COMMENT_LIT||LA23_0==116||LA23_0==118||LA23_0==120||LA23_0==134||LA23_0==160||LA23_0==166||(LA23_0 >= 171 && LA23_0 <= 172)||(LA23_0 >= 174 && LA23_0 <= 177)||(LA23_0 >= 180 && LA23_0 <= 181)||LA23_0==183||LA23_0==187||LA23_0==191||(LA23_0 >= 196 && LA23_0 <= 197)) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1730);
            	    switch_body163=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body163.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            char_literal164=(Token)match(input,201,FOLLOW_201_in_switch_stmt1734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_201.add(char_literal164);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt165 =null;

        ObjcParser.default_stmt_return default_stmt166 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper167 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper168 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt24=4;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt24=1;
                }
                break;
            case 175:
                {
                alt24=2;
                }
                break;
            case 197:
                {
                alt24=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 116:
            case 118:
            case 120:
            case 134:
            case 160:
            case 166:
            case 171:
            case 174:
            case 176:
            case 177:
            case 180:
            case 181:
            case 183:
            case 187:
            case 191:
            case 196:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1760);
                    case_stmt165=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt165.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1766);
                    default_stmt166=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt166.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1772);
                    block_multiline_wrapper167=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper167.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1778);
                    block_singleline_wrapper168=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal169=null;
        Token char_literal171=null;
        ObjcParser.name_number_return name_number170 =null;


        Object string_literal169_tree=null;
        Object char_literal171_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:5: 'case' name_number ':'
            {
            string_literal169=(Token)match(input,172,FOLLOW_172_in_case_stmt1793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal169);


            pushFollow(FOLLOW_name_number_in_case_stmt1795);
            name_number170=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number170.getTree());

            char_literal171=(Token)match(input,133,FOLLOW_133_in_case_stmt1797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal171);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal172=null;
        Token char_literal173=null;

        Object string_literal172_tree=null;
        Object char_literal173_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:5: 'default' ':'
            {
            string_literal172=(Token)match(input,175,FOLLOW_175_in_default_stmt1820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal172);


            char_literal173=(Token)match(input,133,FOLLOW_133_in_default_stmt1822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal173);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal174=null;
        Token string_literal176=null;
        Token char_literal177=null;
        Token char_literal179=null;
        ObjcParser.block_return block175 =null;

        ObjcParser.element_value_return element_value178 =null;


        Object string_literal174_tree=null;
        Object string_literal176_tree=null;
        Object char_literal177_tree=null;
        Object char_literal179_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal174=(Token)match(input,176,FOLLOW_176_in_do_stmt1843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal174);


            pushFollow(FOLLOW_block_in_do_stmt1845);
            block175=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block175.getTree());

            string_literal176=(Token)match(input,196,FOLLOW_196_in_do_stmt1847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal176);


            char_literal177=(Token)match(input,118,FOLLOW_118_in_do_stmt1849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal177);


            pushFollow(FOLLOW_element_value_in_do_stmt1851);
            element_value178=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value178.getTree());

            char_literal179=(Token)match(input,119,FOLLOW_119_in_do_stmt1853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal179);


            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal180=null;
        Token char_literal181=null;
        Token char_literal183=null;
        ObjcParser.element_value_return element_value182 =null;

        ObjcParser.block_return block184 =null;


        Object string_literal180_tree=null;
        Object char_literal181_tree=null;
        Object char_literal183_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:5: 'if' '(' element_value ')' block
            {
            string_literal180=(Token)match(input,183,FOLLOW_183_in_if_stmt1878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal180);


            char_literal181=(Token)match(input,118,FOLLOW_118_in_if_stmt1880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal181);


            pushFollow(FOLLOW_element_value_in_if_stmt1882);
            element_value182=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value182.getTree());

            char_literal183=(Token)match(input,119,FOLLOW_119_in_if_stmt1884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal183);


            pushFollow(FOLLOW_block_in_if_stmt1886);
            block184=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block184.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal185=null;
        ObjcParser.block_return block186 =null;


        Object string_literal185_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:5: 'else' block
            {
            string_literal185=(Token)match(input,177,FOLLOW_177_in_else_stmt1909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal185);


            pushFollow(FOLLOW_block_in_else_stmt1911);
            block186=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block186.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal187=null;
        ObjcParser.block_return block188 =null;

        ObjcParser.catch_stmt_return catch_stmt189 =null;

        ObjcParser.finally_stmt_return finally_stmt190 =null;


        Object string_literal187_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal187=(Token)match(input,163,FOLLOW_163_in_try_stmt_wrapper1933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal187);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1936);
            block188=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block188.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:19: ( catch_stmt )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==146) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1939);
            	    catch_stmt189=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt189.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:31: ( finally_stmt )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==150) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1942);
                    finally_stmt190=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt190.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: finally_stmt, catch_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal191=null;
        Token char_literal192=null;
        Token char_literal194=null;
        Token char_literal196=null;
        ObjcParser.name_return name193 =null;

        ObjcParser.name_return name195 =null;

        ObjcParser.block_return block197 =null;


        Object string_literal191_tree=null;
        Object char_literal192_tree=null;
        Object char_literal194_tree=null;
        Object char_literal196_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:4: '@catch' '(' name '*' name ')' block
            {
            string_literal191=(Token)match(input,146,FOLLOW_146_in_catch_stmt1968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal191);


            char_literal192=(Token)match(input,118,FOLLOW_118_in_catch_stmt1971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal192);


            pushFollow(FOLLOW_name_in_catch_stmt1974);
            name193=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name193.getTree());

            char_literal194=(Token)match(input,120,FOLLOW_120_in_catch_stmt1977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal194);


            pushFollow(FOLLOW_name_in_catch_stmt1979);
            name195=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name195.getTree());

            char_literal196=(Token)match(input,119,FOLLOW_119_in_catch_stmt1982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal196);


            pushFollow(FOLLOW_block_in_catch_stmt1985);
            block197=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block197.getTree());

            // AST REWRITE
            // elements: block, name, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        ObjcParser.block_return block199 =null;


        Object string_literal198_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:4: '@finally' block
            {
            string_literal198=(Token)match(input,150,FOLLOW_150_in_finally_stmt2009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal198);


            pushFollow(FOLLOW_block_in_finally_stmt2012);
            block199=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block199.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt200 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2031);
            throw_stmt200=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt200.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal201=null;
        Token char_literal203=null;
        ObjcParser.element_value_return element_value202 =null;


        Object string_literal201_tree=null;
        Object char_literal203_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal201=(Token)match(input,162,FOLLOW_162_in_throw_stmt2050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal201_tree = 
            (Object)adaptor.create(string_literal201)
            ;
            adaptor.addChild(root_0, string_literal201_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2052);
            element_value202=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value202.getTree());

            char_literal203=(Token)match(input,134,FOLLOW_134_in_throw_stmt2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal203_tree = 
            (Object)adaptor.create(char_literal203)
            ;
            adaptor.addChild(root_0, char_literal203_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID204=null;

        Object ID204_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:4: ID
            {
            ID204=(Token)match(input,ID,FOLLOW_ID_in_name2065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID204);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID205=null;
        Token char_literal206=null;
        Token NUMBER_LITERAL207=null;

        Object ID205_tree=null;
        Object char_literal206_tree=null;
        Object NUMBER_LITERAL207_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ID) ) {
                alt28=1;
            }
            else if ( (LA28_0==NUMBER_LITERAL||LA28_0==126) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: ID
                    {
                    ID205=(Token)match(input,ID,FOLLOW_ID_in_name_number2085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID205);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 383:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:5: ( '-' )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==126) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:5: '-'
                            {
                            char_literal206=(Token)match(input,126,FOLLOW_126_in_name_number2099); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal206);


                            }
                            break;

                    }


                    NUMBER_LITERAL207=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL207);


                    // AST REWRITE
                    // elements: 126, NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 384:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:37: ( '-' )?
                        if ( stream_126.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_126.nextNode()
                            );

                        }
                        stream_126.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper208 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:388:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:388:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2128);
            field_declaration_wrapper208=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper208.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:388:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment209 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2151);
            variable_assignment209=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment209.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper210 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper211 =null;

        ObjcParser.element_value_return element_value212 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:396:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:396:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2174);
            object_access_wrapper210=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper210.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2176);
            op_assign_wrapper211=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper211.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2178);
            element_value212=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value212.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper213 =null;

        ObjcParser.increment_decrement_return increment_decrement214 =null;

        ObjcParser.increment_decrement_return increment_decrement215 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper216 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==118) && (synpred10_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==116) && (synpred10_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==ID) && (synpred10_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==120) && (synpred10_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==123||LA29_0==127) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2199);
                    object_access_wrapper213=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper213.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2201);
                    increment_decrement214=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement214.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2207);
                    increment_decrement215=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement215.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2209);
                    object_access_wrapper216=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper216.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper217 =null;

        ObjcParser.method_implementation_common_return method_implementation_common218 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2224);
            method_modifier_wrapper217=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper217.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2226);
            method_implementation_common218=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common218.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal219=null;
        Token char_literal221=null;
        ObjcParser.type_declaration_return type_declaration220 =null;

        ObjcParser.method_name_return method_name222 =null;

        ObjcParser.method_params_return method_params223 =null;


        Object char_literal219_tree=null;
        Object char_literal221_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:6: '(' type_declaration ')' method_name
            {
            char_literal219=(Token)match(input,118,FOLLOW_118_in_method_implementation_common2239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal219_tree = 
            (Object)adaptor.create(char_literal219)
            ;
            adaptor.addChild(root_0, char_literal219_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2241);
            type_declaration220=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration220.getTree());

            char_literal221=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal221_tree = 
            (Object)adaptor.create(char_literal221)
            ;
            adaptor.addChild(root_0, char_literal221_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2245);
            method_name222=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name222.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:44: ( method_params )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==133) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2248);
                    method_params223=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params223.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation224 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper225 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2260);
            method_implementation224=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation224.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2264);
            block_multiline_wrapper225=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper225.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call226 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2287);
            classical_method_call226=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call226.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal230=null;
        ObjcParser.name_return name227 =null;

        ObjcParser.access_wrapper_return access_wrapper228 =null;

        ObjcParser.name_return name229 =null;


        Object char_literal230_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2308);
            name227=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name227.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:10: ( access_wrapper name )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0 >= 129 && LA31_0 <= 130)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2311);
            	    access_wrapper228=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper228.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2313);
            	    name229=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name229.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            char_literal230=(Token)match(input,118,FOLLOW_118_in_clasical_method_call_predicate2317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal230_tree = 
            (Object)adaptor.create(char_literal230)
            ;
            adaptor.addChild(root_0, char_literal230_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal234=null;
        Token char_literal236=null;
        ObjcParser.name_return name231 =null;

        ObjcParser.access_wrapper_return access_wrapper232 =null;

        ObjcParser.name_return name233 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push235 =null;


        Object char_literal234_tree=null;
        Object char_literal236_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2332);
            name231=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name231.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:10: ( access_wrapper name )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( ((LA32_0 >= 129 && LA32_0 <= 130)) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2335);
            	    access_wrapper232=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper232.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2337);
            	    name233=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name233.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal234=(Token)match(input,118,FOLLOW_118_in_classical_method_call2342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal234_tree = 
            (Object)adaptor.create(char_literal234)
            ;
            adaptor.addChild(root_0, char_literal234_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:38: ( classical_method_params_push )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BOOL_LITERAL||LA33_0==CHAR_LITERAL||LA33_0==ID||LA33_0==MULTI_COMMENT_LIT||LA33_0==NUMBER_LITERAL||LA33_0==SINGLE_COMMENT_LIT||(LA33_0 >= STRING_LITERAL && LA33_0 <= STRING_OBJC)||LA33_0==112||LA33_0==116||LA33_0==118||LA33_0==120||LA33_0==123||(LA33_0 >= 126 && LA33_0 <= 127)||LA33_0==159||LA33_0==166||(LA33_0 >= 169 && LA33_0 <= 170)||LA33_0==202) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2344);
                    classical_method_params_push235=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push235.getTree());

                    }
                    break;

            }


            char_literal236=(Token)match(input,119,FOLLOW_119_in_classical_method_call2347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal236_tree = 
            (Object)adaptor.create(char_literal236)
            ;
            adaptor.addChild(root_0, char_literal236_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal238=null;
        ObjcParser.method_param_push_return method_param_push237 =null;

        ObjcParser.method_param_push_return method_param_push239 =null;


        Object char_literal238_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2362);
            method_param_push237=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push237.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:24: ( ',' method_param_push )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==125) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:25: ',' method_param_push
            	    {
            	    char_literal238=(Token)match(input,125,FOLLOW_125_in_classical_method_params_push2365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal238);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2367);
            	    method_param_push239=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push239.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal242=null;
        Token char_literal243=null;
        ObjcParser.method_param_push_return method_param_push240 =null;

        ObjcParser.prefix_return prefix241 =null;

        ObjcParser.method_param_push_return method_param_push244 =null;


        Object char_literal242_tree=null;
        Object char_literal243_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2391);
            method_param_push240=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push240.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID||LA36_0==125) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:23: ( ( prefix ':' ) | ',' )
            	    int alt35=2;
            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==ID) ) {
            	        alt35=1;
            	    }
            	    else if ( (LA35_0==125) ) {
            	        alt35=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 35, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt35) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2396);
            	            prefix241=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix241.getTree());

            	            char_literal242=(Token)match(input,133,FOLLOW_133_in_method_params_push2398); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_133.add(char_literal242);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:39: ','
            	            {
            	            char_literal243=(Token)match(input,125,FOLLOW_125_in_method_params_push2403); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_125.add(char_literal243);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2406);
            	    method_param_push244=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push244.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments245 =null;

        ObjcParser.element_value_return element_value246 =null;

        ObjcParser.comments_return comments247 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:5: ( comments )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==MULTI_COMMENT_LIT||LA37_0==SINGLE_COMMENT_LIT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2427);
                    comments245=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments245.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2430);
            element_value246=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value246.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:29: ( comments )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==MULTI_COMMENT_LIT||LA38_0==SINGLE_COMMENT_LIT) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2432);
                    comments247=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments247.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comments, element_value, comments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal248=null;
        Token char_literal251=null;
        Token char_literal253=null;
        ObjcParser.element_value_return element_value249 =null;

        ObjcParser.method_name_return method_name250 =null;

        ObjcParser.method_params_push_return method_params_push252 =null;


        Object char_literal248_tree=null;
        Object char_literal251_tree=null;
        Object char_literal253_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal248=(Token)match(input,166,FOLLOW_166_in_method_msg2461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(char_literal248);


            pushFollow(FOLLOW_element_value_in_method_msg2463);
            element_value249=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value249.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2465);
            method_name250=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name250.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:35: ( ':' method_params_push )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==133) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:36: ':' method_params_push
                    {
                    char_literal251=(Token)match(input,133,FOLLOW_133_in_method_msg2468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal251);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2470);
                    method_params_push252=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push252.getTree());

                    }
                    break;

            }


            char_literal253=(Token)match(input,168,FOLLOW_168_in_method_msg2474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(char_literal253);


            // AST REWRITE
            // elements: element_value, method_name, method_params_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal254=null;
        Token char_literal256=null;
        ObjcParser.element_value_return element_value255 =null;

        ObjcParser.element_value_return element_value257 =null;


        Object char_literal254_tree=null;
        Object char_literal256_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:6: '?' element_value ':' element_value
            {
            char_literal254=(Token)match(input,145,FOLLOW_145_in_questionmark_if_stmt2500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(char_literal254);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2502);
            element_value255=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value255.getTree());

            char_literal256=(Token)match(input,133,FOLLOW_133_in_questionmark_if_stmt2504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal256);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2506);
            element_value257=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value257.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression258 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2531);
            simple_expression258=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression258.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal259=null;
        ObjcParser.element_value_return element_value260 =null;


        Object char_literal259_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:5: ( ';' | element_value )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==134) ) {
                alt40=1;
            }
            else if ( (LA40_0==BOOL_LITERAL||LA40_0==CHAR_LITERAL||LA40_0==ID||LA40_0==NUMBER_LITERAL||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_OBJC)||LA40_0==112||LA40_0==116||LA40_0==118||LA40_0==120||LA40_0==123||(LA40_0 >= 126 && LA40_0 <= 127)||LA40_0==159||LA40_0==166||(LA40_0 >= 169 && LA40_0 <= 170)||LA40_0==202) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:6: ';'
                    {
                    char_literal259=(Token)match(input,134,FOLLOW_134_in_element_value_or_semicolon2554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal259_tree = 
                    (Object)adaptor.create(char_literal259)
                    ;
                    adaptor.addChild(root_0, char_literal259_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2558);
                    element_value260=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value260.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:1: array_init : element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal262=null;
        ObjcParser.element_value_or_array_init_return element_value_or_array_init261 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init263 =null;


        Object char_literal262_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:3: ( element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:5: element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2575);
            element_value_or_array_init261=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init261.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:33: ( ',' element_value_or_array_init )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==125) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:34: ',' element_value_or_array_init
            	    {
            	    char_literal262=(Token)match(input,125,FOLLOW_125_in_array_init2578); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal262_tree = 
            	    (Object)adaptor.create(char_literal262)
            	    ;
            	    adaptor.addChild(root_0, char_literal262_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2580);
            	    element_value_or_array_init263=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init263.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:1: element_value_or_array_init : ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | ( comments )? element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal264=null;
        Token char_literal266=null;
        ObjcParser.array_init_return array_init265 =null;

        ObjcParser.comments_return comments267 =null;

        ObjcParser.element_value_return element_value268 =null;


        Object char_literal264_tree=null;
        Object char_literal266_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:3: ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | ( comments )? element_value )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==197) ) {
                alt44=1;
            }
            else if ( (LA44_0==BOOL_LITERAL||LA44_0==CHAR_LITERAL||LA44_0==ID||LA44_0==MULTI_COMMENT_LIT||LA44_0==NUMBER_LITERAL||LA44_0==SINGLE_COMMENT_LIT||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_OBJC)||LA44_0==112||LA44_0==116||LA44_0==118||LA44_0==120||LA44_0==123||(LA44_0 >= 126 && LA44_0 <= 127)||LA44_0==159||LA44_0==166||(LA44_0 >= 169 && LA44_0 <= 170)||LA44_0==202) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: '{' ( array_init )? '}'
                    {
                    char_literal264=(Token)match(input,197,FOLLOW_197_in_element_value_or_array_init2597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal264);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:9: ( array_init )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==BOOL_LITERAL||LA42_0==CHAR_LITERAL||LA42_0==ID||LA42_0==MULTI_COMMENT_LIT||LA42_0==NUMBER_LITERAL||LA42_0==SINGLE_COMMENT_LIT||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_OBJC)||LA42_0==112||LA42_0==116||LA42_0==118||LA42_0==120||LA42_0==123||(LA42_0 >= 126 && LA42_0 <= 127)||LA42_0==159||LA42_0==166||(LA42_0 >= 169 && LA42_0 <= 170)||LA42_0==197||LA42_0==202) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2599);
                            array_init265=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init265.getTree());

                            }
                            break;

                    }


                    char_literal266=(Token)match(input,201,FOLLOW_201_in_element_value_or_array_init2602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal266);


                    // AST REWRITE
                    // elements: array_init
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 460:26: -> ^( ARRAY_INIT ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:29: ^( ARRAY_INIT ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:42: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:5: ( comments )? element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:5: ( comments )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==MULTI_COMMENT_LIT||LA43_0==SINGLE_COMMENT_LIT) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:5: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2618);
                            comments267=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments267.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2621);
                    element_value268=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set269=null;

        Object set269_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:465:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set269=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set269)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1270 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt271 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2656);
            cast_unary_expression1270=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1270.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop45:
            do {
                int alt45=2;
                switch ( input.LA(1) ) {
                case 116:
                    {
                    alt45=1;
                    }
                    break;
                case 120:
                    {
                    alt45=1;
                    }
                    break;
                case 122:
                case 126:
                    {
                    alt45=1;
                    }
                    break;
                case 113:
                case 115:
                case 131:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 198:
                case 200:
                    {
                    alt45=1;
                    }
                    break;
                case 145:
                    {
                    alt45=1;
                    }
                    break;

                }

                switch (alt45) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2658);
            	    op2_unary_expression_or_questionmark_if_stmt271=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt271.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal272=null;
        ObjcParser.cast_expression_return cast_expression273 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression274 =null;


        Object char_literal272_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==126) ) {
                alt46=1;
            }
            else if ( (LA46_0==BOOL_LITERAL||LA46_0==CHAR_LITERAL||LA46_0==ID||LA46_0==NUMBER_LITERAL||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_OBJC)||LA46_0==112||LA46_0==116||LA46_0==118||LA46_0==120||LA46_0==123||LA46_0==127||LA46_0==159||LA46_0==166||(LA46_0 >= 169 && LA46_0 <= 170)||LA46_0==202) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: '-' cast_expression
                    {
                    char_literal272=(Token)match(input,126,FOLLOW_126_in_cast_unary_expression12673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal272);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12675);
                    cast_expression273=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression273.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 473:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12689);
                    cast_unary_expression274=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper275 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1276 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt277 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==113||(LA47_0 >= 115 && LA47_0 <= 116)||LA47_0==120||LA47_0==122||LA47_0==126||LA47_0==131||(LA47_0 >= 135 && LA47_0 <= 136)||(LA47_0 >= 138 && LA47_0 <= 143)||LA47_0==169||LA47_0==198||LA47_0==200) ) {
                alt47=1;
            }
            else if ( (LA47_0==145) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2703);
                    op2_wrapper275=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper275.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2705);
                    cast_unary_expression1276=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1276.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2712);
                    questionmark_if_stmt277=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt277.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal280=null;
        Token char_literal282=null;
        ObjcParser.cast_expression_return cast_expression278 =null;

        ObjcParser.increment_decrement_return increment_decrement279 =null;

        ObjcParser.cast_expression_return cast_expression281 =null;

        ObjcParser.cast_expression_return cast_expression283 =null;

        ObjcParser.increment_decrement_return increment_decrement284 =null;

        ObjcParser.cast_expression_return cast_expression285 =null;


        Object char_literal280_tree=null;
        Object char_literal282_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt49=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 116:
            case 118:
            case 120:
            case 159:
            case 166:
            case 169:
            case 170:
                {
                alt49=1;
                }
                break;
            case 112:
                {
                alt49=2;
                }
                break;
            case 202:
                {
                alt49=3;
                }
                break;
            case 123:
            case 127:
                {
                alt49=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }

            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2725);
                    cast_expression278=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression278.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:21: ( increment_decrement )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==123||LA48_0==127) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2727);
                            increment_decrement279=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement279.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: '!' cast_expression
                    {
                    char_literal280=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal280);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2736);
                    cast_expression281=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression281.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: '~' cast_expression
                    {
                    char_literal282=(Token)match(input,202,FOLLOW_202_in_cast_unary_expression2750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(char_literal282);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2752);
                    cast_expression283=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression283.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 485:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2766);
                    increment_decrement284=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement284.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2768);
                    cast_expression285=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression285.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal288=null;
        Token char_literal291=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper286 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access287 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper289 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access290 =null;

        ObjcParser.access_wrapper_return access_wrapper292 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call293 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access294 =null;


        Object char_literal288_tree=null;
        Object char_literal291_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt51=3;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2786);
                    type_cast_wrapper286=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper286.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2788);
                    simple_expression_value_access287=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access287.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal288=(Token)match(input,118,FOLLOW_118_in_cast_expression2807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal288_tree = 
                    (Object)adaptor.create(char_literal288)
                    ;
                    adaptor.addChild(root_0, char_literal288_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2809);
                    type_cast_wrapper289=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper289.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2811);
                    simple_expression_value_access290=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access290.getTree());

                    char_literal291=(Token)match(input,119,FOLLOW_119_in_cast_expression2813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal291_tree = 
                    (Object)adaptor.create(char_literal291)
                    ;
                    adaptor.addChild(root_0, char_literal291_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        alt50 = dfa50.predict(input);
                        switch (alt50) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2816);
                    	    access_wrapper292=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper292.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression2818);
                    	    simple_name_or_classical_function_call293=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call293.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2826);
                    simple_expression_value_access294=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access294.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal296=null;
        Token char_literal298=null;
        ObjcParser.name_return name295 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push297 =null;

        ObjcParser.name_return name299 =null;


        Object char_literal296_tree=null;
        Object char_literal298_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt53=2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2847);
                    name295=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name295.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal296=(Token)match(input,118,FOLLOW_118_in_simple_name_or_classical_function_call2850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal296_tree = 
                    (Object)adaptor.create(char_literal296)
                    ;
                    adaptor.addChild(root_0, char_literal296_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:29: ( classical_method_params_push )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==BOOL_LITERAL||LA52_0==CHAR_LITERAL||LA52_0==ID||LA52_0==MULTI_COMMENT_LIT||LA52_0==NUMBER_LITERAL||LA52_0==SINGLE_COMMENT_LIT||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_OBJC)||LA52_0==112||LA52_0==116||LA52_0==118||LA52_0==120||LA52_0==123||(LA52_0 >= 126 && LA52_0 <= 127)||LA52_0==159||LA52_0==166||(LA52_0 >= 169 && LA52_0 <= 170)||LA52_0==202) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2852);
                            classical_method_params_push297=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push297.getTree());

                            }
                            break;

                    }


                    char_literal298=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call2855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal298_tree = 
                    (Object)adaptor.create(char_literal298)
                    ;
                    adaptor.addChild(root_0, char_literal298_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2862);
                    name299=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal301=null;
        Token char_literal303=null;
        Token char_literal305=null;
        Token char_literal306=null;
        Token char_literal310=null;
        Token char_literal312=null;
        ObjcParser.selector_wrapper_return selector_wrapper300 =null;

        ObjcParser.name_return name302 =null;

        ObjcParser.name_return name304 =null;

        ObjcParser.simple_expression_value_return simple_expression_value307 =null;

        ObjcParser.access_wrapper_return access_wrapper308 =null;

        ObjcParser.name_return name309 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push311 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2313 =null;

        ObjcParser.access_wrapper_return access_wrapper314 =null;

        ObjcParser.name_return name315 =null;


        Object char_literal301_tree=null;
        Object char_literal303_tree=null;
        Object char_literal305_tree=null;
        Object char_literal306_tree=null;
        Object char_literal310_tree=null;
        Object char_literal312_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:3: ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt59=3;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2877);
                    selector_wrapper300=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper300.getTree());

                    char_literal301=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal301_tree = 
                    (Object)adaptor.create(char_literal301)
                    ;
                    adaptor.addChild(root_0, char_literal301_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2881);
                    name302=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name302.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:31: ( ':' ( name ':' )* )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==133) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:32: ':' ( name ':' )*
                            {
                            char_literal303=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2884); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal303_tree = 
                            (Object)adaptor.create(char_literal303)
                            ;
                            adaptor.addChild(root_0, char_literal303_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:36: ( name ':' )*
                            loop54:
                            do {
                                int alt54=2;
                                int LA54_0 = input.LA(1);

                                if ( (LA54_0==ID) ) {
                                    alt54=1;
                                }


                                switch (alt54) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access2887);
                            	    name304=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name304.getTree());

                            	    char_literal305=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2889); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal305_tree = 
                            	    (Object)adaptor.create(char_literal305)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal305_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop54;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal306=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal306_tree = 
                    (Object)adaptor.create(char_literal306)
                    ;
                    adaptor.addChild(root_0, char_literal306_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2915);
                    simple_expression_value307=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value307.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:84: ( access_wrapper name )*
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);

                        if ( ((LA56_0 >= 129 && LA56_0 <= 130)) ) {
                            alt56=1;
                        }


                        switch (alt56) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2918);
                    	    access_wrapper308=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper308.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2920);
                    	    name309=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name309.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop56;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal310=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal310_tree = 
                    (Object)adaptor.create(char_literal310)
                    ;
                    adaptor.addChild(root_0, char_literal310_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:112: ( classical_method_params_push )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==BOOL_LITERAL||LA57_0==CHAR_LITERAL||LA57_0==ID||LA57_0==MULTI_COMMENT_LIT||LA57_0==NUMBER_LITERAL||LA57_0==SINGLE_COMMENT_LIT||(LA57_0 >= STRING_LITERAL && LA57_0 <= STRING_OBJC)||LA57_0==112||LA57_0==116||LA57_0==118||LA57_0==120||LA57_0==123||(LA57_0 >= 126 && LA57_0 <= 127)||LA57_0==159||LA57_0==166||(LA57_0 >= 169 && LA57_0 <= 170)||LA57_0==202) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2927);
                            classical_method_params_push311=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push311.getTree());

                            }
                            break;

                    }


                    char_literal312=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal312_tree = 
                    (Object)adaptor.create(char_literal312)
                    ;
                    adaptor.addChild(root_0, char_literal312_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2937);
                    simple_expression_value2313=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2313.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:30: ( access_wrapper name )*
                    loop58:
                    do {
                        int alt58=2;
                        alt58 = dfa58.predict(input);
                        switch (alt58) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2940);
                    	    access_wrapper314=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper314.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2942);
                    	    name315=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name315.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal316=null;
        Token char_literal318=null;
        Token char_literal320=null;
        Token set321=null;
        Token STRING_LITERAL323=null;
        Token STRING_OBJC324=null;
        Token CHAR_LITERAL325=null;
        Token NUMBER_LITERAL326=null;
        Token BOOL_LITERAL327=null;
        ObjcParser.name_return name317 =null;

        ObjcParser.element_value_return element_value319 =null;

        ObjcParser.name_return name322 =null;

        ObjcParser.name_return name328 =null;


        Object char_literal316_tree=null;
        Object char_literal318_tree=null;
        Object char_literal320_tree=null;
        Object set321_tree=null;
        Object STRING_LITERAL323_tree=null;
        Object STRING_OBJC324_tree=null;
        Object CHAR_LITERAL325_tree=null;
        Object NUMBER_LITERAL326_tree=null;
        Object BOOL_LITERAL327_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name )
            int alt61=8;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:23: ( '&' )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==116) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:23: '&'
                            {
                            char_literal316=(Token)match(input,116,FOLLOW_116_in_simple_expression_value2969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal316);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2972);
                    name317=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name317.getTree());

                    char_literal318=(Token)match(input,166,FOLLOW_166_in_simple_expression_value2974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal318);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value2976);
                    element_value319=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value319.getTree());

                    char_literal320=(Token)match(input,168,FOLLOW_168_in_simple_expression_value2978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal320);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 507:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set321=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set321)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3012);
                    name322=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name322.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:4: STRING_LITERAL
                    {
                    STRING_LITERAL323=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value3017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL323);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:4: STRING_OBJC
                    {
                    STRING_OBJC324=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value3030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC324);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL325=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL325);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL326=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL326);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 512:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL327=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value3069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL327);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 513:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3083);
                    name328=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:1: simple_expression_value2 : ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal332=null;
        Token char_literal334=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper329 =null;

        ObjcParser.simple_expression_value_return simple_expression_value330 =null;

        ObjcParser.method_msg_return method_msg331 =null;

        ObjcParser.element_value_return element_value333 =null;


        Object char_literal332_tree=null;
        Object char_literal334_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:3: ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt62=4;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==169) && (synpred17_Objc())) {
                alt62=1;
            }
            else if ( (LA62_0==170) && (synpred17_Objc())) {
                alt62=1;
            }
            else if ( (LA62_0==BOOL_LITERAL||LA62_0==CHAR_LITERAL||LA62_0==ID||LA62_0==NUMBER_LITERAL||(LA62_0 >= STRING_LITERAL && LA62_0 <= STRING_OBJC)||LA62_0==116||LA62_0==120) ) {
                alt62=2;
            }
            else if ( (LA62_0==166) ) {
                alt62=3;
            }
            else if ( (LA62_0==118) ) {
                alt62=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value23101);
                    block_call_wrapper329=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper329.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23107);
                    simple_expression_value330=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value330.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23113);
                    method_msg331=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg331.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal332=(Token)match(input,118,FOLLOW_118_in_simple_expression_value23119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal332_tree = 
                    (Object)adaptor.create(char_literal332)
                    ;
                    adaptor.addChild(root_0, char_literal332_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23121);
                    element_value333=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value333.getTree());

                    char_literal334=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal334_tree = 
                    (Object)adaptor.create(char_literal334)
                    ;
                    adaptor.addChild(root_0, char_literal334_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2335 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3137);
            op2335=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2335.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set336=null;

        Object set336_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set336=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 116)||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==131||(input.LA(1) >= 135 && input.LA(1) <= 136)||(input.LA(1) >= 138 && input.LA(1) <= 143)||input.LA(1)==169||input.LA(1)==198||input.LA(1)==200 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set336)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign337 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3238);
            op_assign337=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign337.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set338=null;

        Object set338_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set338=(Token)input.LT(1);

            if ( input.LA(1)==117||input.LA(1)==121||input.LA(1)==124||input.LA(1)==128||input.LA(1)==132||input.LA(1)==137||input.LA(1)==139||input.LA(1)==144||input.LA(1)==199 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set338)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector339 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3306);
            selector339=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector339.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal340=null;

        Object string_literal340_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal340=(Token)match(input,159,FOLLOW_159_in_selector3329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal340_tree = 
            (Object)adaptor.create(string_literal340)
            ;
            adaptor.addChild(root_0, string_literal340_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name341 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3344);
            type_cast_name341=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name341.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal342=null;
        Token char_literal344=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration343 =null;


        Object char_literal342_tree=null;
        Object char_literal344_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal342=(Token)match(input,118,FOLLOW_118_in_type_cast_name3367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal342_tree = 
            (Object)adaptor.create(char_literal342)
            ;
            adaptor.addChild(root_0, char_literal342_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3369);
            type_cast_declaration343=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration343.getTree());

            char_literal344=(Token)match(input,119,FOLLOW_119_in_type_cast_name3371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal344_tree = 
            (Object)adaptor.create(char_literal344)
            ;
            adaptor.addChild(root_0, char_literal344_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol345 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration346 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==182) ) {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==135) ) {
                    switch ( input.LA(3) ) {
                    case 185:
                        {
                        int LA63_19 = input.LA(4);

                        if ( (LA63_19==141) ) {
                            int LA63_24 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 182:
                        {
                        int LA63_20 = input.LA(4);

                        if ( (LA63_20==141) ) {
                            int LA63_25 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 186:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA63_26 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA63_27 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 186:
                            {
                            int LA63_28 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 188:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA63_29 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA63_30 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 188:
                            {
                            int LA63_31 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA63_23 = input.LA(4);

                        if ( (LA63_23==141) ) {
                            int LA63_32 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt63=1;
                            }
                            else if ( (true) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 32, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 23, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA63_1==116||(LA63_1 >= 119 && LA63_1 <= 120)||LA63_1==166||LA63_1==173) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA63_0==ID||LA63_0==118||LA63_0==173||LA63_0==178||(LA63_0 >= 185 && LA63_0 <= 186)||LA63_0==188||LA63_0==190||(LA63_0 >= 193 && LA63_0 <= 195)) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3389);
                    type_declaration_protocol345=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol345.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3395);
                    classical_type_declaration346=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration346.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set347=null;

        Object set347_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:561:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set347=(Token)input.LT(1);

            if ( (input.LA(1) >= 129 && input.LA(1) <= 130) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set347)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access348 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3423);
            access348=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access348.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple349 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3442);
            object_access_simple349=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple349.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name350 =null;

        ObjcParser.access_wrapper_return access_wrapper351 =null;

        ObjcParser.name_return name352 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3463);
            name350=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name350.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:10: ( access_wrapper name )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( ((LA64_0 >= 129 && LA64_0 <= 130)) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3466);
            	    access_wrapper351=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper351.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3468);
            	    name352=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name352.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access353 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3485);
            object_access353=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access353.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue354 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3505);
            cast_lvalue354=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue354.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal357=null;
        Token char_literal360=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper355 =null;

        ObjcParser.lvalue_access_return lvalue_access356 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper358 =null;

        ObjcParser.lvalue_access_return lvalue_access359 =null;

        ObjcParser.access_wrapper_return access_wrapper361 =null;

        ObjcParser.name_return name362 =null;

        ObjcParser.lvalue_access_return lvalue_access363 =null;


        Object char_literal357_tree=null;
        Object char_literal360_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt66=3;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==118) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==182) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==118) ) {
                    int LA66_6 = input.LA(3);

                    if ( (LA66_6==120) && (synpred19_Objc())) {
                        alt66=1;
                    }
                    else if ( (LA66_6==182) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==118) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==195) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==173) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==194) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==185) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==186) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==188) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==ID) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==190) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==193) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else if ( (LA66_6==178) && (synpred20_Objc())) {
                        alt66=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 6, input);

                        throw nvae;

                    }
                }
                else if ( (LA66_1==195) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==173) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==194) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==185) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==186) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==188) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==ID) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==190) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==193) && (synpred19_Objc())) {
                    alt66=1;
                }
                else if ( (LA66_1==178) && (synpred19_Objc())) {
                    alt66=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA66_0==ID||LA66_0==116||LA66_0==120) ) {
                alt66=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3523);
                    type_cast_wrapper355=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper355.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3525);
                    lvalue_access356=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access356.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal357=(Token)match(input,118,FOLLOW_118_in_cast_lvalue3538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal357_tree = 
                    (Object)adaptor.create(char_literal357)
                    ;
                    adaptor.addChild(root_0, char_literal357_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3540);
                    type_cast_wrapper358=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper358.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3542);
                    lvalue_access359=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access359.getTree());

                    char_literal360=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal360_tree = 
                    (Object)adaptor.create(char_literal360)
                    ;
                    adaptor.addChild(root_0, char_literal360_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:71: ( access_wrapper name )+
                    int cnt65=0;
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( ((LA65_0 >= 129 && LA65_0 <= 130)) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3547);
                    	    access_wrapper361=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper361.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3549);
                    	    name362=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name362.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt65 >= 1 ) break loop65;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(65, input);
                                throw eee;
                        }
                        cnt65++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3557);
                    lvalue_access363=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access363.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:1: lvalue_access : lvalue ( access_wrapper name )* ;
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.lvalue_return lvalue364 =null;

        ObjcParser.access_wrapper_return access_wrapper365 =null;

        ObjcParser.name_return name366 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:3: ( lvalue ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:5: lvalue ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalue_access3570);
            lvalue364=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue364.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:12: ( access_wrapper name )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( ((LA67_0 >= 129 && LA67_0 <= 130)) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:13: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3573);
            	    access_wrapper365=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper365.getTree());

            	    pushFollow(FOLLOW_name_in_lvalue_access3575);
            	    name366=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name366.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal367=null;
        Token char_literal369=null;
        Token char_literal371=null;
        Token set372=null;
        ObjcParser.name_return name368 =null;

        ObjcParser.element_value_return element_value370 =null;

        ObjcParser.name_return name373 =null;

        ObjcParser.name_return name374 =null;


        Object char_literal367_tree=null;
        Object char_literal369_tree=null;
        Object char_literal371_tree=null;
        Object set372_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt69=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==ID) ) {
                    int LA69_4 = input.LA(3);

                    if ( (LA69_4==166) && (synpred21_Objc())) {
                        alt69=1;
                    }
                    else if ( (LA69_4==EOF||LA69_4==117||LA69_4==119||LA69_4==121||(LA69_4 >= 123 && LA69_4 <= 124)||(LA69_4 >= 127 && LA69_4 <= 130)||LA69_4==132||LA69_4==137||LA69_4==139||LA69_4==144||LA69_4==199) ) {
                        alt69=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 69, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA69_2 = input.LA(2);

                if ( (LA69_2==166) && (synpred21_Objc())) {
                    alt69=1;
                }
                else if ( (LA69_2==EOF||LA69_2==117||LA69_2==119||LA69_2==121||(LA69_2 >= 123 && LA69_2 <= 124)||(LA69_2 >= 127 && LA69_2 <= 130)||LA69_2==132||LA69_2==137||LA69_2==139||LA69_2==144||LA69_2==199) ) {
                    alt69=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 2, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                alt69=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }

            switch (alt69) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:23: ( '&' )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==116) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:23: '&'
                            {
                            char_literal367=(Token)match(input,116,FOLLOW_116_in_lvalue3602); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal367);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3605);
                    name368=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name368.getTree());

                    char_literal369=(Token)match(input,166,FOLLOW_166_in_lvalue3607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal369);


                    pushFollow(FOLLOW_element_value_in_lvalue3609);
                    element_value370=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value370.getTree());

                    char_literal371=(Token)match(input,168,FOLLOW_168_in_lvalue3611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal371);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 595:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:596:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set372=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set372)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3633);
                    name373=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name373.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:597:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3639);
                    name374=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name374.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal375=null;

        Object string_literal375_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:5: 'break'
            {
            string_literal375=(Token)match(input,171,FOLLOW_171_in_break_stmt3655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal375);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal376=null;

        Object string_literal376_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:5: 'continue'
            {
            string_literal376=(Token)match(input,174,FOLLOW_174_in_continue_stmt3676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal376);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration377 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3702);
            extern_declaration377=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration377.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal378=null;
        ObjcParser.field_declaration_return field_declaration379 =null;


        Object string_literal378_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal378=(Token)match(input,179,FOLLOW_179_in_extern_declaration3723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal378_tree = 
            (Object)adaptor.create(string_literal378)
            ;
            adaptor.addChild(root_0, string_literal378_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3725);
            field_declaration379=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration379.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix380 =null;

        ObjcParser.method_declaration_return method_declaration381 =null;

        ObjcParser.property_prefix_return property_prefix382 =null;

        ObjcParser.optional_prefix_return optional_prefix383 =null;

        ObjcParser.field_declaration_return field_declaration384 =null;

        ObjcParser.comments_return comments385 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt72=3;
            switch ( input.LA(1) ) {
            case 122:
            case 126:
            case 153:
                {
                alt72=1;
                }
                break;
            case 155:
                {
                alt72=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }

            switch (alt72) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: ( optional_prefix )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==153) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3737);
                            optional_prefix380=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix380.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3740);
                    method_declaration381=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration381.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 619:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3754);
                    property_prefix382=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix382.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:21: ( optional_prefix )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==153) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3756);
                            optional_prefix383=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix383.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3759);
                    field_declaration384=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration384.getTree());

                    // AST REWRITE
                    // elements: field_declaration, property_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 620:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:621:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3775);
                    comments385=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments385.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration386 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3790);
            field_declaration386=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration386.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal387=null;

        Object string_literal387_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal387=(Token)match(input,153,FOLLOW_153_in_optional_prefix3813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal387_tree = 
            (Object)adaptor.create(string_literal387)
            ;
            adaptor.addChild(root_0, string_literal387_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal388=null;

        Object string_literal388_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:632:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:632:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal388=(Token)match(input,165,FOLLOW_165_in_ns_inline3825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal388_tree = 
            (Object)adaptor.create(string_literal388)
            ;
            adaptor.addChild(root_0, string_literal388_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal389=null;
        Token char_literal390=null;
        Token char_literal392=null;
        Token char_literal394=null;
        Token char_literal396=null;
        Token char_literal398=null;
        Token char_literal399=null;
        ObjcParser.name_return name391 =null;

        ObjcParser.name_return name393 =null;

        ObjcParser.name_return name395 =null;

        ObjcParser.name_return name397 =null;


        Object string_literal389_tree=null;
        Object char_literal390_tree=null;
        Object char_literal392_tree=null;
        Object char_literal394_tree=null;
        Object char_literal396_tree=null;
        Object char_literal398_tree=null;
        Object char_literal399_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal389=(Token)match(input,155,FOLLOW_155_in_property_prefix3837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal389_tree = 
            (Object)adaptor.create(string_literal389)
            ;
            adaptor.addChild(root_0, string_literal389_tree);
            }

            char_literal390=(Token)match(input,118,FOLLOW_118_in_property_prefix3839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal390_tree = 
            (Object)adaptor.create(char_literal390)
            ;
            adaptor.addChild(root_0, char_literal390_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3841);
            name391=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name391.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:26: ( '=' name )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==139) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:27: '=' name
                    {
                    char_literal392=(Token)match(input,139,FOLLOW_139_in_property_prefix3844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal392_tree = 
                    (Object)adaptor.create(char_literal392)
                    ;
                    adaptor.addChild(root_0, char_literal392_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3846);
                    name393=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name393.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==125) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal394=(Token)match(input,125,FOLLOW_125_in_property_prefix3851); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal394_tree = 
            	    (Object)adaptor.create(char_literal394)
            	    ;
            	    adaptor.addChild(root_0, char_literal394_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3853);
            	    name395=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name395.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:48: ( '=' name ( ':' )? )?
            	    int alt75=2;
            	    int LA75_0 = input.LA(1);

            	    if ( (LA75_0==139) ) {
            	        alt75=1;
            	    }
            	    switch (alt75) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:49: '=' name ( ':' )?
            	            {
            	            char_literal396=(Token)match(input,139,FOLLOW_139_in_property_prefix3856); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal396_tree = 
            	            (Object)adaptor.create(char_literal396)
            	            ;
            	            adaptor.addChild(root_0, char_literal396_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3858);
            	            name397=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name397.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:58: ( ':' )?
            	            int alt74=2;
            	            int LA74_0 = input.LA(1);

            	            if ( (LA74_0==133) ) {
            	                alt74=1;
            	            }
            	            switch (alt74) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:58: ':'
            	                    {
            	                    char_literal398=(Token)match(input,133,FOLLOW_133_in_property_prefix3860); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal398_tree = 
            	                    (Object)adaptor.create(char_literal398)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal398_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            char_literal399=(Token)match(input,119,FOLLOW_119_in_property_prefix3867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal399_tree = 
            (Object)adaptor.create(char_literal399)
            ;
            adaptor.addChild(root_0, char_literal399_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration400 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3880);
            interface_declaration400=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration400.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration401 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3900);
            protocol_declaration401=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration401.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 649:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal402=null;
        ObjcParser.typedef_declaration_return typedef_declaration403 =null;


        Object string_literal402_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:5: 'typedef' typedef_declaration
            {
            string_literal402=(Token)match(input,192,FOLLOW_192_in_typedef_declaration_wrapper3918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal402);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3920);
            typedef_declaration403=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration403.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 652:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class type_declaration_struct_enum_union_anonymous_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_enum_union_anonymous"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:655:1: type_declaration_struct_enum_union_anonymous : ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full );
    public final ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous() throws RecognitionException {
        ObjcParser.type_declaration_struct_enum_union_anonymous_return retval = new ObjcParser.type_declaration_struct_enum_union_anonymous_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full404 =null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full405 =null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full406 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:3: ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full )
            int alt77=3;
            switch ( input.LA(1) ) {
            case 190:
                {
                alt77=1;
                }
                break;
            case 178:
                {
                alt77=2;
                }
                break;
            case 193:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }

            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:5: type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous3941);
                    type_declaration_struct_full404=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full404.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous3947);
                    type_declaration_enum_full405=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full405.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:5: type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous3953);
                    type_declaration_union_full406=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full406.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_enum_union_anonymous"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal409=null;
        Token char_literal411=null;
        ObjcParser.typedef_internal_return typedef_internal407 =null;

        ObjcParser.typedef_name_return typedef_name408 =null;

        ObjcParser.typedef_name_return typedef_name410 =null;


        Object char_literal409_tree=null;
        Object char_literal411_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3968);
            typedef_internal407=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal407.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3970);
            typedef_name408=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name408.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:35: ( ',' typedef_name )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==125) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:36: ',' typedef_name
            	    {
            	    char_literal409=(Token)match(input,125,FOLLOW_125_in_typedef_declaration3973); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal409_tree = 
            	    (Object)adaptor.create(char_literal409)
            	    ;
            	    adaptor.addChild(root_0, char_literal409_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3975);
            	    typedef_name410=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name410.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            char_literal411=(Token)match(input,134,FOLLOW_134_in_typedef_declaration3979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal411_tree = 
            (Object)adaptor.create(char_literal411)
            ;
            adaptor.addChild(root_0, char_literal411_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal412=null;
        Token char_literal413=null;
        Token char_literal415=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane414 =null;


        Object char_literal412_tree=null;
        Object char_literal413_tree=null;
        Object char_literal415_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal412=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal412_tree = 
            (Object)adaptor.create(char_literal412)
            ;
            adaptor.addChild(root_0, char_literal412_tree);
            }

            char_literal413=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate3993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal413_tree = 
            (Object)adaptor.create(char_literal413)
            ;
            adaptor.addChild(root_0, char_literal413_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3995);
            type_declaration_plane414=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane414.getTree());

            char_literal415=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate3997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal415_tree = 
            (Object)adaptor.create(char_literal415)
            ;
            adaptor.addChild(root_0, char_literal415_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal416=null;
        Token char_literal417=null;
        Token char_literal419=null;
        Token char_literal420=null;
        Token char_literal422=null;
        Token char_literal424=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane418 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane421 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane423 =null;


        Object char_literal416_tree=null;
        Object char_literal417_tree=null;
        Object char_literal419_tree=null;
        Object char_literal420_tree=null;
        Object char_literal422_tree=null;
        Object char_literal424_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal416=(Token)match(input,118,FOLLOW_118_in_func_pointer4012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal416);


            char_literal417=(Token)match(input,120,FOLLOW_120_in_func_pointer4014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal417);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4016);
            type_declaration_plane418=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane418.getTree());

            char_literal419=(Token)match(input,119,FOLLOW_119_in_func_pointer4018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal419);


            char_literal420=(Token)match(input,118,FOLLOW_118_in_func_pointer4020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal420);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==ID||LA80_0==173||LA80_0==182||(LA80_0 >= 185 && LA80_0 <= 186)||LA80_0==188||(LA80_0 >= 194 && LA80_0 <= 195)) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4023);
                    type_declaration_plane421=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane421.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:68: ( ',' type_declaration_plane )*
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);

                        if ( (LA79_0==125) ) {
                            alt79=1;
                        }


                        switch (alt79) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:69: ',' type_declaration_plane
                    	    {
                    	    char_literal422=(Token)match(input,125,FOLLOW_125_in_func_pointer4026); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_125.add(char_literal422);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4028);
                    	    type_declaration_plane423=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane423.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop79;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal424=(Token)match(input,119,FOLLOW_119_in_func_pointer4034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal424);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer425 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct426 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum427 =null;

        ObjcParser.type_declaration_union_return type_declaration_union428 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane429 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt81=5;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==118) && (synpred22_Objc())) {
                alt81=1;
            }
            else if ( (LA81_0==190) ) {
                alt81=2;
            }
            else if ( (LA81_0==178) ) {
                alt81=3;
            }
            else if ( (LA81_0==193) ) {
                alt81=4;
            }
            else if ( (LA81_0==ID||LA81_0==173||LA81_0==182||(LA81_0 >= 185 && LA81_0 <= 186)||LA81_0==188||(LA81_0 >= 194 && LA81_0 <= 195)) ) {
                alt81=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4063);
                    func_pointer425=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer425.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4069);
                    type_declaration_struct426=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct426.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4075);
                    type_declaration_enum427=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum427.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4081);
                    type_declaration_union428=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union428.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4087);
                    type_declaration_plane429=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID430=null;

        Object ID430_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:5: ID
            {
            ID430=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID430);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal431=null;
        Token char_literal433=null;
        Token string_literal434=null;
        Token char_literal436=null;
        Token char_literal438=null;
        Token char_literal440=null;
        Token char_literal442=null;
        ObjcParser.class_name_return class_name432 =null;

        ObjcParser.protocol_name_return protocol_name435 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple437 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple439 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple441 =null;


        Object string_literal431_tree=null;
        Object char_literal433_tree=null;
        Object string_literal434_tree=null;
        Object char_literal436_tree=null;
        Object char_literal438_tree=null;
        Object char_literal440_tree=null;
        Object char_literal442_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt82=5;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt82=1;
                }
                break;
            case 157:
                {
                alt82=2;
                }
                break;
            case 190:
                {
                alt82=3;
                }
                break;
            case 193:
                {
                alt82=4;
                }
                break;
            case 178:
                {
                alt82=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }

            switch (alt82) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:5: '@class' class_name ';'
                    {
                    string_literal431=(Token)match(input,147,FOLLOW_147_in_forward_class_declaration4120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(string_literal431);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4122);
                    class_name432=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name432.getTree());

                    char_literal433=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal433);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 684:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:685:5: '@protocol' protocol_name ';'
                    {
                    string_literal434=(Token)match(input,157,FOLLOW_157_in_forward_class_declaration4137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal434);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4139);
                    protocol_name435=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name435.getTree());

                    char_literal436=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal436);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 685:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:685:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4154);
                    type_declaration_struct_simple437=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple437.getTree());

                    char_literal438=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal438);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 686:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4169);
                    type_declaration_union_simple439=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple439.getTree());

                    char_literal440=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal440);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 687:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4184);
                    type_declaration_enum_simple441=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple441.getTree());

                    char_literal442=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal442);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 688:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID443=null;

        Object ID443_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: ID
            {
            ID443=(Token)match(input,ID,FOLLOW_ID_in_class_name4206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID443);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal444=null;
        ObjcParser.protocol_name_return protocol_name445 =null;

        ObjcParser.implements_interfaces_return implements_interfaces446 =null;

        ObjcParser.class_protocol_end_return class_protocol_end447 =null;


        Object string_literal444_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal444=(Token)match(input,157,FOLLOW_157_in_protocol_declaration4226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = 
            (Object)adaptor.create(string_literal444)
            ;
            adaptor.addChild(root_0, string_literal444_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4228);
            protocol_name445=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name445.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:31: ( implements_interfaces )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==135) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4230);
                    implements_interfaces446=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces446.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4238);
            class_protocol_end447=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end447.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal449=null;
        ObjcParser.declarations_return declarations448 =null;


        Object string_literal449_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: ( declarations )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==MULTI_COMMENT_LIT||LA84_0==SINGLE_COMMENT_LIT||LA84_0==122||LA84_0==126||LA84_0==153||LA84_0==155) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4252);
            	    declarations448=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations448.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            string_literal449=(Token)match(input,149,FOLLOW_149_in_class_protocol_end4259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal449_tree = 
            (Object)adaptor.create(string_literal449)
            ;
            adaptor.addChild(root_0, string_literal449_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:704:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal450=null;
        Token char_literal452=null;
        ObjcParser.template_internal_return template_internal451 =null;


        Object char_literal450_tree=null;
        Object char_literal452_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:704:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:704:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal450=(Token)match(input,135,FOLLOW_135_in_template4271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal450_tree = 
            (Object)adaptor.create(char_literal450)
            ;
            adaptor.addChild(root_0, char_literal450_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4273);
            template_internal451=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal451.getTree());

            char_literal452=(Token)match(input,141,FOLLOW_141_in_template4275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal452_tree = 
            (Object)adaptor.create(char_literal452)
            ;
            adaptor.addChild(root_0, char_literal452_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols453 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4284);
            implements_protocols453=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols453.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 707:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal454=null;
        Token char_literal456=null;
        Token char_literal458=null;
        ObjcParser.type_dec_internal_return type_dec_internal455 =null;

        ObjcParser.type_dec_internal_return type_dec_internal457 =null;


        Object char_literal454_tree=null;
        Object char_literal456_tree=null;
        Object char_literal458_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal454=(Token)match(input,135,FOLLOW_135_in_implements_protocols4309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal454);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4311);
            type_dec_internal455=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal455.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:27: ( ',' type_dec_internal )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==125) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:28: ',' type_dec_internal
            	    {
            	    char_literal456=(Token)match(input,125,FOLLOW_125_in_implements_protocols4314); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal456);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4316);
            	    type_dec_internal457=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal457.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            char_literal458=(Token)match(input,141,FOLLOW_141_in_implements_protocols4320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal458);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 711:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal460=null;
        ObjcParser.template_type_return template_type459 =null;

        ObjcParser.template_type_return template_type461 =null;


        Object char_literal460_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4342);
            template_type459=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type459.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:19: ( ',' template_type )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==125) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:20: ',' template_type
            	    {
            	    char_literal460=(Token)match(input,125,FOLLOW_125_in_template_internal4345); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal460_tree = 
            	    (Object)adaptor.create(char_literal460)
            	    ;
            	    adaptor.addChild(root_0, char_literal460_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4347);
            	    template_type461=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type461.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal463=null;
        ObjcParser.template_name_return template_name462 =null;

        ObjcParser.template_name_return template_name464 =null;


        Object string_literal463_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:3: ( template_name | 'struct' template_name )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ID) ) {
                alt87=1;
            }
            else if ( (LA87_0==190) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4361);
                    template_name462=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name462.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal463=(Token)match(input,190,FOLLOW_190_in_template_type4367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal463_tree = 
                    (Object)adaptor.create(string_literal463)
                    ;
                    adaptor.addChild(root_0, string_literal463_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4369);
                    template_name464=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name464.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID465=null;

        Object ID465_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:5: ID
            {
            ID465=(Token)match(input,ID,FOLLOW_ID_in_template_name4384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID465);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 723:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID466=null;

        Object ID466_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:5: ID
            {
            ID466=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID466);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 727:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal467=null;
        Token string_literal472=null;
        ObjcParser.interface_name_return interface_name468 =null;

        ObjcParser.superclass_name_return superclass_name469 =null;

        ObjcParser.fields_body_return fields_body470 =null;

        ObjcParser.declarations_return declarations471 =null;


        Object string_literal467_tree=null;
        Object string_literal472_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal467=(Token)match(input,152,FOLLOW_152_in_interface_declaration4431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4433);
            interface_name468=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name468.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4435);
            superclass_name469=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name469.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:3: ( fields_body )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==197) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4439);
                    fields_body470=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body470.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:3: ( declarations )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==MULTI_COMMENT_LIT||LA89_0==SINGLE_COMMENT_LIT||LA89_0==122||LA89_0==126||LA89_0==153||LA89_0==155) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4444);
            	    declarations471=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations471.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            string_literal472=(Token)match(input,149,FOLLOW_149_in_interface_declaration4449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = 
            (Object)adaptor.create(string_literal472)
            ;
            adaptor.addChild(root_0, string_literal472_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal473=null;
        Token char_literal475=null;
        ObjcParser.body_item_return body_item474 =null;


        Object char_literal473_tree=null;
        Object char_literal475_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal473=(Token)match(input,197,FOLLOW_197_in_fields_body4466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal473_tree = 
            (Object)adaptor.create(char_literal473)
            ;
            adaptor.addChild(root_0, char_literal473_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: ( body_item )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==ID||LA90_0==MULTI_COMMENT_LIT||LA90_0==SINGLE_COMMENT_LIT||LA90_0==118||LA90_0==154||LA90_0==156||LA90_0==158||LA90_0==164||LA90_0==173||LA90_0==178||LA90_0==182||(LA90_0 >= 185 && LA90_0 <= 186)||LA90_0==188||LA90_0==190||(LA90_0 >= 192 && LA90_0 <= 195)) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4472);
            	    body_item474=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item474.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            char_literal475=(Token)match(input,201,FOLLOW_201_in_fields_body4477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal475_tree = 
            (Object)adaptor.create(char_literal475)
            ;
            adaptor.addChild(root_0, char_literal475_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper476 =null;

        ObjcParser.field_modifiers_return field_modifiers477 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper478 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper479 =null;

        ObjcParser.comments_return comments480 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ID||LA94_0==118||LA94_0==154||LA94_0==156||LA94_0==158||LA94_0==164||LA94_0==173||LA94_0==178||LA94_0==182||(LA94_0 >= 185 && LA94_0 <= 186)||LA94_0==188||LA94_0==190||(LA94_0 >= 192 && LA94_0 <= 195)) ) {
                alt94=1;
            }
            else if ( (LA94_0==MULTI_COMMENT_LIT||LA94_0==SINGLE_COMMENT_LIT) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( group_modifier_wrapper )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==154||LA91_0==156||LA91_0==158) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4492);
                            group_modifier_wrapper476=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper476.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:29: ( field_modifiers )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==164) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4495);
                            field_modifiers477=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers477.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==192) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==ID||LA93_0==118||LA93_0==173||LA93_0==178||LA93_0==182||(LA93_0 >= 185 && LA93_0 <= 186)||LA93_0==188||LA93_0==190||(LA93_0 >= 193 && LA93_0 <= 195)) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;

                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4499);
                            typedef_declaration_wrapper478=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper478.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4503);
                            field_declaration_wrapper479=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper479.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4510);
                    comments480=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments480.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier481 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4523);
            group_modifier481=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier481.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 749:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set482=null;

        Object set482_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set482=(Token)input.LT(1);

            if ( input.LA(1)==154||input.LA(1)==156||input.LA(1)==158 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set482)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:754:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal483=null;

        Object string_literal483_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal483=(Token)match(input,164,FOLLOW_164_in_field_modifiers4568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal483_tree = 
            (Object)adaptor.create(string_literal483)
            ;
            adaptor.addChild(root_0, string_literal483_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:758:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID484=null;
        ObjcParser.category_return category485 =null;


        Object ID484_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:5: ID ( category )?
            {
            ID484=(Token)match(input,ID,FOLLOW_ID_in_interface_name4583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID484);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:8: ( category )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==118) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4585);
                    category485=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category485.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: category, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 759:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal486=null;
        Token ID487=null;
        Token char_literal488=null;

        Object char_literal486_tree=null;
        Object ID487_tree=null;
        Object char_literal488_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:11: '(' ( ID )? ')'
            {
            char_literal486=(Token)match(input,118,FOLLOW_118_in_category4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal486);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:15: ( ID )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==ID) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:15: ID
                    {
                    ID487=(Token)match(input,ID,FOLLOW_ID_in_category4606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID487);


                    }
                    break;

            }


            char_literal488=(Token)match(input,119,FOLLOW_119_in_category4609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal488);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 761:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal489=null;
        Token ID490=null;
        ObjcParser.implements_interfaces_return implements_interfaces491 =null;


        Object char_literal489_tree=null;
        Object ID490_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:5: ( ':' ID )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==133) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:6: ':' ID
                    {
                    char_literal489=(Token)match(input,133,FOLLOW_133_in_superclass_name4629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal489);


                    ID490=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID490);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:15: ( implements_interfaces )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==135) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4635);
                    implements_interfaces491=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces491.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 764:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration492 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:5: ( field_declaration )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==ID||LA99_0==118||LA99_0==173||LA99_0==178||LA99_0==182||(LA99_0 >= 185 && LA99_0 <= 186)||LA99_0==188||LA99_0==190||(LA99_0 >= 193 && LA99_0 <= 195)) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4664);
            	    field_declaration492=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration492.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 768:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal495=null;
        Token char_literal498=null;
        Token char_literal502=null;
        Token char_literal503=null;
        ObjcParser.type_declaration_return type_declaration493 =null;

        ObjcParser.field_name_return field_name494 =null;

        ObjcParser.field_name_return field_name496 =null;

        ObjcParser.classical_method_params_return classical_method_params497 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper499 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper500 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init501 =null;


        Object char_literal495_tree=null;
        Object char_literal498_tree=null;
        Object char_literal502_tree=null;
        Object char_literal503_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4688);
            type_declaration493=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration493.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4690);
            field_name494=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name494.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:36: ( ',' field_name )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==125) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:37: ',' field_name
            	    {
            	    char_literal495=(Token)match(input,125,FOLLOW_125_in_field_declaration4694); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal495_tree = 
            	    (Object)adaptor.create(char_literal495)
            	    ;
            	    adaptor.addChild(root_0, char_literal495_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4696);
            	    field_name496=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name496.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( ((LA103_0 >= 117 && LA103_0 <= 118)||LA103_0==121||LA103_0==124||LA103_0==128||LA103_0==132||LA103_0==137||LA103_0==139||LA103_0==144||LA103_0==199) ) {
                alt103=1;
            }
            else if ( (LA103_0==134) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==118) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==117||LA102_0==121||LA102_0==124||LA102_0==128||LA102_0==132||LA102_0==137||LA102_0==139||LA102_0==144||LA102_0==199) ) {
                        alt102=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);

                        throw nvae;

                    }
                    switch (alt102) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4703);
                            classical_method_params497=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params497.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:81: ( ';' | block_multiline_wrapper )
                            int alt101=2;
                            int LA101_0 = input.LA(1);

                            if ( (LA101_0==134) ) {
                                alt101=1;
                            }
                            else if ( (LA101_0==197) ) {
                                alt101=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 101, 0, input);

                                throw nvae;

                            }
                            switch (alt101) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:82: ';'
                                    {
                                    char_literal498=(Token)match(input,134,FOLLOW_134_in_field_declaration4706); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal498_tree = 
                                    (Object)adaptor.create(char_literal498)
                                    ;
                                    adaptor.addChild(root_0, char_literal498_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4710);
                                    block_multiline_wrapper499=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper499.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4717);
                            op_assign_wrapper500=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper500.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4719);
                            element_value_or_array_init501=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init501.getTree());

                            char_literal502=(Token)match(input,134,FOLLOW_134_in_field_declaration4721); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal502_tree = 
                            (Object)adaptor.create(char_literal502)
                            ;
                            adaptor.addChild(root_0, char_literal502_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:171: ';'
                    {
                    char_literal503=(Token)match(input,134,FOLLOW_134_in_field_declaration4727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal503_tree = 
                    (Object)adaptor.create(char_literal503)
                    ;
                    adaptor.addChild(root_0, char_literal503_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration504 =null;

        ObjcParser.field_name_return field_name505 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4742);
            type_declaration504=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration504.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4744);
            field_name505=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name505.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 775:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal506=null;
        Token char_literal508=null;
        Token char_literal510=null;
        ObjcParser.classical_param_return classical_param507 =null;

        ObjcParser.classical_param_return classical_param509 =null;


        Object char_literal506_tree=null;
        Object char_literal508_tree=null;
        Object char_literal510_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal506=(Token)match(input,118,FOLLOW_118_in_classical_method_params4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal506);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:9: ( classical_param )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ID||LA104_0==118||LA104_0==173||LA104_0==178||LA104_0==182||(LA104_0 >= 185 && LA104_0 <= 186)||LA104_0==188||LA104_0==190||(LA104_0 >= 193 && LA104_0 <= 195)) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4771);
                    classical_param507=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param507.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:26: ( ',' classical_param )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==125) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:27: ',' classical_param
            	    {
            	    char_literal508=(Token)match(input,125,FOLLOW_125_in_classical_method_params4775); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal508);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4777);
            	    classical_param509=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param509.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            char_literal510=(Token)match(input,119,FOLLOW_119_in_classical_method_params4781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal510);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 779:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration511 =null;

        ObjcParser.param_name_return param_name512 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4806);
            classical_type_declaration511=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration511.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4808);
            param_name512=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name512.getTree());

            // AST REWRITE
            // elements: classical_type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 783:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal516=null;
        Token string_literal517=null;
        Token char_literal519=null;
        Token string_literal520=null;
        Token char_literal522=null;
        Token string_literal523=null;
        Token char_literal525=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol513 =null;

        ObjcParser.func_pointer_return func_pointer514 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane515 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper518 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper521 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper524 =null;


        Object char_literal516_tree=null;
        Object string_literal517_tree=null;
        Object char_literal519_tree=null;
        Object string_literal520_tree=null;
        Object char_literal522_tree=null;
        Object string_literal523_tree=null;
        Object char_literal525_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt110=6;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==182) ) {
                int LA110_1 = input.LA(2);

                if ( (LA110_1==135) && (synpred23_Objc())) {
                    alt110=1;
                }
                else if ( (LA110_1==ID||LA110_1==116||(LA110_1 >= 119 && LA110_1 <= 120)||LA110_1==166||LA110_1==173) ) {
                    alt110=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA110_0==118) && (synpred24_Objc())) {
                alt110=2;
            }
            else if ( (LA110_0==ID||LA110_0==173||(LA110_0 >= 185 && LA110_0 <= 186)||LA110_0==188||(LA110_0 >= 194 && LA110_0 <= 195)) ) {
                alt110=3;
            }
            else if ( (LA110_0==190) ) {
                alt110=4;
            }
            else if ( (LA110_0==193) ) {
                alt110=5;
            }
            else if ( (LA110_0==178) ) {
                alt110=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4837);
                    type_declaration_protocol513=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol513.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4848);
                    func_pointer514=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer514.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4854);
                    type_declaration_plane515=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane515.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:28: ( '&' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==116) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:28: '&'
                            {
                            char_literal516=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4856); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal516_tree = 
                            (Object)adaptor.create(char_literal516)
                            ;
                            adaptor.addChild(root_0, char_literal516_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal517=(Token)match(input,190,FOLLOW_190_in_classical_type_declaration4864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal517);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4866);
                    type_dec_wrapper518=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper518.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:32: ( '&' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==116) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:32: '&'
                            {
                            char_literal519=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4868); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal519);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 790:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal520=(Token)match(input,193,FOLLOW_193_in_classical_type_declaration4885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal520);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4887);
                    type_dec_wrapper521=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper521.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:31: ( '&' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==116) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:31: '&'
                            {
                            char_literal522=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4889); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal522);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 791:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal523=(Token)match(input,178,FOLLOW_178_in_classical_type_declaration4906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal523);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4908);
                    type_dec_wrapper524=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper524.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:30: ( '&' )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==116) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:30: '&'
                            {
                            char_literal525=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4910); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal525);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal529=null;
        Token char_literal530=null;
        Token char_literal532=null;
        Token char_literal534=null;
        Token char_literal536=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol526 =null;

        ObjcParser.func_pointer_return func_pointer527 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct528 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum531 =null;

        ObjcParser.type_declaration_union_return type_declaration_union533 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane535 =null;


        Object char_literal529_tree=null;
        Object char_literal530_tree=null;
        Object char_literal532_tree=null;
        Object char_literal534_tree=null;
        Object char_literal536_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt116=6;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==182) ) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==135) && (synpred25_Objc())) {
                    alt116=1;
                }
                else if ( (LA116_1==ID||LA116_1==116||(LA116_1 >= 119 && LA116_1 <= 120)||LA116_1==166||LA116_1==173) ) {
                    alt116=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA116_0==118) && (synpred26_Objc())) {
                alt116=2;
            }
            else if ( (LA116_0==190) ) {
                alt116=3;
            }
            else if ( (LA116_0==178) ) {
                alt116=4;
            }
            else if ( (LA116_0==193) ) {
                alt116=5;
            }
            else if ( (LA116_0==ID||LA116_0==173||(LA116_0 >= 185 && LA116_0 <= 186)||LA116_0==188||(LA116_0 >= 194 && LA116_0 <= 195)) ) {
                alt116=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4939);
                    type_declaration_protocol526=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol526.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4950);
                    func_pointer527=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer527.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4956);
                    type_declaration_struct528=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct528.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:29: ( '&' )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==116) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:29: '&'
                            {
                            char_literal529=(Token)match(input,116,FOLLOW_116_in_type_declaration4958); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal529_tree = 
                            (Object)adaptor.create(char_literal529)
                            ;
                            adaptor.addChild(root_0, char_literal529_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:33: ( '*' )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==120) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:798:33: '*'
                            {
                            char_literal530=(Token)match(input,120,FOLLOW_120_in_type_declaration4960); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal530_tree = 
                            (Object)adaptor.create(char_literal530)
                            ;
                            adaptor.addChild(root_0, char_literal530_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4967);
                    type_declaration_enum531=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum531.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:27: ( '&' )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==116) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:27: '&'
                            {
                            char_literal532=(Token)match(input,116,FOLLOW_116_in_type_declaration4969); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal532_tree = 
                            (Object)adaptor.create(char_literal532)
                            ;
                            adaptor.addChild(root_0, char_literal532_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4976);
                    type_declaration_union533=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union533.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:28: ( '&' )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==116) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:28: '&'
                            {
                            char_literal534=(Token)match(input,116,FOLLOW_116_in_type_declaration4978); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal534_tree = 
                            (Object)adaptor.create(char_literal534)
                            ;
                            adaptor.addChild(root_0, char_literal534_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4985);
                    type_declaration_plane535=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane535.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:28: ( '&' )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==116) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:28: '&'
                            {
                            char_literal536=(Token)match(input,116,FOLLOW_116_in_type_declaration4987); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal536_tree = 
                            (Object)adaptor.create(char_literal536)
                            ;
                            adaptor.addChild(root_0, char_literal536_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:1: type_declaration_plane : ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal537=null;
        Token string_literal538=null;
        Token string_literal539=null;
        Token string_literal541=null;
        Token char_literal542=null;
        ObjcParser.type_dec_return type_dec540 =null;


        Object string_literal537_tree=null;
        Object string_literal538_tree=null;
        Object string_literal539_tree=null;
        Object string_literal541_tree=null;
        Object char_literal542_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:3: ( ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: ( 'volatile' )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==195) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: 'volatile'
                    {
                    string_literal537=(Token)match(input,195,FOLLOW_195_in_type_declaration_plane5002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal537);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:17: ( 'const' )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==173) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:17: 'const'
                    {
                    string_literal538=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane5005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal538);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:26: ( 'unsigned' )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==194) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:26: 'unsigned'
                    {
                    string_literal539=(Token)match(input,194,FOLLOW_194_in_type_declaration_plane5008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal539);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane5011);
            type_dec540=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec540.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:47: ( 'const' ( '*' )? )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==173) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:48: 'const' ( '*' )?
                    {
                    string_literal541=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane5014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal541);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:56: ( '*' )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==120) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:56: '*'
                            {
                            char_literal542=(Token)match(input,120,FOLLOW_120_in_type_declaration_plane5016); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(char_literal542);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 173, type_dec, 195
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:63: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:66: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:79: ( 'volatile' )?
                if ( stream_195.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_195.nextNode()
                    );

                }
                stream_195.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:100: ( 'const' )?
                if ( stream_173.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_173.nextNode()
                    );

                }
                stream_173.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal543=null;
        Token char_literal544=null;

        Object string_literal543_tree=null;
        Object char_literal544_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:6: 'id' '<'
            {
            string_literal543=(Token)match(input,182,FOLLOW_182_in_type_decl_protocol_predicate5048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = 
            (Object)adaptor.create(string_literal543)
            ;
            adaptor.addChild(root_0, string_literal543_tree);
            }

            char_literal544=(Token)match(input,135,FOLLOW_135_in_type_decl_protocol_predicate5050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal544_tree = 
            (Object)adaptor.create(char_literal544)
            ;
            adaptor.addChild(root_0, char_literal544_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal545=null;
        Token char_literal546=null;
        Token char_literal548=null;
        ObjcParser.type_dec_internal_return type_dec_internal547 =null;


        Object string_literal545_tree=null;
        Object char_literal546_tree=null;
        Object char_literal548_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: 'id' '<' type_dec_internal '>'
            {
            string_literal545=(Token)match(input,182,FOLLOW_182_in_type_declaration_protocol5066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal545);


            char_literal546=(Token)match(input,135,FOLLOW_135_in_type_declaration_protocol5068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal546);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5070);
            type_dec_internal547=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal547.getTree());

            char_literal548=(Token)match(input,141,FOLLOW_141_in_type_declaration_protocol5072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal548);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 813:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal549=null;
        ObjcParser.typedef_name_return typedef_name550 =null;


        Object string_literal549_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: 'struct' typedef_name
            {
            string_literal549=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct_simple5094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal549);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5096);
            typedef_name550=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name550.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal551=null;
        ObjcParser.typedef_name_return typedef_name552 =null;


        Object string_literal551_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: 'union' typedef_name
            {
            string_literal551=(Token)match(input,193,FOLLOW_193_in_type_declaration_union_simple5116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal551);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5118);
            typedef_name552=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name552.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 821:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal553=null;
        ObjcParser.typedef_name_return typedef_name554 =null;


        Object string_literal553_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: 'enum' typedef_name
            {
            string_literal553=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum_simple5142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal553);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5144);
            typedef_name554=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name554.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 825:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:1: type_declaration_struct_full : 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_struct_full_return type_declaration_struct_full() throws RecognitionException {
        ObjcParser.type_declaration_struct_full_return retval = new ObjcParser.type_declaration_struct_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal555=null;
        ObjcParser.typedef_name_return typedef_name556 =null;

        ObjcParser.struct_wrapper_return struct_wrapper557 =null;


        Object string_literal555_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:3: ( 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:5: 'struct' ( typedef_name )? struct_wrapper
            {
            string_literal555=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct_full5164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal555);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:14: ( typedef_name )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ID) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:14: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_full5166);
                    typedef_name556=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name556.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct_full5169);
            struct_wrapper557=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper557.getTree());

            // AST REWRITE
            // elements: struct_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 829:43: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:45: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:58: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_full"


    public static class type_declaration_union_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:1: type_declaration_union_full : 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_union_full_return type_declaration_union_full() throws RecognitionException {
        ObjcParser.type_declaration_union_full_return retval = new ObjcParser.type_declaration_union_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal558=null;
        ObjcParser.typedef_name_return typedef_name559 =null;

        ObjcParser.struct_wrapper_return struct_wrapper560 =null;


        Object string_literal558_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:3: ( 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: 'union' ( typedef_name )? struct_wrapper
            {
            string_literal558=(Token)match(input,193,FOLLOW_193_in_type_declaration_union_full5193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal558);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:13: ( typedef_name )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ID) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:13: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union_full5195);
                    typedef_name559=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name559.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union_full5198);
            struct_wrapper560=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper560.getTree());

            // AST REWRITE
            // elements: typedef_name, struct_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 833:42: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:44: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:56: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_full"


    public static class type_declaration_enum_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:1: type_declaration_enum_full : 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) ;
    public final ObjcParser.type_declaration_enum_full_return type_declaration_enum_full() throws RecognitionException {
        ObjcParser.type_declaration_enum_full_return retval = new ObjcParser.type_declaration_enum_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal561=null;
        ObjcParser.typedef_name_return typedef_name562 =null;

        ObjcParser.enum_wrapper_return enum_wrapper563 =null;


        Object string_literal561_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:3: ( 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: 'enum' ( typedef_name )? enum_wrapper
            {
            string_literal561=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum_full5222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal561);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:12: ( typedef_name )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ID) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:12: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_full5224);
                    typedef_name562=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name562.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum_full5227);
            enum_wrapper563=enum_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper563.getTree());

            // AST REWRITE
            // elements: enum_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 837:39: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:41: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:52: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_full"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full564 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple565 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:3: ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==190) ) {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==ID) ) {
                    int LA125_2 = input.LA(3);

                    if ( (LA125_2==197) && (synpred27_Objc())) {
                        alt125=1;
                    }
                    else if ( (LA125_2==ID||LA125_2==116||(LA125_2 >= 119 && LA125_2 <= 120)) ) {
                        alt125=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA125_1==197) && (synpred27_Objc())) {
                    alt125=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:5: ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct5262);
                    type_declaration_struct_full564=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full564.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5268);
                    type_declaration_struct_simple565=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple565.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full566 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple567 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:3: ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==193) ) {
                int LA126_1 = input.LA(2);

                if ( (LA126_1==ID) ) {
                    int LA126_2 = input.LA(3);

                    if ( (LA126_2==197) && (synpred28_Objc())) {
                        alt126=1;
                    }
                    else if ( (LA126_2==ID||LA126_2==116||LA126_2==119) ) {
                        alt126=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA126_1==197) && (synpred28_Objc())) {
                    alt126=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:5: ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_union5292);
                    type_declaration_union_full566=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full566.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5298);
                    type_declaration_union_simple567=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple567.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full568 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple569 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:3: ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==178) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==ID) ) {
                    int LA127_2 = input.LA(3);

                    if ( (LA127_2==197) && (synpred29_Objc())) {
                        alt127=1;
                    }
                    else if ( (LA127_2==ID||LA127_2==116||LA127_2==119) ) {
                        alt127=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA127_1==197) && (synpred29_Objc())) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }
            switch (alt127) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_enum5322);
                    type_declaration_enum_full568=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full568.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5328);
                    type_declaration_enum_simple569=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple569.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal570=null;
        Token char_literal572=null;
        ObjcParser.enum_element_return enum_element571 =null;


        Object char_literal570_tree=null;
        Object char_literal572_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal570=(Token)match(input,197,FOLLOW_197_in_enum_wrapper5341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal570_tree = 
            (Object)adaptor.create(char_literal570)
            ;
            adaptor.addChild(root_0, char_literal570_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:9: ( enum_element )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==ID||LA128_0==MULTI_COMMENT_LIT||LA128_0==SINGLE_COMMENT_LIT) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5351);
            	    enum_element571=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element571.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);


            char_literal572=(Token)match(input,201,FOLLOW_201_in_enum_wrapper5358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal572_tree = 
            (Object)adaptor.create(char_literal572)
            ;
            adaptor.addChild(root_0, char_literal572_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal576=null;
        ObjcParser.name_return name573 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper574 =null;

        ObjcParser.element_value_return element_value575 =null;

        ObjcParser.comments_return comments577 =null;


        Object char_literal576_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ID) ) {
                alt131=1;
            }
            else if ( (LA131_0==MULTI_COMMENT_LIT||LA131_0==SINGLE_COMMENT_LIT) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element5373);
                    name573=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name573.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:10: ( op_assign_wrapper element_value )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==117||LA129_0==121||LA129_0==124||LA129_0==128||LA129_0==132||LA129_0==137||LA129_0==139||LA129_0==144||LA129_0==199) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5376);
                            op_assign_wrapper574=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper574.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5378);
                            element_value575=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value575.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:45: ( ',' )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==125) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:45: ','
                            {
                            char_literal576=(Token)match(input,125,FOLLOW_125_in_enum_element5382); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(char_literal576);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 862:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5403);
                    comments577=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments577.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:866:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct578 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5418);
            struct578=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct578.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 867:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal579=null;
        Token char_literal581=null;
        ObjcParser.struct_internal_return struct_internal580 =null;


        Object char_literal579_tree=null;
        Object char_literal581_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal579=(Token)match(input,197,FOLLOW_197_in_struct5436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal579_tree = 
            (Object)adaptor.create(char_literal579)
            ;
            adaptor.addChild(root_0, char_literal579_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:7: ( struct_internal )+
            int cnt132=0;
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==ID||LA132_0==MULTI_COMMENT_LIT||LA132_0==SINGLE_COMMENT_LIT||LA132_0==118||LA132_0==173||LA132_0==178||LA132_0==182||(LA132_0 >= 185 && LA132_0 <= 186)||LA132_0==188||LA132_0==190||(LA132_0 >= 193 && LA132_0 <= 195)) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5445);
            	    struct_internal580=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal580.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt132 >= 1 ) break loop132;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(132, input);
                        throw eee;
                }
                cnt132++;
            } while (true);


            char_literal581=(Token)match(input,201,FOLLOW_201_in_struct5452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal581_tree = 
            (Object)adaptor.create(char_literal581)
            ;
            adaptor.addChild(root_0, char_literal581_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper582 =null;

        ObjcParser.comments_return comments583 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:3: ( field_declaration_wrapper | comments )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ID||LA133_0==118||LA133_0==173||LA133_0==178||LA133_0==182||(LA133_0 >= 185 && LA133_0 <= 186)||LA133_0==188||LA133_0==190||(LA133_0 >= 193 && LA133_0 <= 195)) ) {
                alt133=1;
            }
            else if ( (LA133_0==MULTI_COMMENT_LIT||LA133_0==SINGLE_COMMENT_LIT) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5466);
                    field_declaration_wrapper582=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper582.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:877:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5472);
                    comments583=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec584 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:881:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:881:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5487);
            type_dec584=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec584.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 881:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:881:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:1: type_dec : type_dec_internal ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal586=null;
        ObjcParser.type_dec_internal_return type_dec_internal585 =null;

        ObjcParser.array_size_return array_size587 =null;


        Object char_literal586_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:9: ( type_dec_internal ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:11: type_dec_internal ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5507);
            type_dec_internal585=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal585.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:29: ( '*' )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==120) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:29: '*'
            	    {
            	    char_literal586=(Token)match(input,120,FOLLOW_120_in_type_dec5509); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal586_tree = 
            	    (Object)adaptor.create(char_literal586)
            	    ;
            	    adaptor.addChild(root_0, char_literal586_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:34: ( array_size )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==166) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:35: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5513);
            	    array_size587=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size587.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID589=null;
        ObjcParser.knownTypes_return knownTypes588 =null;


        Object ID589_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:3: ( knownTypes | ID )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==182||(LA136_0 >= 185 && LA136_0 <= 186)||LA136_0==188) ) {
                alt136=1;
            }
            else if ( (LA136_0==ID) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5530);
                    knownTypes588=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes588.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID589=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID589_tree = 
                    (Object)adaptor.create(ID589)
                    ;
                    adaptor.addChild(root_0, ID589_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal590=null;
        Token string_literal591=null;
        Token string_literal592=null;
        Token string_literal593=null;
        Token string_literal594=null;
        Token string_literal595=null;

        Object string_literal590_tree=null;
        Object string_literal591_tree=null;
        Object string_literal592_tree=null;
        Object string_literal593_tree=null;
        Object string_literal594_tree=null;
        Object string_literal595_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt141=4;
            switch ( input.LA(1) ) {
            case 185:
                {
                alt141=1;
                }
                break;
            case 182:
                {
                alt141=2;
                }
                break;
            case 186:
                {
                alt141=3;
                }
                break;
            case 188:
                {
                alt141=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal590=(Token)match(input,185,FOLLOW_185_in_knownTypes5552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal590_tree = 
                    (Object)adaptor.create(string_literal590)
                    ;
                    adaptor.addChild(root_0, string_literal590_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal591=(Token)match(input,182,FOLLOW_182_in_knownTypes5558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal591_tree = 
                    (Object)adaptor.create(string_literal591)
                    ;
                    adaptor.addChild(root_0, string_literal591_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:5: ( 'long' )+
                    int cnt137=0;
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==186) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:5: 'long'
                    	    {
                    	    string_literal592=(Token)match(input,186,FOLLOW_186_in_knownTypes5564); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal592_tree = 
                    	    (Object)adaptor.create(string_literal592)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal592_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt137 >= 1 ) break loop137;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(137, input);
                                throw eee;
                        }
                        cnt137++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:13: ( 'int' )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==185) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:13: 'int'
                            {
                            string_literal593=(Token)match(input,185,FOLLOW_185_in_knownTypes5567); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal593_tree = 
                            (Object)adaptor.create(string_literal593)
                            ;
                            adaptor.addChild(root_0, string_literal593_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:5: ( 'short' )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==188) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:5: 'short'
                    	    {
                    	    string_literal594=(Token)match(input,188,FOLLOW_188_in_knownTypes5574); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal594_tree = 
                    	    (Object)adaptor.create(string_literal594)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal594_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:14: ( 'int' )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==185) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:14: 'int'
                            {
                            string_literal595=(Token)match(input,185,FOLLOW_185_in_knownTypes5577); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal595_tree = 
                            (Object)adaptor.create(string_literal595)
                            ;
                            adaptor.addChild(root_0, string_literal595_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:899:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID596=null;
        ObjcParser.array_size_return array_size597 =null;

        ObjcParser.field_crap_return field_crap598 =null;


        Object ID596_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:5: ID ( array_size )* ( field_crap )?
            {
            ID596=(Token)match(input,ID,FOLLOW_ID_in_field_name5593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID596);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:8: ( array_size )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==166) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5595);
            	    array_size597=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size597.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:20: ( field_crap )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==133) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5599);
                    field_crap598=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap598.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal599=null;
        Token set600=null;
        Token char_literal601=null;

        Object char_literal599_tree=null;
        Object set600_tree=null;
        Object char_literal601_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal599=(Token)match(input,166,FOLLOW_166_in_array_size5630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal599_tree = 
            (Object)adaptor.create(char_literal599)
            ;
            adaptor.addChild(root_0, char_literal599_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:9: ( NUMBER_LITERAL | ID )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ID||LA144_0==NUMBER_LITERAL) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set600=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set600)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal601=(Token)match(input,168,FOLLOW_168_in_array_size5641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal601_tree = 
            (Object)adaptor.create(char_literal601)
            ;
            adaptor.addChild(root_0, char_literal601_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:906:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal602=null;
        Token NUMBER_LITERAL603=null;

        Object char_literal602_tree=null;
        Object NUMBER_LITERAL603_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal602=(Token)match(input,133,FOLLOW_133_in_field_crap5651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal602_tree = 
            (Object)adaptor.create(char_literal602)
            ;
            adaptor.addChild(root_0, char_literal602_tree);
            }

            NUMBER_LITERAL603=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL603_tree = 
            (Object)adaptor.create(NUMBER_LITERAL603)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL603_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper604 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants605 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5665);
            method_modifier_wrapper604=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper604.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5667);
            method_declaration_variants605=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants605.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier606 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5679);
            method_modifier606=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier606.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set607=null;

        Object set607_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:916:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set607=(Token)input.LT(1);

            if ( input.LA(1)==122||input.LA(1)==126 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set607)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common608 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:919:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:919:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5716);
            method_declaration_common608=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common608.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:921:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal609=null;
        Token char_literal611=null;
        Token char_literal614=null;
        ObjcParser.type_declaration_return type_declaration610 =null;

        ObjcParser.method_name_return method_name612 =null;

        ObjcParser.method_params_return method_params613 =null;


        Object char_literal609_tree=null;
        Object char_literal611_tree=null;
        Object char_literal614_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:6: '(' type_declaration ')' method_name
            {
            char_literal609=(Token)match(input,118,FOLLOW_118_in_method_declaration_common5729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal609_tree = 
            (Object)adaptor.create(char_literal609)
            ;
            adaptor.addChild(root_0, char_literal609_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5731);
            type_declaration610=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration610.getTree());

            char_literal611=(Token)match(input,119,FOLLOW_119_in_method_declaration_common5733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal611_tree = 
            (Object)adaptor.create(char_literal611)
            ;
            adaptor.addChild(root_0, char_literal611_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5735);
            method_name612=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name612.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:44: ( method_params )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID||LA145_0==133) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5738);
                    method_params613=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params613.getTree());

                    }
                    break;

            }


            char_literal614=(Token)match(input,134,FOLLOW_134_in_method_declaration_common5741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal614_tree = 
            (Object)adaptor.create(char_literal614)
            ;
            adaptor.addChild(root_0, char_literal614_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal616=null;
        Token char_literal618=null;
        ObjcParser.method_modifier_return method_modifier615 =null;

        ObjcParser.type_declaration_return type_declaration617 =null;

        ObjcParser.method_name_return method_name619 =null;


        Object char_literal616_tree=null;
        Object char_literal618_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5753);
            method_modifier615=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier615.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:22: '(' type_declaration ')' method_name
            {
            char_literal616=(Token)match(input,118,FOLLOW_118_in_method_declaration_predicate5756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal616_tree = 
            (Object)adaptor.create(char_literal616)
            ;
            adaptor.addChild(root_0, char_literal616_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5758);
            type_declaration617=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration617.getTree());

            char_literal618=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate5760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal618_tree = 
            (Object)adaptor.create(char_literal618)
            ;
            adaptor.addChild(root_0, char_literal618_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5762);
            method_name619=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name619.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:928:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID620=null;

        Object ID620_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:929:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:929:5: ID
            {
            ID620=(Token)match(input,ID,FOLLOW_ID_in_method_name5780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID620);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 929:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:929:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param621 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( method_param )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==133) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5803);
            	    method_param621=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param621.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 933:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:935:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal623=null;
        Token char_literal624=null;
        Token char_literal626=null;
        ObjcParser.prefix_return prefix622 =null;

        ObjcParser.type_declaration_return type_declaration625 =null;

        ObjcParser.param_name_return param_name627 =null;


        Object char_literal623_tree=null;
        Object char_literal624_tree=null;
        Object char_literal626_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:5: ( prefix )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==ID) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5823);
                    prefix622=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix622.getTree());

                    }
                    break;

            }


            char_literal623=(Token)match(input,133,FOLLOW_133_in_method_param5826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal623);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:17: ( '(' type_declaration ')' )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==118) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:18: '(' type_declaration ')'
                    {
                    char_literal624=(Token)match(input,118,FOLLOW_118_in_method_param5829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal624);


                    pushFollow(FOLLOW_type_declaration_in_method_param5831);
                    type_declaration625=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration625.getTree());

                    char_literal626=(Token)match(input,119,FOLLOW_119_in_method_param5833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal626);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5837);
            param_name627=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name627.getTree());

            // AST REWRITE
            // elements: type_declaration, 119, prefix, 118, param_name, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 936:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_133.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:938:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID628=null;

        Object ID628_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:939:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:939:5: ID
            {
            ID628=(Token)match(input,ID,FOLLOW_ID_in_param_name5870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID628);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 939:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:939:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID629=null;

        Object ID629_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:11: ID
            {
            ID629=(Token)match(input,ID,FOLLOW_ID_in_prefix5889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID629);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 941:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:944:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL631=null;
        Token DEFINE_LITERAL634=null;
        ObjcParser.define_as_function_return define_as_function630 =null;

        ObjcParser.name_return name632 =null;

        ObjcParser.element_value_return element_value633 =null;

        ObjcParser.name_return name635 =null;


        Object DEFINE_LITERAL631_tree=null;
        Object DEFINE_LITERAL634_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration5918);
                    define_as_function630=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function630.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL631=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL631);


                    pushFollow(FOLLOW_name_in_define_declaration5934);
                    name632=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name632.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration5936);
                    element_value633=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value633.getTree());

                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 946:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL634=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL634);


                    pushFollow(FOLLOW_name_in_define_declaration5954);
                    name635=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name635.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 947:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:950:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL636=null;
        Token char_literal638=null;
        Token char_literal639=null;
        Token char_literal641=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper637 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper640 =null;


        Object DEFINE_LITERAL636_tree=null;
        Object char_literal638_tree=null;
        Object char_literal639_tree=null;
        Object char_literal641_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL636=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function5978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL636);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function5980);
            classical_method_call_wrapper637=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper637.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==167) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal638=(Token)match(input,167,FOLLOW_167_in_define_as_function5983); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_167.add(char_literal638);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:56: ( '{' )?
            	    int alt150=2;
            	    int LA150_0 = input.LA(1);

            	    if ( (LA150_0==197) ) {
            	        alt150=1;
            	    }
            	    switch (alt150) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:56: '{'
            	            {
            	            char_literal639=(Token)match(input,197,FOLLOW_197_in_define_as_function5985); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_197.add(char_literal639);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function5988);
            	    block_singleline_wrapper640=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper640.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:86: ( '}' )?
            	    int alt151=2;
            	    int LA151_0 = input.LA(1);

            	    if ( (LA151_0==201) ) {
            	        alt151=1;
            	    }
            	    switch (alt151) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:86: '}'
            	            {
            	            char_literal641=(Token)match(input,201,FOLLOW_201_in_define_as_function5990); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_201.add(char_literal641);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 951:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:5: ( type_declaration field_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:6: type_declaration field_name
        {
        pushFollow(FOLLOW_type_declaration_in_synpred1_Objc502);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_field_name_in_synpred1_Objc504);
        field_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc755);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1180);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1297);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1308);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred5_Objc1310);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred6_Objc1323);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred6_Objc1325);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1566);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,134,FOLLOW_134_in_synpred7_Objc1568); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc1585);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,184,FOLLOW_184_in_synpred8_Objc1587); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred9_Objc1604);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred9_Objc1606);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred10_Objc2192);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred10_Objc2194);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2782);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred12_Objc2795); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred12_Objc2797);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred12_Objc2799);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred12_Objc2801); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred12_Objc2803);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred13_Objc2840);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,118,FOLLOW_118_in_synpred13_Objc2842); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred14_Objc2902);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:30: ( access_wrapper name )*
        loop153:
        do {
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( ((LA153_0 >= 129 && LA153_0 <= 130)) ) {
                alt153=1;
            }


            switch (alt153) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred14_Objc2905);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred14_Objc2907);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop153;
            }
        } while (true);


        match(input,118,FOLLOW_118_in_synpred14_Objc2911); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: ( '&' )?
        int alt154=2;
        int LA154_0 = input.LA(1);

        if ( (LA154_0==116) ) {
            alt154=1;
        }
        switch (alt154) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred15_Objc2960); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred15_Objc2963);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred15_Objc2965); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==116||input.LA(1)==120 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred16_Objc3001);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred17_Objc3096);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3385);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred19_Objc3519);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:6: '(' type_cast_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred20_Objc3532); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred20_Objc3534);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:6: ( '&' )?
        int alt155=2;
        int LA155_0 = input.LA(1);

        if ( (LA155_0==116) ) {
            alt155=1;
        }
        switch (alt155) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred21_Objc3593); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred21_Objc3596);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred21_Objc3598); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred22_Objc4059);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4833);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred24_Objc4844);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred25_Objc4935);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred26_Objc4946);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:6: 'struct' ( typedef_name )? '{'
        {
        match(input,190,FOLLOW_190_in_synpred27_Objc5253); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:15: ( typedef_name )?
        int alt156=2;
        int LA156_0 = input.LA(1);

        if ( (LA156_0==ID) ) {
            alt156=1;
        }
        switch (alt156) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred27_Objc5255);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred27_Objc5258); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:6: 'union' ( typedef_name )? '{'
        {
        match(input,193,FOLLOW_193_in_synpred28_Objc5283); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:14: ( typedef_name )?
        int alt157=2;
        int LA157_0 = input.LA(1);

        if ( (LA157_0==ID) ) {
            alt157=1;
        }
        switch (alt157) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred28_Objc5285);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred28_Objc5288); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:6: 'enum' ( typedef_name )? '{'
        {
        match(input,178,FOLLOW_178_in_synpred29_Objc5313); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:13: ( typedef_name )?
        int alt158=2;
        int LA158_0 = input.LA(1);

        if ( (LA158_0==ID) ) {
            alt158=1;
        }
        switch (alt158) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred29_Objc5315);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred29_Objc5318); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5909); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred30_Objc5911);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,167,FOLLOW_167_in_synpred30_Objc5913); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // $ANTLR start synpred31_Objc
    public final void synpred31_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred31_Objc5925); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred31_Objc5927);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred31_Objc5929);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_Objc

    // Delegated rules

    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA149 dfa149 = new DFA149(this);
    static final String DFA2_eotS =
        "\u012b\uffff";
    static final String DFA2_eofS =
        "\u012b\uffff";
    static final String DFA2_minS =
        "\1\27\2\uffff\3\57\11\uffff\1\57\10\uffff\6\57\1\101\1\57\4\uffff"+
        "\1\57\1\170\15\57\3\uffff\4\57\3\uffff\1\57\1\170\14\57\10\uffff"+
        "\u00d7\0\1\uffff";
    static final String DFA2_maxS =
        "\1\u00c3\2\uffff\3\u00c5\11\uffff\1\57\10\uffff\1\u00c5\1\u00c3"+
        "\1\u00c5\1\123\1\u00c5\1\u00c3\1\u009b\1\u00c3\4\uffff\1\u00ad\1"+
        "\170\3\u00c5\2\u00c2\1\u00bc\1\u00ad\1\u00ba\1\u00bc\1\u00ad\2\u00c9"+
        "\1\123\3\uffff\3\u00c9\1\u00c3\3\uffff\1\u00ad\1\170\3\u00c5\2\u00c2"+
        "\1\u00bc\1\u00ad\1\u00ba\1\u00bc\1\u00ad\2\u00c9\10\uffff\u00d7"+
        "\0\1\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\2\1\3\uffff\7\1\1\2\1\3\1\uffff\1\5\1\6\1\7\1\10\1\11\1"+
        "\13\1\uffff\1\14\10\uffff\3\1\20\uffff\2\1\5\uffff\2\1\20\uffff"+
        "\1\4\u00dd\uffff\1\12";
    static final String DFA2_specialS =
        "\1\0\27\uffff\1\1\1\uffff\1\2\1\uffff\1\3\66\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
        "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1"+
        "\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
        "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
        "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
        "\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d"+
        "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095"+
        "\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d"+
        "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5"+
        "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad"+
        "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5"+
        "\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd"+
        "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5"+
        "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
        "\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
        "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\22\27\uffff\1\14\21\uffff\1\25\21\uffff\1\25\42\uffff\1\2"+
            "\17\uffff\1\27\14\uffff\1\16\3\uffff\1\15\1\20\4\uffff\1\17"+
            "\17\uffff\1\7\4\uffff\1\4\1\21\2\uffff\1\1\2\uffff\1\11\1\12"+
            "\1\uffff\1\13\1\24\1\3\1\uffff\1\23\1\5\1\10\1\6",
            "",
            "",
            "\1\30\u0095\uffff\1\31",
            "\1\32\u0095\uffff\1\33",
            "\1\34\u0095\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\104\uffff\1\40\3\uffff\1\41\15\uffff\1\16\76\uffff\1"+
            "\37",
            "\1\57\21\uffff\1\61\21\uffff\1\60\42\uffff\1\45\66\uffff\1"+
            "\52\4\uffff\1\47\3\uffff\1\44\2\uffff\1\54\1\55\1\uffff\1\56"+
            "\1\uffff\1\46\2\uffff\1\50\1\53\1\51",
            "\1\64\104\uffff\1\63\21\uffff\1\16\76\uffff\1\62",
            "\1\66\21\uffff\1\70\21\uffff\1\67",
            "\1\73\104\uffff\1\72\21\uffff\1\16\76\uffff\1\71",
            "\1\110\21\uffff\1\112\21\uffff\1\111\42\uffff\1\76\66\uffff"+
            "\1\103\4\uffff\1\100\3\uffff\1\75\2\uffff\1\105\1\106\1\uffff"+
            "\1\107\1\uffff\1\77\2\uffff\1\101\1\104\1\102",
            "\1\114\21\uffff\1\114\46\uffff\1\114\3\uffff\1\114\7\uffff"+
            "\1\16\1\114\15\uffff\1\114\3\uffff\1\114\1\uffff\1\114",
            "\1\136\21\uffff\1\140\21\uffff\1\137\42\uffff\1\124\66\uffff"+
            "\1\131\4\uffff\1\126\3\uffff\1\123\2\uffff\1\133\1\134\1\uffff"+
            "\1\135\1\uffff\1\125\2\uffff\1\127\1\132\1\130",
            "",
            "",
            "",
            "",
            "\1\146\104\uffff\1\145\3\uffff\1\142\16\uffff\1\141\36\uffff"+
            "\1\143\6\uffff\1\144",
            "\1\147",
            "\1\150\u0095\uffff\1\151",
            "\1\152\u0095\uffff\1\153",
            "\1\154\u0095\uffff\1\155",
            "\1\164\175\uffff\1\156\10\uffff\1\161\2\uffff\1\160\1\162\1"+
            "\uffff\1\163\5\uffff\1\157",
            "\1\172\u0086\uffff\1\167\2\uffff\1\166\1\170\1\uffff\1\171"+
            "\5\uffff\1\165",
            "\1\177\u0086\uffff\1\174\2\uffff\1\173\1\175\1\uffff\1\176",
            "\1\u0084\104\uffff\1\u0083\3\uffff\1\u0080\55\uffff\1\u0081"+
            "\6\uffff\1\u0082",
            "\1\u008a\104\uffff\1\u0089\3\uffff\1\u0086\55\uffff\1\u0087"+
            "\6\uffff\1\u0088\13\uffff\1\u0085\1\u008b",
            "\1\u0091\104\uffff\1\u0090\3\uffff\1\u008d\55\uffff\1\u008e"+
            "\6\uffff\1\u008f\13\uffff\1\u008c\2\uffff\1\u0092",
            "\1\u0097\104\uffff\1\u0096\3\uffff\1\u0093\55\uffff\1\u0094"+
            "\6\uffff\1\u0095",
            "\1\u00a4\21\uffff\1\u00a6\21\uffff\1\u00a5\42\uffff\1\u009a"+
            "\66\uffff\1\u009f\4\uffff\1\u009c\3\uffff\1\u0099\2\uffff\1"+
            "\u00a1\1\u00a2\1\uffff\1\u00a3\1\uffff\1\u009b\2\uffff\1\u009d"+
            "\1\u00a0\1\u009e\5\uffff\1\u0098",
            "\1\u00b3\21\uffff\1\u00b5\21\uffff\1\u00b4\42\uffff\1\u00a9"+
            "\66\uffff\1\u00ae\4\uffff\1\u00ab\3\uffff\1\u00a8\2\uffff\1"+
            "\u00b0\1\u00b1\1\uffff\1\u00b2\1\uffff\1\u00aa\2\uffff\1\u00ac"+
            "\1\u00af\1\u00ad\5\uffff\1\u00a7",
            "\1\u00b6\21\uffff\1\u00b8\21\uffff\1\u00b7",
            "",
            "",
            "",
            "\1\u00bc\21\uffff\1\u00be\21\uffff\1\u00bd\41\uffff\1\u00b9"+
            "\3\uffff\1\u00b9\2\uffff\1\u00b9\1\u00ba\2\uffff\1\u00b9\3\uffff"+
            "\1\u00b9\4\uffff\1\u00b9\1\uffff\1\u00b9\4\uffff\1\u00b9\66"+
            "\uffff\1\u00b9\1\uffff\1\u00bb",
            "\1\u00c0\21\uffff\1\u00c2\21\uffff\1\u00c1\165\uffff\1\u00bf",
            "\1\u00c4\21\uffff\1\u00c6\21\uffff\1\u00c5\165\uffff\1\u00c3",
            "\1\u00d2\21\uffff\1\u00d4\21\uffff\1\u00d3\42\uffff\1\u00c8"+
            "\66\uffff\1\u00cd\4\uffff\1\u00ca\3\uffff\1\u00c7\2\uffff\1"+
            "\u00cf\1\u00d0\1\uffff\1\u00d1\1\uffff\1\u00c9\2\uffff\1\u00cb"+
            "\1\u00ce\1\u00cc",
            "",
            "",
            "",
            "\1\u00da\104\uffff\1\u00d9\3\uffff\1\u00d6\16\uffff\1\u00d5"+
            "\36\uffff\1\u00d7\6\uffff\1\u00d8",
            "\1\u00db",
            "\1\u00dc\u0095\uffff\1\u00dd",
            "\1\u00de\u0095\uffff\1\u00df",
            "\1\u00e0\u0095\uffff\1\u00e1",
            "\1\u00e8\175\uffff\1\u00e2\10\uffff\1\u00e5\2\uffff\1\u00e4"+
            "\1\u00e6\1\uffff\1\u00e7\5\uffff\1\u00e3",
            "\1\u00ee\u0086\uffff\1\u00eb\2\uffff\1\u00ea\1\u00ec\1\uffff"+
            "\1\u00ed\5\uffff\1\u00e9",
            "\1\u00f3\u0086\uffff\1\u00f0\2\uffff\1\u00ef\1\u00f1\1\uffff"+
            "\1\u00f2",
            "\1\u00f8\104\uffff\1\u00f7\3\uffff\1\u00f4\55\uffff\1\u00f5"+
            "\6\uffff\1\u00f6",
            "\1\u00fe\104\uffff\1\u00fd\3\uffff\1\u00fa\55\uffff\1\u00fb"+
            "\6\uffff\1\u00fc\13\uffff\1\u00f9\1\u00ff",
            "\1\u0105\104\uffff\1\u0104\3\uffff\1\u0101\55\uffff\1\u0102"+
            "\6\uffff\1\u0103\13\uffff\1\u0100\2\uffff\1\u0106",
            "\1\u010b\104\uffff\1\u010a\3\uffff\1\u0107\55\uffff\1\u0108"+
            "\6\uffff\1\u0109",
            "\1\u0118\21\uffff\1\u011a\21\uffff\1\u0119\42\uffff\1\u010e"+
            "\66\uffff\1\u0113\4\uffff\1\u0110\3\uffff\1\u010d\2\uffff\1"+
            "\u0115\1\u0116\1\uffff\1\u0117\1\uffff\1\u010f\2\uffff\1\u0111"+
            "\1\u0114\1\u0112\5\uffff\1\u010c",
            "\1\u0127\21\uffff\1\u0129\21\uffff\1\u0128\42\uffff\1\u011d"+
            "\66\uffff\1\u0122\4\uffff\1\u011f\3\uffff\1\u011c\2\uffff\1"+
            "\u0124\1\u0125\1\uffff\1\u0126\1\uffff\1\u011e\2\uffff\1\u0120"+
            "\1\u0123\1\u0121\5\uffff\1\u011b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "120:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_0==182) && (synpred1_Objc())) {s = 1;}

                        else if ( (LA2_0==118) && (synpred1_Objc())) {s = 2;}

                        else if ( (LA2_0==190) ) {s = 3;}

                        else if ( (LA2_0==178) ) {s = 4;}

                        else if ( (LA2_0==193) ) {s = 5;}

                        else if ( (LA2_0==195) && (synpred1_Objc())) {s = 6;}

                        else if ( (LA2_0==173) && (synpred1_Objc())) {s = 7;}

                        else if ( (LA2_0==194) && (synpred1_Objc())) {s = 8;}

                        else if ( (LA2_0==185) && (synpred1_Objc())) {s = 9;}

                        else if ( (LA2_0==186) && (synpred1_Objc())) {s = 10;}

                        else if ( (LA2_0==188) && (synpred1_Objc())) {s = 11;}

                        else if ( (LA2_0==ID) && (synpred1_Objc())) {s = 12;}

                        else if ( (LA2_0==151) ) {s = 13;}

                        else if ( (LA2_0==147) ) {s = 14;}

                        else if ( (LA2_0==157) ) {s = 15;}

                        else if ( (LA2_0==152) ) {s = 16;}

                        else if ( (LA2_0==179) ) {s = 17;}

                        else if ( (LA2_0==DEFINE_LITERAL) ) {s = 18;}

                        else if ( (LA2_0==192) ) {s = 19;}

                        else if ( (LA2_0==189) ) {s = 20;}

                        else if ( (LA2_0==MULTI_COMMENT_LIT||LA2_0==SINGLE_COMMENT_LIT) ) {s = 21;}

                        else if ( (LA2_0==134) ) {s = 23;}

                         
                        input.seek(index2_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_24==197) ) {s = 31;}

                        else if ( (LA2_24==116) && (synpred1_Objc())) {s = 32;}

                        else if ( (LA2_24==120) && (synpred1_Objc())) {s = 33;}

                        else if ( (LA2_24==ID) && (synpred1_Objc())) {s = 34;}

                        else if ( (LA2_24==134) ) {s = 14;}

                         
                        input.seek(index2_24);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_26==197) ) {s = 50;}

                        else if ( (LA2_26==116) && (synpred1_Objc())) {s = 51;}

                        else if ( (LA2_26==ID) && (synpred1_Objc())) {s = 52;}

                        else if ( (LA2_26==134) ) {s = 14;}

                         
                        input.seek(index2_26);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_28==197) ) {s = 57;}

                        else if ( (LA2_28==116) && (synpred1_Objc())) {s = 58;}

                        else if ( (LA2_28==ID) && (synpred1_Objc())) {s = 59;}

                        else if ( (LA2_28==134) ) {s = 14;}

                         
                        input.seek(index2_28);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_83);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_84);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_85);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_86);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_87);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_88);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_89);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_90);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_91);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_92);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_93);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_94);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_95);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_96);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_97);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_98);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_99);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_100);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_101);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_102);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_103);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_104);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_105);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_106);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_107);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_108);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_109);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_110);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_111);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_112);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_113);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_114);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_115);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_116);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_117);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_118);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_119);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_120);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_121);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_122);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_123);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_124);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_125);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_126);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_127);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_128);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_129);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_130);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_131);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_132);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_133);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_134);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_135);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_136);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_137);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_138);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_139);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_140);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_141);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_142);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_143);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_144);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_145);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_146);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_147);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_148);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_149);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_150);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_151);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_152);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_153);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_154);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_155);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_156);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_157);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_158);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_159);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_160);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_161);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_162);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_163);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_164);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_165);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_166);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_167);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_168);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_169);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_170);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_171);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_172);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_173);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_174);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_175);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_176);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_177);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_178);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_179);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_180);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_181);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_182);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_183);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_184);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_185);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_186);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_187);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_188);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_189 = input.LA(1);

                         
                        int index2_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_189);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_190 = input.LA(1);

                         
                        int index2_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_190);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_191 = input.LA(1);

                         
                        int index2_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_191);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_192 = input.LA(1);

                         
                        int index2_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_192);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_193 = input.LA(1);

                         
                        int index2_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_193);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_194 = input.LA(1);

                         
                        int index2_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_194);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_195 = input.LA(1);

                         
                        int index2_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_195);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_196 = input.LA(1);

                         
                        int index2_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_196);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_197 = input.LA(1);

                         
                        int index2_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_197);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_198 = input.LA(1);

                         
                        int index2_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_198);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_199 = input.LA(1);

                         
                        int index2_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_199);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_200 = input.LA(1);

                         
                        int index2_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_200);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_201 = input.LA(1);

                         
                        int index2_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_201);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_202 = input.LA(1);

                         
                        int index2_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_202);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_203 = input.LA(1);

                         
                        int index2_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_203);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_204 = input.LA(1);

                         
                        int index2_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_204);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_205 = input.LA(1);

                         
                        int index2_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_205);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_206 = input.LA(1);

                         
                        int index2_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_206);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_207 = input.LA(1);

                         
                        int index2_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_207);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_208 = input.LA(1);

                         
                        int index2_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_208);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_209 = input.LA(1);

                         
                        int index2_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_209);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_210 = input.LA(1);

                         
                        int index2_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_210);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_211 = input.LA(1);

                         
                        int index2_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_211);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_212 = input.LA(1);

                         
                        int index2_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_212);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_213 = input.LA(1);

                         
                        int index2_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_213);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA2_214 = input.LA(1);

                         
                        int index2_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_214);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA2_215 = input.LA(1);

                         
                        int index2_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_215);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA2_216 = input.LA(1);

                         
                        int index2_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_216);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA2_217 = input.LA(1);

                         
                        int index2_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_217);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA2_218 = input.LA(1);

                         
                        int index2_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_218);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA2_219 = input.LA(1);

                         
                        int index2_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_219);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA2_220 = input.LA(1);

                         
                        int index2_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_220);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA2_221 = input.LA(1);

                         
                        int index2_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_221);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA2_222 = input.LA(1);

                         
                        int index2_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_222);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA2_223 = input.LA(1);

                         
                        int index2_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_223);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA2_224 = input.LA(1);

                         
                        int index2_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_224);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA2_225 = input.LA(1);

                         
                        int index2_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_225);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA2_226 = input.LA(1);

                         
                        int index2_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_226);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA2_227 = input.LA(1);

                         
                        int index2_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_227);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA2_228 = input.LA(1);

                         
                        int index2_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_228);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA2_229 = input.LA(1);

                         
                        int index2_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_229);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA2_230 = input.LA(1);

                         
                        int index2_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_230);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA2_231 = input.LA(1);

                         
                        int index2_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_231);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA2_232 = input.LA(1);

                         
                        int index2_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_232);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA2_233 = input.LA(1);

                         
                        int index2_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_233);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA2_234 = input.LA(1);

                         
                        int index2_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_234);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA2_235 = input.LA(1);

                         
                        int index2_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_235);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA2_236 = input.LA(1);

                         
                        int index2_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_236);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA2_237 = input.LA(1);

                         
                        int index2_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_237);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA2_238 = input.LA(1);

                         
                        int index2_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_238);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA2_239 = input.LA(1);

                         
                        int index2_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_239);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA2_240 = input.LA(1);

                         
                        int index2_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_240);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA2_241 = input.LA(1);

                         
                        int index2_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_241);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA2_242 = input.LA(1);

                         
                        int index2_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_242);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA2_243 = input.LA(1);

                         
                        int index2_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_243);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA2_244 = input.LA(1);

                         
                        int index2_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_244);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA2_245 = input.LA(1);

                         
                        int index2_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_245);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA2_246 = input.LA(1);

                         
                        int index2_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_246);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA2_247 = input.LA(1);

                         
                        int index2_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_247);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA2_248 = input.LA(1);

                         
                        int index2_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_248);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA2_249 = input.LA(1);

                         
                        int index2_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_249);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA2_250 = input.LA(1);

                         
                        int index2_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_250);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA2_251 = input.LA(1);

                         
                        int index2_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_251);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA2_252 = input.LA(1);

                         
                        int index2_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_252);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA2_253 = input.LA(1);

                         
                        int index2_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_253);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA2_254 = input.LA(1);

                         
                        int index2_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_254);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA2_255 = input.LA(1);

                         
                        int index2_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_255);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA2_256 = input.LA(1);

                         
                        int index2_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_256);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA2_257 = input.LA(1);

                         
                        int index2_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_257);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA2_258 = input.LA(1);

                         
                        int index2_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_258);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA2_259 = input.LA(1);

                         
                        int index2_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_259);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA2_260 = input.LA(1);

                         
                        int index2_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_260);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA2_261 = input.LA(1);

                         
                        int index2_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_261);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA2_262 = input.LA(1);

                         
                        int index2_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_262);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA2_263 = input.LA(1);

                         
                        int index2_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_263);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA2_264 = input.LA(1);

                         
                        int index2_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_264);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA2_265 = input.LA(1);

                         
                        int index2_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_265);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA2_266 = input.LA(1);

                         
                        int index2_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_266);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA2_267 = input.LA(1);

                         
                        int index2_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_267);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA2_268 = input.LA(1);

                         
                        int index2_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_268);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA2_269 = input.LA(1);

                         
                        int index2_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_269);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA2_270 = input.LA(1);

                         
                        int index2_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_270);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA2_271 = input.LA(1);

                         
                        int index2_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_271);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA2_272 = input.LA(1);

                         
                        int index2_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_272);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA2_273 = input.LA(1);

                         
                        int index2_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_273);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA2_274 = input.LA(1);

                         
                        int index2_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_274);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA2_275 = input.LA(1);

                         
                        int index2_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_275);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA2_276 = input.LA(1);

                         
                        int index2_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_276);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA2_277 = input.LA(1);

                         
                        int index2_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_277);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA2_278 = input.LA(1);

                         
                        int index2_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_278);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA2_279 = input.LA(1);

                         
                        int index2_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_279);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA2_280 = input.LA(1);

                         
                        int index2_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_280);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA2_281 = input.LA(1);

                         
                        int index2_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_281);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA2_282 = input.LA(1);

                         
                        int index2_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_282);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA2_283 = input.LA(1);

                         
                        int index2_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_283);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA2_284 = input.LA(1);

                         
                        int index2_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_284);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA2_285 = input.LA(1);

                         
                        int index2_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_285);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA2_286 = input.LA(1);

                         
                        int index2_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_286);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA2_287 = input.LA(1);

                         
                        int index2_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_287);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA2_288 = input.LA(1);

                         
                        int index2_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_288);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA2_289 = input.LA(1);

                         
                        int index2_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_289);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA2_290 = input.LA(1);

                         
                        int index2_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_290);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA2_291 = input.LA(1);

                         
                        int index2_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_291);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA2_292 = input.LA(1);

                         
                        int index2_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_292);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA2_293 = input.LA(1);

                         
                        int index2_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_293);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA2_294 = input.LA(1);

                         
                        int index2_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_294);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA2_295 = input.LA(1);

                         
                        int index2_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_295);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA2_296 = input.LA(1);

                         
                        int index2_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_296);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA2_297 = input.LA(1);

                         
                        int index2_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 298;}

                         
                        input.seek(index2_297);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA18_eotS =
        "\134\uffff";
    static final String DFA18_eofS =
        "\134\uffff";
    static final String DFA18_minS =
        "\3\57\37\uffff\1\57\2\uffff\1\13\22\uffff\1\165\4\uffff\1\161\4"+
        "\uffff\1\161\11\uffff\1\0\10\uffff\1\0\5\uffff\1\0";
    static final String DFA18_maxS =
        "\1\u00c5\1\u00c7\1\u00c3\37\uffff\1\57\2\uffff\1\u00ca\22\uffff"+
        "\1\u00c7\4\uffff\1\u00c8\4\uffff\1\u00c8\11\uffff\1\0\10\uffff\1"+
        "\0\5\uffff\1\0";
    static final String DFA18_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\5\uffff\14\3\1\uffff\4\3\1\uffff\4\3\1\uffff\7\3\1"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\1\uffff";
    static final String DFA18_specialS =
        "\1\0\1\1\1\2\42\uffff\1\3\22\uffff\1\4\4\uffff\1\5\4\uffff\1\6\11"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11}>";
    static final String[] DFA18_transitionS = {
            "\1\1\21\uffff\1\40\21\uffff\1\40\40\uffff\1\3\1\uffff\1\2\1"+
            "\uffff\1\4\15\uffff\1\32\31\uffff\1\17\1\uffff\1\21\1\20\2\uffff"+
            "\1\37\4\uffff\1\33\1\uffff\1\5\1\34\1\uffff\1\23\1\25\1\5\1"+
            "\uffff\1\30\1\35\1\5\1\24\1\uffff\2\5\1\27\1\5\1\22\1\5\1\26"+
            "\1\uffff\3\5\1\31\1\36",
            "\1\5\104\uffff\1\5\1\46\1\43\1\uffff\1\5\1\46\1\uffff\1\44"+
            "\1\46\2\uffff\1\44\1\46\2\42\1\uffff\1\46\4\uffff\1\46\1\uffff"+
            "\1\46\4\uffff\1\46\25\uffff\1\45\6\uffff\1\5\31\uffff\1\46",
            "\1\64\106\uffff\1\55\1\uffff\1\5\64\uffff\1\57\4\uffff\1\67"+
            "\3\uffff\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1\uffff\1\65\2"+
            "\uffff\1\66\1\60\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\70",
            "",
            "",
            "\1\103\5\uffff\1\101\35\uffff\1\75\24\uffff\1\102\23\uffff"+
            "\1\77\1\100\26\uffff\1\107\3\uffff\1\74\1\uffff\1\72\1\uffff"+
            "\1\76\2\uffff\1\111\2\uffff\1\71\1\111\37\uffff\1\73\6\uffff"+
            "\1\106\1\uffff\1\5\1\104\1\105\37\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\116\1\113\2\uffff\1\116\1\uffff\1\115\1\116\2\uffff\1\115"+
            "\1\116\2\114\1\uffff\1\116\4\uffff\1\116\1\uffff\1\116\4\uffff"+
            "\1\116\66\uffff\1\116",
            "",
            "",
            "",
            "",
            "\1\123\1\uffff\2\123\1\uffff\1\121\1\uffff\1\123\1\uffff\1"+
            "\123\1\122\2\uffff\1\123\1\122\1\uffff\2\120\1\123\3\uffff\2"+
            "\123\1\uffff\6\123\1\uffff\1\124\24\uffff\1\117\1\uffff\1\125"+
            "\1\123\34\uffff\1\123\1\uffff\1\123",
            "",
            "",
            "",
            "",
            "\1\131\1\uffff\2\131\1\uffff\1\127\1\uffff\1\131\1\uffff\1"+
            "\131\1\130\2\uffff\1\131\1\130\1\uffff\2\126\1\131\3\uffff\2"+
            "\131\1\uffff\6\131\1\uffff\1\132\26\uffff\1\133\1\131\34\uffff"+
            "\1\131\1\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "263:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_0==ID) ) {s = 1;}

                        else if ( (LA18_0==118) ) {s = 2;}

                        else if ( (LA18_0==116) && (synpred6_Objc())) {s = 3;}

                        else if ( (LA18_0==120) && (synpred6_Objc())) {s = 4;}

                        else if ( (LA18_0==173||LA18_0==178||LA18_0==182||(LA18_0 >= 185 && LA18_0 <= 186)||LA18_0==188||LA18_0==190||(LA18_0 >= 193 && LA18_0 <= 195)) ) {s = 5;}

                        else if ( (LA18_0==160) ) {s = 15;}

                        else if ( (LA18_0==163) ) {s = 16;}

                        else if ( (LA18_0==162) ) {s = 17;}

                        else if ( (LA18_0==189) ) {s = 18;}

                        else if ( (LA18_0==176) ) {s = 19;}

                        else if ( (LA18_0==183) ) {s = 20;}

                        else if ( (LA18_0==177) ) {s = 21;}

                        else if ( (LA18_0==191) ) {s = 22;}

                        else if ( (LA18_0==187) ) {s = 23;}

                        else if ( (LA18_0==180) ) {s = 24;}

                        else if ( (LA18_0==196) ) {s = 25;}

                        else if ( (LA18_0==134) ) {s = 26;}

                        else if ( (LA18_0==171) ) {s = 27;}

                        else if ( (LA18_0==174) ) {s = 28;}

                        else if ( (LA18_0==181) ) {s = 29;}

                        else if ( (LA18_0==197) ) {s = 30;}

                        else if ( (LA18_0==166) ) {s = 31;}

                        else if ( (LA18_0==MULTI_COMMENT_LIT||LA18_0==SINGLE_COMMENT_LIT) ) {s = 32;}

                         
                        input.seek(index18_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_1 >= 129 && LA18_1 <= 130)) ) {s = 34;}

                        else if ( (LA18_1==118) && (synpred4_Objc())) {s = 35;}

                        else if ( (LA18_1==123||LA18_1==127) && (synpred5_Objc())) {s = 36;}

                        else if ( (LA18_1==166) ) {s = 37;}

                        else if ( (LA18_1==117||LA18_1==121||LA18_1==124||LA18_1==128||LA18_1==132||LA18_1==137||LA18_1==139||LA18_1==144||LA18_1==199) && (synpred6_Objc())) {s = 38;}

                        else if ( (LA18_1==ID||LA18_1==116||LA18_1==120||LA18_1==173) ) {s = 5;}

                         
                        input.seek(index18_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_2==120) ) {s = 5;}

                        else if ( (LA18_2==182) && (synpred6_Objc())) {s = 44;}

                        else if ( (LA18_2==118) && (synpred6_Objc())) {s = 45;}

                        else if ( (LA18_2==195) && (synpred6_Objc())) {s = 46;}

                        else if ( (LA18_2==173) && (synpred6_Objc())) {s = 47;}

                        else if ( (LA18_2==194) && (synpred6_Objc())) {s = 48;}

                        else if ( (LA18_2==185) && (synpred6_Objc())) {s = 49;}

                        else if ( (LA18_2==186) && (synpred6_Objc())) {s = 50;}

                        else if ( (LA18_2==188) && (synpred6_Objc())) {s = 51;}

                        else if ( (LA18_2==ID) && (synpred6_Objc())) {s = 52;}

                        else if ( (LA18_2==190) && (synpred6_Objc())) {s = 53;}

                        else if ( (LA18_2==193) && (synpred6_Objc())) {s = 54;}

                        else if ( (LA18_2==178) && (synpred6_Objc())) {s = 55;}

                         
                        input.seek(index18_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_37==126) && (synpred6_Objc())) {s = 57;}

                        else if ( (LA18_37==118) && (synpred6_Objc())) {s = 58;}

                        else if ( (LA18_37==159) && (synpred6_Objc())) {s = 59;}

                        else if ( (LA18_37==116) && (synpred6_Objc())) {s = 60;}

                        else if ( (LA18_37==ID) ) {s = 61;}

                        else if ( (LA18_37==120) && (synpred6_Objc())) {s = 62;}

                        else if ( (LA18_37==STRING_LITERAL) && (synpred6_Objc())) {s = 63;}

                        else if ( (LA18_37==STRING_OBJC) && (synpred6_Objc())) {s = 64;}

                        else if ( (LA18_37==CHAR_LITERAL) && (synpred6_Objc())) {s = 65;}

                        else if ( (LA18_37==NUMBER_LITERAL) ) {s = 66;}

                        else if ( (LA18_37==BOOL_LITERAL) && (synpred6_Objc())) {s = 67;}

                        else if ( (LA18_37==169) && (synpred6_Objc())) {s = 68;}

                        else if ( (LA18_37==170) && (synpred6_Objc())) {s = 69;}

                        else if ( (LA18_37==166) && (synpred6_Objc())) {s = 70;}

                        else if ( (LA18_37==112) && (synpred6_Objc())) {s = 71;}

                        else if ( (LA18_37==202) && (synpred6_Objc())) {s = 72;}

                        else if ( (LA18_37==123||LA18_37==127) && (synpred6_Objc())) {s = 73;}

                        else if ( (LA18_37==168) ) {s = 5;}

                         
                        input.seek(index18_37);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_56==118) && (synpred4_Objc())) {s = 75;}

                        else if ( ((LA18_56 >= 129 && LA18_56 <= 130)) ) {s = 76;}

                        else if ( (LA18_56==123||LA18_56==127) && (synpred5_Objc())) {s = 77;}

                        else if ( (LA18_56==117||LA18_56==121||LA18_56==124||LA18_56==128||LA18_56==132||LA18_56==137||LA18_56==139||LA18_56==144||LA18_56==199) && (synpred6_Objc())) {s = 78;}

                         
                        input.seek(index18_56);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_61==166) && (synpred6_Objc())) {s = 79;}

                        else if ( ((LA18_61 >= 129 && LA18_61 <= 130)) && (synpred6_Objc())) {s = 80;}

                        else if ( (LA18_61==118) && (synpred6_Objc())) {s = 81;}

                        else if ( (LA18_61==123||LA18_61==127) && (synpred6_Objc())) {s = 82;}

                        else if ( (LA18_61==113||(LA18_61 >= 115 && LA18_61 <= 116)||LA18_61==120||LA18_61==122||LA18_61==126||LA18_61==131||(LA18_61 >= 135 && LA18_61 <= 136)||(LA18_61 >= 138 && LA18_61 <= 143)||LA18_61==169||LA18_61==198||LA18_61==200) && (synpred6_Objc())) {s = 83;}

                        else if ( (LA18_61==145) && (synpred6_Objc())) {s = 84;}

                        else if ( (LA18_61==168) ) {s = 85;}

                         
                        input.seek(index18_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_66 >= 129 && LA18_66 <= 130)) && (synpred6_Objc())) {s = 86;}

                        else if ( (LA18_66==118) && (synpred6_Objc())) {s = 87;}

                        else if ( (LA18_66==123||LA18_66==127) && (synpred6_Objc())) {s = 88;}

                        else if ( (LA18_66==113||(LA18_66 >= 115 && LA18_66 <= 116)||LA18_66==120||LA18_66==122||LA18_66==126||LA18_66==131||(LA18_66 >= 135 && LA18_66 <= 136)||(LA18_66 >= 138 && LA18_66 <= 143)||LA18_66==169||LA18_66==198||LA18_66==200) && (synpred6_Objc())) {s = 89;}

                        else if ( (LA18_66==145) && (synpred6_Objc())) {s = 90;}

                        else if ( (LA18_66==168) ) {s = 91;}

                         
                        input.seek(index18_66);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_76 = input.LA(1);

                         
                        int index18_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 75;}

                        else if ( (synpred5_Objc()) ) {s = 77;}

                        else if ( (synpred6_Objc()) ) {s = 90;}

                         
                        input.seek(index18_76);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_85 = input.LA(1);

                         
                        int index18_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_85);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_91 = input.LA(1);

                         
                        int index18_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_91);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA22_eotS =
        "\104\uffff";
    static final String DFA22_eofS =
        "\104\uffff";
    static final String DFA22_minS =
        "\3\57\16\uffff\1\13\27\uffff\1\161\4\uffff\1\161\16\uffff\1\0\5"+
        "\uffff\1\0";
    static final String DFA22_maxS =
        "\1\u00c3\1\u00c7\1\u00c3\16\uffff\1\u00ca\27\uffff\1\u00c8\4\uffff"+
        "\1\u00c8\16\uffff\1\0\5\uffff\1\0";
    static final String DFA22_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\1\1\2\1\uffff\2\3\5\uffff\20\3\1\uffff"+
        "\4\3\1\uffff\7\3\1\uffff\6\3\1\uffff\5\3\1\uffff";
    static final String DFA22_specialS =
        "\1\0\1\1\1\2\16\uffff\1\3\27\uffff\1\4\4\uffff\1\5\16\uffff\1\6"+
        "\5\uffff\1\7}>";
    static final String[] DFA22_transitionS = {
            "\1\1\104\uffff\1\3\1\uffff\1\2\1\uffff\1\4\64\uffff\1\5\4\uffff"+
            "\1\5\3\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff\1\5\2\uffff"+
            "\3\5",
            "\1\5\104\uffff\1\5\1\23\2\uffff\1\5\1\23\2\uffff\1\23\3\uffff"+
            "\1\23\2\22\1\uffff\1\23\1\uffff\1\17\2\uffff\1\23\1\uffff\1"+
            "\23\4\uffff\1\23\25\uffff\1\21\6\uffff\1\5\12\uffff\1\20\16"+
            "\uffff\1\23",
            "\1\41\106\uffff\1\32\1\uffff\1\5\64\uffff\1\34\4\uffff\1\44"+
            "\3\uffff\1\31\2\uffff\1\36\1\37\1\uffff\1\40\1\uffff\1\42\2"+
            "\uffff\1\43\1\35\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\5\uffff\1\55\35\uffff\1\51\24\uffff\1\56\23\uffff\1\53"+
            "\1\54\26\uffff\1\63\3\uffff\1\50\1\uffff\1\46\1\uffff\1\52\2"+
            "\uffff\1\65\2\uffff\1\45\1\65\37\uffff\1\47\6\uffff\1\62\1\uffff"+
            "\1\5\1\60\1\61\37\uffff\1\64",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\73\1\uffff\2\73\1\uffff\1\71\1\uffff\1\73\1\uffff\1\73\1"+
            "\72\2\uffff\1\73\1\72\1\uffff\2\70\1\73\3\uffff\2\73\1\uffff"+
            "\6\73\1\uffff\1\74\24\uffff\1\67\1\uffff\1\75\1\73\34\uffff"+
            "\1\73\1\uffff\1\73",
            "",
            "",
            "",
            "",
            "\1\101\1\uffff\2\101\1\uffff\1\77\1\uffff\1\101\1\uffff\1\101"+
            "\1\100\2\uffff\1\101\1\100\1\uffff\2\76\1\101\3\uffff\2\101"+
            "\1\uffff\6\101\1\uffff\1\102\26\uffff\1\103\1\101\34\uffff\1"+
            "\101\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "308:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_0==ID) ) {s = 1;}

                        else if ( (LA22_0==118) ) {s = 2;}

                        else if ( (LA22_0==116) && (synpred9_Objc())) {s = 3;}

                        else if ( (LA22_0==120) && (synpred9_Objc())) {s = 4;}

                        else if ( (LA22_0==173||LA22_0==178||LA22_0==182||(LA22_0 >= 185 && LA22_0 <= 186)||LA22_0==188||LA22_0==190||(LA22_0 >= 193 && LA22_0 <= 195)) ) {s = 5;}

                         
                        input.seek(index22_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_1==134) && (synpred7_Objc())) {s = 15;}

                        else if ( (LA22_1==184) && (synpred8_Objc())) {s = 16;}

                        else if ( (LA22_1==166) ) {s = 17;}

                        else if ( ((LA22_1 >= 129 && LA22_1 <= 130)) && (synpred9_Objc())) {s = 18;}

                        else if ( (LA22_1==117||LA22_1==121||LA22_1==124||LA22_1==128||LA22_1==132||LA22_1==137||LA22_1==139||LA22_1==144||LA22_1==199) && (synpred9_Objc())) {s = 19;}

                        else if ( (LA22_1==ID||LA22_1==116||LA22_1==120||LA22_1==173) ) {s = 5;}

                         
                        input.seek(index22_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_2==120) ) {s = 5;}

                        else if ( (LA22_2==182) && (synpred9_Objc())) {s = 25;}

                        else if ( (LA22_2==118) && (synpred9_Objc())) {s = 26;}

                        else if ( (LA22_2==195) && (synpred9_Objc())) {s = 27;}

                        else if ( (LA22_2==173) && (synpred9_Objc())) {s = 28;}

                        else if ( (LA22_2==194) && (synpred9_Objc())) {s = 29;}

                        else if ( (LA22_2==185) && (synpred9_Objc())) {s = 30;}

                        else if ( (LA22_2==186) && (synpred9_Objc())) {s = 31;}

                        else if ( (LA22_2==188) && (synpred9_Objc())) {s = 32;}

                        else if ( (LA22_2==ID) && (synpred9_Objc())) {s = 33;}

                        else if ( (LA22_2==190) && (synpred9_Objc())) {s = 34;}

                        else if ( (LA22_2==193) && (synpred9_Objc())) {s = 35;}

                        else if ( (LA22_2==178) && (synpred9_Objc())) {s = 36;}

                         
                        input.seek(index22_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_17 = input.LA(1);

                         
                        int index22_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_17==126) && (synpred9_Objc())) {s = 37;}

                        else if ( (LA22_17==118) && (synpred9_Objc())) {s = 38;}

                        else if ( (LA22_17==159) && (synpred9_Objc())) {s = 39;}

                        else if ( (LA22_17==116) && (synpred9_Objc())) {s = 40;}

                        else if ( (LA22_17==ID) ) {s = 41;}

                        else if ( (LA22_17==120) && (synpred9_Objc())) {s = 42;}

                        else if ( (LA22_17==STRING_LITERAL) && (synpred9_Objc())) {s = 43;}

                        else if ( (LA22_17==STRING_OBJC) && (synpred9_Objc())) {s = 44;}

                        else if ( (LA22_17==CHAR_LITERAL) && (synpred9_Objc())) {s = 45;}

                        else if ( (LA22_17==NUMBER_LITERAL) ) {s = 46;}

                        else if ( (LA22_17==BOOL_LITERAL) && (synpred9_Objc())) {s = 47;}

                        else if ( (LA22_17==169) && (synpred9_Objc())) {s = 48;}

                        else if ( (LA22_17==170) && (synpred9_Objc())) {s = 49;}

                        else if ( (LA22_17==166) && (synpred9_Objc())) {s = 50;}

                        else if ( (LA22_17==112) && (synpred9_Objc())) {s = 51;}

                        else if ( (LA22_17==202) && (synpred9_Objc())) {s = 52;}

                        else if ( (LA22_17==123||LA22_17==127) && (synpred9_Objc())) {s = 53;}

                        else if ( (LA22_17==168) ) {s = 5;}

                         
                        input.seek(index22_17);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_41 = input.LA(1);

                         
                        int index22_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_41==166) && (synpred9_Objc())) {s = 55;}

                        else if ( ((LA22_41 >= 129 && LA22_41 <= 130)) && (synpred9_Objc())) {s = 56;}

                        else if ( (LA22_41==118) && (synpred9_Objc())) {s = 57;}

                        else if ( (LA22_41==123||LA22_41==127) && (synpred9_Objc())) {s = 58;}

                        else if ( (LA22_41==113||(LA22_41 >= 115 && LA22_41 <= 116)||LA22_41==120||LA22_41==122||LA22_41==126||LA22_41==131||(LA22_41 >= 135 && LA22_41 <= 136)||(LA22_41 >= 138 && LA22_41 <= 143)||LA22_41==169||LA22_41==198||LA22_41==200) && (synpred9_Objc())) {s = 59;}

                        else if ( (LA22_41==145) && (synpred9_Objc())) {s = 60;}

                        else if ( (LA22_41==168) ) {s = 61;}

                         
                        input.seek(index22_41);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_46 = input.LA(1);

                         
                        int index22_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA22_46 >= 129 && LA22_46 <= 130)) && (synpred9_Objc())) {s = 62;}

                        else if ( (LA22_46==118) && (synpred9_Objc())) {s = 63;}

                        else if ( (LA22_46==123||LA22_46==127) && (synpred9_Objc())) {s = 64;}

                        else if ( (LA22_46==113||(LA22_46 >= 115 && LA22_46 <= 116)||LA22_46==120||LA22_46==122||LA22_46==126||LA22_46==131||(LA22_46 >= 135 && LA22_46 <= 136)||(LA22_46 >= 138 && LA22_46 <= 143)||LA22_46==169||LA22_46==198||LA22_46==200) && (synpred9_Objc())) {s = 65;}

                        else if ( (LA22_46==145) && (synpred9_Objc())) {s = 66;}

                        else if ( (LA22_46==168) ) {s = 67;}

                         
                        input.seek(index22_46);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA22_61 = input.LA(1);

                         
                        int index22_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_61);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA22_67 = input.LA(1);

                         
                        int index22_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_67);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA51_eotS =
        "\u0130\uffff";
    static final String DFA51_eofS =
        "\110\uffff\1\2\u00e7\uffff";
    static final String DFA51_minS =
        "\2\13\15\uffff\1\13\6\uffff\1\161\22\uffff\1\57\1\164\1\13\3\57"+
        "\3\164\1\161\3\57\16\uffff\2\13\1\uffff\2\13\14\uffff\10\0\32\uffff"+
        "\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA51_maxS =
        "\1\u00aa\1\u00ca\15\uffff\1\u00ca\6\uffff\1\u00c8\22\uffff\1\u00c3"+
        "\1\u00ad\1\u00ca\2\u00c2\1\u00bc\1\u00ad\1\u00ba\1\u00bc\1\u00c8"+
        "\3\u00bc\16\uffff\2\u00ca\1\uffff\1\u00ca\1\u00c9\14\uffff\10\0"+
        "\32\uffff\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0"+
        "\5\uffff\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA51_acceptS =
        "\2\uffff\1\3\13\uffff\1\1\1\uffff\6\1\1\uffff\3\1\54\uffff\1\1\7"+
        "\uffff\7\1\141\uffff\1\1\1\uffff\1\1\20\uffff\1\1\20\uffff\1\1\21"+
        "\uffff\1\1\3\uffff\5\1\1\uffff\1\1\70\uffff\1\2";
    static final String DFA51_specialS =
        "\1\uffff\1\0\24\uffff\1\1\22\uffff\1\2\32\uffff\1\3\1\4\1\uffff"+
        "\1\5\1\6\14\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\32\uffff"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\5\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\uffff\1\111\1"+
        "\uffff\1\112\16\uffff\1\113\5\uffff\1\114\36\uffff\1\115\1\116\1"+
        "\117\5\uffff\1\120\1\uffff\1\121\1\122\67\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff"+
            "\1\2\1\uffff\1\1\1\uffff\1\2\46\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2",
            "\1\2\5\uffff\1\2\35\uffff\1\26\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\17\1\uffff\1\2\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\21\4\uffff\1\31\3\uffff\1\16\2\uffff\1\23\1\24\1\uffff\1\25"+
            "\1\uffff\1\27\2\uffff\1\30\1\22\1\20\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\62\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\53\1\uffff\1\51\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\55\4\uffff\1\65\3\uffff\1\52\2\uffff\1\57\1\60\1\uffff\1\61"+
            "\1\uffff\1\63\2\uffff\1\64\1\56\1\54\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\107\1\uffff\1\2\1\110\1\104\1\uffff\2\2"+
            "\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff\1\2"+
            "\24\uffff\1\105\2\uffff\1\2\3\uffff\1\106\30\uffff\1\2\1\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\125\175\uffff\1\117\10\uffff\1\122\2\uffff\1\121\1\123\1"+
            "\uffff\1\124\5\uffff\1\120\1\116",
            "\1\132\2\uffff\1\133\1\127\16\uffff\1\126\36\uffff\1\130\6"+
            "\uffff\1\131",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\134\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\2\4\uffff\1\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\3\2\6\uffff\1\2",
            "\1\175\175\uffff\1\167\10\uffff\1\172\2\uffff\1\171\1\173\1"+
            "\uffff\1\174\5\uffff\1\170",
            "\1\u0083\u0086\uffff\1\u0080\2\uffff\1\177\1\u0081\1\uffff"+
            "\1\u0082\5\uffff\1\176",
            "\1\u0088\u0086\uffff\1\u0085\2\uffff\1\u0084\1\u0086\1\uffff"+
            "\1\u0087",
            "\1\u008c\2\uffff\1\u008d\1\u0089\55\uffff\1\u008a\6\uffff\1"+
            "\u008b",
            "\1\u0092\2\uffff\1\u0093\1\u008f\55\uffff\1\u0090\6\uffff\1"+
            "\u0091\13\uffff\1\u008e\1\u0094",
            "\1\u0099\2\uffff\1\u009a\1\u0096\55\uffff\1\u0097\6\uffff\1"+
            "\u0098\13\uffff\1\u0095\2\uffff\1\u009b",
            "\1\2\1\uffff\1\2\1\u009f\1\uffff\1\2\1\u00a0\1\u009c\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\24\uffff\1\u009d\2\uffff\1\2\3\uffff\1\u009e\30\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u00aa\u0086\uffff\1\u00a7\2\uffff\1\u00a6\1\u00a8\1\uffff"+
            "\1\u00a9",
            "\1\u00af\u0086\uffff\1\u00ac\2\uffff\1\u00ab\1\u00ad\1\uffff"+
            "\1\u00ae",
            "\1\u00b4\u0086\uffff\1\u00b1\2\uffff\1\u00b0\1\u00b2\1\uffff"+
            "\1\u00b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\u00b7\1\uffff\1\2\1\u00b8\1\u00b9\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\u00b5\2\uffff\2\2\2"+
            "\uffff\1\u00b6\34\uffff\1\2",
            "\1\2\5\uffff\1\2\35\uffff\1\u00c8\24\uffff\1\u00ce\23\uffff"+
            "\2\2\26\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\1\u00c9\2"+
            "\2\37\uffff\1\2",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\u00da\1\2\2\uffff\1\2\2"+
            "\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\37\uffff\1\2",
            "\1\u00f4\5\uffff\1\u00f2\5\uffff\1\2\27\uffff\1\u00ee\21\uffff"+
            "\1\2\2\uffff\1\u00f3\16\uffff\1\2\4\uffff\1\u00f0\1\u00f1\27"+
            "\uffff\1\2\1\uffff\1\2\1\u00ed\1\uffff\1\u00f8\1\2\1\u00ef\1"+
            "\uffff\2\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\1"+
            "\uffff\10\2\4\uffff\1\2\1\uffff\1\u00ec\4\2\2\uffff\1\u00f7"+
            "\2\2\1\u00f5\1\u00f6\15\2\1\uffff\16\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "489:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_1 = input.LA(1);

                         
                        int index51_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_1==182) && (synpred11_Objc())) {s = 14;}

                        else if ( (LA51_1==118) ) {s = 15;}

                        else if ( (LA51_1==195) && (synpred11_Objc())) {s = 16;}

                        else if ( (LA51_1==173) && (synpred11_Objc())) {s = 17;}

                        else if ( (LA51_1==194) && (synpred11_Objc())) {s = 18;}

                        else if ( (LA51_1==185) && (synpred11_Objc())) {s = 19;}

                        else if ( (LA51_1==186) && (synpred11_Objc())) {s = 20;}

                        else if ( (LA51_1==188) && (synpred11_Objc())) {s = 21;}

                        else if ( (LA51_1==ID) ) {s = 22;}

                        else if ( (LA51_1==190) && (synpred11_Objc())) {s = 23;}

                        else if ( (LA51_1==193) && (synpred11_Objc())) {s = 24;}

                        else if ( (LA51_1==178) && (synpred11_Objc())) {s = 25;}

                        else if ( (LA51_1==BOOL_LITERAL||LA51_1==CHAR_LITERAL||LA51_1==NUMBER_LITERAL||(LA51_1 >= STRING_LITERAL && LA51_1 <= STRING_OBJC)||LA51_1==112||LA51_1==116||LA51_1==120||LA51_1==123||(LA51_1 >= 126 && LA51_1 <= 127)||LA51_1==159||LA51_1==166||(LA51_1 >= 169 && LA51_1 <= 170)||LA51_1==202) ) {s = 2;}

                         
                        input.seek(index51_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_22 = input.LA(1);

                         
                        int index51_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_22==120) ) {s = 68;}

                        else if ( (LA51_22==166) ) {s = 69;}

                        else if ( (LA51_22==173) && (synpred11_Objc())) {s = 70;}

                        else if ( (LA51_22==116) ) {s = 71;}

                        else if ( (LA51_22==119) ) {s = 72;}

                        else if ( (LA51_22==113||LA51_22==115||LA51_22==118||(LA51_22 >= 122 && LA51_22 <= 123)||(LA51_22 >= 126 && LA51_22 <= 127)||(LA51_22 >= 129 && LA51_22 <= 131)||(LA51_22 >= 135 && LA51_22 <= 136)||(LA51_22 >= 138 && LA51_22 <= 143)||LA51_22==145||LA51_22==169||LA51_22==198||LA51_22==200) ) {s = 2;}

                         
                        input.seek(index51_22);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_41 = input.LA(1);

                         
                        int index51_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_41==195) && (synpred11_Objc())) {s = 78;}

                        else if ( (LA51_41==173) && (synpred11_Objc())) {s = 79;}

                        else if ( (LA51_41==194) && (synpred11_Objc())) {s = 80;}

                        else if ( (LA51_41==185) && (synpred11_Objc())) {s = 81;}

                        else if ( (LA51_41==182) && (synpred11_Objc())) {s = 82;}

                        else if ( (LA51_41==186) && (synpred11_Objc())) {s = 83;}

                        else if ( (LA51_41==188) && (synpred11_Objc())) {s = 84;}

                        else if ( (LA51_41==ID) ) {s = 85;}

                         
                        input.seek(index51_41);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_68 = input.LA(1);

                         
                        int index51_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_68==166) ) {s = 181;}

                        else if ( (LA51_68==173) && (synpred11_Objc())) {s = 182;}

                        else if ( (LA51_68==116) ) {s = 183;}

                        else if ( (LA51_68==119) && (synpred11_Objc())) {s = 184;}

                        else if ( (LA51_68==120) ) {s = 185;}

                        else if ( (LA51_68==BOOL_LITERAL||LA51_68==CHAR_LITERAL||LA51_68==ID||LA51_68==NUMBER_LITERAL||(LA51_68 >= STRING_LITERAL && LA51_68 <= STRING_OBJC)||LA51_68==112||LA51_68==118||LA51_68==123||(LA51_68 >= 126 && LA51_68 <= 127)||LA51_68==159||(LA51_68 >= 169 && LA51_68 <= 170)||LA51_68==202) ) {s = 2;}

                         
                        input.seek(index51_68);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_69 = input.LA(1);

                         
                        int index51_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_69==ID) ) {s = 200;}

                        else if ( (LA51_69==168) && (synpred11_Objc())) {s = 201;}

                        else if ( (LA51_69==BOOL_LITERAL||LA51_69==CHAR_LITERAL||(LA51_69 >= STRING_LITERAL && LA51_69 <= STRING_OBJC)||LA51_69==112||LA51_69==116||LA51_69==118||LA51_69==120||LA51_69==123||(LA51_69 >= 126 && LA51_69 <= 127)||LA51_69==159||LA51_69==166||(LA51_69 >= 169 && LA51_69 <= 170)||LA51_69==202) ) {s = 2;}

                        else if ( (LA51_69==NUMBER_LITERAL) ) {s = 206;}

                         
                        input.seek(index51_69);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA51_71 = input.LA(1);

                         
                        int index51_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_71==119) && (synpred11_Objc())) {s = 218;}

                        else if ( (LA51_71==BOOL_LITERAL||LA51_71==CHAR_LITERAL||LA51_71==ID||LA51_71==NUMBER_LITERAL||(LA51_71 >= STRING_LITERAL && LA51_71 <= STRING_OBJC)||LA51_71==112||LA51_71==116||LA51_71==118||LA51_71==120||LA51_71==123||(LA51_71 >= 126 && LA51_71 <= 127)||LA51_71==159||LA51_71==166||(LA51_71 >= 169 && LA51_71 <= 170)||LA51_71==202) ) {s = 2;}

                         
                        input.seek(index51_71);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA51_72 = input.LA(1);

                         
                        int index51_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_72==159) && (synpred11_Objc())) {s = 236;}

                        else if ( (LA51_72==116) ) {s = 237;}

                        else if ( (LA51_72==ID) ) {s = 238;}

                        else if ( (LA51_72==120) ) {s = 239;}

                        else if ( (LA51_72==STRING_LITERAL) && (synpred11_Objc())) {s = 240;}

                        else if ( (LA51_72==STRING_OBJC) && (synpred11_Objc())) {s = 241;}

                        else if ( (LA51_72==CHAR_LITERAL) && (synpred11_Objc())) {s = 242;}

                        else if ( (LA51_72==NUMBER_LITERAL) && (synpred11_Objc())) {s = 243;}

                        else if ( (LA51_72==BOOL_LITERAL) && (synpred11_Objc())) {s = 244;}

                        else if ( (LA51_72==169) ) {s = 245;}

                        else if ( (LA51_72==170) && (synpred11_Objc())) {s = 246;}

                        else if ( (LA51_72==166) ) {s = 247;}

                        else if ( (LA51_72==118) ) {s = 248;}

                        else if ( (LA51_72==EOF||LA51_72==DEFINE_LITERAL||LA51_72==MULTI_COMMENT_LIT||LA51_72==SINGLE_COMMENT_LIT||LA51_72==113||LA51_72==115||LA51_72==119||(LA51_72 >= 122 && LA51_72 <= 123)||(LA51_72 >= 125 && LA51_72 <= 127)||(LA51_72 >= 129 && LA51_72 <= 131)||(LA51_72 >= 133 && LA51_72 <= 136)||(LA51_72 >= 138 && LA51_72 <= 143)||(LA51_72 >= 145 && LA51_72 <= 152)||LA51_72==157||(LA51_72 >= 160 && LA51_72 <= 163)||(LA51_72 >= 167 && LA51_72 <= 168)||(LA51_72 >= 171 && LA51_72 <= 183)||(LA51_72 >= 185 && LA51_72 <= 198)||(LA51_72 >= 200 && LA51_72 <= 201)) ) {s = 2;}

                         
                        input.seek(index51_72);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA51_85 = input.LA(1);

                         
                        int index51_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_85);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA51_86 = input.LA(1);

                         
                        int index51_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_86);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA51_87 = input.LA(1);

                         
                        int index51_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_87);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA51_88 = input.LA(1);

                         
                        int index51_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_88);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA51_89 = input.LA(1);

                         
                        int index51_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_89);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA51_90 = input.LA(1);

                         
                        int index51_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_90);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA51_91 = input.LA(1);

                         
                        int index51_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_91);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA51_92 = input.LA(1);

                         
                        int index51_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_92);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA51_119 = input.LA(1);

                         
                        int index51_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_119);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA51_120 = input.LA(1);

                         
                        int index51_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_120);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA51_121 = input.LA(1);

                         
                        int index51_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_121);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA51_122 = input.LA(1);

                         
                        int index51_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_122);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA51_123 = input.LA(1);

                         
                        int index51_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_123);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA51_124 = input.LA(1);

                         
                        int index51_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_124);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA51_125 = input.LA(1);

                         
                        int index51_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_125);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA51_126 = input.LA(1);

                         
                        int index51_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_126);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA51_127 = input.LA(1);

                         
                        int index51_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_127);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA51_128 = input.LA(1);

                         
                        int index51_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_128);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA51_129 = input.LA(1);

                         
                        int index51_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_129);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA51_130 = input.LA(1);

                         
                        int index51_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_130);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA51_131 = input.LA(1);

                         
                        int index51_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_131);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA51_132 = input.LA(1);

                         
                        int index51_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_132);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA51_133 = input.LA(1);

                         
                        int index51_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_133);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA51_134 = input.LA(1);

                         
                        int index51_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_134);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA51_135 = input.LA(1);

                         
                        int index51_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_135);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA51_136 = input.LA(1);

                         
                        int index51_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_136);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA51_137 = input.LA(1);

                         
                        int index51_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_137);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA51_138 = input.LA(1);

                         
                        int index51_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_138);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA51_139 = input.LA(1);

                         
                        int index51_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_139);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA51_140 = input.LA(1);

                         
                        int index51_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_140);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA51_141 = input.LA(1);

                         
                        int index51_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_141);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA51_142 = input.LA(1);

                         
                        int index51_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_142);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA51_143 = input.LA(1);

                         
                        int index51_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_143);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA51_144 = input.LA(1);

                         
                        int index51_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_144);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA51_145 = input.LA(1);

                         
                        int index51_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_145);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA51_146 = input.LA(1);

                         
                        int index51_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_146);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA51_147 = input.LA(1);

                         
                        int index51_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_147);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA51_148 = input.LA(1);

                         
                        int index51_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA51_149 = input.LA(1);

                         
                        int index51_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_149);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA51_150 = input.LA(1);

                         
                        int index51_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_150);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA51_151 = input.LA(1);

                         
                        int index51_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_151);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA51_152 = input.LA(1);

                         
                        int index51_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_152);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA51_153 = input.LA(1);

                         
                        int index51_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_153);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA51_154 = input.LA(1);

                         
                        int index51_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_154);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA51_155 = input.LA(1);

                         
                        int index51_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_155);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA51_156 = input.LA(1);

                         
                        int index51_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_156);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA51_157 = input.LA(1);

                         
                        int index51_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_157);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA51_158 = input.LA(1);

                         
                        int index51_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_158);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA51_159 = input.LA(1);

                         
                        int index51_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_159);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA51_160 = input.LA(1);

                         
                        int index51_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_160);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA51_166 = input.LA(1);

                         
                        int index51_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_166);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA51_167 = input.LA(1);

                         
                        int index51_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_167);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA51_168 = input.LA(1);

                         
                        int index51_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_168);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA51_169 = input.LA(1);

                         
                        int index51_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_169);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA51_170 = input.LA(1);

                         
                        int index51_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_170);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA51_171 = input.LA(1);

                         
                        int index51_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_171);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA51_172 = input.LA(1);

                         
                        int index51_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_172);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA51_173 = input.LA(1);

                         
                        int index51_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_173);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA51_174 = input.LA(1);

                         
                        int index51_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_174);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA51_175 = input.LA(1);

                         
                        int index51_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_175);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA51_176 = input.LA(1);

                         
                        int index51_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_176);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA51_177 = input.LA(1);

                         
                        int index51_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_177);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA51_178 = input.LA(1);

                         
                        int index51_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_178);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA51_179 = input.LA(1);

                         
                        int index51_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_179);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA51_180 = input.LA(1);

                         
                        int index51_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_180);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA51_181 = input.LA(1);

                         
                        int index51_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_181);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA51_183 = input.LA(1);

                         
                        int index51_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_183);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA51_185 = input.LA(1);

                         
                        int index51_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_185);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA51_200 = input.LA(1);

                         
                        int index51_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_200);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA51_206 = input.LA(1);

                         
                        int index51_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_206);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA51_237 = input.LA(1);

                         
                        int index51_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_237);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA51_238 = input.LA(1);

                         
                        int index51_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_238);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA51_239 = input.LA(1);

                         
                        int index51_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_239);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA51_245 = input.LA(1);

                         
                        int index51_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_245);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA51_247 = input.LA(1);

                         
                        int index51_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_247);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA51_248 = input.LA(1);

                         
                        int index51_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index51_248);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA50_eotS =
        "\74\uffff";
    static final String DFA50_eofS =
        "\1\1\73\uffff";
    static final String DFA50_minS =
        "\1\27\73\uffff";
    static final String DFA50_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA50_specialS =
        "\74\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "()+ loopback of 491:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA53_eotS =
        "\u008b\uffff";
    static final String DFA53_eofS =
        "\1\uffff\1\3\u0089\uffff";
    static final String DFA53_minS =
        "\1\57\1\27\1\13\72\uffff\1\57\3\uffff\1\13\2\uffff\1\101\35\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA53_maxS =
        "\1\57\1\u00c9\1\u00ca\72\uffff\1\u00c3\3\uffff\1\u00ca\2\uffff\1"+
        "\u00c8\35\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA53_acceptS =
        "\3\uffff\1\2\72\uffff\3\1\1\uffff\2\1\1\uffff\14\1\37\uffff\16\1"+
        "\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1";
    static final String DFA53_specialS =
        "\2\uffff\1\0\76\uffff\1\1\2\uffff\1\2\35\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\16\uffff\1\21\3"+
        "\uffff\1\22\4\uffff\1\23\1\24\2\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\35\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\1\2\2\3\1\uffff\2\3\1\uffff\3\3\1\uffff\3"+
            "\3\1\uffff\4\3\1\uffff\6\3\1\uffff\10\3\4\uffff\1\3\2\uffff"+
            "\4\3\2\uffff\4\3\1\uffff\15\3\1\uffff\16\3\1\uffff\2\3",
            "\1\111\5\uffff\1\107\35\uffff\1\104\21\uffff\1\77\2\uffff\1"+
            "\110\16\uffff\1\76\4\uffff\1\105\1\106\26\uffff\1\115\3\uffff"+
            "\1\103\1\uffff\1\101\1\120\1\75\2\uffff\1\117\2\uffff\1\100"+
            "\1\117\37\uffff\1\102\6\uffff\1\114\2\uffff\1\112\1\113\2\uffff"+
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\3\3\6\uffff\1\116",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\175\uffff\1\3\10\uffff\1\3\2\uffff\2\3\1\uffff\1\3\5"+
            "\uffff\2\3",
            "",
            "",
            "",
            "\1\167\5\uffff\1\165\35\uffff\1\154\24\uffff\1\166\23\uffff"+
            "\1\163\1\164\26\uffff\1\173\3\uffff\1\162\1\uffff\1\145\1\uffff"+
            "\1\143\2\uffff\1\175\2\uffff\1\160\1\175\37\uffff\1\161\6\uffff"+
            "\1\172\2\uffff\1\170\1\171\2\uffff\1\147\4\uffff\1\157\3\uffff"+
            "\1\144\2\uffff\1\151\1\152\1\uffff\1\153\1\uffff\1\155\2\uffff"+
            "\1\156\1\150\1\146\6\uffff\1\174",
            "",
            "",
            "\1\u0085\21\uffff\1\u0084\35\uffff\1\u008a\1\uffff\1\u008a"+
            "\1\u0088\1\uffff\1\u0080\1\u0087\1\u0082\1\uffff\1\u008a\1\u0081"+
            "\1\uffff\1\u0086\1\u008a\1\u0081\1\uffff\2\177\1\u008a\3\uffff"+
            "\2\u008a\1\uffff\6\u008a\1\uffff\1\u0083\24\uffff\1\176\2\uffff"+
            "\1\u008a\3\uffff\1\3\30\uffff\1\u008a\1\uffff\1\u008a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "495:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_2==120) ) {s = 61;}

                        else if ( (LA53_2==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 62;}

                        else if ( (LA53_2==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 63;}

                        else if ( (LA53_2==126) && (synpred13_Objc())) {s = 64;}

                        else if ( (LA53_2==118) ) {s = 65;}

                        else if ( (LA53_2==159) && (synpred13_Objc())) {s = 66;}

                        else if ( (LA53_2==116) && (synpred13_Objc())) {s = 67;}

                        else if ( (LA53_2==ID) ) {s = 68;}

                        else if ( (LA53_2==STRING_LITERAL) && (synpred13_Objc())) {s = 69;}

                        else if ( (LA53_2==STRING_OBJC) && (synpred13_Objc())) {s = 70;}

                        else if ( (LA53_2==CHAR_LITERAL) && (synpred13_Objc())) {s = 71;}

                        else if ( (LA53_2==NUMBER_LITERAL) && (synpred13_Objc())) {s = 72;}

                        else if ( (LA53_2==BOOL_LITERAL) && (synpred13_Objc())) {s = 73;}

                        else if ( (LA53_2==169) && (synpred13_Objc())) {s = 74;}

                        else if ( (LA53_2==170) && (synpred13_Objc())) {s = 75;}

                        else if ( (LA53_2==166) && (synpred13_Objc())) {s = 76;}

                        else if ( (LA53_2==112) && (synpred13_Objc())) {s = 77;}

                        else if ( (LA53_2==202) && (synpred13_Objc())) {s = 78;}

                        else if ( (LA53_2==123||LA53_2==127) && (synpred13_Objc())) {s = 79;}

                        else if ( (LA53_2==119) && (synpred13_Objc())) {s = 80;}

                        else if ( (LA53_2==173||LA53_2==178||LA53_2==182||(LA53_2 >= 185 && LA53_2 <= 186)||LA53_2==188||LA53_2==190||(LA53_2 >= 193 && LA53_2 <= 195)) ) {s = 3;}

                         
                        input.seek(index53_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA53_65 = input.LA(1);

                         
                        int index53_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_65==120) ) {s = 99;}

                        else if ( (LA53_65==182) ) {s = 100;}

                        else if ( (LA53_65==118) ) {s = 101;}

                        else if ( (LA53_65==195) ) {s = 102;}

                        else if ( (LA53_65==173) ) {s = 103;}

                        else if ( (LA53_65==194) ) {s = 104;}

                        else if ( (LA53_65==185) ) {s = 105;}

                        else if ( (LA53_65==186) ) {s = 106;}

                        else if ( (LA53_65==188) ) {s = 107;}

                        else if ( (LA53_65==ID) ) {s = 108;}

                        else if ( (LA53_65==190) ) {s = 109;}

                        else if ( (LA53_65==193) ) {s = 110;}

                        else if ( (LA53_65==178) ) {s = 111;}

                        else if ( (LA53_65==126) && (synpred13_Objc())) {s = 112;}

                        else if ( (LA53_65==159) && (synpred13_Objc())) {s = 113;}

                        else if ( (LA53_65==116) && (synpred13_Objc())) {s = 114;}

                        else if ( (LA53_65==STRING_LITERAL) && (synpred13_Objc())) {s = 115;}

                        else if ( (LA53_65==STRING_OBJC) && (synpred13_Objc())) {s = 116;}

                        else if ( (LA53_65==CHAR_LITERAL) && (synpred13_Objc())) {s = 117;}

                        else if ( (LA53_65==NUMBER_LITERAL) && (synpred13_Objc())) {s = 118;}

                        else if ( (LA53_65==BOOL_LITERAL) && (synpred13_Objc())) {s = 119;}

                        else if ( (LA53_65==169) && (synpred13_Objc())) {s = 120;}

                        else if ( (LA53_65==170) && (synpred13_Objc())) {s = 121;}

                        else if ( (LA53_65==166) && (synpred13_Objc())) {s = 122;}

                        else if ( (LA53_65==112) && (synpred13_Objc())) {s = 123;}

                        else if ( (LA53_65==202) && (synpred13_Objc())) {s = 124;}

                        else if ( (LA53_65==123||LA53_65==127) && (synpred13_Objc())) {s = 125;}

                         
                        input.seek(index53_65);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA53_68 = input.LA(1);

                         
                        int index53_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA53_68==166) ) {s = 126;}

                        else if ( ((LA53_68 >= 129 && LA53_68 <= 130)) && (synpred13_Objc())) {s = 127;}

                        else if ( (LA53_68==118) && (synpred13_Objc())) {s = 128;}

                        else if ( (LA53_68==123||LA53_68==127) && (synpred13_Objc())) {s = 129;}

                        else if ( (LA53_68==120) ) {s = 130;}

                        else if ( (LA53_68==145) && (synpred13_Objc())) {s = 131;}

                        else if ( (LA53_68==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 132;}

                        else if ( (LA53_68==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 133;}

                        else if ( (LA53_68==125) && (synpred13_Objc())) {s = 134;}

                        else if ( (LA53_68==119) ) {s = 135;}

                        else if ( (LA53_68==116) ) {s = 136;}

                        else if ( (LA53_68==173) ) {s = 3;}

                        else if ( (LA53_68==113||LA53_68==115||LA53_68==122||LA53_68==126||LA53_68==131||(LA53_68 >= 135 && LA53_68 <= 136)||(LA53_68 >= 138 && LA53_68 <= 143)||LA53_68==169||LA53_68==198||LA53_68==200) && (synpred13_Objc())) {s = 138;}

                         
                        input.seek(index53_68);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA53_98 = input.LA(1);

                         
                        int index53_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_98);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA53_99 = input.LA(1);

                         
                        int index53_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_99);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA53_100 = input.LA(1);

                         
                        int index53_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_100);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA53_101 = input.LA(1);

                         
                        int index53_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_101);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA53_102 = input.LA(1);

                         
                        int index53_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_102);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA53_103 = input.LA(1);

                         
                        int index53_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_103);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA53_104 = input.LA(1);

                         
                        int index53_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_104);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA53_105 = input.LA(1);

                         
                        int index53_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_105);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA53_106 = input.LA(1);

                         
                        int index53_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_106);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA53_107 = input.LA(1);

                         
                        int index53_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_107);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA53_108 = input.LA(1);

                         
                        int index53_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_108);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA53_109 = input.LA(1);

                         
                        int index53_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_109);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA53_110 = input.LA(1);

                         
                        int index53_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_110);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA53_111 = input.LA(1);

                         
                        int index53_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_111);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA53_126 = input.LA(1);

                         
                        int index53_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_126);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA53_130 = input.LA(1);

                         
                        int index53_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_130);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA53_135 = input.LA(1);

                         
                        int index53_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_135);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA53_136 = input.LA(1);

                         
                        int index53_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 138;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index53_136);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA59_eotS =
        "\u0620\uffff";
    static final String DFA59_eofS =
        "\3\uffff\1\12\1\uffff\5\12\4\uffff\1\12\73\uffff\1\12\u0173\uffff"+
        "\1\12\131\uffff\1\12\36\uffff\1\12\36\uffff\1\12\36\uffff\1\12\36"+
        "\uffff\1\12\u038b\uffff";
    static final String DFA59_minS =
        "\1\13\1\uffff\1\57\1\27\1\57\5\27\4\uffff\1\27\1\13\1\57\1\13\70"+
        "\uffff\1\27\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\57\1\13\71\uffff"+
        "\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\13\1\57\1\13\70\uffff\2"+
        "\13\1\166\10\57\1\u00c5\1\57\4\13\1\27\1\57\3\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\57\1\13\71\uffff\1\27\1\57\3\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\27\1\57\3\uffff\1\13\2\uffff\1\101\26\uffff\1"+
        "\27\1\57\3\uffff\1\13\2\uffff\1\101\26\uffff\1\27\1\57\3\uffff\1"+
        "\13\2\uffff\1\101\26\uffff\1\27\1\57\3\uffff\1\13\2\uffff\1\101"+
        "\26\uffff\23\0\3\uffff\1\0\2\uffff\1\0\26\uffff\61\0\1\uffff\7\0"+
        "\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\110\0\100"+
        "\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\3\uffff"+
        "\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\4\uffff\2\0\2\uffff";
    static final String DFA59_maxS =
        "\1\u00aa\1\uffff\1\57\1\u00c9\1\57\5\u00c9\4\uffff\1\u00c9\1\u00ca"+
        "\1\57\1\u00ca\70\uffff\1\u00c9\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\u00ca\1\57\1\u00ca\70\uffff\1\u00aa\1\u00ca\1\166\1"+
        "\57\1\u00c8\1\57\5\u00c8\1\u00c5\1\u00c3\1\u00ca\3\u00aa\1\u00c9"+
        "\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\57\1\u00ca\71"+
        "\uffff\1\u00c9\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff"+
        "\1\u00c9\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9"+
        "\1\u00c3\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3"+
        "\3\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3\3\uffff"+
        "\1\u00ca\2\uffff\1\u00c8\26\uffff\23\0\3\uffff\1\0\2\uffff\1\0\26"+
        "\uffff\61\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff"+
        "\6\0\1\uffff\110\0\100\uffff\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff"+
        "\2\0\2\uffff\2\0\3\uffff\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\4\uffff\2\0\2\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\1\10\uffff\1\3\u01b5\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\107\uffff\3\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2"+
        "\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3"+
        "\2\1\uffff\2\2\1\uffff\14\2\14\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\35\uffff\3\2\1\uffff\2\2\1\uffff\14\2\u00f6\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\3\2\1\uffff\2\2\1\uffff\14"+
        "\2\132\uffff\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff"+
        "\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff"+
        "\4\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff\4\2\3\uffff"+
        "\1\2";
    static final String DFA59_specialS =
        "\21\uffff\1\0\72\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1"+
        "\4\72\uffff\1\5\73\uffff\1\6\116\uffff\1\7\2\uffff\1\10\27\uffff"+
        "\1\11\76\uffff\1\12\2\uffff\1\13\33\uffff\1\14\2\uffff\1\15\33\uffff"+
        "\1\16\2\uffff\1\17\33\uffff\1\20\2\uffff\1\21\33\uffff\1\22\2\uffff"+
        "\1\23\26\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\3\uffff\1\47\2\uffff"+
        "\1\50\26\uffff\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\uffff\1\132\1\133\1\134\1\135\1\136\1"+
        "\137\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145\1\146\1\uffff\1"+
        "\147\1\150\1\151\1\152\1\153\1\154\1\uffff\1\155\1\156\1\157\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\164\1\165\1\166\1\167\1\170\1\uffff"+
        "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082"+
        "\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092"+
        "\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a"+
        "\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa"+
        "\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba"+
        "\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\100\uffff\1\u00c1"+
        "\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\16\uffff\1\u00cf\3\uffff"+
        "\1\u00d0\4\uffff\1\u00d1\1\u00d2\2\uffff\1\u00d3\1\u00d4\3\uffff"+
        "\1\u00d5\2\uffff\1\u00d6\26\uffff\1\u00d7\1\u00d8\100\uffff\1\u00d9"+
        "\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1"+
        "\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\16\uffff\1\u00e7\3\uffff"+
        "\1\u00e8\4\uffff\1\u00e9\1\u00ea\2\uffff\1\u00eb\1\u00ec\100\uffff"+
        "\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4"+
        "\1\u00f5\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\16\uffff\1\u00fb"+
        "\3\uffff\1\u00fc\4\uffff\1\u00fd\1\u00fe\2\uffff\1\u00ff\1\u0100"+
        "\100\uffff\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
        "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\16\uffff"+
        "\1\u010f\3\uffff\1\u0110\4\uffff\1\u0111\1\u0112\2\uffff\1\u0113"+
        "\1\u0114\100\uffff\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a"+
        "\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122"+
        "\16\uffff\1\u0123\3\uffff\1\u0124\4\uffff\1\u0125\1\u0126\2\uffff"+
        "\1\u0127\1\u0128\100\uffff\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\16\uffff\1\u0137\3\uffff\1\u0138\4\uffff\1\u0139\1\u013a"+
        "\2\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\11\5\uffff\1\7\35\uffff\1\3\24\uffff\1\10\23\uffff\1\5\1"+
            "\6\32\uffff\1\2\1\uffff\1\12\1\uffff\1\4\46\uffff\1\1\6\uffff"+
            "\1\12\2\uffff\2\12",
            "",
            "\1\16",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\21\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\20\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12\4"+
            "\uffff\1\12\2\uffff\4\12\2\uffff\1\17\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\112",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\114\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\113\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12"+
            "\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0087\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0086\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00c2\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00c1\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00fd\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00fc\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0138\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0137\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0174\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0173\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\1\u0172\3\12\1\uffff\15"+
            "\12\1\uffff\16\12\1\uffff\2\12",
            "\1\u01b7\5\uffff\1\u01b5\35\uffff\1\u01b1\24\uffff\1\u01b6"+
            "\23\uffff\1\u01b3\1\u01b4\26\uffff\1\u01bb\3\uffff\1\u01b0\1"+
            "\uffff\1\u01ae\1\uffff\1\u01b2\2\uffff\1\u01bd\2\uffff\1\u01ad"+
            "\1\u01bd\37\uffff\1\u01af\6\uffff\1\u01ba\2\uffff\1\u01b8\1"+
            "\u01b9\37\uffff\1\u01bc",
            "\1\u01be",
            "\1\u01cb\5\uffff\1\u01c9\35\uffff\1\u01c6\21\uffff\1\u01c1"+
            "\2\uffff\1\u01ca\16\uffff\1\u01c0\4\uffff\1\u01c7\1\u01c8\26"+
            "\uffff\1\u01cf\3\uffff\1\u01c5\1\uffff\1\u01c3\1\u01d2\1\u01bf"+
            "\2\uffff\1\u01d1\2\uffff\1\u01c2\1\u01d1\37\uffff\1\u01c4\6"+
            "\uffff\1\u01ce\2\uffff\1\u01cc\1\u01cd\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u01d0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u01de\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u01dd\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0218",
            "\1\u0225\5\uffff\1\u0223\35\uffff\1\u0220\21\uffff\1\u021b"+
            "\2\uffff\1\u0224\16\uffff\1\u021a\4\uffff\1\u0221\1\u0222\26"+
            "\uffff\1\u0229\3\uffff\1\u021f\1\uffff\1\u021d\1\u022c\1\u0219"+
            "\2\uffff\1\u022b\2\uffff\1\u021c\1\u022b\37\uffff\1\u021e\6"+
            "\uffff\1\u0228\2\uffff\1\u0226\1\u0227\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u022a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0237",
            "\1\u0244\5\uffff\1\u0242\35\uffff\1\u023f\21\uffff\1\u023a"+
            "\2\uffff\1\u0243\16\uffff\1\u0239\4\uffff\1\u0240\1\u0241\26"+
            "\uffff\1\u0248\3\uffff\1\u023e\1\uffff\1\u023c\1\u024b\1\u0238"+
            "\2\uffff\1\u024a\2\uffff\1\u023b\1\u024a\37\uffff\1\u023d\6"+
            "\uffff\1\u0247\2\uffff\1\u0245\1\u0246\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0249",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0256",
            "\1\u0263\5\uffff\1\u0261\35\uffff\1\u025e\21\uffff\1\u0259"+
            "\2\uffff\1\u0262\16\uffff\1\u0258\4\uffff\1\u025f\1\u0260\26"+
            "\uffff\1\u0267\3\uffff\1\u025d\1\uffff\1\u025b\1\u026a\1\u0257"+
            "\2\uffff\1\u0269\2\uffff\1\u025a\1\u0269\37\uffff\1\u025c\6"+
            "\uffff\1\u0266\2\uffff\1\u0264\1\u0265\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0268",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0275",
            "\1\u0282\5\uffff\1\u0280\35\uffff\1\u027d\21\uffff\1\u0278"+
            "\2\uffff\1\u0281\16\uffff\1\u0277\4\uffff\1\u027e\1\u027f\26"+
            "\uffff\1\u0286\3\uffff\1\u027c\1\uffff\1\u027a\1\u0289\1\u0276"+
            "\2\uffff\1\u0288\2\uffff\1\u0279\1\u0288\37\uffff\1\u027b\6"+
            "\uffff\1\u0285\2\uffff\1\u0283\1\u0284\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u0287",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0294",
            "\1\u02a1\5\uffff\1\u029f\35\uffff\1\u029c\21\uffff\1\u0297"+
            "\2\uffff\1\u02a0\16\uffff\1\u0296\4\uffff\1\u029d\1\u029e\26"+
            "\uffff\1\u02a5\3\uffff\1\u029b\1\uffff\1\u0299\1\u02a8\1\u0295"+
            "\2\uffff\1\u02a7\2\uffff\1\u0298\1\u02a7\37\uffff\1\u029a\6"+
            "\uffff\1\u02a4\2\uffff\1\u02a2\1\u02a3\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u02a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02bd\5\uffff\1\u02bb\35\uffff\1\u02b7\24\uffff\1\u02bc"+
            "\23\uffff\1\u02b9\1\u02ba\26\uffff\1\u02c1\3\uffff\1\u02b6\1"+
            "\uffff\1\u02b4\1\uffff\1\u02b8\2\uffff\1\u02c3\2\uffff\1\u02b3"+
            "\1\u02c3\37\uffff\1\u02b5\6\uffff\1\u02c0\2\uffff\1\u02be\1"+
            "\u02bf\37\uffff\1\u02c2",
            "\1\u02c4",
            "\1\u02d1\5\uffff\1\u02cf\35\uffff\1\u02cc\21\uffff\1\u02c7"+
            "\2\uffff\1\u02d0\16\uffff\1\u02c6\4\uffff\1\u02cd\1\u02ce\26"+
            "\uffff\1\u02d5\3\uffff\1\u02cb\1\uffff\1\u02c9\1\u02d8\1\u02c5"+
            "\2\uffff\1\u02d7\2\uffff\1\u02c8\1\u02d7\37\uffff\1\u02ca\6"+
            "\uffff\1\u02d4\2\uffff\1\u02d2\1\u02d3\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u02d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02ec\5\uffff\1\u02ea\35\uffff\1\u02e6\24\uffff\1\u02eb"+
            "\23\uffff\1\u02e8\1\u02e9\32\uffff\1\u02e5\1\uffff\1\u02e3\1"+
            "\uffff\1\u02e7\46\uffff\1\u02e4\6\uffff\1\u02ef\2\uffff\1\u02ed"+
            "\1\u02ee",
            "\1\u0304\5\uffff\1\u0302\35\uffff\1\u02f8\24\uffff\1\u0303"+
            "\23\uffff\1\u0300\1\u0301\26\uffff\1\u0308\3\uffff\1\u02fe\1"+
            "\uffff\1\u02f1\1\uffff\1\u02ff\2\uffff\1\u030a\2\uffff\1\u02fc"+
            "\1\u030a\37\uffff\1\u02fd\6\uffff\1\u0307\2\uffff\1\u0305\1"+
            "\u0306\2\uffff\1\u02f3\4\uffff\1\u02fb\3\uffff\1\u02f0\2\uffff"+
            "\1\u02f5\1\u02f6\1\uffff\1\u02f7\1\uffff\1\u02f9\2\uffff\1\u02fa"+
            "\1\u02f4\1\u02f2\6\uffff\1\u0309",
            "\1\u030b",
            "\1\u030c",
            "\1\12\101\uffff\1\u0311\1\uffff\2\u0311\1\uffff\1\u030f\1\uffff"+
            "\1\u0311\1\uffff\1\u0311\1\u0310\2\uffff\1\u0311\1\u0310\1\uffff"+
            "\2\u030e\1\u0311\3\uffff\2\u0311\1\uffff\6\u0311\1\uffff\1\u0312"+
            "\24\uffff\1\u030d\1\uffff\1\u0313\1\u0311\34\uffff\1\u0311\1"+
            "\uffff\1\u0311",
            "\1\u0315",
            "\1\12\101\uffff\1\u0319\1\uffff\2\u0319\1\uffff\1\u0317\1\uffff"+
            "\1\u0319\1\uffff\1\u0319\1\u0318\2\uffff\1\u0319\1\u0318\1\uffff"+
            "\2\u0316\1\u0319\3\uffff\2\u0319\1\uffff\6\u0319\1\uffff\1\u031a"+
            "\26\uffff\1\u031b\1\u0319\34\uffff\1\u0319\1\uffff\1\u0319",
            "\1\12\101\uffff\1\u0320\1\uffff\2\u0320\1\uffff\1\u031e\1\uffff"+
            "\1\u0320\1\uffff\1\u0320\1\u031f\2\uffff\1\u0320\1\u031f\1\uffff"+
            "\2\u031d\1\u0320\3\uffff\2\u0320\1\uffff\6\u0320\1\uffff\1\u0321"+
            "\26\uffff\1\u0322\1\u0320\34\uffff\1\u0320\1\uffff\1\u0320",
            "\1\12\101\uffff\1\u0327\1\uffff\2\u0327\1\uffff\1\u0325\1\uffff"+
            "\1\u0327\1\uffff\1\u0327\1\u0326\2\uffff\1\u0327\1\u0326\1\uffff"+
            "\2\u0324\1\u0327\3\uffff\2\u0327\1\uffff\6\u0327\1\uffff\1\u0328"+
            "\26\uffff\1\u0329\1\u0327\34\uffff\1\u0327\1\uffff\1\u0327",
            "\1\12\101\uffff\1\u032e\1\uffff\2\u032e\1\uffff\1\u032c\1\uffff"+
            "\1\u032e\1\uffff\1\u032e\1\u032d\2\uffff\1\u032e\1\u032d\1\uffff"+
            "\2\u032b\1\u032e\3\uffff\2\u032e\1\uffff\6\u032e\1\uffff\1\u032f"+
            "\26\uffff\1\u0330\1\u032e\34\uffff\1\u032e\1\uffff\1\u032e",
            "\1\12\101\uffff\1\u0335\1\uffff\2\u0335\1\uffff\1\u0333\1\uffff"+
            "\1\u0335\1\uffff\1\u0335\1\u0334\2\uffff\1\u0335\1\u0334\1\uffff"+
            "\2\u0332\1\u0335\3\uffff\2\u0335\1\uffff\6\u0335\1\uffff\1\u0336"+
            "\26\uffff\1\u0337\1\u0335\34\uffff\1\u0335\1\uffff\1\u0335",
            "\1\u0339",
            "\1\u0342\106\uffff\1\u033b\1\u0346\65\uffff\1\u033d\4\uffff"+
            "\1\u0345\3\uffff\1\u033a\2\uffff\1\u033f\1\u0340\1\uffff\1\u0341"+
            "\1\uffff\1\u0343\2\uffff\1\u0344\1\u033e\1\u033c",
            "\1\u0351\5\uffff\1\u034f\35\uffff\1\u034b\24\uffff\1\u0350"+
            "\23\uffff\1\u034d\1\u034e\26\uffff\1\u0355\3\uffff\1\u034a\1"+
            "\uffff\1\u0348\1\uffff\1\u034c\2\uffff\1\u0357\2\uffff\1\u0347"+
            "\1\u0357\37\uffff\1\u0349\6\uffff\1\u0354\2\uffff\1\u0352\1"+
            "\u0353\37\uffff\1\u0356",
            "\1\u0361\5\uffff\1\u035f\35\uffff\1\u035b\24\uffff\1\u0360"+
            "\23\uffff\1\u035d\1\u035e\32\uffff\1\u035a\1\uffff\1\u0358\1"+
            "\uffff\1\u035c\46\uffff\1\u0359\6\uffff\1\u0364\2\uffff\1\u0362"+
            "\1\u0363",
            "\1\u036e\5\uffff\1\u036c\35\uffff\1\u0368\24\uffff\1\u036d"+
            "\23\uffff\1\u036a\1\u036b\32\uffff\1\u0367\1\uffff\1\u0365\1"+
            "\uffff\1\u0369\46\uffff\1\u0366\6\uffff\1\u0371\2\uffff\1\u036f"+
            "\1\u0370",
            "\1\u037b\5\uffff\1\u0379\35\uffff\1\u0375\24\uffff\1\u037a"+
            "\23\uffff\1\u0377\1\u0378\32\uffff\1\u0374\1\uffff\1\u0372\1"+
            "\uffff\1\u0376\46\uffff\1\u0373\6\uffff\1\u037e\2\uffff\1\u037c"+
            "\1\u037d",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u037f\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0380\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u03c1\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u03d6\5\uffff\1\u03d4\35\uffff\1\u03cb\24\uffff\1\u03d5"+
            "\23\uffff\1\u03d2\1\u03d3\26\uffff\1\u03da\3\uffff\1\u03d1\1"+
            "\uffff\1\u03c4\1\uffff\1\u03c2\2\uffff\1\u03dc\2\uffff\1\u03cf"+
            "\1\u03dc\37\uffff\1\u03d0\6\uffff\1\u03d9\2\uffff\1\u03d7\1"+
            "\u03d8\2\uffff\1\u03c6\4\uffff\1\u03ce\3\uffff\1\u03c3\2\uffff"+
            "\1\u03c8\1\u03c9\1\uffff\1\u03ca\1\uffff\1\u03cc\2\uffff\1\u03cd"+
            "\1\u03c7\1\u03c5\6\uffff\1\u03db",
            "",
            "",
            "\1\u03e4\21\uffff\1\u03e3\35\uffff\1\u03e9\1\uffff\1\u03e9"+
            "\1\u03e7\1\uffff\1\u03df\1\u03e6\1\u03e1\1\uffff\1\u03e9\1\u03e0"+
            "\1\uffff\1\u03e5\1\u03e9\1\u03e0\1\uffff\2\u03de\1\u03e9\3\uffff"+
            "\2\u03e9\1\uffff\6\u03e9\1\uffff\1\u03e2\24\uffff\1\u03dd\2"+
            "\uffff\1\u03e9\3\uffff\1\12\30\uffff\1\u03e9\1\uffff\1\u03e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ea",
            "\1\u03f7\5\uffff\1\u03f5\35\uffff\1\u03f2\21\uffff\1\u03ed"+
            "\2\uffff\1\u03f6\16\uffff\1\u03ec\4\uffff\1\u03f3\1\u03f4\26"+
            "\uffff\1\u03fb\3\uffff\1\u03f1\1\uffff\1\u03ef\1\u03fe\1\u03eb"+
            "\2\uffff\1\u03fd\2\uffff\1\u03ee\1\u03fd\37\uffff\1\u03f0\6"+
            "\uffff\1\u03fa\2\uffff\1\u03f8\1\u03f9\2\uffff\1\12\4\uffff"+
            "\1\12\3\uffff\1\12\2\uffff\2\12\1\uffff\1\12\1\uffff\1\12\2"+
            "\uffff\3\12\6\uffff\1\u03fc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0409\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u040a\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u044b\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u0460\5\uffff\1\u045e\35\uffff\1\u0455\24\uffff\1\u045f"+
            "\23\uffff\1\u045c\1\u045d\26\uffff\1\u0464\3\uffff\1\u045b\1"+
            "\uffff\1\u044e\1\uffff\1\u044c\2\uffff\1\u0466\2\uffff\1\u0459"+
            "\1\u0466\37\uffff\1\u045a\6\uffff\1\u0463\2\uffff\1\u0461\1"+
            "\u0462\2\uffff\1\u0450\4\uffff\1\u0458\3\uffff\1\u044d\2\uffff"+
            "\1\u0452\1\u0453\1\uffff\1\u0454\1\uffff\1\u0456\2\uffff\1\u0457"+
            "\1\u0451\1\u044f\6\uffff\1\u0465",
            "",
            "",
            "\1\u046e\21\uffff\1\u046d\35\uffff\1\u0473\1\uffff\1\u0473"+
            "\1\u0471\1\uffff\1\u0469\1\u0470\1\u046b\1\uffff\1\u0473\1\u046a"+
            "\1\uffff\1\u046f\1\u0473\1\u046a\1\uffff\2\u0468\1\u0473\3\uffff"+
            "\2\u0473\1\uffff\6\u0473\1\uffff\1\u046c\24\uffff\1\u0467\2"+
            "\uffff\1\u0473\3\uffff\1\12\30\uffff\1\u0473\1\uffff\1\u0473",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0474\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0475\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u04b6\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u04cb\5\uffff\1\u04c9\35\uffff\1\u04c0\24\uffff\1\u04ca"+
            "\23\uffff\1\u04c7\1\u04c8\26\uffff\1\u04cf\3\uffff\1\u04c6\1"+
            "\uffff\1\u04b9\1\uffff\1\u04b7\2\uffff\1\u04d1\2\uffff\1\u04c4"+
            "\1\u04d1\37\uffff\1\u04c5\6\uffff\1\u04ce\2\uffff\1\u04cc\1"+
            "\u04cd\2\uffff\1\u04bb\4\uffff\1\u04c3\3\uffff\1\u04b8\2\uffff"+
            "\1\u04bd\1\u04be\1\uffff\1\u04bf\1\uffff\1\u04c1\2\uffff\1\u04c2"+
            "\1\u04bc\1\u04ba\6\uffff\1\u04d0",
            "",
            "",
            "\1\u04d9\21\uffff\1\u04d8\35\uffff\1\u04de\1\uffff\1\u04de"+
            "\1\u04dc\1\uffff\1\u04d4\1\u04db\1\u04d6\1\uffff\1\u04de\1\u04d5"+
            "\1\uffff\1\u04da\1\u04de\1\u04d5\1\uffff\2\u04d3\1\u04de\3\uffff"+
            "\2\u04de\1\uffff\6\u04de\1\uffff\1\u04d7\24\uffff\1\u04d2\2"+
            "\uffff\1\u04de\3\uffff\1\12\30\uffff\1\u04de\1\uffff\1\u04de",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u04df\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u04e0\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0521\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u0536\5\uffff\1\u0534\35\uffff\1\u052b\24\uffff\1\u0535"+
            "\23\uffff\1\u0532\1\u0533\26\uffff\1\u053a\3\uffff\1\u0531\1"+
            "\uffff\1\u0524\1\uffff\1\u0522\2\uffff\1\u053c\2\uffff\1\u052f"+
            "\1\u053c\37\uffff\1\u0530\6\uffff\1\u0539\2\uffff\1\u0537\1"+
            "\u0538\2\uffff\1\u0526\4\uffff\1\u052e\3\uffff\1\u0523\2\uffff"+
            "\1\u0528\1\u0529\1\uffff\1\u052a\1\uffff\1\u052c\2\uffff\1\u052d"+
            "\1\u0527\1\u0525\6\uffff\1\u053b",
            "",
            "",
            "\1\u0544\21\uffff\1\u0543\35\uffff\1\u0549\1\uffff\1\u0549"+
            "\1\u0547\1\uffff\1\u053f\1\u0546\1\u0541\1\uffff\1\u0549\1\u0540"+
            "\1\uffff\1\u0545\1\u0549\1\u0540\1\uffff\2\u053e\1\u0549\3\uffff"+
            "\2\u0549\1\uffff\6\u0549\1\uffff\1\u0542\24\uffff\1\u053d\2"+
            "\uffff\1\u0549\3\uffff\1\12\30\uffff\1\u0549\1\uffff\1\u0549",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u054a\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u054b\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u058c\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u05a1\5\uffff\1\u059f\35\uffff\1\u0596\24\uffff\1\u05a0"+
            "\23\uffff\1\u059d\1\u059e\26\uffff\1\u05a5\3\uffff\1\u059c\1"+
            "\uffff\1\u058f\1\uffff\1\u058d\2\uffff\1\u05a7\2\uffff\1\u059a"+
            "\1\u05a7\37\uffff\1\u059b\6\uffff\1\u05a4\2\uffff\1\u05a2\1"+
            "\u05a3\2\uffff\1\u0591\4\uffff\1\u0599\3\uffff\1\u058e\2\uffff"+
            "\1\u0593\1\u0594\1\uffff\1\u0595\1\uffff\1\u0597\2\uffff\1\u0598"+
            "\1\u0592\1\u0590\6\uffff\1\u05a6",
            "",
            "",
            "\1\u05af\21\uffff\1\u05ae\35\uffff\1\u05b4\1\uffff\1\u05b4"+
            "\1\u05b2\1\uffff\1\u05aa\1\u05b1\1\u05ac\1\uffff\1\u05b4\1\u05ab"+
            "\1\uffff\1\u05b0\1\u05b4\1\u05ab\1\uffff\2\u05a9\1\u05b4\3\uffff"+
            "\2\u05b4\1\uffff\6\u05b4\1\uffff\1\u05ad\24\uffff\1\u05a8\2"+
            "\uffff\1\u05b4\3\uffff\1\12\30\uffff\1\u05b4\1\uffff\1\u05b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u05b5\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u05b6\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u05f7\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "",
            "",
            "\1\u060c\5\uffff\1\u060a\35\uffff\1\u0601\24\uffff\1\u060b"+
            "\23\uffff\1\u0608\1\u0609\26\uffff\1\u0610\3\uffff\1\u0607\1"+
            "\uffff\1\u05fa\1\uffff\1\u05f8\2\uffff\1\u0612\2\uffff\1\u0605"+
            "\1\u0612\37\uffff\1\u0606\6\uffff\1\u060f\2\uffff\1\u060d\1"+
            "\u060e\2\uffff\1\u05fc\4\uffff\1\u0604\3\uffff\1\u05f9\2\uffff"+
            "\1\u05fe\1\u05ff\1\uffff\1\u0600\1\uffff\1\u0602\2\uffff\1\u0603"+
            "\1\u05fd\1\u05fb\6\uffff\1\u0611",
            "",
            "",
            "\1\u061a\21\uffff\1\u0619\35\uffff\1\u061f\1\uffff\1\u061f"+
            "\1\u061d\1\uffff\1\u0615\1\u061c\1\u0617\1\uffff\1\u061f\1\u0616"+
            "\1\uffff\1\u061b\1\u061f\1\u0616\1\uffff\2\u0614\1\u061f\3\uffff"+
            "\2\u061f\1\uffff\6\u061f\1\uffff\1\u0618\24\uffff\1\u0613\2"+
            "\uffff\1\u061f\3\uffff\1\12\30\uffff\1\u061f\1\uffff\1\u061f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "500:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_17 = input.LA(1);

                         
                        int index59_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_17==120) ) {s = 447;}

                        else if ( (LA59_17==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 448;}

                        else if ( (LA59_17==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 449;}

                        else if ( (LA59_17==126) && (synpred14_Objc())) {s = 450;}

                        else if ( (LA59_17==118) ) {s = 451;}

                        else if ( (LA59_17==159) && (synpred14_Objc())) {s = 452;}

                        else if ( (LA59_17==116) && (synpred14_Objc())) {s = 453;}

                        else if ( (LA59_17==ID) ) {s = 454;}

                        else if ( (LA59_17==STRING_LITERAL) && (synpred14_Objc())) {s = 455;}

                        else if ( (LA59_17==STRING_OBJC) && (synpred14_Objc())) {s = 456;}

                        else if ( (LA59_17==CHAR_LITERAL) && (synpred14_Objc())) {s = 457;}

                        else if ( (LA59_17==NUMBER_LITERAL) && (synpred14_Objc())) {s = 458;}

                        else if ( (LA59_17==BOOL_LITERAL) && (synpred14_Objc())) {s = 459;}

                        else if ( (LA59_17==169) && (synpred14_Objc())) {s = 460;}

                        else if ( (LA59_17==170) && (synpred14_Objc())) {s = 461;}

                        else if ( (LA59_17==166) && (synpred14_Objc())) {s = 462;}

                        else if ( (LA59_17==112) && (synpred14_Objc())) {s = 463;}

                        else if ( (LA59_17==202) && (synpred14_Objc())) {s = 464;}

                        else if ( (LA59_17==123||LA59_17==127) && (synpred14_Objc())) {s = 465;}

                        else if ( (LA59_17==119) && (synpred14_Objc())) {s = 466;}

                        else if ( (LA59_17==173||LA59_17==178||LA59_17==182||(LA59_17 >= 185 && LA59_17 <= 186)||LA59_17==188||LA59_17==190||(LA59_17 >= 193 && LA59_17 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_17);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_76 = input.LA(1);

                         
                        int index59_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_76==120) ) {s = 537;}

                        else if ( (LA59_76==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 538;}

                        else if ( (LA59_76==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 539;}

                        else if ( (LA59_76==126) && (synpred14_Objc())) {s = 540;}

                        else if ( (LA59_76==118) ) {s = 541;}

                        else if ( (LA59_76==159) && (synpred14_Objc())) {s = 542;}

                        else if ( (LA59_76==116) && (synpred14_Objc())) {s = 543;}

                        else if ( (LA59_76==ID) ) {s = 544;}

                        else if ( (LA59_76==STRING_LITERAL) && (synpred14_Objc())) {s = 545;}

                        else if ( (LA59_76==STRING_OBJC) && (synpred14_Objc())) {s = 546;}

                        else if ( (LA59_76==CHAR_LITERAL) && (synpred14_Objc())) {s = 547;}

                        else if ( (LA59_76==NUMBER_LITERAL) && (synpred14_Objc())) {s = 548;}

                        else if ( (LA59_76==BOOL_LITERAL) && (synpred14_Objc())) {s = 549;}

                        else if ( (LA59_76==169) && (synpred14_Objc())) {s = 550;}

                        else if ( (LA59_76==170) && (synpred14_Objc())) {s = 551;}

                        else if ( (LA59_76==166) && (synpred14_Objc())) {s = 552;}

                        else if ( (LA59_76==112) && (synpred14_Objc())) {s = 553;}

                        else if ( (LA59_76==202) && (synpred14_Objc())) {s = 554;}

                        else if ( (LA59_76==123||LA59_76==127) && (synpred14_Objc())) {s = 555;}

                        else if ( (LA59_76==119) && (synpred14_Objc())) {s = 556;}

                        else if ( (LA59_76==173||LA59_76==178||LA59_76==182||(LA59_76 >= 185 && LA59_76 <= 186)||LA59_76==188||LA59_76==190||(LA59_76 >= 193 && LA59_76 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_76);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_135 = input.LA(1);

                         
                        int index59_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_135==120) ) {s = 568;}

                        else if ( (LA59_135==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 569;}

                        else if ( (LA59_135==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 570;}

                        else if ( (LA59_135==126) && (synpred14_Objc())) {s = 571;}

                        else if ( (LA59_135==118) ) {s = 572;}

                        else if ( (LA59_135==159) && (synpred14_Objc())) {s = 573;}

                        else if ( (LA59_135==116) && (synpred14_Objc())) {s = 574;}

                        else if ( (LA59_135==ID) ) {s = 575;}

                        else if ( (LA59_135==STRING_LITERAL) && (synpred14_Objc())) {s = 576;}

                        else if ( (LA59_135==STRING_OBJC) && (synpred14_Objc())) {s = 577;}

                        else if ( (LA59_135==CHAR_LITERAL) && (synpred14_Objc())) {s = 578;}

                        else if ( (LA59_135==NUMBER_LITERAL) && (synpred14_Objc())) {s = 579;}

                        else if ( (LA59_135==BOOL_LITERAL) && (synpred14_Objc())) {s = 580;}

                        else if ( (LA59_135==169) && (synpred14_Objc())) {s = 581;}

                        else if ( (LA59_135==170) && (synpred14_Objc())) {s = 582;}

                        else if ( (LA59_135==166) && (synpred14_Objc())) {s = 583;}

                        else if ( (LA59_135==112) && (synpred14_Objc())) {s = 584;}

                        else if ( (LA59_135==202) && (synpred14_Objc())) {s = 585;}

                        else if ( (LA59_135==123||LA59_135==127) && (synpred14_Objc())) {s = 586;}

                        else if ( (LA59_135==119) && (synpred14_Objc())) {s = 587;}

                        else if ( (LA59_135==173||LA59_135==178||LA59_135==182||(LA59_135 >= 185 && LA59_135 <= 186)||LA59_135==188||LA59_135==190||(LA59_135 >= 193 && LA59_135 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_135);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_194 = input.LA(1);

                         
                        int index59_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_194==120) ) {s = 599;}

                        else if ( (LA59_194==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 600;}

                        else if ( (LA59_194==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 601;}

                        else if ( (LA59_194==126) && (synpred14_Objc())) {s = 602;}

                        else if ( (LA59_194==118) ) {s = 603;}

                        else if ( (LA59_194==159) && (synpred14_Objc())) {s = 604;}

                        else if ( (LA59_194==116) && (synpred14_Objc())) {s = 605;}

                        else if ( (LA59_194==ID) ) {s = 606;}

                        else if ( (LA59_194==STRING_LITERAL) && (synpred14_Objc())) {s = 607;}

                        else if ( (LA59_194==STRING_OBJC) && (synpred14_Objc())) {s = 608;}

                        else if ( (LA59_194==CHAR_LITERAL) && (synpred14_Objc())) {s = 609;}

                        else if ( (LA59_194==NUMBER_LITERAL) && (synpred14_Objc())) {s = 610;}

                        else if ( (LA59_194==BOOL_LITERAL) && (synpred14_Objc())) {s = 611;}

                        else if ( (LA59_194==169) && (synpred14_Objc())) {s = 612;}

                        else if ( (LA59_194==170) && (synpred14_Objc())) {s = 613;}

                        else if ( (LA59_194==166) && (synpred14_Objc())) {s = 614;}

                        else if ( (LA59_194==112) && (synpred14_Objc())) {s = 615;}

                        else if ( (LA59_194==202) && (synpred14_Objc())) {s = 616;}

                        else if ( (LA59_194==123||LA59_194==127) && (synpred14_Objc())) {s = 617;}

                        else if ( (LA59_194==119) && (synpred14_Objc())) {s = 618;}

                        else if ( (LA59_194==173||LA59_194==178||LA59_194==182||(LA59_194 >= 185 && LA59_194 <= 186)||LA59_194==188||LA59_194==190||(LA59_194 >= 193 && LA59_194 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_194);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_253 = input.LA(1);

                         
                        int index59_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_253==120) ) {s = 630;}

                        else if ( (LA59_253==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 631;}

                        else if ( (LA59_253==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 632;}

                        else if ( (LA59_253==126) && (synpred14_Objc())) {s = 633;}

                        else if ( (LA59_253==118) ) {s = 634;}

                        else if ( (LA59_253==159) && (synpred14_Objc())) {s = 635;}

                        else if ( (LA59_253==116) && (synpred14_Objc())) {s = 636;}

                        else if ( (LA59_253==ID) ) {s = 637;}

                        else if ( (LA59_253==STRING_LITERAL) && (synpred14_Objc())) {s = 638;}

                        else if ( (LA59_253==STRING_OBJC) && (synpred14_Objc())) {s = 639;}

                        else if ( (LA59_253==CHAR_LITERAL) && (synpred14_Objc())) {s = 640;}

                        else if ( (LA59_253==NUMBER_LITERAL) && (synpred14_Objc())) {s = 641;}

                        else if ( (LA59_253==BOOL_LITERAL) && (synpred14_Objc())) {s = 642;}

                        else if ( (LA59_253==169) && (synpred14_Objc())) {s = 643;}

                        else if ( (LA59_253==170) && (synpred14_Objc())) {s = 644;}

                        else if ( (LA59_253==166) && (synpred14_Objc())) {s = 645;}

                        else if ( (LA59_253==112) && (synpred14_Objc())) {s = 646;}

                        else if ( (LA59_253==202) && (synpred14_Objc())) {s = 647;}

                        else if ( (LA59_253==123||LA59_253==127) && (synpred14_Objc())) {s = 648;}

                        else if ( (LA59_253==119) && (synpred14_Objc())) {s = 649;}

                        else if ( (LA59_253==173||LA59_253==178||LA59_253==182||(LA59_253 >= 185 && LA59_253 <= 186)||LA59_253==188||LA59_253==190||(LA59_253 >= 193 && LA59_253 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_253);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_312 = input.LA(1);

                         
                        int index59_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_312==120) ) {s = 661;}

                        else if ( (LA59_312==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 662;}

                        else if ( (LA59_312==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 663;}

                        else if ( (LA59_312==126) && (synpred14_Objc())) {s = 664;}

                        else if ( (LA59_312==118) ) {s = 665;}

                        else if ( (LA59_312==159) && (synpred14_Objc())) {s = 666;}

                        else if ( (LA59_312==116) && (synpred14_Objc())) {s = 667;}

                        else if ( (LA59_312==ID) ) {s = 668;}

                        else if ( (LA59_312==STRING_LITERAL) && (synpred14_Objc())) {s = 669;}

                        else if ( (LA59_312==STRING_OBJC) && (synpred14_Objc())) {s = 670;}

                        else if ( (LA59_312==CHAR_LITERAL) && (synpred14_Objc())) {s = 671;}

                        else if ( (LA59_312==NUMBER_LITERAL) && (synpred14_Objc())) {s = 672;}

                        else if ( (LA59_312==BOOL_LITERAL) && (synpred14_Objc())) {s = 673;}

                        else if ( (LA59_312==169) && (synpred14_Objc())) {s = 674;}

                        else if ( (LA59_312==170) && (synpred14_Objc())) {s = 675;}

                        else if ( (LA59_312==166) && (synpred14_Objc())) {s = 676;}

                        else if ( (LA59_312==112) && (synpred14_Objc())) {s = 677;}

                        else if ( (LA59_312==202) && (synpred14_Objc())) {s = 678;}

                        else if ( (LA59_312==123||LA59_312==127) && (synpred14_Objc())) {s = 679;}

                        else if ( (LA59_312==119) && (synpred14_Objc())) {s = 680;}

                        else if ( (LA59_312==173||LA59_312==178||LA59_312==182||(LA59_312 >= 185 && LA59_312 <= 186)||LA59_312==188||LA59_312==190||(LA59_312 >= 193 && LA59_312 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_312);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_372 = input.LA(1);

                         
                        int index59_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_372==120) ) {s = 709;}

                        else if ( (LA59_372==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 710;}

                        else if ( (LA59_372==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 711;}

                        else if ( (LA59_372==126) && (synpred14_Objc())) {s = 712;}

                        else if ( (LA59_372==118) ) {s = 713;}

                        else if ( (LA59_372==159) && (synpred14_Objc())) {s = 714;}

                        else if ( (LA59_372==116) && (synpred14_Objc())) {s = 715;}

                        else if ( (LA59_372==ID) ) {s = 716;}

                        else if ( (LA59_372==STRING_LITERAL) && (synpred14_Objc())) {s = 717;}

                        else if ( (LA59_372==STRING_OBJC) && (synpred14_Objc())) {s = 718;}

                        else if ( (LA59_372==CHAR_LITERAL) && (synpred14_Objc())) {s = 719;}

                        else if ( (LA59_372==NUMBER_LITERAL) && (synpred14_Objc())) {s = 720;}

                        else if ( (LA59_372==BOOL_LITERAL) && (synpred14_Objc())) {s = 721;}

                        else if ( (LA59_372==169) && (synpred14_Objc())) {s = 722;}

                        else if ( (LA59_372==170) && (synpred14_Objc())) {s = 723;}

                        else if ( (LA59_372==166) && (synpred14_Objc())) {s = 724;}

                        else if ( (LA59_372==112) && (synpred14_Objc())) {s = 725;}

                        else if ( (LA59_372==202) && (synpred14_Objc())) {s = 726;}

                        else if ( (LA59_372==123||LA59_372==127) && (synpred14_Objc())) {s = 727;}

                        else if ( (LA59_372==119) && (synpred14_Objc())) {s = 728;}

                        else if ( (LA59_372==173||LA59_372==178||LA59_372==182||(LA59_372 >= 185 && LA59_372 <= 186)||LA59_372==188||LA59_372==190||(LA59_372 >= 193 && LA59_372 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_372);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_451 = input.LA(1);

                         
                        int index59_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_451==120) ) {s = 962;}

                        else if ( (LA59_451==182) ) {s = 963;}

                        else if ( (LA59_451==118) ) {s = 964;}

                        else if ( (LA59_451==195) ) {s = 965;}

                        else if ( (LA59_451==173) ) {s = 966;}

                        else if ( (LA59_451==194) ) {s = 967;}

                        else if ( (LA59_451==185) ) {s = 968;}

                        else if ( (LA59_451==186) ) {s = 969;}

                        else if ( (LA59_451==188) ) {s = 970;}

                        else if ( (LA59_451==ID) ) {s = 971;}

                        else if ( (LA59_451==190) ) {s = 972;}

                        else if ( (LA59_451==193) ) {s = 973;}

                        else if ( (LA59_451==178) ) {s = 974;}

                        else if ( (LA59_451==126) && (synpred14_Objc())) {s = 975;}

                        else if ( (LA59_451==159) && (synpred14_Objc())) {s = 976;}

                        else if ( (LA59_451==116) && (synpred14_Objc())) {s = 977;}

                        else if ( (LA59_451==STRING_LITERAL) && (synpred14_Objc())) {s = 978;}

                        else if ( (LA59_451==STRING_OBJC) && (synpred14_Objc())) {s = 979;}

                        else if ( (LA59_451==CHAR_LITERAL) && (synpred14_Objc())) {s = 980;}

                        else if ( (LA59_451==NUMBER_LITERAL) && (synpred14_Objc())) {s = 981;}

                        else if ( (LA59_451==BOOL_LITERAL) && (synpred14_Objc())) {s = 982;}

                        else if ( (LA59_451==169) && (synpred14_Objc())) {s = 983;}

                        else if ( (LA59_451==170) && (synpred14_Objc())) {s = 984;}

                        else if ( (LA59_451==166) && (synpred14_Objc())) {s = 985;}

                        else if ( (LA59_451==112) && (synpred14_Objc())) {s = 986;}

                        else if ( (LA59_451==202) && (synpred14_Objc())) {s = 987;}

                        else if ( (LA59_451==123||LA59_451==127) && (synpred14_Objc())) {s = 988;}

                         
                        input.seek(index59_451);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_454 = input.LA(1);

                         
                        int index59_454 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_454==166) ) {s = 989;}

                        else if ( ((LA59_454 >= 129 && LA59_454 <= 130)) && (synpred14_Objc())) {s = 990;}

                        else if ( (LA59_454==118) && (synpred14_Objc())) {s = 991;}

                        else if ( (LA59_454==123||LA59_454==127) && (synpred14_Objc())) {s = 992;}

                        else if ( (LA59_454==120) ) {s = 993;}

                        else if ( (LA59_454==145) && (synpred14_Objc())) {s = 994;}

                        else if ( (LA59_454==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 995;}

                        else if ( (LA59_454==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 996;}

                        else if ( (LA59_454==125) && (synpred14_Objc())) {s = 997;}

                        else if ( (LA59_454==119) ) {s = 998;}

                        else if ( (LA59_454==116) ) {s = 999;}

                        else if ( (LA59_454==173) ) {s = 10;}

                        else if ( (LA59_454==113||LA59_454==115||LA59_454==122||LA59_454==126||LA59_454==131||(LA59_454 >= 135 && LA59_454 <= 136)||(LA59_454 >= 138 && LA59_454 <= 143)||LA59_454==169||LA59_454==198||LA59_454==200) && (synpred14_Objc())) {s = 1001;}

                         
                        input.seek(index59_454);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_478 = input.LA(1);

                         
                        int index59_478 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_478==120) ) {s = 1003;}

                        else if ( (LA59_478==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1004;}

                        else if ( (LA59_478==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1005;}

                        else if ( (LA59_478==126) && (synpred14_Objc())) {s = 1006;}

                        else if ( (LA59_478==118) ) {s = 1007;}

                        else if ( (LA59_478==159) && (synpred14_Objc())) {s = 1008;}

                        else if ( (LA59_478==116) && (synpred14_Objc())) {s = 1009;}

                        else if ( (LA59_478==ID) ) {s = 1010;}

                        else if ( (LA59_478==STRING_LITERAL) && (synpred14_Objc())) {s = 1011;}

                        else if ( (LA59_478==STRING_OBJC) && (synpred14_Objc())) {s = 1012;}

                        else if ( (LA59_478==CHAR_LITERAL) && (synpred14_Objc())) {s = 1013;}

                        else if ( (LA59_478==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1014;}

                        else if ( (LA59_478==BOOL_LITERAL) && (synpred14_Objc())) {s = 1015;}

                        else if ( (LA59_478==169) && (synpred14_Objc())) {s = 1016;}

                        else if ( (LA59_478==170) && (synpred14_Objc())) {s = 1017;}

                        else if ( (LA59_478==166) && (synpred14_Objc())) {s = 1018;}

                        else if ( (LA59_478==112) && (synpred14_Objc())) {s = 1019;}

                        else if ( (LA59_478==202) && (synpred14_Objc())) {s = 1020;}

                        else if ( (LA59_478==123||LA59_478==127) && (synpred14_Objc())) {s = 1021;}

                        else if ( (LA59_478==119) && (synpred14_Objc())) {s = 1022;}

                        else if ( (LA59_478==173||LA59_478==178||LA59_478==182||(LA59_478 >= 185 && LA59_478 <= 186)||LA59_478==188||LA59_478==190||(LA59_478 >= 193 && LA59_478 <= 195)) ) {s = 10;}

                         
                        input.seek(index59_478);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_541 = input.LA(1);

                         
                        int index59_541 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_541==120) ) {s = 1100;}

                        else if ( (LA59_541==182) ) {s = 1101;}

                        else if ( (LA59_541==118) ) {s = 1102;}

                        else if ( (LA59_541==195) ) {s = 1103;}

                        else if ( (LA59_541==173) ) {s = 1104;}

                        else if ( (LA59_541==194) ) {s = 1105;}

                        else if ( (LA59_541==185) ) {s = 1106;}

                        else if ( (LA59_541==186) ) {s = 1107;}

                        else if ( (LA59_541==188) ) {s = 1108;}

                        else if ( (LA59_541==ID) ) {s = 1109;}

                        else if ( (LA59_541==190) ) {s = 1110;}

                        else if ( (LA59_541==193) ) {s = 1111;}

                        else if ( (LA59_541==178) ) {s = 1112;}

                        else if ( (LA59_541==126) && (synpred14_Objc())) {s = 1113;}

                        else if ( (LA59_541==159) && (synpred14_Objc())) {s = 1114;}

                        else if ( (LA59_541==116) && (synpred14_Objc())) {s = 1115;}

                        else if ( (LA59_541==STRING_LITERAL) && (synpred14_Objc())) {s = 1116;}

                        else if ( (LA59_541==STRING_OBJC) && (synpred14_Objc())) {s = 1117;}

                        else if ( (LA59_541==CHAR_LITERAL) && (synpred14_Objc())) {s = 1118;}

                        else if ( (LA59_541==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1119;}

                        else if ( (LA59_541==BOOL_LITERAL) && (synpred14_Objc())) {s = 1120;}

                        else if ( (LA59_541==169) && (synpred14_Objc())) {s = 1121;}

                        else if ( (LA59_541==170) && (synpred14_Objc())) {s = 1122;}

                        else if ( (LA59_541==166) && (synpred14_Objc())) {s = 1123;}

                        else if ( (LA59_541==112) && (synpred14_Objc())) {s = 1124;}

                        else if ( (LA59_541==202) && (synpred14_Objc())) {s = 1125;}

                        else if ( (LA59_541==123||LA59_541==127) && (synpred14_Objc())) {s = 1126;}

                         
                        input.seek(index59_541);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_544 = input.LA(1);

                         
                        int index59_544 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_544==166) ) {s = 1127;}

                        else if ( ((LA59_544 >= 129 && LA59_544 <= 130)) && (synpred14_Objc())) {s = 1128;}

                        else if ( (LA59_544==118) && (synpred14_Objc())) {s = 1129;}

                        else if ( (LA59_544==123||LA59_544==127) && (synpred14_Objc())) {s = 1130;}

                        else if ( (LA59_544==120) ) {s = 1131;}

                        else if ( (LA59_544==145) && (synpred14_Objc())) {s = 1132;}

                        else if ( (LA59_544==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1133;}

                        else if ( (LA59_544==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1134;}

                        else if ( (LA59_544==125) && (synpred14_Objc())) {s = 1135;}

                        else if ( (LA59_544==119) ) {s = 1136;}

                        else if ( (LA59_544==116) ) {s = 1137;}

                        else if ( (LA59_544==173) ) {s = 10;}

                        else if ( (LA59_544==113||LA59_544==115||LA59_544==122||LA59_544==126||LA59_544==131||(LA59_544 >= 135 && LA59_544 <= 136)||(LA59_544 >= 138 && LA59_544 <= 143)||LA59_544==169||LA59_544==198||LA59_544==200) && (synpred14_Objc())) {s = 1139;}

                         
                        input.seek(index59_544);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_572 = input.LA(1);

                         
                        int index59_572 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_572==120) ) {s = 1207;}

                        else if ( (LA59_572==182) ) {s = 1208;}

                        else if ( (LA59_572==118) ) {s = 1209;}

                        else if ( (LA59_572==195) ) {s = 1210;}

                        else if ( (LA59_572==173) ) {s = 1211;}

                        else if ( (LA59_572==194) ) {s = 1212;}

                        else if ( (LA59_572==185) ) {s = 1213;}

                        else if ( (LA59_572==186) ) {s = 1214;}

                        else if ( (LA59_572==188) ) {s = 1215;}

                        else if ( (LA59_572==ID) ) {s = 1216;}

                        else if ( (LA59_572==190) ) {s = 1217;}

                        else if ( (LA59_572==193) ) {s = 1218;}

                        else if ( (LA59_572==178) ) {s = 1219;}

                        else if ( (LA59_572==126) && (synpred14_Objc())) {s = 1220;}

                        else if ( (LA59_572==159) && (synpred14_Objc())) {s = 1221;}

                        else if ( (LA59_572==116) && (synpred14_Objc())) {s = 1222;}

                        else if ( (LA59_572==STRING_LITERAL) && (synpred14_Objc())) {s = 1223;}

                        else if ( (LA59_572==STRING_OBJC) && (synpred14_Objc())) {s = 1224;}

                        else if ( (LA59_572==CHAR_LITERAL) && (synpred14_Objc())) {s = 1225;}

                        else if ( (LA59_572==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1226;}

                        else if ( (LA59_572==BOOL_LITERAL) && (synpred14_Objc())) {s = 1227;}

                        else if ( (LA59_572==169) && (synpred14_Objc())) {s = 1228;}

                        else if ( (LA59_572==170) && (synpred14_Objc())) {s = 1229;}

                        else if ( (LA59_572==166) && (synpred14_Objc())) {s = 1230;}

                        else if ( (LA59_572==112) && (synpred14_Objc())) {s = 1231;}

                        else if ( (LA59_572==202) && (synpred14_Objc())) {s = 1232;}

                        else if ( (LA59_572==123||LA59_572==127) && (synpred14_Objc())) {s = 1233;}

                         
                        input.seek(index59_572);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA59_575 = input.LA(1);

                         
                        int index59_575 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_575==166) ) {s = 1234;}

                        else if ( ((LA59_575 >= 129 && LA59_575 <= 130)) && (synpred14_Objc())) {s = 1235;}

                        else if ( (LA59_575==118) && (synpred14_Objc())) {s = 1236;}

                        else if ( (LA59_575==123||LA59_575==127) && (synpred14_Objc())) {s = 1237;}

                        else if ( (LA59_575==120) ) {s = 1238;}

                        else if ( (LA59_575==145) && (synpred14_Objc())) {s = 1239;}

                        else if ( (LA59_575==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1240;}

                        else if ( (LA59_575==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1241;}

                        else if ( (LA59_575==125) && (synpred14_Objc())) {s = 1242;}

                        else if ( (LA59_575==119) ) {s = 1243;}

                        else if ( (LA59_575==116) ) {s = 1244;}

                        else if ( (LA59_575==173) ) {s = 10;}

                        else if ( (LA59_575==113||LA59_575==115||LA59_575==122||LA59_575==126||LA59_575==131||(LA59_575 >= 135 && LA59_575 <= 136)||(LA59_575 >= 138 && LA59_575 <= 143)||LA59_575==169||LA59_575==198||LA59_575==200) && (synpred14_Objc())) {s = 1246;}

                         
                        input.seek(index59_575);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA59_603 = input.LA(1);

                         
                        int index59_603 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_603==120) ) {s = 1314;}

                        else if ( (LA59_603==182) ) {s = 1315;}

                        else if ( (LA59_603==118) ) {s = 1316;}

                        else if ( (LA59_603==195) ) {s = 1317;}

                        else if ( (LA59_603==173) ) {s = 1318;}

                        else if ( (LA59_603==194) ) {s = 1319;}

                        else if ( (LA59_603==185) ) {s = 1320;}

                        else if ( (LA59_603==186) ) {s = 1321;}

                        else if ( (LA59_603==188) ) {s = 1322;}

                        else if ( (LA59_603==ID) ) {s = 1323;}

                        else if ( (LA59_603==190) ) {s = 1324;}

                        else if ( (LA59_603==193) ) {s = 1325;}

                        else if ( (LA59_603==178) ) {s = 1326;}

                        else if ( (LA59_603==126) && (synpred14_Objc())) {s = 1327;}

                        else if ( (LA59_603==159) && (synpred14_Objc())) {s = 1328;}

                        else if ( (LA59_603==116) && (synpred14_Objc())) {s = 1329;}

                        else if ( (LA59_603==STRING_LITERAL) && (synpred14_Objc())) {s = 1330;}

                        else if ( (LA59_603==STRING_OBJC) && (synpred14_Objc())) {s = 1331;}

                        else if ( (LA59_603==CHAR_LITERAL) && (synpred14_Objc())) {s = 1332;}

                        else if ( (LA59_603==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1333;}

                        else if ( (LA59_603==BOOL_LITERAL) && (synpred14_Objc())) {s = 1334;}

                        else if ( (LA59_603==169) && (synpred14_Objc())) {s = 1335;}

                        else if ( (LA59_603==170) && (synpred14_Objc())) {s = 1336;}

                        else if ( (LA59_603==166) && (synpred14_Objc())) {s = 1337;}

                        else if ( (LA59_603==112) && (synpred14_Objc())) {s = 1338;}

                        else if ( (LA59_603==202) && (synpred14_Objc())) {s = 1339;}

                        else if ( (LA59_603==123||LA59_603==127) && (synpred14_Objc())) {s = 1340;}

                         
                        input.seek(index59_603);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA59_606 = input.LA(1);

                         
                        int index59_606 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_606==166) ) {s = 1341;}

                        else if ( ((LA59_606 >= 129 && LA59_606 <= 130)) && (synpred14_Objc())) {s = 1342;}

                        else if ( (LA59_606==118) && (synpred14_Objc())) {s = 1343;}

                        else if ( (LA59_606==123||LA59_606==127) && (synpred14_Objc())) {s = 1344;}

                        else if ( (LA59_606==120) ) {s = 1345;}

                        else if ( (LA59_606==145) && (synpred14_Objc())) {s = 1346;}

                        else if ( (LA59_606==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1347;}

                        else if ( (LA59_606==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1348;}

                        else if ( (LA59_606==125) && (synpred14_Objc())) {s = 1349;}

                        else if ( (LA59_606==119) ) {s = 1350;}

                        else if ( (LA59_606==116) ) {s = 1351;}

                        else if ( (LA59_606==173) ) {s = 10;}

                        else if ( (LA59_606==113||LA59_606==115||LA59_606==122||LA59_606==126||LA59_606==131||(LA59_606 >= 135 && LA59_606 <= 136)||(LA59_606 >= 138 && LA59_606 <= 143)||LA59_606==169||LA59_606==198||LA59_606==200) && (synpred14_Objc())) {s = 1353;}

                         
                        input.seek(index59_606);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA59_634 = input.LA(1);

                         
                        int index59_634 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_634==120) ) {s = 1421;}

                        else if ( (LA59_634==182) ) {s = 1422;}

                        else if ( (LA59_634==118) ) {s = 1423;}

                        else if ( (LA59_634==195) ) {s = 1424;}

                        else if ( (LA59_634==173) ) {s = 1425;}

                        else if ( (LA59_634==194) ) {s = 1426;}

                        else if ( (LA59_634==185) ) {s = 1427;}

                        else if ( (LA59_634==186) ) {s = 1428;}

                        else if ( (LA59_634==188) ) {s = 1429;}

                        else if ( (LA59_634==ID) ) {s = 1430;}

                        else if ( (LA59_634==190) ) {s = 1431;}

                        else if ( (LA59_634==193) ) {s = 1432;}

                        else if ( (LA59_634==178) ) {s = 1433;}

                        else if ( (LA59_634==126) && (synpred14_Objc())) {s = 1434;}

                        else if ( (LA59_634==159) && (synpred14_Objc())) {s = 1435;}

                        else if ( (LA59_634==116) && (synpred14_Objc())) {s = 1436;}

                        else if ( (LA59_634==STRING_LITERAL) && (synpred14_Objc())) {s = 1437;}

                        else if ( (LA59_634==STRING_OBJC) && (synpred14_Objc())) {s = 1438;}

                        else if ( (LA59_634==CHAR_LITERAL) && (synpred14_Objc())) {s = 1439;}

                        else if ( (LA59_634==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1440;}

                        else if ( (LA59_634==BOOL_LITERAL) && (synpred14_Objc())) {s = 1441;}

                        else if ( (LA59_634==169) && (synpred14_Objc())) {s = 1442;}

                        else if ( (LA59_634==170) && (synpred14_Objc())) {s = 1443;}

                        else if ( (LA59_634==166) && (synpred14_Objc())) {s = 1444;}

                        else if ( (LA59_634==112) && (synpred14_Objc())) {s = 1445;}

                        else if ( (LA59_634==202) && (synpred14_Objc())) {s = 1446;}

                        else if ( (LA59_634==123||LA59_634==127) && (synpred14_Objc())) {s = 1447;}

                         
                        input.seek(index59_634);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA59_637 = input.LA(1);

                         
                        int index59_637 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_637==166) ) {s = 1448;}

                        else if ( ((LA59_637 >= 129 && LA59_637 <= 130)) && (synpred14_Objc())) {s = 1449;}

                        else if ( (LA59_637==118) && (synpred14_Objc())) {s = 1450;}

                        else if ( (LA59_637==123||LA59_637==127) && (synpred14_Objc())) {s = 1451;}

                        else if ( (LA59_637==120) ) {s = 1452;}

                        else if ( (LA59_637==145) && (synpred14_Objc())) {s = 1453;}

                        else if ( (LA59_637==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1454;}

                        else if ( (LA59_637==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1455;}

                        else if ( (LA59_637==125) && (synpred14_Objc())) {s = 1456;}

                        else if ( (LA59_637==119) ) {s = 1457;}

                        else if ( (LA59_637==116) ) {s = 1458;}

                        else if ( (LA59_637==173) ) {s = 10;}

                        else if ( (LA59_637==113||LA59_637==115||LA59_637==122||LA59_637==126||LA59_637==131||(LA59_637 >= 135 && LA59_637 <= 136)||(LA59_637 >= 138 && LA59_637 <= 143)||LA59_637==169||LA59_637==198||LA59_637==200) && (synpred14_Objc())) {s = 1460;}

                         
                        input.seek(index59_637);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA59_665 = input.LA(1);

                         
                        int index59_665 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_665==120) ) {s = 1528;}

                        else if ( (LA59_665==182) ) {s = 1529;}

                        else if ( (LA59_665==118) ) {s = 1530;}

                        else if ( (LA59_665==195) ) {s = 1531;}

                        else if ( (LA59_665==173) ) {s = 1532;}

                        else if ( (LA59_665==194) ) {s = 1533;}

                        else if ( (LA59_665==185) ) {s = 1534;}

                        else if ( (LA59_665==186) ) {s = 1535;}

                        else if ( (LA59_665==188) ) {s = 1536;}

                        else if ( (LA59_665==ID) ) {s = 1537;}

                        else if ( (LA59_665==190) ) {s = 1538;}

                        else if ( (LA59_665==193) ) {s = 1539;}

                        else if ( (LA59_665==178) ) {s = 1540;}

                        else if ( (LA59_665==126) && (synpred14_Objc())) {s = 1541;}

                        else if ( (LA59_665==159) && (synpred14_Objc())) {s = 1542;}

                        else if ( (LA59_665==116) && (synpred14_Objc())) {s = 1543;}

                        else if ( (LA59_665==STRING_LITERAL) && (synpred14_Objc())) {s = 1544;}

                        else if ( (LA59_665==STRING_OBJC) && (synpred14_Objc())) {s = 1545;}

                        else if ( (LA59_665==CHAR_LITERAL) && (synpred14_Objc())) {s = 1546;}

                        else if ( (LA59_665==NUMBER_LITERAL) && (synpred14_Objc())) {s = 1547;}

                        else if ( (LA59_665==BOOL_LITERAL) && (synpred14_Objc())) {s = 1548;}

                        else if ( (LA59_665==169) && (synpred14_Objc())) {s = 1549;}

                        else if ( (LA59_665==170) && (synpred14_Objc())) {s = 1550;}

                        else if ( (LA59_665==166) && (synpred14_Objc())) {s = 1551;}

                        else if ( (LA59_665==112) && (synpred14_Objc())) {s = 1552;}

                        else if ( (LA59_665==202) && (synpred14_Objc())) {s = 1553;}

                        else if ( (LA59_665==123||LA59_665==127) && (synpred14_Objc())) {s = 1554;}

                         
                        input.seek(index59_665);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA59_668 = input.LA(1);

                         
                        int index59_668 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_668==166) ) {s = 1555;}

                        else if ( ((LA59_668 >= 129 && LA59_668 <= 130)) && (synpred14_Objc())) {s = 1556;}

                        else if ( (LA59_668==118) && (synpred14_Objc())) {s = 1557;}

                        else if ( (LA59_668==123||LA59_668==127) && (synpred14_Objc())) {s = 1558;}

                        else if ( (LA59_668==120) ) {s = 1559;}

                        else if ( (LA59_668==145) && (synpred14_Objc())) {s = 1560;}

                        else if ( (LA59_668==SINGLE_COMMENT_LIT) && (synpred14_Objc())) {s = 1561;}

                        else if ( (LA59_668==MULTI_COMMENT_LIT) && (synpred14_Objc())) {s = 1562;}

                        else if ( (LA59_668==125) && (synpred14_Objc())) {s = 1563;}

                        else if ( (LA59_668==119) ) {s = 1564;}

                        else if ( (LA59_668==116) ) {s = 1565;}

                        else if ( (LA59_668==173) ) {s = 10;}

                        else if ( (LA59_668==113||LA59_668==115||LA59_668==122||LA59_668==126||LA59_668==131||(LA59_668 >= 135 && LA59_668 <= 136)||(LA59_668 >= 138 && LA59_668 <= 143)||LA59_668==169||LA59_668==198||LA59_668==200) && (synpred14_Objc())) {s = 1567;}

                         
                        input.seek(index59_668);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA59_691 = input.LA(1);

                         
                        int index59_691 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_691);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA59_692 = input.LA(1);

                         
                        int index59_692 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_692);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA59_693 = input.LA(1);

                         
                        int index59_693 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_693);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA59_694 = input.LA(1);

                         
                        int index59_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_694);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA59_695 = input.LA(1);

                         
                        int index59_695 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_695);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA59_696 = input.LA(1);

                         
                        int index59_696 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_696);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA59_697 = input.LA(1);

                         
                        int index59_697 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_697);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA59_698 = input.LA(1);

                         
                        int index59_698 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_698);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA59_699 = input.LA(1);

                         
                        int index59_699 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_699);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA59_700 = input.LA(1);

                         
                        int index59_700 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_700);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA59_701 = input.LA(1);

                         
                        int index59_701 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_701);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA59_702 = input.LA(1);

                         
                        int index59_702 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_702);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA59_703 = input.LA(1);

                         
                        int index59_703 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_703);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA59_704 = input.LA(1);

                         
                        int index59_704 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_704);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA59_705 = input.LA(1);

                         
                        int index59_705 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_705);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA59_706 = input.LA(1);

                         
                        int index59_706 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_706);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA59_707 = input.LA(1);

                         
                        int index59_707 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_707);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA59_708 = input.LA(1);

                         
                        int index59_708 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_708);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA59_709 = input.LA(1);

                         
                        int index59_709 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_709);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA59_713 = input.LA(1);

                         
                        int index59_713 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_713);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA59_716 = input.LA(1);

                         
                        int index59_716 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_716);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA59_739 = input.LA(1);

                         
                        int index59_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_739);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA59_740 = input.LA(1);

                         
                        int index59_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_740);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA59_741 = input.LA(1);

                         
                        int index59_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_741);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA59_742 = input.LA(1);

                         
                        int index59_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_742);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA59_743 = input.LA(1);

                         
                        int index59_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_743);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA59_744 = input.LA(1);

                         
                        int index59_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_744);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA59_745 = input.LA(1);

                         
                        int index59_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_745);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA59_746 = input.LA(1);

                         
                        int index59_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_746);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA59_747 = input.LA(1);

                         
                        int index59_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_747);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA59_748 = input.LA(1);

                         
                        int index59_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_748);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA59_749 = input.LA(1);

                         
                        int index59_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_749);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA59_750 = input.LA(1);

                         
                        int index59_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_750);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA59_751 = input.LA(1);

                         
                        int index59_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_751);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA59_752 = input.LA(1);

                         
                        int index59_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_752);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA59_753 = input.LA(1);

                         
                        int index59_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_753);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA59_754 = input.LA(1);

                         
                        int index59_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_754);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA59_755 = input.LA(1);

                         
                        int index59_755 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_755);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA59_756 = input.LA(1);

                         
                        int index59_756 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_756);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA59_757 = input.LA(1);

                         
                        int index59_757 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_757);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA59_758 = input.LA(1);

                         
                        int index59_758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_758);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA59_759 = input.LA(1);

                         
                        int index59_759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_759);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA59_760 = input.LA(1);

                         
                        int index59_760 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_760);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA59_761 = input.LA(1);

                         
                        int index59_761 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_761);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA59_762 = input.LA(1);

                         
                        int index59_762 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_762);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA59_763 = input.LA(1);

                         
                        int index59_763 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_763);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA59_764 = input.LA(1);

                         
                        int index59_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_764);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA59_765 = input.LA(1);

                         
                        int index59_765 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_765);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA59_766 = input.LA(1);

                         
                        int index59_766 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_766);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA59_767 = input.LA(1);

                         
                        int index59_767 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_767);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA59_768 = input.LA(1);

                         
                        int index59_768 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_768);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA59_769 = input.LA(1);

                         
                        int index59_769 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_769);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA59_770 = input.LA(1);

                         
                        int index59_770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_770);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA59_771 = input.LA(1);

                         
                        int index59_771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_771);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA59_772 = input.LA(1);

                         
                        int index59_772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_772);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA59_773 = input.LA(1);

                         
                        int index59_773 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_773);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA59_774 = input.LA(1);

                         
                        int index59_774 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_774);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA59_775 = input.LA(1);

                         
                        int index59_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_775);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA59_776 = input.LA(1);

                         
                        int index59_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_776);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA59_777 = input.LA(1);

                         
                        int index59_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_777);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA59_778 = input.LA(1);

                         
                        int index59_778 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_778);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA59_779 = input.LA(1);

                         
                        int index59_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_779);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA59_780 = input.LA(1);

                         
                        int index59_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_780);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA59_781 = input.LA(1);

                         
                        int index59_781 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_781);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA59_782 = input.LA(1);

                         
                        int index59_782 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_782);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA59_783 = input.LA(1);

                         
                        int index59_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_783);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA59_784 = input.LA(1);

                         
                        int index59_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_784);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA59_785 = input.LA(1);

                         
                        int index59_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_785);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA59_786 = input.LA(1);

                         
                        int index59_786 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_786);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA59_787 = input.LA(1);

                         
                        int index59_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_787);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA59_789 = input.LA(1);

                         
                        int index59_789 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_789);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA59_790 = input.LA(1);

                         
                        int index59_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_790);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA59_791 = input.LA(1);

                         
                        int index59_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_791);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA59_792 = input.LA(1);

                         
                        int index59_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_792);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA59_793 = input.LA(1);

                         
                        int index59_793 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_793);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA59_794 = input.LA(1);

                         
                        int index59_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_794);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA59_795 = input.LA(1);

                         
                        int index59_795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_795);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA59_797 = input.LA(1);

                         
                        int index59_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_797);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA59_798 = input.LA(1);

                         
                        int index59_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_798);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA59_799 = input.LA(1);

                         
                        int index59_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_799);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA59_800 = input.LA(1);

                         
                        int index59_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_800);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA59_801 = input.LA(1);

                         
                        int index59_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_801);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA59_802 = input.LA(1);

                         
                        int index59_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_802);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA59_804 = input.LA(1);

                         
                        int index59_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_804);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA59_805 = input.LA(1);

                         
                        int index59_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_805);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA59_806 = input.LA(1);

                         
                        int index59_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_806);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA59_807 = input.LA(1);

                         
                        int index59_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_807);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA59_808 = input.LA(1);

                         
                        int index59_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_808);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA59_809 = input.LA(1);

                         
                        int index59_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_809);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA59_811 = input.LA(1);

                         
                        int index59_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_811);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA59_812 = input.LA(1);

                         
                        int index59_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_812);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA59_813 = input.LA(1);

                         
                        int index59_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_813);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA59_814 = input.LA(1);

                         
                        int index59_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_814);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA59_815 = input.LA(1);

                         
                        int index59_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_815);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA59_816 = input.LA(1);

                         
                        int index59_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_816);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA59_818 = input.LA(1);

                         
                        int index59_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_818);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA59_819 = input.LA(1);

                         
                        int index59_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_819);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA59_820 = input.LA(1);

                         
                        int index59_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_820);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA59_821 = input.LA(1);

                         
                        int index59_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_821);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA59_822 = input.LA(1);

                         
                        int index59_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_822);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA59_823 = input.LA(1);

                         
                        int index59_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_823);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA59_825 = input.LA(1);

                         
                        int index59_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_825);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA59_826 = input.LA(1);

                         
                        int index59_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_826);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA59_827 = input.LA(1);

                         
                        int index59_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_827);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA59_828 = input.LA(1);

                         
                        int index59_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_828);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA59_829 = input.LA(1);

                         
                        int index59_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_829);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA59_830 = input.LA(1);

                         
                        int index59_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_830);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA59_831 = input.LA(1);

                         
                        int index59_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_831);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA59_832 = input.LA(1);

                         
                        int index59_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_832);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA59_833 = input.LA(1);

                         
                        int index59_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_833);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA59_834 = input.LA(1);

                         
                        int index59_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_834);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA59_835 = input.LA(1);

                         
                        int index59_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_835);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA59_836 = input.LA(1);

                         
                        int index59_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_836);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA59_837 = input.LA(1);

                         
                        int index59_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_837);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA59_838 = input.LA(1);

                         
                        int index59_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_838);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA59_839 = input.LA(1);

                         
                        int index59_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_839);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA59_840 = input.LA(1);

                         
                        int index59_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_840);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA59_841 = input.LA(1);

                         
                        int index59_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_841);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA59_842 = input.LA(1);

                         
                        int index59_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_842);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA59_843 = input.LA(1);

                         
                        int index59_843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_843);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA59_844 = input.LA(1);

                         
                        int index59_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_844);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA59_845 = input.LA(1);

                         
                        int index59_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_845);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA59_846 = input.LA(1);

                         
                        int index59_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_846);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA59_847 = input.LA(1);

                         
                        int index59_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_847);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA59_848 = input.LA(1);

                         
                        int index59_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_848);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA59_849 = input.LA(1);

                         
                        int index59_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_849);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA59_850 = input.LA(1);

                         
                        int index59_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_850);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA59_851 = input.LA(1);

                         
                        int index59_851 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_851);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA59_852 = input.LA(1);

                         
                        int index59_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_852);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA59_853 = input.LA(1);

                         
                        int index59_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_853);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA59_854 = input.LA(1);

                         
                        int index59_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_854);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA59_855 = input.LA(1);

                         
                        int index59_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_855);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA59_856 = input.LA(1);

                         
                        int index59_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_856);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA59_857 = input.LA(1);

                         
                        int index59_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_857);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA59_858 = input.LA(1);

                         
                        int index59_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_858);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA59_859 = input.LA(1);

                         
                        int index59_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_859);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA59_860 = input.LA(1);

                         
                        int index59_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_860);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA59_861 = input.LA(1);

                         
                        int index59_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_861);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA59_862 = input.LA(1);

                         
                        int index59_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_862);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA59_863 = input.LA(1);

                         
                        int index59_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_863);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA59_864 = input.LA(1);

                         
                        int index59_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_864);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA59_865 = input.LA(1);

                         
                        int index59_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_865);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA59_866 = input.LA(1);

                         
                        int index59_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_866);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA59_867 = input.LA(1);

                         
                        int index59_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_867);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA59_868 = input.LA(1);

                         
                        int index59_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_868);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA59_869 = input.LA(1);

                         
                        int index59_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_869);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA59_870 = input.LA(1);

                         
                        int index59_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_870);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA59_871 = input.LA(1);

                         
                        int index59_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_871);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA59_872 = input.LA(1);

                         
                        int index59_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_872);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA59_873 = input.LA(1);

                         
                        int index59_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_873);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA59_874 = input.LA(1);

                         
                        int index59_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_874);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA59_875 = input.LA(1);

                         
                        int index59_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_875);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA59_876 = input.LA(1);

                         
                        int index59_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_876);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA59_877 = input.LA(1);

                         
                        int index59_877 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_877);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA59_878 = input.LA(1);

                         
                        int index59_878 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_878);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA59_879 = input.LA(1);

                         
                        int index59_879 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_879);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA59_880 = input.LA(1);

                         
                        int index59_880 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_880);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA59_881 = input.LA(1);

                         
                        int index59_881 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_881);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA59_882 = input.LA(1);

                         
                        int index59_882 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_882);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA59_883 = input.LA(1);

                         
                        int index59_883 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_883);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA59_884 = input.LA(1);

                         
                        int index59_884 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_884);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA59_885 = input.LA(1);

                         
                        int index59_885 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_885);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA59_886 = input.LA(1);

                         
                        int index59_886 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_886);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA59_887 = input.LA(1);

                         
                        int index59_887 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_887);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA59_888 = input.LA(1);

                         
                        int index59_888 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_888);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA59_889 = input.LA(1);

                         
                        int index59_889 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_889);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA59_890 = input.LA(1);

                         
                        int index59_890 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_890);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA59_891 = input.LA(1);

                         
                        int index59_891 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_891);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA59_892 = input.LA(1);

                         
                        int index59_892 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_892);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA59_893 = input.LA(1);

                         
                        int index59_893 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_893);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA59_894 = input.LA(1);

                         
                        int index59_894 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_894);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA59_895 = input.LA(1);

                         
                        int index59_895 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_895);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA59_896 = input.LA(1);

                         
                        int index59_896 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_896);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA59_961 = input.LA(1);

                         
                        int index59_961 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_961);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA59_962 = input.LA(1);

                         
                        int index59_962 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_962);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA59_963 = input.LA(1);

                         
                        int index59_963 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_963);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA59_964 = input.LA(1);

                         
                        int index59_964 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_964);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA59_965 = input.LA(1);

                         
                        int index59_965 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_965);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA59_966 = input.LA(1);

                         
                        int index59_966 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_966);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA59_967 = input.LA(1);

                         
                        int index59_967 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_967);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA59_968 = input.LA(1);

                         
                        int index59_968 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_968);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA59_969 = input.LA(1);

                         
                        int index59_969 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_969);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA59_970 = input.LA(1);

                         
                        int index59_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_970);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA59_971 = input.LA(1);

                         
                        int index59_971 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_971);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA59_972 = input.LA(1);

                         
                        int index59_972 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_972);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA59_973 = input.LA(1);

                         
                        int index59_973 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_973);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA59_974 = input.LA(1);

                         
                        int index59_974 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_974);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA59_989 = input.LA(1);

                         
                        int index59_989 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_989);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA59_993 = input.LA(1);

                         
                        int index59_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_993);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA59_998 = input.LA(1);

                         
                        int index59_998 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_998);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA59_999 = input.LA(1);

                         
                        int index59_999 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_999);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA59_1002 = input.LA(1);

                         
                        int index59_1002 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1002);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA59_1003 = input.LA(1);

                         
                        int index59_1003 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1003);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA59_1007 = input.LA(1);

                         
                        int index59_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA59_1010 = input.LA(1);

                         
                        int index59_1010 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1010);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA59_1033 = input.LA(1);

                         
                        int index59_1033 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1033);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA59_1034 = input.LA(1);

                         
                        int index59_1034 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1034);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA59_1099 = input.LA(1);

                         
                        int index59_1099 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1099);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA59_1100 = input.LA(1);

                         
                        int index59_1100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1100);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA59_1101 = input.LA(1);

                         
                        int index59_1101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1101);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA59_1102 = input.LA(1);

                         
                        int index59_1102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1102);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA59_1103 = input.LA(1);

                         
                        int index59_1103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1103);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA59_1104 = input.LA(1);

                         
                        int index59_1104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1104);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA59_1105 = input.LA(1);

                         
                        int index59_1105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1105);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA59_1106 = input.LA(1);

                         
                        int index59_1106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1106);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA59_1107 = input.LA(1);

                         
                        int index59_1107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1107);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA59_1108 = input.LA(1);

                         
                        int index59_1108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1108);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA59_1109 = input.LA(1);

                         
                        int index59_1109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1109);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA59_1110 = input.LA(1);

                         
                        int index59_1110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1110);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA59_1111 = input.LA(1);

                         
                        int index59_1111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1111);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA59_1112 = input.LA(1);

                         
                        int index59_1112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1112);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA59_1127 = input.LA(1);

                         
                        int index59_1127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1127);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA59_1131 = input.LA(1);

                         
                        int index59_1131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1131);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA59_1136 = input.LA(1);

                         
                        int index59_1136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1136);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA59_1137 = input.LA(1);

                         
                        int index59_1137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1137);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA59_1140 = input.LA(1);

                         
                        int index59_1140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1140);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA59_1141 = input.LA(1);

                         
                        int index59_1141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1141);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA59_1206 = input.LA(1);

                         
                        int index59_1206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1206);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA59_1207 = input.LA(1);

                         
                        int index59_1207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1207);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA59_1208 = input.LA(1);

                         
                        int index59_1208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1208);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA59_1209 = input.LA(1);

                         
                        int index59_1209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1209);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA59_1210 = input.LA(1);

                         
                        int index59_1210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1210);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA59_1211 = input.LA(1);

                         
                        int index59_1211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1211);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA59_1212 = input.LA(1);

                         
                        int index59_1212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1212);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA59_1213 = input.LA(1);

                         
                        int index59_1213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1213);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA59_1214 = input.LA(1);

                         
                        int index59_1214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1214);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA59_1215 = input.LA(1);

                         
                        int index59_1215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1215);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA59_1216 = input.LA(1);

                         
                        int index59_1216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1216);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA59_1217 = input.LA(1);

                         
                        int index59_1217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1217);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA59_1218 = input.LA(1);

                         
                        int index59_1218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1218);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA59_1219 = input.LA(1);

                         
                        int index59_1219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1219);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA59_1234 = input.LA(1);

                         
                        int index59_1234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1234);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA59_1238 = input.LA(1);

                         
                        int index59_1238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1238);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA59_1243 = input.LA(1);

                         
                        int index59_1243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1243);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA59_1244 = input.LA(1);

                         
                        int index59_1244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1244);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA59_1247 = input.LA(1);

                         
                        int index59_1247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1247);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA59_1248 = input.LA(1);

                         
                        int index59_1248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1248);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA59_1313 = input.LA(1);

                         
                        int index59_1313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1313);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA59_1314 = input.LA(1);

                         
                        int index59_1314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1314);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA59_1315 = input.LA(1);

                         
                        int index59_1315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1315);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA59_1316 = input.LA(1);

                         
                        int index59_1316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1316);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA59_1317 = input.LA(1);

                         
                        int index59_1317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1317);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA59_1318 = input.LA(1);

                         
                        int index59_1318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1318);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA59_1319 = input.LA(1);

                         
                        int index59_1319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1319);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA59_1320 = input.LA(1);

                         
                        int index59_1320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1320);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA59_1321 = input.LA(1);

                         
                        int index59_1321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1321);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA59_1322 = input.LA(1);

                         
                        int index59_1322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1322);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA59_1323 = input.LA(1);

                         
                        int index59_1323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1323);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA59_1324 = input.LA(1);

                         
                        int index59_1324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1324);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA59_1325 = input.LA(1);

                         
                        int index59_1325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1325);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA59_1326 = input.LA(1);

                         
                        int index59_1326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1326);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA59_1341 = input.LA(1);

                         
                        int index59_1341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1341);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA59_1345 = input.LA(1);

                         
                        int index59_1345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1345);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA59_1350 = input.LA(1);

                         
                        int index59_1350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1350);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA59_1351 = input.LA(1);

                         
                        int index59_1351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1351);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA59_1354 = input.LA(1);

                         
                        int index59_1354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1354);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA59_1355 = input.LA(1);

                         
                        int index59_1355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1355);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA59_1420 = input.LA(1);

                         
                        int index59_1420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1420);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA59_1421 = input.LA(1);

                         
                        int index59_1421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1421);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA59_1422 = input.LA(1);

                         
                        int index59_1422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1422);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA59_1423 = input.LA(1);

                         
                        int index59_1423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1423);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA59_1424 = input.LA(1);

                         
                        int index59_1424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1424);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA59_1425 = input.LA(1);

                         
                        int index59_1425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1425);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA59_1426 = input.LA(1);

                         
                        int index59_1426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1426);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA59_1427 = input.LA(1);

                         
                        int index59_1427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1427);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA59_1428 = input.LA(1);

                         
                        int index59_1428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1428);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA59_1429 = input.LA(1);

                         
                        int index59_1429 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1429);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA59_1430 = input.LA(1);

                         
                        int index59_1430 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1430);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA59_1431 = input.LA(1);

                         
                        int index59_1431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1431);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA59_1432 = input.LA(1);

                         
                        int index59_1432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1432);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA59_1433 = input.LA(1);

                         
                        int index59_1433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1433);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA59_1448 = input.LA(1);

                         
                        int index59_1448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1448);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA59_1452 = input.LA(1);

                         
                        int index59_1452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1452);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA59_1457 = input.LA(1);

                         
                        int index59_1457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1457);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA59_1458 = input.LA(1);

                         
                        int index59_1458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1458);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA59_1461 = input.LA(1);

                         
                        int index59_1461 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1461);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA59_1462 = input.LA(1);

                         
                        int index59_1462 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1462);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA59_1527 = input.LA(1);

                         
                        int index59_1527 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1527);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA59_1528 = input.LA(1);

                         
                        int index59_1528 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1528);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA59_1529 = input.LA(1);

                         
                        int index59_1529 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1529);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA59_1530 = input.LA(1);

                         
                        int index59_1530 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1530);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA59_1531 = input.LA(1);

                         
                        int index59_1531 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1531);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA59_1532 = input.LA(1);

                         
                        int index59_1532 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1532);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA59_1533 = input.LA(1);

                         
                        int index59_1533 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1533);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA59_1534 = input.LA(1);

                         
                        int index59_1534 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1534);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA59_1535 = input.LA(1);

                         
                        int index59_1535 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1535);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA59_1536 = input.LA(1);

                         
                        int index59_1536 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1536);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA59_1537 = input.LA(1);

                         
                        int index59_1537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1537);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA59_1538 = input.LA(1);

                         
                        int index59_1538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1538);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA59_1539 = input.LA(1);

                         
                        int index59_1539 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1539);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA59_1540 = input.LA(1);

                         
                        int index59_1540 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1540);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA59_1555 = input.LA(1);

                         
                        int index59_1555 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1555);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA59_1559 = input.LA(1);

                         
                        int index59_1559 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1559);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA59_1564 = input.LA(1);

                         
                        int index59_1564 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1564);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA59_1565 = input.LA(1);

                         
                        int index59_1565 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 1567;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index59_1565);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA58_eotS =
        "\74\uffff";
    static final String DFA58_eofS =
        "\1\1\73\uffff";
    static final String DFA58_minS =
        "\1\27\73\uffff";
    static final String DFA58_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA58_specialS =
        "\74\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 503:30: ( access_wrapper name )*";
        }
    }
    static final String DFA61_eotS =
        "\u013e\uffff";
    static final String DFA61_eofS =
        "\2\uffff\1\13\6\uffff\1\160\u0134\uffff";
    static final String DFA61_minS =
        "\1\13\1\57\1\27\6\uffff\1\27\1\13\72\uffff\1\13\72\uffff\2\13\1"+
        "\166\10\57\1\u00c5\1\57\4\13\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA61_maxS =
        "\1\170\1\57\1\u00c9\6\uffff\1\u00c9\1\u00ca\72\uffff\1\u00ca\72"+
        "\uffff\1\u00aa\1\u00ca\1\166\1\57\1\u00c8\1\57\5\u00c8\1\u00c5\1"+
        "\u00c3\1\u00ca\3\u00aa\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff\5\0"+
        "\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA61_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\72\uffff\72\2\122"+
        "\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\107\uffff";
    static final String DFA61_specialS =
        "\1\0\10\uffff\1\1\172\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\6\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\2\uffff\1\111\1\112\1\113\1\114\1\115\1\116\2\uffff\1"+
        "\117\1\120\1\121\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\1\130"+
        "\2\uffff\1\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
        "\1\141\1\142\2\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1"+
        "\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
        "\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
        "\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087"+
        "\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
        "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097"+
        "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8}>";
    static final String[] DFA61_transitionS = {
            "\1\10\5\uffff\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\1\5"+
            "\32\uffff\1\1\3\uffff\1\3",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\35\uffff\1"+
            "\13\1\uffff\2\13\1\uffff\3\13\1\uffff\2\13\1\uffff\3\13\1\uffff"+
            "\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\10\13\4\uffff\1\13\2"+
            "\uffff\4\13\2\uffff\1\12\3\13\1\uffff\15\13\1\uffff\16\13\1"+
            "\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\27\uffff\1\115\21\uffff\1\152\21\uffff\1\151\35\uffff"+
            "\1\171\1\uffff\1\171\1\110\1\uffff\1\107\1\112\1\116\1\uffff"+
            "\1\117\1\177\1\uffff\1\174\1\117\1\177\1\uffff\2\106\1\171\1"+
            "\uffff\1\176\1\113\2\171\1\uffff\6\171\1\uffff\1\111\1\154\1"+
            "\162\1\173\1\170\1\155\1\161\1\164\4\uffff\1\163\2\uffff\1\132"+
            "\1\172\1\134\1\133\2\uffff\1\105\1\153\1\175\1\171\1\uffff\1"+
            "\145\1\156\1\125\1\146\1\157\1\136\1\140\1\122\1\165\1\143\1"+
            "\147\1\120\1\137\1\uffff\1\127\1\130\1\142\1\131\1\135\1\121"+
            "\1\141\1\167\1\123\1\126\1\124\1\144\1\150\1\171\1\uffff\1\171"+
            "\1\114",
            "\1\u008a\5\uffff\1\u0088\35\uffff\1\u0084\24\uffff\1\u0089"+
            "\23\uffff\1\u0086\1\u0087\26\uffff\1\u008e\3\uffff\1\u0083\1"+
            "\uffff\1\u0081\1\uffff\1\u0085\2\uffff\1\u0090\2\uffff\1\u0080"+
            "\1\u0090\37\uffff\1\u0082\6\uffff\1\u008d\2\uffff\1\u008b\1"+
            "\u008c\37\uffff\1\u008f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\5\uffff\1\u0099\35\uffff\1\u0095\24\uffff\1\u009a"+
            "\23\uffff\1\u0097\1\u0098\26\uffff\1\u009f\3\uffff\1\u0094\1"+
            "\uffff\1\u0092\1\uffff\1\u0096\2\uffff\1\u00a1\2\uffff\1\u0091"+
            "\1\u00a1\37\uffff\1\u0093\6\uffff\1\u009e\2\uffff\1\u009c\1"+
            "\u009d\37\uffff\1\u00a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ab\5\uffff\1\u00a9\35\uffff\1\u00a5\24\uffff\1\u00aa"+
            "\23\uffff\1\u00a7\1\u00a8\32\uffff\1\u00a4\1\uffff\1\u00a2\1"+
            "\uffff\1\u00a6\46\uffff\1\u00a3\6\uffff\1\u00ae\2\uffff\1\u00ac"+
            "\1\u00ad",
            "\1\u00c3\5\uffff\1\u00c1\35\uffff\1\u00b7\24\uffff\1\u00c2"+
            "\23\uffff\1\u00bf\1\u00c0\26\uffff\1\u00c7\3\uffff\1\u00bd\1"+
            "\uffff\1\u00b0\1\uffff\1\u00be\2\uffff\1\u00c9\2\uffff\1\u00bb"+
            "\1\u00c9\37\uffff\1\u00bc\6\uffff\1\u00c6\2\uffff\1\u00c4\1"+
            "\u00c5\2\uffff\1\u00b2\4\uffff\1\u00ba\3\uffff\1\u00af\2\uffff"+
            "\1\u00b4\1\u00b5\1\uffff\1\u00b6\1\uffff\1\u00b8\2\uffff\1\u00b9"+
            "\1\u00b3\1\u00b1\6\uffff\1\u00c8",
            "\1\u00ca",
            "\1\u00cb",
            "\1\13\101\uffff\1\u00d0\1\uffff\2\u00d0\1\uffff\1\u00ce\1\uffff"+
            "\1\u00d0\1\uffff\1\u00d0\1\u00cf\2\uffff\1\u00d0\1\u00cf\1\uffff"+
            "\2\u00cd\1\u00d0\3\uffff\2\u00d0\1\uffff\6\u00d0\1\uffff\1\u00d1"+
            "\24\uffff\1\u00cc\1\uffff\1\u00d2\1\u00d0\34\uffff\1\u00d0\1"+
            "\uffff\1\u00d0",
            "\1\u00d4",
            "\1\13\101\uffff\1\u00d8\1\uffff\2\u00d8\1\uffff\1\u00d6\1\uffff"+
            "\1\u00d8\1\uffff\1\u00d8\1\u00d7\2\uffff\1\u00d8\1\u00d7\1\uffff"+
            "\2\u00d5\1\u00d8\3\uffff\2\u00d8\1\uffff\6\u00d8\1\uffff\1\u00d9"+
            "\26\uffff\1\u00da\1\u00d8\34\uffff\1\u00d8\1\uffff\1\u00d8",
            "\1\13\101\uffff\1\u00df\1\uffff\2\u00df\1\uffff\1\u00dd\1\uffff"+
            "\1\u00df\1\uffff\1\u00df\1\u00de\2\uffff\1\u00df\1\u00de\1\uffff"+
            "\2\u00dc\1\u00df\3\uffff\2\u00df\1\uffff\6\u00df\1\uffff\1\u00e0"+
            "\26\uffff\1\u00e1\1\u00df\34\uffff\1\u00df\1\uffff\1\u00df",
            "\1\13\101\uffff\1\u00e6\1\uffff\2\u00e6\1\uffff\1\u00e4\1\uffff"+
            "\1\u00e6\1\uffff\1\u00e6\1\u00e5\2\uffff\1\u00e6\1\u00e5\1\uffff"+
            "\2\u00e3\1\u00e6\3\uffff\2\u00e6\1\uffff\6\u00e6\1\uffff\1\u00e7"+
            "\26\uffff\1\u00e8\1\u00e6\34\uffff\1\u00e6\1\uffff\1\u00e6",
            "\1\13\101\uffff\1\u00ed\1\uffff\2\u00ed\1\uffff\1\u00eb\1\uffff"+
            "\1\u00ed\1\uffff\1\u00ed\1\u00ec\2\uffff\1\u00ed\1\u00ec\1\uffff"+
            "\2\u00ea\1\u00ed\3\uffff\2\u00ed\1\uffff\6\u00ed\1\uffff\1\u00ee"+
            "\26\uffff\1\u00ef\1\u00ed\34\uffff\1\u00ed\1\uffff\1\u00ed",
            "\1\13\101\uffff\1\u00f4\1\uffff\2\u00f4\1\uffff\1\u00f2\1\uffff"+
            "\1\u00f4\1\uffff\1\u00f4\1\u00f3\2\uffff\1\u00f4\1\u00f3\1\uffff"+
            "\2\u00f1\1\u00f4\3\uffff\2\u00f4\1\uffff\6\u00f4\1\uffff\1\u00f5"+
            "\26\uffff\1\u00f6\1\u00f4\34\uffff\1\u00f4\1\uffff\1\u00f4",
            "\1\u00f8",
            "\1\u0101\106\uffff\1\u00fa\1\u0105\65\uffff\1\u00fc\4\uffff"+
            "\1\u0104\3\uffff\1\u00f9\2\uffff\1\u00fe\1\u00ff\1\uffff\1\u0100"+
            "\1\uffff\1\u0102\2\uffff\1\u0103\1\u00fd\1\u00fb",
            "\1\u0110\5\uffff\1\u010e\35\uffff\1\u010a\24\uffff\1\u010f"+
            "\23\uffff\1\u010c\1\u010d\26\uffff\1\u0114\3\uffff\1\u0109\1"+
            "\uffff\1\u0107\1\uffff\1\u010b\2\uffff\1\u0116\2\uffff\1\u0106"+
            "\1\u0116\37\uffff\1\u0108\6\uffff\1\u0113\2\uffff\1\u0111\1"+
            "\u0112\37\uffff\1\u0115",
            "\1\u0120\5\uffff\1\u011e\35\uffff\1\u011a\24\uffff\1\u011f"+
            "\23\uffff\1\u011c\1\u011d\32\uffff\1\u0119\1\uffff\1\u0117\1"+
            "\uffff\1\u011b\46\uffff\1\u0118\6\uffff\1\u0123\2\uffff\1\u0121"+
            "\1\u0122",
            "\1\u012d\5\uffff\1\u012b\35\uffff\1\u0127\24\uffff\1\u012c"+
            "\23\uffff\1\u0129\1\u012a\32\uffff\1\u0126\1\uffff\1\u0124\1"+
            "\uffff\1\u0128\46\uffff\1\u0125\6\uffff\1\u0130\2\uffff\1\u012e"+
            "\1\u012f",
            "\1\u013a\5\uffff\1\u0138\35\uffff\1\u0134\24\uffff\1\u0139"+
            "\23\uffff\1\u0136\1\u0137\32\uffff\1\u0133\1\uffff\1\u0131\1"+
            "\uffff\1\u0135\46\uffff\1\u0132\6\uffff\1\u013d\2\uffff\1\u013b"+
            "\1\u013c",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "506:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_0 = input.LA(1);

                         
                        int index61_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA61_0==116) ) {s = 1;}

                        else if ( (LA61_0==ID) ) {s = 2;}

                        else if ( (LA61_0==120) && (synpred16_Objc())) {s = 3;}

                        else if ( (LA61_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA61_0==STRING_OBJC) ) {s = 5;}

                        else if ( (LA61_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA61_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA61_0==BOOL_LITERAL) ) {s = 8;}

                         
                        input.seek(index61_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA61_9==166) ) {s = 69;}

                        else if ( ((LA61_9 >= 129 && LA61_9 <= 130)) && (synpred16_Objc())) {s = 70;}

                        else if ( (LA61_9==118) && (synpred16_Objc())) {s = 71;}

                        else if ( (LA61_9==116) && (synpred16_Objc())) {s = 72;}

                        else if ( (LA61_9==145) && (synpred16_Objc())) {s = 73;}

                        else if ( (LA61_9==119) && (synpred16_Objc())) {s = 74;}

                        else if ( (LA61_9==134) && (synpred16_Objc())) {s = 75;}

                        else if ( (LA61_9==201) && (synpred16_Objc())) {s = 76;}

                        else if ( (LA61_9==ID) && (synpred16_Objc())) {s = 77;}

                        else if ( (LA61_9==120) && (synpred16_Objc())) {s = 78;}

                        else if ( (LA61_9==122||LA61_9==126) && (synpred16_Objc())) {s = 79;}

                        else if ( (LA61_9==182) && (synpred16_Objc())) {s = 80;}

                        else if ( (LA61_9==190) && (synpred16_Objc())) {s = 81;}

                        else if ( (LA61_9==178) && (synpred16_Objc())) {s = 82;}

                        else if ( (LA61_9==193) && (synpred16_Objc())) {s = 83;}

                        else if ( (LA61_9==195) && (synpred16_Objc())) {s = 84;}

                        else if ( (LA61_9==173) && (synpred16_Objc())) {s = 85;}

                        else if ( (LA61_9==194) && (synpred16_Objc())) {s = 86;}

                        else if ( (LA61_9==185) && (synpred16_Objc())) {s = 87;}

                        else if ( (LA61_9==186) && (synpred16_Objc())) {s = 88;}

                        else if ( (LA61_9==188) && (synpred16_Objc())) {s = 89;}

                        else if ( (LA61_9==160) && (synpred16_Objc())) {s = 90;}

                        else if ( (LA61_9==163) && (synpred16_Objc())) {s = 91;}

                        else if ( (LA61_9==162) && (synpred16_Objc())) {s = 92;}

                        else if ( (LA61_9==189) && (synpred16_Objc())) {s = 93;}

                        else if ( (LA61_9==176) && (synpred16_Objc())) {s = 94;}

                        else if ( (LA61_9==183) && (synpred16_Objc())) {s = 95;}

                        else if ( (LA61_9==177) && (synpred16_Objc())) {s = 96;}

                        else if ( (LA61_9==191) && (synpred16_Objc())) {s = 97;}

                        else if ( (LA61_9==187) && (synpred16_Objc())) {s = 98;}

                        else if ( (LA61_9==180) && (synpred16_Objc())) {s = 99;}

                        else if ( (LA61_9==196) && (synpred16_Objc())) {s = 100;}

                        else if ( (LA61_9==171) && (synpred16_Objc())) {s = 101;}

                        else if ( (LA61_9==174) && (synpred16_Objc())) {s = 102;}

                        else if ( (LA61_9==181) && (synpred16_Objc())) {s = 103;}

                        else if ( (LA61_9==197) && (synpred16_Objc())) {s = 104;}

                        else if ( (LA61_9==SINGLE_COMMENT_LIT) && (synpred16_Objc())) {s = 105;}

                        else if ( (LA61_9==MULTI_COMMENT_LIT) && (synpred16_Objc())) {s = 106;}

                        else if ( (LA61_9==167) && (synpred16_Objc())) {s = 107;}

                        else if ( (LA61_9==146) && (synpred16_Objc())) {s = 108;}

                        else if ( (LA61_9==150) && (synpred16_Objc())) {s = 109;}

                        else if ( (LA61_9==172) && (synpred16_Objc())) {s = 110;}

                        else if ( (LA61_9==175) && (synpred16_Objc())) {s = 111;}

                        else if ( (LA61_9==EOF) && (synpred16_Objc())) {s = 112;}

                        else if ( (LA61_9==151) && (synpred16_Objc())) {s = 113;}

                        else if ( (LA61_9==147) && (synpred16_Objc())) {s = 114;}

                        else if ( (LA61_9==157) && (synpred16_Objc())) {s = 115;}

                        else if ( (LA61_9==152) && (synpred16_Objc())) {s = 116;}

                        else if ( (LA61_9==179) && (synpred16_Objc())) {s = 117;}

                        else if ( (LA61_9==DEFINE_LITERAL) && (synpred16_Objc())) {s = 118;}

                        else if ( (LA61_9==192) && (synpred16_Objc())) {s = 119;}

                        else if ( (LA61_9==149) && (synpred16_Objc())) {s = 120;}

                        else if ( (LA61_9==113||LA61_9==115||LA61_9==131||(LA61_9 >= 135 && LA61_9 <= 136)||(LA61_9 >= 138 && LA61_9 <= 143)||LA61_9==169||LA61_9==198||LA61_9==200) && (synpred16_Objc())) {s = 121;}

                        else if ( (LA61_9==161) && (synpred16_Objc())) {s = 122;}

                        else if ( (LA61_9==148) && (synpred16_Objc())) {s = 123;}

                        else if ( (LA61_9==125) && (synpred16_Objc())) {s = 124;}

                        else if ( (LA61_9==168) && (synpred16_Objc())) {s = 125;}

                        else if ( (LA61_9==133) && (synpred16_Objc())) {s = 126;}

                        else if ( (LA61_9==123||LA61_9==127) && (synpred16_Objc())) {s = 127;}

                         
                        input.seek(index61_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_132 = input.LA(1);

                         
                        int index61_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA61_132==166) ) {s = 204;}

                        else if ( ((LA61_132 >= 129 && LA61_132 <= 130)) ) {s = 205;}

                        else if ( (LA61_132==118) ) {s = 206;}

                        else if ( (LA61_132==123||LA61_132==127) ) {s = 207;}

                        else if ( (LA61_132==113||(LA61_132 >= 115 && LA61_132 <= 116)||LA61_132==120||LA61_132==122||LA61_132==126||LA61_132==131||(LA61_132 >= 135 && LA61_132 <= 136)||(LA61_132 >= 138 && LA61_132 <= 143)||LA61_132==169||LA61_132==198||LA61_132==200) ) {s = 208;}

                        else if ( (LA61_132==145) ) {s = 209;}

                        else if ( (LA61_132==168) && (synpred15_Objc())) {s = 210;}

                        else if ( (LA61_132==ID) ) {s = 11;}

                         
                        input.seek(index61_132);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_134 = input.LA(1);

                         
                        int index61_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA61_134 >= 129 && LA61_134 <= 130)) ) {s = 213;}

                        else if ( (LA61_134==118) ) {s = 214;}

                        else if ( (LA61_134==123||LA61_134==127) ) {s = 215;}

                        else if ( (LA61_134==113||(LA61_134 >= 115 && LA61_134 <= 116)||LA61_134==120||LA61_134==122||LA61_134==126||LA61_134==131||(LA61_134 >= 135 && LA61_134 <= 136)||(LA61_134 >= 138 && LA61_134 <= 143)||LA61_134==169||LA61_134==198||LA61_134==200) ) {s = 216;}

                        else if ( (LA61_134==145) ) {s = 217;}

                        else if ( (LA61_134==168) && (synpred15_Objc())) {s = 218;}

                        else if ( (LA61_134==ID) ) {s = 11;}

                         
                        input.seek(index61_134);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_135 = input.LA(1);

                         
                        int index61_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA61_135 >= 129 && LA61_135 <= 130)) ) {s = 220;}

                        else if ( (LA61_135==118) ) {s = 221;}

                        else if ( (LA61_135==123||LA61_135==127) ) {s = 222;}

                        else if ( (LA61_135==113||(LA61_135 >= 115 && LA61_135 <= 116)||LA61_135==120||LA61_135==122||LA61_135==126||LA61_135==131||(LA61_135 >= 135 && LA61_135 <= 136)||(LA61_135 >= 138 && LA61_135 <= 143)||LA61_135==169||LA61_135==198||LA61_135==200) ) {s = 223;}

                        else if ( (LA61_135==145) ) {s = 224;}

                        else if ( (LA61_135==168) && (synpred15_Objc())) {s = 225;}

                        else if ( (LA61_135==ID) ) {s = 11;}

                         
                        input.seek(index61_135);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_136 = input.LA(1);

                         
                        int index61_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA61_136 >= 129 && LA61_136 <= 130)) ) {s = 227;}

                        else if ( (LA61_136==118) ) {s = 228;}

                        else if ( (LA61_136==123||LA61_136==127) ) {s = 229;}

                        else if ( (LA61_136==113||(LA61_136 >= 115 && LA61_136 <= 116)||LA61_136==120||LA61_136==122||LA61_136==126||LA61_136==131||(LA61_136 >= 135 && LA61_136 <= 136)||(LA61_136 >= 138 && LA61_136 <= 143)||LA61_136==169||LA61_136==198||LA61_136==200) ) {s = 230;}

                        else if ( (LA61_136==145) ) {s = 231;}

                        else if ( (LA61_136==168) && (synpred15_Objc())) {s = 232;}

                        else if ( (LA61_136==ID) ) {s = 11;}

                         
                        input.seek(index61_136);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_137 = input.LA(1);

                         
                        int index61_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA61_137 >= 129 && LA61_137 <= 130)) ) {s = 234;}

                        else if ( (LA61_137==118) ) {s = 235;}

                        else if ( (LA61_137==123||LA61_137==127) ) {s = 236;}

                        else if ( (LA61_137==113||(LA61_137 >= 115 && LA61_137 <= 116)||LA61_137==120||LA61_137==122||LA61_137==126||LA61_137==131||(LA61_137 >= 135 && LA61_137 <= 136)||(LA61_137 >= 138 && LA61_137 <= 143)||LA61_137==169||LA61_137==198||LA61_137==200) ) {s = 237;}

                        else if ( (LA61_137==145) ) {s = 238;}

                        else if ( (LA61_137==168) && (synpred15_Objc())) {s = 239;}

                        else if ( (LA61_137==ID) ) {s = 11;}

                         
                        input.seek(index61_137);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_138 = input.LA(1);

                         
                        int index61_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA61_138 >= 129 && LA61_138 <= 130)) ) {s = 241;}

                        else if ( (LA61_138==118) ) {s = 242;}

                        else if ( (LA61_138==123||LA61_138==127) ) {s = 243;}

                        else if ( (LA61_138==113||(LA61_138 >= 115 && LA61_138 <= 116)||LA61_138==120||LA61_138==122||LA61_138==126||LA61_138==131||(LA61_138 >= 135 && LA61_138 <= 136)||(LA61_138 >= 138 && LA61_138 <= 143)||LA61_138==169||LA61_138==198||LA61_138==200) ) {s = 244;}

                        else if ( (LA61_138==145) ) {s = 245;}

                        else if ( (LA61_138==168) && (synpred15_Objc())) {s = 246;}

                        else if ( (LA61_138==ID) ) {s = 11;}

                         
                        input.seek(index61_138);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_145 = input.LA(1);

                         
                        int index61_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_145);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_146 = input.LA(1);

                         
                        int index61_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_146);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_147 = input.LA(1);

                         
                        int index61_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_147);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_148 = input.LA(1);

                         
                        int index61_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_148);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA61_149 = input.LA(1);

                         
                        int index61_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_149);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA61_150 = input.LA(1);

                         
                        int index61_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_150);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA61_151 = input.LA(1);

                         
                        int index61_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_151);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA61_152 = input.LA(1);

                         
                        int index61_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_152);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA61_153 = input.LA(1);

                         
                        int index61_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_153);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA61_154 = input.LA(1);

                         
                        int index61_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_154);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA61_155 = input.LA(1);

                         
                        int index61_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_155);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA61_156 = input.LA(1);

                         
                        int index61_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_156);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA61_157 = input.LA(1);

                         
                        int index61_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_157);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA61_158 = input.LA(1);

                         
                        int index61_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_158);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA61_159 = input.LA(1);

                         
                        int index61_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_159);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA61_160 = input.LA(1);

                         
                        int index61_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_160);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA61_161 = input.LA(1);

                         
                        int index61_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (synpred16_Objc()) ) {s = 127;}

                         
                        input.seek(index61_161);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA61_162 = input.LA(1);

                         
                        int index61_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_162);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA61_163 = input.LA(1);

                         
                        int index61_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_163);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA61_164 = input.LA(1);

                         
                        int index61_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_164);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA61_165 = input.LA(1);

                         
                        int index61_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_165);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA61_166 = input.LA(1);

                         
                        int index61_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_166);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA61_167 = input.LA(1);

                         
                        int index61_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_167);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA61_168 = input.LA(1);

                         
                        int index61_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_168);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA61_169 = input.LA(1);

                         
                        int index61_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_169);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA61_170 = input.LA(1);

                         
                        int index61_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_170);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA61_171 = input.LA(1);

                         
                        int index61_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_171);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA61_172 = input.LA(1);

                         
                        int index61_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_172);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA61_173 = input.LA(1);

                         
                        int index61_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_173);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA61_174 = input.LA(1);

                         
                        int index61_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_174);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA61_175 = input.LA(1);

                         
                        int index61_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_175);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA61_176 = input.LA(1);

                         
                        int index61_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_176);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA61_177 = input.LA(1);

                         
                        int index61_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_177);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA61_178 = input.LA(1);

                         
                        int index61_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_178);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA61_179 = input.LA(1);

                         
                        int index61_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_179);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA61_180 = input.LA(1);

                         
                        int index61_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_180);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA61_181 = input.LA(1);

                         
                        int index61_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_181);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA61_182 = input.LA(1);

                         
                        int index61_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_182);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA61_183 = input.LA(1);

                         
                        int index61_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_183);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA61_184 = input.LA(1);

                         
                        int index61_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_184);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA61_185 = input.LA(1);

                         
                        int index61_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_185);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA61_186 = input.LA(1);

                         
                        int index61_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_186);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA61_187 = input.LA(1);

                         
                        int index61_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_187);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA61_188 = input.LA(1);

                         
                        int index61_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_188);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA61_189 = input.LA(1);

                         
                        int index61_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_189);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA61_190 = input.LA(1);

                         
                        int index61_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_190);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA61_191 = input.LA(1);

                         
                        int index61_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_191);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA61_192 = input.LA(1);

                         
                        int index61_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_192);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA61_193 = input.LA(1);

                         
                        int index61_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_193);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA61_194 = input.LA(1);

                         
                        int index61_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_194);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA61_195 = input.LA(1);

                         
                        int index61_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_195);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA61_196 = input.LA(1);

                         
                        int index61_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_196);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA61_197 = input.LA(1);

                         
                        int index61_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_197);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA61_198 = input.LA(1);

                         
                        int index61_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_198);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA61_199 = input.LA(1);

                         
                        int index61_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_199);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA61_200 = input.LA(1);

                         
                        int index61_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_200);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA61_201 = input.LA(1);

                         
                        int index61_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_201);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA61_202 = input.LA(1);

                         
                        int index61_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_202);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA61_203 = input.LA(1);

                         
                        int index61_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_203);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA61_204 = input.LA(1);

                         
                        int index61_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_204);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA61_205 = input.LA(1);

                         
                        int index61_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_205);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA61_206 = input.LA(1);

                         
                        int index61_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA61_207 = input.LA(1);

                         
                        int index61_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_207);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA61_208 = input.LA(1);

                         
                        int index61_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_208);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA61_209 = input.LA(1);

                         
                        int index61_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_209);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA61_212 = input.LA(1);

                         
                        int index61_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_212);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA61_213 = input.LA(1);

                         
                        int index61_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_213);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA61_214 = input.LA(1);

                         
                        int index61_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_214);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA61_215 = input.LA(1);

                         
                        int index61_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_215);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA61_216 = input.LA(1);

                         
                        int index61_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_216);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA61_217 = input.LA(1);

                         
                        int index61_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_217);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA61_220 = input.LA(1);

                         
                        int index61_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_220);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA61_221 = input.LA(1);

                         
                        int index61_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_221);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA61_222 = input.LA(1);

                         
                        int index61_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_222);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA61_223 = input.LA(1);

                         
                        int index61_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_223);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA61_224 = input.LA(1);

                         
                        int index61_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_224);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA61_227 = input.LA(1);

                         
                        int index61_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_227);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA61_228 = input.LA(1);

                         
                        int index61_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_228);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA61_229 = input.LA(1);

                         
                        int index61_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_229);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA61_230 = input.LA(1);

                         
                        int index61_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_230);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA61_231 = input.LA(1);

                         
                        int index61_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_231);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA61_234 = input.LA(1);

                         
                        int index61_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_234);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA61_235 = input.LA(1);

                         
                        int index61_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_235);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA61_236 = input.LA(1);

                         
                        int index61_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_236);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA61_237 = input.LA(1);

                         
                        int index61_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_237);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA61_238 = input.LA(1);

                         
                        int index61_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_238);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA61_241 = input.LA(1);

                         
                        int index61_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_241);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA61_242 = input.LA(1);

                         
                        int index61_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_242);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA61_243 = input.LA(1);

                         
                        int index61_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_243);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA61_244 = input.LA(1);

                         
                        int index61_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_244);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA61_245 = input.LA(1);

                         
                        int index61_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_245);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA61_248 = input.LA(1);

                         
                        int index61_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_248);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA61_249 = input.LA(1);

                         
                        int index61_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_249);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA61_250 = input.LA(1);

                         
                        int index61_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_250);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA61_251 = input.LA(1);

                         
                        int index61_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_251);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA61_252 = input.LA(1);

                         
                        int index61_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_252);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA61_253 = input.LA(1);

                         
                        int index61_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_253);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA61_254 = input.LA(1);

                         
                        int index61_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_254);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA61_255 = input.LA(1);

                         
                        int index61_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_255);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA61_256 = input.LA(1);

                         
                        int index61_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_256);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA61_257 = input.LA(1);

                         
                        int index61_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_257);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA61_258 = input.LA(1);

                         
                        int index61_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_258);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA61_259 = input.LA(1);

                         
                        int index61_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_259);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA61_260 = input.LA(1);

                         
                        int index61_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_260);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA61_261 = input.LA(1);

                         
                        int index61_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_261);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA61_262 = input.LA(1);

                         
                        int index61_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_262);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA61_263 = input.LA(1);

                         
                        int index61_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_263);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA61_264 = input.LA(1);

                         
                        int index61_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_264);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA61_265 = input.LA(1);

                         
                        int index61_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_265);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA61_266 = input.LA(1);

                         
                        int index61_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_266);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA61_267 = input.LA(1);

                         
                        int index61_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_267);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA61_268 = input.LA(1);

                         
                        int index61_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_268);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA61_269 = input.LA(1);

                         
                        int index61_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_269);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA61_270 = input.LA(1);

                         
                        int index61_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_270);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA61_271 = input.LA(1);

                         
                        int index61_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_271);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA61_272 = input.LA(1);

                         
                        int index61_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_272);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA61_273 = input.LA(1);

                         
                        int index61_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_273);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA61_274 = input.LA(1);

                         
                        int index61_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_274);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA61_275 = input.LA(1);

                         
                        int index61_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_275);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA61_276 = input.LA(1);

                         
                        int index61_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA61_277 = input.LA(1);

                         
                        int index61_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_277);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA61_278 = input.LA(1);

                         
                        int index61_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_278);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA61_279 = input.LA(1);

                         
                        int index61_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_279);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA61_280 = input.LA(1);

                         
                        int index61_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_280);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA61_281 = input.LA(1);

                         
                        int index61_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_281);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA61_282 = input.LA(1);

                         
                        int index61_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_282);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA61_283 = input.LA(1);

                         
                        int index61_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_283);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA61_284 = input.LA(1);

                         
                        int index61_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_284);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA61_285 = input.LA(1);

                         
                        int index61_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_285);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA61_286 = input.LA(1);

                         
                        int index61_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_286);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA61_287 = input.LA(1);

                         
                        int index61_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_287);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA61_288 = input.LA(1);

                         
                        int index61_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_288);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA61_289 = input.LA(1);

                         
                        int index61_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_289);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA61_290 = input.LA(1);

                         
                        int index61_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_290);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA61_291 = input.LA(1);

                         
                        int index61_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_291);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA61_292 = input.LA(1);

                         
                        int index61_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_292);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA61_293 = input.LA(1);

                         
                        int index61_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_293);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA61_294 = input.LA(1);

                         
                        int index61_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_294);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA61_295 = input.LA(1);

                         
                        int index61_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_295);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA61_296 = input.LA(1);

                         
                        int index61_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_296);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA61_297 = input.LA(1);

                         
                        int index61_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_297);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA61_298 = input.LA(1);

                         
                        int index61_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_298);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA61_299 = input.LA(1);

                         
                        int index61_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_299);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA61_300 = input.LA(1);

                         
                        int index61_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_300);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA61_301 = input.LA(1);

                         
                        int index61_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_301);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA61_302 = input.LA(1);

                         
                        int index61_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_302);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA61_303 = input.LA(1);

                         
                        int index61_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_303);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA61_304 = input.LA(1);

                         
                        int index61_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_304);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA61_305 = input.LA(1);

                         
                        int index61_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_305);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA61_306 = input.LA(1);

                         
                        int index61_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_306);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA61_307 = input.LA(1);

                         
                        int index61_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_307);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA61_308 = input.LA(1);

                         
                        int index61_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_308);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA61_309 = input.LA(1);

                         
                        int index61_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_309);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA61_310 = input.LA(1);

                         
                        int index61_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_310);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA61_311 = input.LA(1);

                         
                        int index61_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_311);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA61_312 = input.LA(1);

                         
                        int index61_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_312);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA61_313 = input.LA(1);

                         
                        int index61_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_313);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA61_314 = input.LA(1);

                         
                        int index61_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_314);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA61_315 = input.LA(1);

                         
                        int index61_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_315);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA61_316 = input.LA(1);

                         
                        int index61_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_316);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA61_317 = input.LA(1);

                         
                        int index61_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index61_317);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA149_eotS =
        "\175\uffff";
    static final String DFA149_eofS =
        "\2\uffff\1\25\5\uffff\1\140\164\uffff";
    static final String DFA149_minS =
        "\1\27\1\57\1\13\1\uffff\2\13\2\uffff\1\27\46\uffff\1\0\2\uffff\20"+
        "\0\13\uffff\1\0\14\uffff\3\0\11\uffff\1\0\4\uffff\1\0\14\uffff\1"+
        "\0\2\uffff\1\0\1\uffff";
    static final String DFA149_maxS =
        "\1\27\1\57\1\u00ca\1\uffff\1\u00ca\1\u00aa\2\uffff\1\u00c8\46\uffff"+
        "\1\0\2\uffff\20\0\13\uffff\1\0\14\uffff\3\0\11\uffff\1\0\4\uffff"+
        "\1\0\14\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA149_acceptS =
        "\3\uffff\1\1\2\uffff\2\2\1\uffff\14\2\1\3\32\uffff\2\1\20\uffff"+
        "\1\1\12\2\1\uffff\14\2\3\uffff\11\2\1\uffff\4\2\1\uffff\14\2\1\uffff"+
        "\2\2\1\uffff\1\2";
    static final String DFA149_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\2\uffff\1\3\46\uffff\1\4\2\uffff\1"+
        "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
        "\1\23\1\24\13\uffff\1\25\14\uffff\1\26\1\27\1\30\11\uffff\1\31\4"+
        "\uffff\1\32\14\uffff\1\33\2\uffff\1\34\1\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\1",
            "\1\2",
            "\1\16\5\uffff\1\14\5\uffff\1\25\27\uffff\1\10\21\uffff\1\25"+
            "\2\uffff\1\15\16\uffff\1\25\4\uffff\1\12\1\13\26\uffff\1\22"+
            "\3\uffff\1\7\1\uffff\1\4\1\uffff\1\11\1\uffff\1\25\1\24\2\uffff"+
            "\1\5\1\24\1\uffff\2\3\3\uffff\1\25\14\uffff\3\25\1\uffff\2\25"+
            "\4\uffff\1\25\1\uffff\1\6\1\uffff\1\25\4\uffff\1\21\2\uffff"+
            "\1\17\1\20\2\uffff\1\25\4\uffff\2\25\2\uffff\1\25\2\uffff\2"+
            "\25\1\uffff\3\25\1\uffff\4\25\6\uffff\1\23",
            "",
            "\1\73\5\uffff\1\71\35\uffff\1\66\21\uffff\1\61\2\uffff\1\72"+
            "\16\uffff\1\60\4\uffff\1\67\1\70\26\uffff\1\77\3\uffff\1\65"+
            "\1\uffff\1\63\1\102\1\57\2\uffff\1\101\2\uffff\1\62\1\101\37"+
            "\uffff\1\64\6\uffff\1\76\2\uffff\1\74\1\75\2\uffff\1\105\4\uffff"+
            "\1\114\3\uffff\1\103\2\uffff\1\107\1\110\1\uffff\1\111\1\uffff"+
            "\1\112\2\uffff\1\113\1\106\1\104\6\uffff\1\100",
            "\1\126\5\uffff\1\124\35\uffff\1\120\24\uffff\1\125\23\uffff"+
            "\1\122\1\123\32\uffff\1\117\1\uffff\1\115\1\uffff\1\121\46\uffff"+
            "\1\116\6\uffff\1\131\2\uffff\1\127\1\130",
            "",
            "",
            "\1\161\27\uffff\1\153\21\uffff\1\165\21\uffff\1\164\35\uffff"+
            "\1\174\1\uffff\1\174\1\173\1\uffff\1\134\1\uffff\1\170\1\uffff"+
            "\1\136\1\135\2\uffff\1\136\1\135\1\uffff\2\133\1\174\2\uffff"+
            "\1\166\2\174\1\uffff\6\174\1\uffff\1\137\1\uffff\1\155\1\172"+
            "\1\167\1\uffff\1\154\1\157\4\uffff\1\156\3\uffff\1\171\4\uffff"+
            "\1\132\2\uffff\1\174\3\uffff\1\146\4\uffff\1\143\1\160\2\uffff"+
            "\1\141\2\uffff\1\150\1\151\1\uffff\1\152\1\163\1\142\1\uffff"+
            "\1\162\1\144\1\147\1\145\2\uffff\1\174\1\uffff\1\174",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "944:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA149_2 >= 129 && LA149_2 <= 130)) && (synpred30_Objc())) {s = 3;}

                        else if ( (LA149_2==118) ) {s = 4;}

                        else if ( (LA149_2==126) ) {s = 5;}

                        else if ( (LA149_2==159) && (synpred31_Objc())) {s = 6;}

                        else if ( (LA149_2==116) && (synpred31_Objc())) {s = 7;}

                        else if ( (LA149_2==ID) ) {s = 8;}

                        else if ( (LA149_2==120) && (synpred31_Objc())) {s = 9;}

                        else if ( (LA149_2==STRING_LITERAL) && (synpred31_Objc())) {s = 10;}

                        else if ( (LA149_2==STRING_OBJC) && (synpred31_Objc())) {s = 11;}

                        else if ( (LA149_2==CHAR_LITERAL) && (synpred31_Objc())) {s = 12;}

                        else if ( (LA149_2==NUMBER_LITERAL) && (synpred31_Objc())) {s = 13;}

                        else if ( (LA149_2==BOOL_LITERAL) && (synpred31_Objc())) {s = 14;}

                        else if ( (LA149_2==169) && (synpred31_Objc())) {s = 15;}

                        else if ( (LA149_2==170) && (synpred31_Objc())) {s = 16;}

                        else if ( (LA149_2==166) && (synpred31_Objc())) {s = 17;}

                        else if ( (LA149_2==112) && (synpred31_Objc())) {s = 18;}

                        else if ( (LA149_2==202) && (synpred31_Objc())) {s = 19;}

                        else if ( (LA149_2==123||LA149_2==127) && (synpred31_Objc())) {s = 20;}

                        else if ( (LA149_2==EOF||LA149_2==DEFINE_LITERAL||LA149_2==MULTI_COMMENT_LIT||LA149_2==SINGLE_COMMENT_LIT||LA149_2==122||LA149_2==134||(LA149_2 >= 147 && LA149_2 <= 149)||(LA149_2 >= 151 && LA149_2 <= 152)||LA149_2==157||LA149_2==161||LA149_2==173||(LA149_2 >= 178 && LA149_2 <= 179)||LA149_2==182||(LA149_2 >= 185 && LA149_2 <= 186)||(LA149_2 >= 188 && LA149_2 <= 190)||(LA149_2 >= 192 && LA149_2 <= 195)) ) {s = 21;}

                         
                        input.seek(index149_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_4 = input.LA(1);

                         
                        int index149_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA149_4==120) ) {s = 47;}

                        else if ( (LA149_4==SINGLE_COMMENT_LIT) && (synpred30_Objc())) {s = 48;}

                        else if ( (LA149_4==MULTI_COMMENT_LIT) && (synpred30_Objc())) {s = 49;}

                        else if ( (LA149_4==126) ) {s = 50;}

                        else if ( (LA149_4==118) ) {s = 51;}

                        else if ( (LA149_4==159) ) {s = 52;}

                        else if ( (LA149_4==116) ) {s = 53;}

                        else if ( (LA149_4==ID) ) {s = 54;}

                        else if ( (LA149_4==STRING_LITERAL) ) {s = 55;}

                        else if ( (LA149_4==STRING_OBJC) ) {s = 56;}

                        else if ( (LA149_4==CHAR_LITERAL) ) {s = 57;}

                        else if ( (LA149_4==NUMBER_LITERAL) ) {s = 58;}

                        else if ( (LA149_4==BOOL_LITERAL) ) {s = 59;}

                        else if ( (LA149_4==169) ) {s = 60;}

                        else if ( (LA149_4==170) ) {s = 61;}

                        else if ( (LA149_4==166) ) {s = 62;}

                        else if ( (LA149_4==112) ) {s = 63;}

                        else if ( (LA149_4==202) ) {s = 64;}

                        else if ( (LA149_4==123||LA149_4==127) ) {s = 65;}

                        else if ( (LA149_4==119) && (synpred30_Objc())) {s = 66;}

                        else if ( (LA149_4==182) && (synpred31_Objc())) {s = 67;}

                        else if ( (LA149_4==195) && (synpred31_Objc())) {s = 68;}

                        else if ( (LA149_4==173) && (synpred31_Objc())) {s = 69;}

                        else if ( (LA149_4==194) && (synpred31_Objc())) {s = 70;}

                        else if ( (LA149_4==185) && (synpred31_Objc())) {s = 71;}

                        else if ( (LA149_4==186) && (synpred31_Objc())) {s = 72;}

                        else if ( (LA149_4==188) && (synpred31_Objc())) {s = 73;}

                        else if ( (LA149_4==190) && (synpred31_Objc())) {s = 74;}

                        else if ( (LA149_4==193) && (synpred31_Objc())) {s = 75;}

                        else if ( (LA149_4==178) && (synpred31_Objc())) {s = 76;}

                         
                        input.seek(index149_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA149_5==118) ) {s = 77;}

                        else if ( (LA149_5==159) && (synpred31_Objc())) {s = 78;}

                        else if ( (LA149_5==116) && (synpred31_Objc())) {s = 79;}

                        else if ( (LA149_5==ID) && (synpred31_Objc())) {s = 80;}

                        else if ( (LA149_5==120) && (synpred31_Objc())) {s = 81;}

                        else if ( (LA149_5==STRING_LITERAL) && (synpred31_Objc())) {s = 82;}

                        else if ( (LA149_5==STRING_OBJC) && (synpred31_Objc())) {s = 83;}

                        else if ( (LA149_5==CHAR_LITERAL) && (synpred31_Objc())) {s = 84;}

                        else if ( (LA149_5==NUMBER_LITERAL) && (synpred31_Objc())) {s = 85;}

                        else if ( (LA149_5==BOOL_LITERAL) && (synpred31_Objc())) {s = 86;}

                        else if ( (LA149_5==169) && (synpred31_Objc())) {s = 87;}

                        else if ( (LA149_5==170) && (synpred31_Objc())) {s = 88;}

                        else if ( (LA149_5==166) && (synpred31_Objc())) {s = 89;}

                         
                        input.seek(index149_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_8 = input.LA(1);

                         
                        int index149_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA149_8==166) ) {s = 90;}

                        else if ( ((LA149_8 >= 129 && LA149_8 <= 130)) ) {s = 91;}

                        else if ( (LA149_8==118) ) {s = 92;}

                        else if ( (LA149_8==123||LA149_8==127) && (synpred31_Objc())) {s = 93;}

                        else if ( (LA149_8==122||LA149_8==126) && (synpred31_Objc())) {s = 94;}

                        else if ( (LA149_8==145) && (synpred31_Objc())) {s = 95;}

                        else if ( (LA149_8==EOF) && (synpred31_Objc())) {s = 96;}

                        else if ( (LA149_8==182) && (synpred31_Objc())) {s = 97;}

                        else if ( (LA149_8==190) && (synpred31_Objc())) {s = 98;}

                        else if ( (LA149_8==178) && (synpred31_Objc())) {s = 99;}

                        else if ( (LA149_8==193) && (synpred31_Objc())) {s = 100;}

                        else if ( (LA149_8==195) && (synpred31_Objc())) {s = 101;}

                        else if ( (LA149_8==173) ) {s = 102;}

                        else if ( (LA149_8==194) && (synpred31_Objc())) {s = 103;}

                        else if ( (LA149_8==185) && (synpred31_Objc())) {s = 104;}

                        else if ( (LA149_8==186) && (synpred31_Objc())) {s = 105;}

                        else if ( (LA149_8==188) && (synpred31_Objc())) {s = 106;}

                        else if ( (LA149_8==ID) ) {s = 107;}

                        else if ( (LA149_8==151) && (synpred31_Objc())) {s = 108;}

                        else if ( (LA149_8==147) && (synpred31_Objc())) {s = 109;}

                        else if ( (LA149_8==157) && (synpred31_Objc())) {s = 110;}

                        else if ( (LA149_8==152) && (synpred31_Objc())) {s = 111;}

                        else if ( (LA149_8==179) && (synpred31_Objc())) {s = 112;}

                        else if ( (LA149_8==DEFINE_LITERAL) && (synpred31_Objc())) {s = 113;}

                        else if ( (LA149_8==192) && (synpred31_Objc())) {s = 114;}

                        else if ( (LA149_8==189) && (synpred31_Objc())) {s = 115;}

                        else if ( (LA149_8==SINGLE_COMMENT_LIT) && (synpred31_Objc())) {s = 116;}

                        else if ( (LA149_8==MULTI_COMMENT_LIT) && (synpred31_Objc())) {s = 117;}

                        else if ( (LA149_8==134) && (synpred31_Objc())) {s = 118;}

                        else if ( (LA149_8==149) && (synpred31_Objc())) {s = 119;}

                        else if ( (LA149_8==120) ) {s = 120;}

                        else if ( (LA149_8==161) && (synpred31_Objc())) {s = 121;}

                        else if ( (LA149_8==148) && (synpred31_Objc())) {s = 122;}

                        else if ( (LA149_8==116) ) {s = 123;}

                        else if ( (LA149_8==113||LA149_8==115||LA149_8==131||(LA149_8 >= 135 && LA149_8 <= 136)||(LA149_8 >= 138 && LA149_8 <= 143)||LA149_8==169||LA149_8==198||LA149_8==200) && (synpred31_Objc())) {s = 124;}

                         
                        input.seek(index149_8);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_47 = input.LA(1);

                         
                        int index149_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_47);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_50 = input.LA(1);

                         
                        int index149_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_50);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_51 = input.LA(1);

                         
                        int index149_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_51);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_52 = input.LA(1);

                         
                        int index149_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_52);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_53 = input.LA(1);

                         
                        int index149_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_53);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_54 = input.LA(1);

                         
                        int index149_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_54);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_55 = input.LA(1);

                         
                        int index149_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_55);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_56 = input.LA(1);

                         
                        int index149_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_56);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_57 = input.LA(1);

                         
                        int index149_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_57);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA149_58 = input.LA(1);

                         
                        int index149_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_58);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA149_59 = input.LA(1);

                         
                        int index149_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_59);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA149_60 = input.LA(1);

                         
                        int index149_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_60);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA149_61 = input.LA(1);

                         
                        int index149_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_61);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA149_62 = input.LA(1);

                         
                        int index149_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_62);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA149_63 = input.LA(1);

                         
                        int index149_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_63);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA149_64 = input.LA(1);

                         
                        int index149_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_64);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA149_65 = input.LA(1);

                         
                        int index149_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 66;}

                        else if ( (synpred31_Objc()) ) {s = 124;}

                         
                        input.seek(index149_65);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA149_77 = input.LA(1);

                         
                        int index149_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_77);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA149_90 = input.LA(1);

                         
                        int index149_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_90);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA149_91 = input.LA(1);

                         
                        int index149_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_91);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA149_92 = input.LA(1);

                         
                        int index149_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_92);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA149_102 = input.LA(1);

                         
                        int index149_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_102);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA149_107 = input.LA(1);

                         
                        int index149_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_107);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA149_120 = input.LA(1);

                         
                        int index149_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_120);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA149_123 = input.LA(1);

                         
                        int index149_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred31_Objc()) ) {s = 124;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index149_123);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code478 = new BitSet(new long[]{0x0000800000800002L,0x0040000000080002L,0x764C200021880040L,0x000000000000000FL});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_code_internal575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern677 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern680 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_extern683 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern685 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_implementation724 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_implementation727 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_category_in_implementation730 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_implementation_body_in_implementation735 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_149_in_implementation740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_implementation_body804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synthesize837 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_148_in_synthesize841 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_139_in_synthesize848 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synthesize850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synthesize854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_static_declaration_wrapper878 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call_predicate900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call_predicate907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call_predicate909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call949 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_in_block_call951 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_call954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call975 = new BitSet(new long[]{0x0000800000000000L,0x00C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_block_params_in_block_call977 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_synchronized_call1020 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synchronized_call1022 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1024 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1044 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_block_params1047 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_block_params1049 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_block_multiline1112 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1117 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_multiline1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_singleline1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_block_internal_macro1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1314 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_internal1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_goto_stmt1442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_goto_stmt1444 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_while_stmt1494 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_while_stmt1496 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1498 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1500 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_while_stmt1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_for_in_stmt1517 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1542 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1547 = new BitSet(new long[]{0x0000800000020802L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1574 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1576 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1593 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1595 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1613 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1615 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1623 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0100000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1627 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1631 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1636 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1639 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_for_stmt1654 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_for_stmt1656 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_return_stmt1694 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_switch_stmt1719 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_switch_stmt1721 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1723 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_switch_stmt1727 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1730 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_201_in_switch_stmt1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_case_stmt1793 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_case_stmt1797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_default_stmt1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_default_stmt1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_do_stmt1843 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_do_stmt1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_do_stmt1847 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_do_stmt1849 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1851 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_if_stmt1878 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_if_stmt1880 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1882 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt1884 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_if_stmt1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_else_stmt1909 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_else_stmt1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_try_stmt_wrapper1933 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_catch_stmt1968 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1971 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1974 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt1977 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1979 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt1982 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_catch_stmt1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_finally_stmt2009 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_finally_stmt2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_throw_stmt2050 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_throw_stmt2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_name_number2099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2174 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2176 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2199 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2207 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2224 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_implementation_common2239 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2241 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2243 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2245 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2308 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2311 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2313 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_clasical_method_call_predicate2317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2332 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2335 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2337 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_classical_method_call2342 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2344 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_call2347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2362 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params_push2365 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2367 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2391 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_params_push2398 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_125_in_method_params_push2403 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2406 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2427 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080002L});
    public static final BitSet FOLLOW_comments_in_method_param_push2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_method_msg2461 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_method_msg2463 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000020L});
    public static final BitSet FOLLOW_133_in_method_msg2468 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_method_msg2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_questionmark_if_stmt2500 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_questionmark_if_stmt2504 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_element_value_or_semicolon2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2575 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_array_init2578 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2580 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_197_in_element_value_or_array_init2597 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000620L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_element_value_or_array_init2602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2618 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2656 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2658 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_126_in_cast_unary_expression12673 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2703 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2725 = new BitSet(new long[]{0x0000000000000002L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2734 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_cast_unary_expression2750 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2766 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2786 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_expression2807 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2809 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2811 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_expression2813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2816 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression2818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2847 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_name_or_classical_function_call2850 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2852 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2877 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2879 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2881 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2884 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2889 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2915 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2918 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2920 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2925 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003080012L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2927 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2940 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_simple_expression_value2969 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_simple_expression_value2974 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_simple_expression_value2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value3006 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value3069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value23101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_simple_expression_value23119 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23121 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_selector3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_type_cast_name3367 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3369 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_type_cast_name3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3466 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3523 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_lvalue3538 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3540 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3542 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3547 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3573 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_lvalue3602 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_lvalue3607 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_lvalue3609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_lvalue3611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3627 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_break_stmt3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_continue_stmt3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern_declaration3723 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3737 = new BitSet(new long[]{0x0000000000000000L,0x4400000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3754 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200002000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3756 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_declarations3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_optional_prefix3813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ns_inline3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_property_prefix3837 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_property_prefix3839 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3841 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3844 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3846 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_property_prefix3851 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3853 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3856 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3858 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_property_prefix3860 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix3867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_typedef_declaration_wrapper3918 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous3941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3968 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3970 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_125_in_typedef_declaration3973 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3975 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_typedef_declaration3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3991 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate3993 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3995 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate3997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer4012 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer4014 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4016 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer4018 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer4020 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4023 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_func_pointer4026 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4028 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_forward_class_declaration4120 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_forward_class_declaration4137 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_protocol_declaration4226 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4228 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200080L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4230 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4252 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_class_protocol_end4259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_template4271 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template4273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_template4275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implements_protocols4309 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4311 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_125_in_implements_protocols4314 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4316 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_implements_protocols4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4342 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_template_internal4345 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4347 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_template_type4367 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_interface_declaration4431 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4433 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A2000A0L,0x0000000000000020L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4435 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L,0x0000000000000020L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4439 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4444 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_interface_declaration4449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_fields_body4466 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_body_item_in_fields_body4472 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_201_in_fields_body4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4492 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644201000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4495 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_field_modifiers4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4583 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_category4604 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_category4606 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_category4609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_superclass_name4629 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4664 = new BitSet(new long[]{0x0000800000000002L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4688 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4690 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_125_in_field_declaration4694 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4696 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000020L});
    public static final BitSet FOLLOW_134_in_field_declaration4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4717 = new BitSet(new long[]{0x0000800000020800L,0xC951000003080012L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_field_declaration4721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_declaration4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4742 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classical_method_params4769 = new BitSet(new long[]{0x0000800000000000L,0x20C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4771 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params4775 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4777 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_params4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4806 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4854 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_classical_type_declaration4864 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4866 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_classical_type_declaration4885 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4887 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_classical_type_declaration4906 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4908 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4956 = new BitSet(new long[]{0x0000000000000002L,0x0110000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4958 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration4960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4967 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4976 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4985 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_type_declaration_plane5002 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane5005 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_type_declaration_plane5008 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane5011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane5014 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration_plane5016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_decl_protocol_predicate5048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_decl_protocol_predicate5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_declaration_protocol5066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_declaration_protocol5068 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_type_declaration_protocol5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct_simple5094 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union_simple5116 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum_simple5142 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct_full5164 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_full5166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct_full5169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union_full5193 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_full5195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union_full5198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum_full5222 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_full5224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum_full5227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct5262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_union5292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_enum5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_enum_wrapper5341 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5351 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_enum_wrapper5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element5373 = new BitSet(new long[]{0x0000000000000002L,0x3220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5376 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_enum_element5378 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_enum_element5382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_struct5436 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_struct_internal_in_struct5445 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000020EL});
    public static final BitSet FOLLOW_201_in_struct5452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5507 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_120_in_type_dec5509 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_knownTypes5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_knownTypes5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_knownTypes5564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_knownTypes5574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_array_size_in_field_name5595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_field_crap_in_field_name5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_array_size5630 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000010L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_array_size5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_field_crap5651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5665 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_declaration_common5729 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5731 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_common5733 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5735 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_declaration_common5741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5753 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_declaration_predicate5756 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5758 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate5760 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5803 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_prefix_in_method_param5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_param5826 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_param5829 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_param5831 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param5833 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5932 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5934 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5952 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function5978 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_define_as_function5983 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_197_in_define_as_function5985 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function5988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_define_as_function5990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_type_declaration_in_synpred1_Objc502 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_synpred1_Objc504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1308 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred5_Objc1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred6_Objc1323 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred6_Objc1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred7_Objc1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc1585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_synpred8_Objc1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred9_Objc1604 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred9_Objc1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred10_Objc2192 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred10_Objc2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred12_Objc2795 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred12_Objc2797 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred12_Objc2799 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred12_Objc2801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred12_Objc2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc2840 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred13_Objc2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred14_Objc2902 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred14_Objc2905 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc2907 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_synpred14_Objc2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred15_Objc2960 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred15_Objc2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred15_Objc2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred16_Objc2995 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred16_Objc3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred17_Objc3096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred19_Objc3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred20_Objc3532 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred20_Objc3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred21_Objc3593 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred21_Objc3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred21_Objc3598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred22_Objc4059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred23_Objc4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred24_Objc4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred25_Objc4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred26_Objc4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred27_Objc5253 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred27_Objc5255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred27_Objc5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred28_Objc5283 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred28_Objc5285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred28_Objc5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_synpred29_Objc5313 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred29_Objc5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred29_Objc5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5909 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred30_Objc5911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred30_Objc5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred31_Objc5925 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred31_Objc5927 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synpred31_Objc5929 = new BitSet(new long[]{0x0000000000000002L});

}